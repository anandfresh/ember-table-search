window.EmberENV = {"FEATURES":{},"EXTEND_PROTOTYPES":{"Date":false},"_JQUERY_INTEGRATION":false};
var runningTests = false;



;(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()({1:[function(_dereq_,module,exports){
(function (global){
"use strict";

_dereq_(2);

_dereq_(4);

_dereq_(3);

_dereq_(10);

_dereq_(9);

_dereq_(12);

_dereq_(11);

_dereq_(13);

_dereq_(6);

_dereq_(7);

_dereq_(5);

_dereq_(8);

_dereq_(287);

_dereq_(288);

if (global._babelPolyfill && typeof console !== "undefined" && console.warn) {
  console.warn("@babel/polyfill is loaded more than once on this page. This is probably not desirable/intended " + "and may have consequences if different versions of the polyfills are applied sequentially. " + "If you do need to load the polyfill more than once, use @babel/polyfill/noConflict " + "instead to bypass the warning.");
}

global._babelPolyfill = true;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"10":10,"11":11,"12":12,"13":13,"2":2,"287":287,"288":288,"3":3,"4":4,"5":5,"6":6,"7":7,"8":8,"9":9}],2:[function(_dereq_,module,exports){
_dereq_(259);
_dereq_(195);
_dereq_(197);
_dereq_(196);
_dereq_(199);
_dereq_(201);
_dereq_(206);
_dereq_(200);
_dereq_(198);
_dereq_(208);
_dereq_(207);
_dereq_(203);
_dereq_(204);
_dereq_(202);
_dereq_(194);
_dereq_(205);
_dereq_(209);
_dereq_(210);
_dereq_(161);
_dereq_(163);
_dereq_(162);
_dereq_(212);
_dereq_(211);
_dereq_(182);
_dereq_(192);
_dereq_(193);
_dereq_(183);
_dereq_(184);
_dereq_(185);
_dereq_(186);
_dereq_(187);
_dereq_(188);
_dereq_(189);
_dereq_(190);
_dereq_(191);
_dereq_(165);
_dereq_(166);
_dereq_(167);
_dereq_(168);
_dereq_(169);
_dereq_(170);
_dereq_(171);
_dereq_(172);
_dereq_(173);
_dereq_(174);
_dereq_(175);
_dereq_(176);
_dereq_(177);
_dereq_(178);
_dereq_(179);
_dereq_(180);
_dereq_(181);
_dereq_(246);
_dereq_(251);
_dereq_(258);
_dereq_(249);
_dereq_(241);
_dereq_(242);
_dereq_(247);
_dereq_(252);
_dereq_(254);
_dereq_(237);
_dereq_(238);
_dereq_(239);
_dereq_(240);
_dereq_(243);
_dereq_(244);
_dereq_(245);
_dereq_(248);
_dereq_(250);
_dereq_(253);
_dereq_(255);
_dereq_(256);
_dereq_(257);
_dereq_(156);
_dereq_(158);
_dereq_(157);
_dereq_(160);
_dereq_(159);
_dereq_(144);
_dereq_(142);
_dereq_(149);
_dereq_(146);
_dereq_(152);
_dereq_(154);
_dereq_(141);
_dereq_(148);
_dereq_(138);
_dereq_(153);
_dereq_(136);
_dereq_(151);
_dereq_(150);
_dereq_(143);
_dereq_(147);
_dereq_(135);
_dereq_(137);
_dereq_(140);
_dereq_(139);
_dereq_(155);
_dereq_(145);
_dereq_(228);
_dereq_(229);
_dereq_(235);
_dereq_(230);
_dereq_(231);
_dereq_(232);
_dereq_(233);
_dereq_(234);
_dereq_(213);
_dereq_(164);
_dereq_(236);
_dereq_(271);
_dereq_(272);
_dereq_(260);
_dereq_(261);
_dereq_(266);
_dereq_(269);
_dereq_(270);
_dereq_(264);
_dereq_(267);
_dereq_(265);
_dereq_(268);
_dereq_(262);
_dereq_(263);
_dereq_(214);
_dereq_(215);
_dereq_(216);
_dereq_(217);
_dereq_(218);
_dereq_(221);
_dereq_(219);
_dereq_(220);
_dereq_(222);
_dereq_(223);
_dereq_(224);
_dereq_(225);
_dereq_(227);
_dereq_(226);
module.exports = _dereq_(33);

},{"135":135,"136":136,"137":137,"138":138,"139":139,"140":140,"141":141,"142":142,"143":143,"144":144,"145":145,"146":146,"147":147,"148":148,"149":149,"150":150,"151":151,"152":152,"153":153,"154":154,"155":155,"156":156,"157":157,"158":158,"159":159,"160":160,"161":161,"162":162,"163":163,"164":164,"165":165,"166":166,"167":167,"168":168,"169":169,"170":170,"171":171,"172":172,"173":173,"174":174,"175":175,"176":176,"177":177,"178":178,"179":179,"180":180,"181":181,"182":182,"183":183,"184":184,"185":185,"186":186,"187":187,"188":188,"189":189,"190":190,"191":191,"192":192,"193":193,"194":194,"195":195,"196":196,"197":197,"198":198,"199":199,"200":200,"201":201,"202":202,"203":203,"204":204,"205":205,"206":206,"207":207,"208":208,"209":209,"210":210,"211":211,"212":212,"213":213,"214":214,"215":215,"216":216,"217":217,"218":218,"219":219,"220":220,"221":221,"222":222,"223":223,"224":224,"225":225,"226":226,"227":227,"228":228,"229":229,"230":230,"231":231,"232":232,"233":233,"234":234,"235":235,"236":236,"237":237,"238":238,"239":239,"240":240,"241":241,"242":242,"243":243,"244":244,"245":245,"246":246,"247":247,"248":248,"249":249,"250":250,"251":251,"252":252,"253":253,"254":254,"255":255,"256":256,"257":257,"258":258,"259":259,"260":260,"261":261,"262":262,"263":263,"264":264,"265":265,"266":266,"267":267,"268":268,"269":269,"270":270,"271":271,"272":272,"33":33}],3:[function(_dereq_,module,exports){
_dereq_(273);
module.exports = _dereq_(33).Array.flatMap;

},{"273":273,"33":33}],4:[function(_dereq_,module,exports){
_dereq_(274);
module.exports = _dereq_(33).Array.includes;

},{"274":274,"33":33}],5:[function(_dereq_,module,exports){
_dereq_(275);
module.exports = _dereq_(33).Object.entries;

},{"275":275,"33":33}],6:[function(_dereq_,module,exports){
_dereq_(276);
module.exports = _dereq_(33).Object.getOwnPropertyDescriptors;

},{"276":276,"33":33}],7:[function(_dereq_,module,exports){
_dereq_(277);
module.exports = _dereq_(33).Object.values;

},{"277":277,"33":33}],8:[function(_dereq_,module,exports){
'use strict';
_dereq_(213);
_dereq_(278);
module.exports = _dereq_(33).Promise['finally'];

},{"213":213,"278":278,"33":33}],9:[function(_dereq_,module,exports){
_dereq_(279);
module.exports = _dereq_(33).String.padEnd;

},{"279":279,"33":33}],10:[function(_dereq_,module,exports){
_dereq_(280);
module.exports = _dereq_(33).String.padStart;

},{"280":280,"33":33}],11:[function(_dereq_,module,exports){
_dereq_(282);
module.exports = _dereq_(33).String.trimRight;

},{"282":282,"33":33}],12:[function(_dereq_,module,exports){
_dereq_(281);
module.exports = _dereq_(33).String.trimLeft;

},{"281":281,"33":33}],13:[function(_dereq_,module,exports){
_dereq_(283);
module.exports = _dereq_(132).f('asyncIterator');

},{"132":132,"283":283}],14:[function(_dereq_,module,exports){
module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};

},{}],15:[function(_dereq_,module,exports){
var cof = _dereq_(29);
module.exports = function (it, msg) {
  if (typeof it != 'number' && cof(it) != 'Number') throw TypeError(msg);
  return +it;
};

},{"29":29}],16:[function(_dereq_,module,exports){
// 22.1.3.31 Array.prototype[@@unscopables]
var UNSCOPABLES = _dereq_(133)('unscopables');
var ArrayProto = Array.prototype;
if (ArrayProto[UNSCOPABLES] == undefined) _dereq_(53)(ArrayProto, UNSCOPABLES, {});
module.exports = function (key) {
  ArrayProto[UNSCOPABLES][key] = true;
};

},{"133":133,"53":53}],17:[function(_dereq_,module,exports){
'use strict';
var at = _dereq_(110)(true);

 // `AdvanceStringIndex` abstract operation
// https://tc39.github.io/ecma262/#sec-advancestringindex
module.exports = function (S, index, unicode) {
  return index + (unicode ? at(S, index).length : 1);
};

},{"110":110}],18:[function(_dereq_,module,exports){
module.exports = function (it, Constructor, name, forbiddenField) {
  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};

},{}],19:[function(_dereq_,module,exports){
var isObject = _dereq_(62);
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};

},{"62":62}],20:[function(_dereq_,module,exports){
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
'use strict';
var toObject = _dereq_(123);
var toAbsoluteIndex = _dereq_(118);
var toLength = _dereq_(122);

module.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {
  var O = toObject(this);
  var len = toLength(O.length);
  var to = toAbsoluteIndex(target, len);
  var from = toAbsoluteIndex(start, len);
  var end = arguments.length > 2 ? arguments[2] : undefined;
  var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
  var inc = 1;
  if (from < to && to < from + count) {
    inc = -1;
    from += count - 1;
    to += count - 1;
  }
  while (count-- > 0) {
    if (from in O) O[to] = O[from];
    else delete O[to];
    to += inc;
    from += inc;
  } return O;
};

},{"118":118,"122":122,"123":123}],21:[function(_dereq_,module,exports){
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
'use strict';
var toObject = _dereq_(123);
var toAbsoluteIndex = _dereq_(118);
var toLength = _dereq_(122);
module.exports = function fill(value /* , start = 0, end = @length */) {
  var O = toObject(this);
  var length = toLength(O.length);
  var aLen = arguments.length;
  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);
  var end = aLen > 2 ? arguments[2] : undefined;
  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
  while (endPos > index) O[index++] = value;
  return O;
};

},{"118":118,"122":122,"123":123}],22:[function(_dereq_,module,exports){
// false -> Array#indexOf
// true  -> Array#includes
var toIObject = _dereq_(121);
var toLength = _dereq_(122);
var toAbsoluteIndex = _dereq_(118);
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

},{"118":118,"121":121,"122":122}],23:[function(_dereq_,module,exports){
// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx = _dereq_(35);
var IObject = _dereq_(58);
var toObject = _dereq_(123);
var toLength = _dereq_(122);
var asc = _dereq_(26);
module.exports = function (TYPE, $create) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  var create = $create || asc;
  return function ($this, callbackfn, that) {
    var O = toObject($this);
    var self = IObject(O);
    var f = ctx(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
    var val, res;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      val = self[index];
      res = f(val, index, O);
      if (TYPE) {
        if (IS_MAP) result[index] = res;   // map
        else if (res) switch (TYPE) {
          case 3: return true;             // some
          case 5: return val;              // find
          case 6: return index;            // findIndex
          case 2: result.push(val);        // filter
        } else if (IS_EVERY) return false; // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};

},{"122":122,"123":123,"26":26,"35":35,"58":58}],24:[function(_dereq_,module,exports){
var aFunction = _dereq_(14);
var toObject = _dereq_(123);
var IObject = _dereq_(58);
var toLength = _dereq_(122);

module.exports = function (that, callbackfn, aLen, memo, isRight) {
  aFunction(callbackfn);
  var O = toObject(that);
  var self = IObject(O);
  var length = toLength(O.length);
  var index = isRight ? length - 1 : 0;
  var i = isRight ? -1 : 1;
  if (aLen < 2) for (;;) {
    if (index in self) {
      memo = self[index];
      index += i;
      break;
    }
    index += i;
    if (isRight ? index < 0 : length <= index) {
      throw TypeError('Reduce of empty array with no initial value');
    }
  }
  for (;isRight ? index >= 0 : length > index; index += i) if (index in self) {
    memo = callbackfn(memo, self[index], index, O);
  }
  return memo;
};

},{"122":122,"123":123,"14":14,"58":58}],25:[function(_dereq_,module,exports){
var isObject = _dereq_(62);
var isArray = _dereq_(60);
var SPECIES = _dereq_(133)('species');

module.exports = function (original) {
  var C;
  if (isArray(original)) {
    C = original.constructor;
    // cross-realm fallback
    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
    if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return C === undefined ? Array : C;
};

},{"133":133,"60":60,"62":62}],26:[function(_dereq_,module,exports){
// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = _dereq_(25);

module.exports = function (original, length) {
  return new (speciesConstructor(original))(length);
};

},{"25":25}],27:[function(_dereq_,module,exports){
'use strict';
var aFunction = _dereq_(14);
var isObject = _dereq_(62);
var invoke = _dereq_(57);
var arraySlice = [].slice;
var factories = {};

var construct = function (F, len, args) {
  if (!(len in factories)) {
    for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']';
    // eslint-disable-next-line no-new-func
    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
  } return factories[len](F, args);
};

module.exports = Function.bind || function bind(that /* , ...args */) {
  var fn = aFunction(this);
  var partArgs = arraySlice.call(arguments, 1);
  var bound = function (/* args... */) {
    var args = partArgs.concat(arraySlice.call(arguments));
    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
  };
  if (isObject(fn.prototype)) bound.prototype = fn.prototype;
  return bound;
};

},{"14":14,"57":57,"62":62}],28:[function(_dereq_,module,exports){
// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = _dereq_(29);
var TAG = _dereq_(133)('toStringTag');
// ES3 wrong here
var ARG = cof(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (e) { /* empty */ }
};

module.exports = function (it) {
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};

},{"133":133,"29":29}],29:[function(_dereq_,module,exports){
var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};

},{}],30:[function(_dereq_,module,exports){
'use strict';
var dP = _dereq_(80).f;
var create = _dereq_(79);
var redefineAll = _dereq_(98);
var ctx = _dereq_(35);
var anInstance = _dereq_(18);
var forOf = _dereq_(49);
var $iterDefine = _dereq_(66);
var step = _dereq_(68);
var setSpecies = _dereq_(104);
var DESCRIPTORS = _dereq_(39);
var fastKey = _dereq_(75).fastKey;
var validate = _dereq_(130);
var SIZE = DESCRIPTORS ? '_s' : 'size';

var getEntry = function (that, key) {
  // fast case
  var index = fastKey(key);
  var entry;
  if (index !== 'F') return that._i[index];
  // frozen object case
  for (entry = that._f; entry; entry = entry.n) {
    if (entry.k == key) return entry;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;         // collection type
      that._i = create(null); // index
      that._f = undefined;    // first entry
      that._l = undefined;    // last entry
      that[SIZE] = 0;         // size
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear() {
        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
          entry.r = true;
          if (entry.p) entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }
        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function (key) {
        var that = validate(this, NAME);
        var entry = getEntry(that, key);
        if (entry) {
          var next = entry.n;
          var prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if (prev) prev.n = next;
          if (next) next.p = prev;
          if (that._f == entry) that._f = next;
          if (that._l == entry) that._l = prev;
          that[SIZE]--;
        } return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /* , that = undefined */) {
        validate(this, NAME);
        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
        var entry;
        while (entry = entry ? entry.n : this._f) {
          f(entry.v, entry.k, this);
          // revert to the last existing entry
          while (entry && entry.r) entry = entry.p;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key) {
        return !!getEntry(validate(this, NAME), key);
      }
    });
    if (DESCRIPTORS) dP(C.prototype, 'size', {
      get: function () {
        return validate(this, NAME)[SIZE];
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var entry = getEntry(that, key);
    var prev, index;
    // change existing entry
    if (entry) {
      entry.v = value;
    // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true), // <- index
        k: key,                        // <- key
        v: value,                      // <- value
        p: prev = that._l,             // <- previous entry
        n: undefined,                  // <- next entry
        r: false                       // <- removed
      };
      if (!that._f) that._f = entry;
      if (prev) prev.n = entry;
      that[SIZE]++;
      // add to index
      if (index !== 'F') that._i[index] = entry;
    } return that;
  },
  getEntry: getEntry,
  setStrong: function (C, NAME, IS_MAP) {
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    $iterDefine(C, NAME, function (iterated, kind) {
      this._t = validate(iterated, NAME); // target
      this._k = kind;                     // kind
      this._l = undefined;                // previous
    }, function () {
      var that = this;
      var kind = that._k;
      var entry = that._l;
      // revert to the last existing entry
      while (entry && entry.r) entry = entry.p;
      // get next entry
      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
        // or finish the iteration
        that._t = undefined;
        return step(1);
      }
      // return step by kind
      if (kind == 'keys') return step(0, entry.k);
      if (kind == 'values') return step(0, entry.v);
      return step(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    setSpecies(NAME);
  }
};

},{"104":104,"130":130,"18":18,"35":35,"39":39,"49":49,"66":66,"68":68,"75":75,"79":79,"80":80,"98":98}],31:[function(_dereq_,module,exports){
'use strict';
var redefineAll = _dereq_(98);
var getWeak = _dereq_(75).getWeak;
var anObject = _dereq_(19);
var isObject = _dereq_(62);
var anInstance = _dereq_(18);
var forOf = _dereq_(49);
var createArrayMethod = _dereq_(23);
var $has = _dereq_(52);
var validate = _dereq_(130);
var arrayFind = createArrayMethod(5);
var arrayFindIndex = createArrayMethod(6);
var id = 0;

// fallback for uncaught frozen keys
var uncaughtFrozenStore = function (that) {
  return that._l || (that._l = new UncaughtFrozenStore());
};
var UncaughtFrozenStore = function () {
  this.a = [];
};
var findUncaughtFrozen = function (store, key) {
  return arrayFind(store.a, function (it) {
    return it[0] === key;
  });
};
UncaughtFrozenStore.prototype = {
  get: function (key) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) return entry[1];
  },
  has: function (key) {
    return !!findUncaughtFrozen(this, key);
  },
  set: function (key, value) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) entry[1] = value;
    else this.a.push([key, value]);
  },
  'delete': function (key) {
    var index = arrayFindIndex(this.a, function (it) {
      return it[0] === key;
    });
    if (~index) this.a.splice(index, 1);
    return !!~index;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;      // collection type
      that._i = id++;      // collection id
      that._l = undefined; // leak store for uncaught frozen objects
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.3.3.2 WeakMap.prototype.delete(key)
      // 23.4.3.3 WeakSet.prototype.delete(value)
      'delete': function (key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);
        return data && $has(data, this._i) && delete data[this._i];
      },
      // 23.3.3.4 WeakMap.prototype.has(key)
      // 23.4.3.4 WeakSet.prototype.has(value)
      has: function has(key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);
        return data && $has(data, this._i);
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var data = getWeak(anObject(key), true);
    if (data === true) uncaughtFrozenStore(that).set(key, value);
    else data[that._i] = value;
    return that;
  },
  ufstore: uncaughtFrozenStore
};

},{"130":130,"18":18,"19":19,"23":23,"49":49,"52":52,"62":62,"75":75,"98":98}],32:[function(_dereq_,module,exports){
'use strict';
var global = _dereq_(51);
var $export = _dereq_(43);
var redefine = _dereq_(99);
var redefineAll = _dereq_(98);
var meta = _dereq_(75);
var forOf = _dereq_(49);
var anInstance = _dereq_(18);
var isObject = _dereq_(62);
var fails = _dereq_(45);
var $iterDetect = _dereq_(67);
var setToStringTag = _dereq_(105);
var inheritIfRequired = _dereq_(56);

module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
  var Base = global[NAME];
  var C = Base;
  var ADDER = IS_MAP ? 'set' : 'add';
  var proto = C && C.prototype;
  var O = {};
  var fixMethod = function (KEY) {
    var fn = proto[KEY];
    redefine(proto, KEY,
      KEY == 'delete' ? function (a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'has' ? function has(a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'get' ? function get(a) {
        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'add' ? function add(a) { fn.call(this, a === 0 ? 0 : a); return this; }
        : function set(a, b) { fn.call(this, a === 0 ? 0 : a, b); return this; }
    );
  };
  if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
    new C().entries().next();
  }))) {
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
    meta.NEED = true;
  } else {
    var instance = new C();
    // early implementations not supports chaining
    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
    // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });
    // most early implementations doesn't supports iterables, most modern - not close it correctly
    var ACCEPT_ITERABLES = $iterDetect(function (iter) { new C(iter); }); // eslint-disable-line no-new
    // for early implementations -0 and +0 not the same
    var BUGGY_ZERO = !IS_WEAK && fails(function () {
      // V8 ~ Chromium 42- fails only with 5+ elements
      var $instance = new C();
      var index = 5;
      while (index--) $instance[ADDER](index, index);
      return !$instance.has(-0);
    });
    if (!ACCEPT_ITERABLES) {
      C = wrapper(function (target, iterable) {
        anInstance(target, C, NAME);
        var that = inheritIfRequired(new Base(), target, C);
        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
        return that;
      });
      C.prototype = proto;
      proto.constructor = C;
    }
    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }
    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);
    // weak collections should not contains .clear method
    if (IS_WEAK && proto.clear) delete proto.clear;
  }

  setToStringTag(C, NAME);

  O[NAME] = C;
  $export($export.G + $export.W + $export.F * (C != Base), O);

  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);

  return C;
};

},{"105":105,"18":18,"43":43,"45":45,"49":49,"51":51,"56":56,"62":62,"67":67,"75":75,"98":98,"99":99}],33:[function(_dereq_,module,exports){
var core = module.exports = { version: '2.6.5' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef

},{}],34:[function(_dereq_,module,exports){
'use strict';
var $defineProperty = _dereq_(80);
var createDesc = _dereq_(97);

module.exports = function (object, index, value) {
  if (index in object) $defineProperty.f(object, index, createDesc(0, value));
  else object[index] = value;
};

},{"80":80,"97":97}],35:[function(_dereq_,module,exports){
// optional / simple context binding
var aFunction = _dereq_(14);
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};

},{"14":14}],36:[function(_dereq_,module,exports){
'use strict';
// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
var fails = _dereq_(45);
var getTime = Date.prototype.getTime;
var $toISOString = Date.prototype.toISOString;

var lz = function (num) {
  return num > 9 ? num : '0' + num;
};

// PhantomJS / old WebKit has a broken implementations
module.exports = (fails(function () {
  return $toISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';
}) || !fails(function () {
  $toISOString.call(new Date(NaN));
})) ? function toISOString() {
  if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
  var d = this;
  var y = d.getUTCFullYear();
  var m = d.getUTCMilliseconds();
  var s = y < 0 ? '-' : y > 9999 ? '+' : '';
  return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
    '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
    'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
    ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
} : $toISOString;

},{"45":45}],37:[function(_dereq_,module,exports){
'use strict';
var anObject = _dereq_(19);
var toPrimitive = _dereq_(124);
var NUMBER = 'number';

module.exports = function (hint) {
  if (hint !== 'string' && hint !== NUMBER && hint !== 'default') throw TypeError('Incorrect hint');
  return toPrimitive(anObject(this), hint != NUMBER);
};

},{"124":124,"19":19}],38:[function(_dereq_,module,exports){
// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};

},{}],39:[function(_dereq_,module,exports){
// Thank's IE8 for his funny defineProperty
module.exports = !_dereq_(45)(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});

},{"45":45}],40:[function(_dereq_,module,exports){
var isObject = _dereq_(62);
var document = _dereq_(51).document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};

},{"51":51,"62":62}],41:[function(_dereq_,module,exports){
// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');

},{}],42:[function(_dereq_,module,exports){
// all enumerable object keys, includes symbols
var getKeys = _dereq_(88);
var gOPS = _dereq_(85);
var pIE = _dereq_(89);
module.exports = function (it) {
  var result = getKeys(it);
  var getSymbols = gOPS.f;
  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum = pIE.f;
    var i = 0;
    var key;
    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
  } return result;
};

},{"85":85,"88":88,"89":89}],43:[function(_dereq_,module,exports){
var global = _dereq_(51);
var core = _dereq_(33);
var hide = _dereq_(53);
var redefine = _dereq_(99);
var ctx = _dereq_(35);
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
  var key, own, out, exp;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    // export native or passed
    out = (own ? target : source)[key];
    // bind timers to global for call from export context
    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // extend global
    if (target) redefine(target, key, out, type & $export.U);
    // export
    if (exports[key] != out) hide(exports, key, exp);
    if (IS_PROTO && expProto[key] != out) expProto[key] = out;
  }
};
global.core = core;
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;

},{"33":33,"35":35,"51":51,"53":53,"99":99}],44:[function(_dereq_,module,exports){
var MATCH = _dereq_(133)('match');
module.exports = function (KEY) {
  var re = /./;
  try {
    '/./'[KEY](re);
  } catch (e) {
    try {
      re[MATCH] = false;
      return !'/./'[KEY](re);
    } catch (f) { /* empty */ }
  } return true;
};

},{"133":133}],45:[function(_dereq_,module,exports){
module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};

},{}],46:[function(_dereq_,module,exports){
'use strict';
_dereq_(229);
var redefine = _dereq_(99);
var hide = _dereq_(53);
var fails = _dereq_(45);
var defined = _dereq_(38);
var wks = _dereq_(133);
var regexpExec = _dereq_(101);

var SPECIES = wks('species');

var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
  // #replace needs built-in support for named groups.
  // #match works fine because it just return the exec results, even if it has
  // a "grops" property.
  var re = /./;
  re.exec = function () {
    var result = [];
    result.groups = { a: '7' };
    return result;
  };
  return ''.replace(re, '$<a>') !== '7';
});

var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = (function () {
  // Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
  var re = /(?:)/;
  var originalExec = re.exec;
  re.exec = function () { return originalExec.apply(this, arguments); };
  var result = 'ab'.split(re);
  return result.length === 2 && result[0] === 'a' && result[1] === 'b';
})();

module.exports = function (KEY, length, exec) {
  var SYMBOL = wks(KEY);

  var DELEGATES_TO_SYMBOL = !fails(function () {
    // String methods call symbol-named RegEp methods
    var O = {};
    O[SYMBOL] = function () { return 7; };
    return ''[KEY](O) != 7;
  });

  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL ? !fails(function () {
    // Symbol-named RegExp methods call .exec
    var execCalled = false;
    var re = /a/;
    re.exec = function () { execCalled = true; return null; };
    if (KEY === 'split') {
      // RegExp[@@split] doesn't call the regex's exec method, but first creates
      // a new one. We need to return the patched regex when creating the new one.
      re.constructor = {};
      re.constructor[SPECIES] = function () { return re; };
    }
    re[SYMBOL]('');
    return !execCalled;
  }) : undefined;

  if (
    !DELEGATES_TO_SYMBOL ||
    !DELEGATES_TO_EXEC ||
    (KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS) ||
    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)
  ) {
    var nativeRegExpMethod = /./[SYMBOL];
    var fns = exec(
      defined,
      SYMBOL,
      ''[KEY],
      function maybeCallNative(nativeMethod, regexp, str, arg2, forceStringMethod) {
        if (regexp.exec === regexpExec) {
          if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
            // The native String method already delegates to @@method (this
            // polyfilled function), leasing to infinite recursion.
            // We avoid it by directly calling the native @@method method.
            return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };
          }
          return { done: true, value: nativeMethod.call(str, regexp, arg2) };
        }
        return { done: false };
      }
    );
    var strfn = fns[0];
    var rxfn = fns[1];

    redefine(String.prototype, KEY, strfn);
    hide(RegExp.prototype, SYMBOL, length == 2
      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
      ? function (string, arg) { return rxfn.call(string, this, arg); }
      // 21.2.5.6 RegExp.prototype[@@match](string)
      // 21.2.5.9 RegExp.prototype[@@search](string)
      : function (string) { return rxfn.call(string, this); }
    );
  }
};

},{"101":101,"133":133,"229":229,"38":38,"45":45,"53":53,"99":99}],47:[function(_dereq_,module,exports){
'use strict';
// 21.2.5.3 get RegExp.prototype.flags
var anObject = _dereq_(19);
module.exports = function () {
  var that = anObject(this);
  var result = '';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.unicode) result += 'u';
  if (that.sticky) result += 'y';
  return result;
};

},{"19":19}],48:[function(_dereq_,module,exports){
'use strict';
// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray
var isArray = _dereq_(60);
var isObject = _dereq_(62);
var toLength = _dereq_(122);
var ctx = _dereq_(35);
var IS_CONCAT_SPREADABLE = _dereq_(133)('isConcatSpreadable');

function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {
  var targetIndex = start;
  var sourceIndex = 0;
  var mapFn = mapper ? ctx(mapper, thisArg, 3) : false;
  var element, spreadable;

  while (sourceIndex < sourceLen) {
    if (sourceIndex in source) {
      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];

      spreadable = false;
      if (isObject(element)) {
        spreadable = element[IS_CONCAT_SPREADABLE];
        spreadable = spreadable !== undefined ? !!spreadable : isArray(element);
      }

      if (spreadable && depth > 0) {
        targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
      } else {
        if (targetIndex >= 0x1fffffffffffff) throw TypeError();
        target[targetIndex] = element;
      }

      targetIndex++;
    }
    sourceIndex++;
  }
  return targetIndex;
}

module.exports = flattenIntoArray;

},{"122":122,"133":133,"35":35,"60":60,"62":62}],49:[function(_dereq_,module,exports){
var ctx = _dereq_(35);
var call = _dereq_(64);
var isArrayIter = _dereq_(59);
var anObject = _dereq_(19);
var toLength = _dereq_(122);
var getIterFn = _dereq_(134);
var BREAK = {};
var RETURN = {};
var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);
  var f = ctx(fn, that, entries ? 2 : 1);
  var index = 0;
  var length, step, iterator, result;
  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if (result === BREAK || result === RETURN) return result;
  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
    result = call(iterator, f, step.value, entries);
    if (result === BREAK || result === RETURN) return result;
  }
};
exports.BREAK = BREAK;
exports.RETURN = RETURN;

},{"122":122,"134":134,"19":19,"35":35,"59":59,"64":64}],50:[function(_dereq_,module,exports){
module.exports = _dereq_(107)('native-function-to-string', Function.toString);

},{"107":107}],51:[function(_dereq_,module,exports){
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef

},{}],52:[function(_dereq_,module,exports){
var hasOwnProperty = {}.hasOwnProperty;
module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};

},{}],53:[function(_dereq_,module,exports){
var dP = _dereq_(80);
var createDesc = _dereq_(97);
module.exports = _dereq_(39) ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};

},{"39":39,"80":80,"97":97}],54:[function(_dereq_,module,exports){
var document = _dereq_(51).document;
module.exports = document && document.documentElement;

},{"51":51}],55:[function(_dereq_,module,exports){
module.exports = !_dereq_(39) && !_dereq_(45)(function () {
  return Object.defineProperty(_dereq_(40)('div'), 'a', { get: function () { return 7; } }).a != 7;
});

},{"39":39,"40":40,"45":45}],56:[function(_dereq_,module,exports){
var isObject = _dereq_(62);
var setPrototypeOf = _dereq_(103).set;
module.exports = function (that, target, C) {
  var S = target.constructor;
  var P;
  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
    setPrototypeOf(that, P);
  } return that;
};

},{"103":103,"62":62}],57:[function(_dereq_,module,exports){
// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function (fn, args, that) {
  var un = that === undefined;
  switch (args.length) {
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return fn.apply(that, args);
};

},{}],58:[function(_dereq_,module,exports){
// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = _dereq_(29);
// eslint-disable-next-line no-prototype-builtins
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};

},{"29":29}],59:[function(_dereq_,module,exports){
// check on default Array iterator
var Iterators = _dereq_(69);
var ITERATOR = _dereq_(133)('iterator');
var ArrayProto = Array.prototype;

module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};

},{"133":133,"69":69}],60:[function(_dereq_,module,exports){
// 7.2.2 IsArray(argument)
var cof = _dereq_(29);
module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};

},{"29":29}],61:[function(_dereq_,module,exports){
// 20.1.2.3 Number.isInteger(number)
var isObject = _dereq_(62);
var floor = Math.floor;
module.exports = function isInteger(it) {
  return !isObject(it) && isFinite(it) && floor(it) === it;
};

},{"62":62}],62:[function(_dereq_,module,exports){
module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};

},{}],63:[function(_dereq_,module,exports){
// 7.2.8 IsRegExp(argument)
var isObject = _dereq_(62);
var cof = _dereq_(29);
var MATCH = _dereq_(133)('match');
module.exports = function (it) {
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
};

},{"133":133,"29":29,"62":62}],64:[function(_dereq_,module,exports){
// call something on iterator step with safe closing on error
var anObject = _dereq_(19);
module.exports = function (iterator, fn, value, entries) {
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch (e) {
    var ret = iterator['return'];
    if (ret !== undefined) anObject(ret.call(iterator));
    throw e;
  }
};

},{"19":19}],65:[function(_dereq_,module,exports){
'use strict';
var create = _dereq_(79);
var descriptor = _dereq_(97);
var setToStringTag = _dereq_(105);
var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
_dereq_(53)(IteratorPrototype, _dereq_(133)('iterator'), function () { return this; });

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
  setToStringTag(Constructor, NAME + ' Iterator');
};

},{"105":105,"133":133,"53":53,"79":79,"97":97}],66:[function(_dereq_,module,exports){
'use strict';
var LIBRARY = _dereq_(70);
var $export = _dereq_(43);
var redefine = _dereq_(99);
var hide = _dereq_(53);
var Iterators = _dereq_(69);
var $iterCreate = _dereq_(65);
var setToStringTag = _dereq_(105);
var getPrototypeOf = _dereq_(86);
var ITERATOR = _dereq_(133)('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function () { return this; };

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);
  var getMethod = function (kind) {
    if (!BUGGY && kind in proto) return proto[kind];
    switch (kind) {
      case KEYS: return function keys() { return new Constructor(this, kind); };
      case VALUES: return function values() { return new Constructor(this, kind); };
    } return function entries() { return new Constructor(this, kind); };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() { return $native.call(this); };
  }
  // Define iterator
  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};

},{"105":105,"133":133,"43":43,"53":53,"65":65,"69":69,"70":70,"86":86,"99":99}],67:[function(_dereq_,module,exports){
var ITERATOR = _dereq_(133)('iterator');
var SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function () { SAFE_CLOSING = true; };
  // eslint-disable-next-line no-throw-literal
  Array.from(riter, function () { throw 2; });
} catch (e) { /* empty */ }

module.exports = function (exec, skipClosing) {
  if (!skipClosing && !SAFE_CLOSING) return false;
  var safe = false;
  try {
    var arr = [7];
    var iter = arr[ITERATOR]();
    iter.next = function () { return { done: safe = true }; };
    arr[ITERATOR] = function () { return iter; };
    exec(arr);
  } catch (e) { /* empty */ }
  return safe;
};

},{"133":133}],68:[function(_dereq_,module,exports){
module.exports = function (done, value) {
  return { value: value, done: !!done };
};

},{}],69:[function(_dereq_,module,exports){
module.exports = {};

},{}],70:[function(_dereq_,module,exports){
module.exports = false;

},{}],71:[function(_dereq_,module,exports){
// 20.2.2.14 Math.expm1(x)
var $expm1 = Math.expm1;
module.exports = (!$expm1
  // Old FF bug
  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
  // Tor Browser bug
  || $expm1(-2e-17) != -2e-17
) ? function expm1(x) {
  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
} : $expm1;

},{}],72:[function(_dereq_,module,exports){
// 20.2.2.16 Math.fround(x)
var sign = _dereq_(74);
var pow = Math.pow;
var EPSILON = pow(2, -52);
var EPSILON32 = pow(2, -23);
var MAX32 = pow(2, 127) * (2 - EPSILON32);
var MIN32 = pow(2, -126);

var roundTiesToEven = function (n) {
  return n + 1 / EPSILON - 1 / EPSILON;
};

module.exports = Math.fround || function fround(x) {
  var $abs = Math.abs(x);
  var $sign = sign(x);
  var a, result;
  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
  a = (1 + EPSILON32 / EPSILON) * $abs;
  result = a - (a - $abs);
  // eslint-disable-next-line no-self-compare
  if (result > MAX32 || result != result) return $sign * Infinity;
  return $sign * result;
};

},{"74":74}],73:[function(_dereq_,module,exports){
// 20.2.2.20 Math.log1p(x)
module.exports = Math.log1p || function log1p(x) {
  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
};

},{}],74:[function(_dereq_,module,exports){
// 20.2.2.28 Math.sign(x)
module.exports = Math.sign || function sign(x) {
  // eslint-disable-next-line no-self-compare
  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
};

},{}],75:[function(_dereq_,module,exports){
var META = _dereq_(128)('meta');
var isObject = _dereq_(62);
var has = _dereq_(52);
var setDesc = _dereq_(80).f;
var id = 0;
var isExtensible = Object.isExtensible || function () {
  return true;
};
var FREEZE = !_dereq_(45)(function () {
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function (it) {
  setDesc(it, META, { value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  } });
};
var fastKey = function (it, create) {
  // return primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function (it, create) {
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};

},{"128":128,"45":45,"52":52,"62":62,"80":80}],76:[function(_dereq_,module,exports){
var global = _dereq_(51);
var macrotask = _dereq_(117).set;
var Observer = global.MutationObserver || global.WebKitMutationObserver;
var process = global.process;
var Promise = global.Promise;
var isNode = _dereq_(29)(process) == 'process';

module.exports = function () {
  var head, last, notify;

  var flush = function () {
    var parent, fn;
    if (isNode && (parent = process.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (e) {
        if (head) notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if (parent) parent.enter();
  };

  // Node.js
  if (isNode) {
    notify = function () {
      process.nextTick(flush);
    };
  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
  } else if (Observer && !(global.navigator && global.navigator.standalone)) {
    var toggle = true;
    var node = document.createTextNode('');
    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (Promise && Promise.resolve) {
    // Promise.resolve without an argument throws an error in LG WebOS 2
    var promise = Promise.resolve(undefined);
    notify = function () {
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function () {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function (fn) {
    var task = { fn: fn, next: undefined };
    if (last) last.next = task;
    if (!head) {
      head = task;
      notify();
    } last = task;
  };
};

},{"117":117,"29":29,"51":51}],77:[function(_dereq_,module,exports){
'use strict';
// 25.4.1.5 NewPromiseCapability(C)
var aFunction = _dereq_(14);

function PromiseCapability(C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject = aFunction(reject);
}

module.exports.f = function (C) {
  return new PromiseCapability(C);
};

},{"14":14}],78:[function(_dereq_,module,exports){
'use strict';
// 19.1.2.1 Object.assign(target, source, ...)
var getKeys = _dereq_(88);
var gOPS = _dereq_(85);
var pIE = _dereq_(89);
var toObject = _dereq_(123);
var IObject = _dereq_(58);
var $assign = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || _dereq_(45)(function () {
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var S = Symbol();
  var K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function (k) { B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var aLen = arguments.length;
  var index = 1;
  var getSymbols = gOPS.f;
  var isEnum = pIE.f;
  while (aLen > index) {
    var S = IObject(arguments[index++]);
    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
  } return T;
} : $assign;

},{"123":123,"45":45,"58":58,"85":85,"88":88,"89":89}],79:[function(_dereq_,module,exports){
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = _dereq_(19);
var dPs = _dereq_(81);
var enumBugKeys = _dereq_(41);
var IE_PROTO = _dereq_(106)('IE_PROTO');
var Empty = function () { /* empty */ };
var PROTOTYPE = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = _dereq_(40)('iframe');
  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  _dereq_(54).appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};

},{"106":106,"19":19,"40":40,"41":41,"54":54,"81":81}],80:[function(_dereq_,module,exports){
var anObject = _dereq_(19);
var IE8_DOM_DEFINE = _dereq_(55);
var toPrimitive = _dereq_(124);
var dP = Object.defineProperty;

exports.f = _dereq_(39) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};

},{"124":124,"19":19,"39":39,"55":55}],81:[function(_dereq_,module,exports){
var dP = _dereq_(80);
var anObject = _dereq_(19);
var getKeys = _dereq_(88);

module.exports = _dereq_(39) ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
  return O;
};

},{"19":19,"39":39,"80":80,"88":88}],82:[function(_dereq_,module,exports){
var pIE = _dereq_(89);
var createDesc = _dereq_(97);
var toIObject = _dereq_(121);
var toPrimitive = _dereq_(124);
var has = _dereq_(52);
var IE8_DOM_DEFINE = _dereq_(55);
var gOPD = Object.getOwnPropertyDescriptor;

exports.f = _dereq_(39) ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = toIObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD(O, P);
  } catch (e) { /* empty */ }
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};

},{"121":121,"124":124,"39":39,"52":52,"55":55,"89":89,"97":97}],83:[function(_dereq_,module,exports){
// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = _dereq_(121);
var gOPN = _dereq_(84).f;
var toString = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return gOPN(it);
  } catch (e) {
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};

},{"121":121,"84":84}],84:[function(_dereq_,module,exports){
// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys = _dereq_(87);
var hiddenKeys = _dereq_(41).concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys(O, hiddenKeys);
};

},{"41":41,"87":87}],85:[function(_dereq_,module,exports){
exports.f = Object.getOwnPropertySymbols;

},{}],86:[function(_dereq_,module,exports){
// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = _dereq_(52);
var toObject = _dereq_(123);
var IE_PROTO = _dereq_(106)('IE_PROTO');
var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};

},{"106":106,"123":123,"52":52}],87:[function(_dereq_,module,exports){
var has = _dereq_(52);
var toIObject = _dereq_(121);
var arrayIndexOf = _dereq_(22)(false);
var IE_PROTO = _dereq_(106)('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};

},{"106":106,"121":121,"22":22,"52":52}],88:[function(_dereq_,module,exports){
// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = _dereq_(87);
var enumBugKeys = _dereq_(41);

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};

},{"41":41,"87":87}],89:[function(_dereq_,module,exports){
exports.f = {}.propertyIsEnumerable;

},{}],90:[function(_dereq_,module,exports){
// most Object methods by ES6 should accept primitives
var $export = _dereq_(43);
var core = _dereq_(33);
var fails = _dereq_(45);
module.exports = function (KEY, exec) {
  var fn = (core.Object || {})[KEY] || Object[KEY];
  var exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);
};

},{"33":33,"43":43,"45":45}],91:[function(_dereq_,module,exports){
var getKeys = _dereq_(88);
var toIObject = _dereq_(121);
var isEnum = _dereq_(89).f;
module.exports = function (isEntries) {
  return function (it) {
    var O = toIObject(it);
    var keys = getKeys(O);
    var length = keys.length;
    var i = 0;
    var result = [];
    var key;
    while (length > i) if (isEnum.call(O, key = keys[i++])) {
      result.push(isEntries ? [key, O[key]] : O[key]);
    } return result;
  };
};

},{"121":121,"88":88,"89":89}],92:[function(_dereq_,module,exports){
// all object keys, includes non-enumerable and symbols
var gOPN = _dereq_(84);
var gOPS = _dereq_(85);
var anObject = _dereq_(19);
var Reflect = _dereq_(51).Reflect;
module.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {
  var keys = gOPN.f(anObject(it));
  var getSymbols = gOPS.f;
  return getSymbols ? keys.concat(getSymbols(it)) : keys;
};

},{"19":19,"51":51,"84":84,"85":85}],93:[function(_dereq_,module,exports){
var $parseFloat = _dereq_(51).parseFloat;
var $trim = _dereq_(115).trim;

module.exports = 1 / $parseFloat(_dereq_(116) + '-0') !== -Infinity ? function parseFloat(str) {
  var string = $trim(String(str), 3);
  var result = $parseFloat(string);
  return result === 0 && string.charAt(0) == '-' ? -0 : result;
} : $parseFloat;

},{"115":115,"116":116,"51":51}],94:[function(_dereq_,module,exports){
var $parseInt = _dereq_(51).parseInt;
var $trim = _dereq_(115).trim;
var ws = _dereq_(116);
var hex = /^[-+]?0[xX]/;

module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {
  var string = $trim(String(str), 3);
  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));
} : $parseInt;

},{"115":115,"116":116,"51":51}],95:[function(_dereq_,module,exports){
module.exports = function (exec) {
  try {
    return { e: false, v: exec() };
  } catch (e) {
    return { e: true, v: e };
  }
};

},{}],96:[function(_dereq_,module,exports){
var anObject = _dereq_(19);
var isObject = _dereq_(62);
var newPromiseCapability = _dereq_(77);

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};

},{"19":19,"62":62,"77":77}],97:[function(_dereq_,module,exports){
module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};

},{}],98:[function(_dereq_,module,exports){
var redefine = _dereq_(99);
module.exports = function (target, src, safe) {
  for (var key in src) redefine(target, key, src[key], safe);
  return target;
};

},{"99":99}],99:[function(_dereq_,module,exports){
var global = _dereq_(51);
var hide = _dereq_(53);
var has = _dereq_(52);
var SRC = _dereq_(128)('src');
var $toString = _dereq_(50);
var TO_STRING = 'toString';
var TPL = ('' + $toString).split(TO_STRING);

_dereq_(33).inspectSource = function (it) {
  return $toString.call(it);
};

(module.exports = function (O, key, val, safe) {
  var isFunction = typeof val == 'function';
  if (isFunction) has(val, 'name') || hide(val, 'name', key);
  if (O[key] === val) return;
  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
  if (O === global) {
    O[key] = val;
  } else if (!safe) {
    delete O[key];
    hide(O, key, val);
  } else if (O[key]) {
    O[key] = val;
  } else {
    hide(O, key, val);
  }
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, TO_STRING, function toString() {
  return typeof this == 'function' && this[SRC] || $toString.call(this);
});

},{"128":128,"33":33,"50":50,"51":51,"52":52,"53":53}],100:[function(_dereq_,module,exports){
'use strict';

var classof = _dereq_(28);
var builtinExec = RegExp.prototype.exec;

 // `RegExpExec` abstract operation
// https://tc39.github.io/ecma262/#sec-regexpexec
module.exports = function (R, S) {
  var exec = R.exec;
  if (typeof exec === 'function') {
    var result = exec.call(R, S);
    if (typeof result !== 'object') {
      throw new TypeError('RegExp exec method returned something other than an Object or null');
    }
    return result;
  }
  if (classof(R) !== 'RegExp') {
    throw new TypeError('RegExp#exec called on incompatible receiver');
  }
  return builtinExec.call(R, S);
};

},{"28":28}],101:[function(_dereq_,module,exports){
'use strict';

var regexpFlags = _dereq_(47);

var nativeExec = RegExp.prototype.exec;
// This always refers to the native implementation, because the
// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
// which loads this file before patching the method.
var nativeReplace = String.prototype.replace;

var patchedExec = nativeExec;

var LAST_INDEX = 'lastIndex';

var UPDATES_LAST_INDEX_WRONG = (function () {
  var re1 = /a/,
      re2 = /b*/g;
  nativeExec.call(re1, 'a');
  nativeExec.call(re2, 'a');
  return re1[LAST_INDEX] !== 0 || re2[LAST_INDEX] !== 0;
})();

// nonparticipating capturing group, copied from es5-shim's String#split patch.
var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;

if (PATCH) {
  patchedExec = function exec(str) {
    var re = this;
    var lastIndex, reCopy, match, i;

    if (NPCG_INCLUDED) {
      reCopy = new RegExp('^' + re.source + '$(?!\\s)', regexpFlags.call(re));
    }
    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re[LAST_INDEX];

    match = nativeExec.call(re, str);

    if (UPDATES_LAST_INDEX_WRONG && match) {
      re[LAST_INDEX] = re.global ? match.index + match[0].length : lastIndex;
    }
    if (NPCG_INCLUDED && match && match.length > 1) {
      // Fix browsers whose `exec` methods don't consistently return `undefined`
      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
      // eslint-disable-next-line no-loop-func
      nativeReplace.call(match[0], reCopy, function () {
        for (i = 1; i < arguments.length - 2; i++) {
          if (arguments[i] === undefined) match[i] = undefined;
        }
      });
    }

    return match;
  };
}

module.exports = patchedExec;

},{"47":47}],102:[function(_dereq_,module,exports){
// 7.2.9 SameValue(x, y)
module.exports = Object.is || function is(x, y) {
  // eslint-disable-next-line no-self-compare
  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
};

},{}],103:[function(_dereq_,module,exports){
// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = _dereq_(62);
var anObject = _dereq_(19);
var check = function (O, proto) {
  anObject(O);
  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function (test, buggy, set) {
      try {
        set = _dereq_(35)(Function.call, _dereq_(82).f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch (e) { buggy = true; }
      return function setPrototypeOf(O, proto) {
        check(O, proto);
        if (buggy) O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};

},{"19":19,"35":35,"62":62,"82":82}],104:[function(_dereq_,module,exports){
'use strict';
var global = _dereq_(51);
var dP = _dereq_(80);
var DESCRIPTORS = _dereq_(39);
var SPECIES = _dereq_(133)('species');

module.exports = function (KEY) {
  var C = global[KEY];
  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
    configurable: true,
    get: function () { return this; }
  });
};

},{"133":133,"39":39,"51":51,"80":80}],105:[function(_dereq_,module,exports){
var def = _dereq_(80).f;
var has = _dereq_(52);
var TAG = _dereq_(133)('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
};

},{"133":133,"52":52,"80":80}],106:[function(_dereq_,module,exports){
var shared = _dereq_(107)('keys');
var uid = _dereq_(128);
module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};

},{"107":107,"128":128}],107:[function(_dereq_,module,exports){
var core = _dereq_(33);
var global = _dereq_(51);
var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: core.version,
  mode: _dereq_(70) ? 'pure' : 'global',
  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'
});

},{"33":33,"51":51,"70":70}],108:[function(_dereq_,module,exports){
// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject = _dereq_(19);
var aFunction = _dereq_(14);
var SPECIES = _dereq_(133)('species');
module.exports = function (O, D) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};

},{"133":133,"14":14,"19":19}],109:[function(_dereq_,module,exports){
'use strict';
var fails = _dereq_(45);

module.exports = function (method, arg) {
  return !!method && fails(function () {
    // eslint-disable-next-line no-useless-call
    arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);
  });
};

},{"45":45}],110:[function(_dereq_,module,exports){
var toInteger = _dereq_(120);
var defined = _dereq_(38);
// true  -> String#at
// false -> String#codePointAt
module.exports = function (TO_STRING) {
  return function (that, pos) {
    var s = String(defined(that));
    var i = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};

},{"120":120,"38":38}],111:[function(_dereq_,module,exports){
// helper for String#{startsWith, endsWith, includes}
var isRegExp = _dereq_(63);
var defined = _dereq_(38);

module.exports = function (that, searchString, NAME) {
  if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
  return String(defined(that));
};

},{"38":38,"63":63}],112:[function(_dereq_,module,exports){
var $export = _dereq_(43);
var fails = _dereq_(45);
var defined = _dereq_(38);
var quot = /"/g;
// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
var createHTML = function (string, tag, attribute, value) {
  var S = String(defined(string));
  var p1 = '<' + tag;
  if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
  return p1 + '>' + S + '</' + tag + '>';
};
module.exports = function (NAME, exec) {
  var O = {};
  O[NAME] = exec(createHTML);
  $export($export.P + $export.F * fails(function () {
    var test = ''[NAME]('"');
    return test !== test.toLowerCase() || test.split('"').length > 3;
  }), 'String', O);
};

},{"38":38,"43":43,"45":45}],113:[function(_dereq_,module,exports){
// https://github.com/tc39/proposal-string-pad-start-end
var toLength = _dereq_(122);
var repeat = _dereq_(114);
var defined = _dereq_(38);

module.exports = function (that, maxLength, fillString, left) {
  var S = String(defined(that));
  var stringLength = S.length;
  var fillStr = fillString === undefined ? ' ' : String(fillString);
  var intMaxLength = toLength(maxLength);
  if (intMaxLength <= stringLength || fillStr == '') return S;
  var fillLen = intMaxLength - stringLength;
  var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
  if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
  return left ? stringFiller + S : S + stringFiller;
};

},{"114":114,"122":122,"38":38}],114:[function(_dereq_,module,exports){
'use strict';
var toInteger = _dereq_(120);
var defined = _dereq_(38);

module.exports = function repeat(count) {
  var str = String(defined(this));
  var res = '';
  var n = toInteger(count);
  if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");
  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;
  return res;
};

},{"120":120,"38":38}],115:[function(_dereq_,module,exports){
var $export = _dereq_(43);
var defined = _dereq_(38);
var fails = _dereq_(45);
var spaces = _dereq_(116);
var space = '[' + spaces + ']';
var non = '\u200b\u0085';
var ltrim = RegExp('^' + space + space + '*');
var rtrim = RegExp(space + space + '*$');

var exporter = function (KEY, exec, ALIAS) {
  var exp = {};
  var FORCE = fails(function () {
    return !!spaces[KEY]() || non[KEY]() != non;
  });
  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
  if (ALIAS) exp[ALIAS] = fn;
  $export($export.P + $export.F * FORCE, 'String', exp);
};

// 1 -> String#trimLeft
// 2 -> String#trimRight
// 3 -> String#trim
var trim = exporter.trim = function (string, TYPE) {
  string = String(defined(string));
  if (TYPE & 1) string = string.replace(ltrim, '');
  if (TYPE & 2) string = string.replace(rtrim, '');
  return string;
};

module.exports = exporter;

},{"116":116,"38":38,"43":43,"45":45}],116:[function(_dereq_,module,exports){
module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
  '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

},{}],117:[function(_dereq_,module,exports){
var ctx = _dereq_(35);
var invoke = _dereq_(57);
var html = _dereq_(54);
var cel = _dereq_(40);
var global = _dereq_(51);
var process = global.process;
var setTask = global.setImmediate;
var clearTask = global.clearImmediate;
var MessageChannel = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;
var run = function () {
  var id = +this;
  // eslint-disable-next-line no-prototype-builtins
  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function (event) {
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!setTask || !clearTask) {
  setTask = function setImmediate(fn) {
    var args = [];
    var i = 1;
    while (arguments.length > i) args.push(arguments[i++]);
    queue[++counter] = function () {
      // eslint-disable-next-line no-new-func
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (_dereq_(29)(process) == 'process') {
    defer = function (id) {
      process.nextTick(ctx(run, id, 1));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if (MessageChannel) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
    defer = function (id) {
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in cel('script')) {
    defer = function (id) {
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set: setTask,
  clear: clearTask
};

},{"29":29,"35":35,"40":40,"51":51,"54":54,"57":57}],118:[function(_dereq_,module,exports){
var toInteger = _dereq_(120);
var max = Math.max;
var min = Math.min;
module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};

},{"120":120}],119:[function(_dereq_,module,exports){
// https://tc39.github.io/ecma262/#sec-toindex
var toInteger = _dereq_(120);
var toLength = _dereq_(122);
module.exports = function (it) {
  if (it === undefined) return 0;
  var number = toInteger(it);
  var length = toLength(number);
  if (number !== length) throw RangeError('Wrong length!');
  return length;
};

},{"120":120,"122":122}],120:[function(_dereq_,module,exports){
// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};

},{}],121:[function(_dereq_,module,exports){
// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = _dereq_(58);
var defined = _dereq_(38);
module.exports = function (it) {
  return IObject(defined(it));
};

},{"38":38,"58":58}],122:[function(_dereq_,module,exports){
// 7.1.15 ToLength
var toInteger = _dereq_(120);
var min = Math.min;
module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};

},{"120":120}],123:[function(_dereq_,module,exports){
// 7.1.13 ToObject(argument)
var defined = _dereq_(38);
module.exports = function (it) {
  return Object(defined(it));
};

},{"38":38}],124:[function(_dereq_,module,exports){
// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = _dereq_(62);
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};

},{"62":62}],125:[function(_dereq_,module,exports){
'use strict';
if (_dereq_(39)) {
  var LIBRARY = _dereq_(70);
  var global = _dereq_(51);
  var fails = _dereq_(45);
  var $export = _dereq_(43);
  var $typed = _dereq_(127);
  var $buffer = _dereq_(126);
  var ctx = _dereq_(35);
  var anInstance = _dereq_(18);
  var propertyDesc = _dereq_(97);
  var hide = _dereq_(53);
  var redefineAll = _dereq_(98);
  var toInteger = _dereq_(120);
  var toLength = _dereq_(122);
  var toIndex = _dereq_(119);
  var toAbsoluteIndex = _dereq_(118);
  var toPrimitive = _dereq_(124);
  var has = _dereq_(52);
  var classof = _dereq_(28);
  var isObject = _dereq_(62);
  var toObject = _dereq_(123);
  var isArrayIter = _dereq_(59);
  var create = _dereq_(79);
  var getPrototypeOf = _dereq_(86);
  var gOPN = _dereq_(84).f;
  var getIterFn = _dereq_(134);
  var uid = _dereq_(128);
  var wks = _dereq_(133);
  var createArrayMethod = _dereq_(23);
  var createArrayIncludes = _dereq_(22);
  var speciesConstructor = _dereq_(108);
  var ArrayIterators = _dereq_(145);
  var Iterators = _dereq_(69);
  var $iterDetect = _dereq_(67);
  var setSpecies = _dereq_(104);
  var arrayFill = _dereq_(21);
  var arrayCopyWithin = _dereq_(20);
  var $DP = _dereq_(80);
  var $GOPD = _dereq_(82);
  var dP = $DP.f;
  var gOPD = $GOPD.f;
  var RangeError = global.RangeError;
  var TypeError = global.TypeError;
  var Uint8Array = global.Uint8Array;
  var ARRAY_BUFFER = 'ArrayBuffer';
  var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;
  var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
  var PROTOTYPE = 'prototype';
  var ArrayProto = Array[PROTOTYPE];
  var $ArrayBuffer = $buffer.ArrayBuffer;
  var $DataView = $buffer.DataView;
  var arrayForEach = createArrayMethod(0);
  var arrayFilter = createArrayMethod(2);
  var arraySome = createArrayMethod(3);
  var arrayEvery = createArrayMethod(4);
  var arrayFind = createArrayMethod(5);
  var arrayFindIndex = createArrayMethod(6);
  var arrayIncludes = createArrayIncludes(true);
  var arrayIndexOf = createArrayIncludes(false);
  var arrayValues = ArrayIterators.values;
  var arrayKeys = ArrayIterators.keys;
  var arrayEntries = ArrayIterators.entries;
  var arrayLastIndexOf = ArrayProto.lastIndexOf;
  var arrayReduce = ArrayProto.reduce;
  var arrayReduceRight = ArrayProto.reduceRight;
  var arrayJoin = ArrayProto.join;
  var arraySort = ArrayProto.sort;
  var arraySlice = ArrayProto.slice;
  var arrayToString = ArrayProto.toString;
  var arrayToLocaleString = ArrayProto.toLocaleString;
  var ITERATOR = wks('iterator');
  var TAG = wks('toStringTag');
  var TYPED_CONSTRUCTOR = uid('typed_constructor');
  var DEF_CONSTRUCTOR = uid('def_constructor');
  var ALL_CONSTRUCTORS = $typed.CONSTR;
  var TYPED_ARRAY = $typed.TYPED;
  var VIEW = $typed.VIEW;
  var WRONG_LENGTH = 'Wrong length!';

  var $map = createArrayMethod(1, function (O, length) {
    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
  });

  var LITTLE_ENDIAN = fails(function () {
    // eslint-disable-next-line no-undef
    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
  });

  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {
    new Uint8Array(1).set({});
  });

  var toOffset = function (it, BYTES) {
    var offset = toInteger(it);
    if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');
    return offset;
  };

  var validate = function (it) {
    if (isObject(it) && TYPED_ARRAY in it) return it;
    throw TypeError(it + ' is not a typed array!');
  };

  var allocate = function (C, length) {
    if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {
      throw TypeError('It is not a typed array constructor!');
    } return new C(length);
  };

  var speciesFromList = function (O, list) {
    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
  };

  var fromList = function (C, list) {
    var index = 0;
    var length = list.length;
    var result = allocate(C, length);
    while (length > index) result[index] = list[index++];
    return result;
  };

  var addGetter = function (it, key, internal) {
    dP(it, key, { get: function () { return this._d[internal]; } });
  };

  var $from = function from(source /* , mapfn, thisArg */) {
    var O = toObject(source);
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var iterFn = getIterFn(O);
    var i, length, values, result, step, iterator;
    if (iterFn != undefined && !isArrayIter(iterFn)) {
      for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {
        values.push(step.value);
      } O = values;
    }
    if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);
    for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {
      result[i] = mapping ? mapfn(O[i], i) : O[i];
    }
    return result;
  };

  var $of = function of(/* ...items */) {
    var index = 0;
    var length = arguments.length;
    var result = allocate(this, length);
    while (length > index) result[index] = arguments[index++];
    return result;
  };

  // iOS Safari 6.x fails here
  var TO_LOCALE_BUG = !!Uint8Array && fails(function () { arrayToLocaleString.call(new Uint8Array(1)); });

  var $toLocaleString = function toLocaleString() {
    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
  };

  var proto = {
    copyWithin: function copyWithin(target, start /* , end */) {
      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
    },
    every: function every(callbackfn /* , thisArg */) {
      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    fill: function fill(value /* , start, end */) { // eslint-disable-line no-unused-vars
      return arrayFill.apply(validate(this), arguments);
    },
    filter: function filter(callbackfn /* , thisArg */) {
      return speciesFromList(this, arrayFilter(validate(this), callbackfn,
        arguments.length > 1 ? arguments[1] : undefined));
    },
    find: function find(predicate /* , thisArg */) {
      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    findIndex: function findIndex(predicate /* , thisArg */) {
      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    forEach: function forEach(callbackfn /* , thisArg */) {
      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    indexOf: function indexOf(searchElement /* , fromIndex */) {
      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    includes: function includes(searchElement /* , fromIndex */) {
      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    join: function join(separator) { // eslint-disable-line no-unused-vars
      return arrayJoin.apply(validate(this), arguments);
    },
    lastIndexOf: function lastIndexOf(searchElement /* , fromIndex */) { // eslint-disable-line no-unused-vars
      return arrayLastIndexOf.apply(validate(this), arguments);
    },
    map: function map(mapfn /* , thisArg */) {
      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    reduce: function reduce(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
      return arrayReduce.apply(validate(this), arguments);
    },
    reduceRight: function reduceRight(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
      return arrayReduceRight.apply(validate(this), arguments);
    },
    reverse: function reverse() {
      var that = this;
      var length = validate(that).length;
      var middle = Math.floor(length / 2);
      var index = 0;
      var value;
      while (index < middle) {
        value = that[index];
        that[index++] = that[--length];
        that[length] = value;
      } return that;
    },
    some: function some(callbackfn /* , thisArg */) {
      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    sort: function sort(comparefn) {
      return arraySort.call(validate(this), comparefn);
    },
    subarray: function subarray(begin, end) {
      var O = validate(this);
      var length = O.length;
      var $begin = toAbsoluteIndex(begin, length);
      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(
        O.buffer,
        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,
        toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin)
      );
    }
  };

  var $slice = function slice(start, end) {
    return speciesFromList(this, arraySlice.call(validate(this), start, end));
  };

  var $set = function set(arrayLike /* , offset */) {
    validate(this);
    var offset = toOffset(arguments[1], 1);
    var length = this.length;
    var src = toObject(arrayLike);
    var len = toLength(src.length);
    var index = 0;
    if (len + offset > length) throw RangeError(WRONG_LENGTH);
    while (index < len) this[offset + index] = src[index++];
  };

  var $iterators = {
    entries: function entries() {
      return arrayEntries.call(validate(this));
    },
    keys: function keys() {
      return arrayKeys.call(validate(this));
    },
    values: function values() {
      return arrayValues.call(validate(this));
    }
  };

  var isTAIndex = function (target, key) {
    return isObject(target)
      && target[TYPED_ARRAY]
      && typeof key != 'symbol'
      && key in target
      && String(+key) == String(key);
  };
  var $getDesc = function getOwnPropertyDescriptor(target, key) {
    return isTAIndex(target, key = toPrimitive(key, true))
      ? propertyDesc(2, target[key])
      : gOPD(target, key);
  };
  var $setDesc = function defineProperty(target, key, desc) {
    if (isTAIndex(target, key = toPrimitive(key, true))
      && isObject(desc)
      && has(desc, 'value')
      && !has(desc, 'get')
      && !has(desc, 'set')
      // TODO: add validation descriptor w/o calling accessors
      && !desc.configurable
      && (!has(desc, 'writable') || desc.writable)
      && (!has(desc, 'enumerable') || desc.enumerable)
    ) {
      target[key] = desc.value;
      return target;
    } return dP(target, key, desc);
  };

  if (!ALL_CONSTRUCTORS) {
    $GOPD.f = $getDesc;
    $DP.f = $setDesc;
  }

  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
    getOwnPropertyDescriptor: $getDesc,
    defineProperty: $setDesc
  });

  if (fails(function () { arrayToString.call({}); })) {
    arrayToString = arrayToLocaleString = function toString() {
      return arrayJoin.call(this);
    };
  }

  var $TypedArrayPrototype$ = redefineAll({}, proto);
  redefineAll($TypedArrayPrototype$, $iterators);
  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
  redefineAll($TypedArrayPrototype$, {
    slice: $slice,
    set: $set,
    constructor: function () { /* noop */ },
    toString: arrayToString,
    toLocaleString: $toLocaleString
  });
  addGetter($TypedArrayPrototype$, 'buffer', 'b');
  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
  addGetter($TypedArrayPrototype$, 'byteLength', 'l');
  addGetter($TypedArrayPrototype$, 'length', 'e');
  dP($TypedArrayPrototype$, TAG, {
    get: function () { return this[TYPED_ARRAY]; }
  });

  // eslint-disable-next-line max-statements
  module.exports = function (KEY, BYTES, wrapper, CLAMPED) {
    CLAMPED = !!CLAMPED;
    var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';
    var GETTER = 'get' + KEY;
    var SETTER = 'set' + KEY;
    var TypedArray = global[NAME];
    var Base = TypedArray || {};
    var TAC = TypedArray && getPrototypeOf(TypedArray);
    var FORCED = !TypedArray || !$typed.ABV;
    var O = {};
    var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
    var getter = function (that, index) {
      var data = that._d;
      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
    };
    var setter = function (that, index, value) {
      var data = that._d;
      if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
    };
    var addElement = function (that, index) {
      dP(that, index, {
        get: function () {
          return getter(this, index);
        },
        set: function (value) {
          return setter(this, index, value);
        },
        enumerable: true
      });
    };
    if (FORCED) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME, '_d');
        var index = 0;
        var offset = 0;
        var buffer, byteLength, length, klass;
        if (!isObject(data)) {
          length = toIndex(data);
          byteLength = length * BYTES;
          buffer = new $ArrayBuffer(byteLength);
        } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          buffer = data;
          offset = toOffset($offset, BYTES);
          var $len = data.byteLength;
          if ($length === undefined) {
            if ($len % BYTES) throw RangeError(WRONG_LENGTH);
            byteLength = $len - offset;
            if (byteLength < 0) throw RangeError(WRONG_LENGTH);
          } else {
            byteLength = toLength($length) * BYTES;
            if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);
          }
          length = byteLength / BYTES;
        } else if (TYPED_ARRAY in data) {
          return fromList(TypedArray, data);
        } else {
          return $from.call(TypedArray, data);
        }
        hide(that, '_d', {
          b: buffer,
          o: offset,
          l: byteLength,
          e: length,
          v: new $DataView(buffer)
        });
        while (index < length) addElement(that, index++);
      });
      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
      hide(TypedArrayPrototype, 'constructor', TypedArray);
    } else if (!fails(function () {
      TypedArray(1);
    }) || !fails(function () {
      new TypedArray(-1); // eslint-disable-line no-new
    }) || !$iterDetect(function (iter) {
      new TypedArray(); // eslint-disable-line no-new
      new TypedArray(null); // eslint-disable-line no-new
      new TypedArray(1.5); // eslint-disable-line no-new
      new TypedArray(iter); // eslint-disable-line no-new
    }, true)) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME);
        var klass;
        // `ws` module bug, temporarily remove validation length for Uint8Array
        // https://github.com/websockets/ws/pull/645
        if (!isObject(data)) return new Base(toIndex(data));
        if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          return $length !== undefined
            ? new Base(data, toOffset($offset, BYTES), $length)
            : $offset !== undefined
              ? new Base(data, toOffset($offset, BYTES))
              : new Base(data);
        }
        if (TYPED_ARRAY in data) return fromList(TypedArray, data);
        return $from.call(TypedArray, data);
      });
      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {
        if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);
      });
      TypedArray[PROTOTYPE] = TypedArrayPrototype;
      if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;
    }
    var $nativeIterator = TypedArrayPrototype[ITERATOR];
    var CORRECT_ITER_NAME = !!$nativeIterator
      && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);
    var $iterator = $iterators.values;
    hide(TypedArray, TYPED_CONSTRUCTOR, true);
    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
    hide(TypedArrayPrototype, VIEW, true);
    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);

    if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {
      dP(TypedArrayPrototype, TAG, {
        get: function () { return NAME; }
      });
    }

    O[NAME] = TypedArray;

    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);

    $export($export.S, NAME, {
      BYTES_PER_ELEMENT: BYTES
    });

    $export($export.S + $export.F * fails(function () { Base.of.call(TypedArray, 1); }), NAME, {
      from: $from,
      of: $of
    });

    if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);

    $export($export.P, NAME, proto);

    setSpecies(NAME);

    $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });

    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);

    if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;

    $export($export.P + $export.F * fails(function () {
      new TypedArray(1).slice();
    }), NAME, { slice: $slice });

    $export($export.P + $export.F * (fails(function () {
      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();
    }) || !fails(function () {
      TypedArrayPrototype.toLocaleString.call([1, 2]);
    })), NAME, { toLocaleString: $toLocaleString });

    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
    if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);
  };
} else module.exports = function () { /* empty */ };

},{"104":104,"108":108,"118":118,"119":119,"120":120,"122":122,"123":123,"124":124,"126":126,"127":127,"128":128,"133":133,"134":134,"145":145,"18":18,"20":20,"21":21,"22":22,"23":23,"28":28,"35":35,"39":39,"43":43,"45":45,"51":51,"52":52,"53":53,"59":59,"62":62,"67":67,"69":69,"70":70,"79":79,"80":80,"82":82,"84":84,"86":86,"97":97,"98":98}],126:[function(_dereq_,module,exports){
'use strict';
var global = _dereq_(51);
var DESCRIPTORS = _dereq_(39);
var LIBRARY = _dereq_(70);
var $typed = _dereq_(127);
var hide = _dereq_(53);
var redefineAll = _dereq_(98);
var fails = _dereq_(45);
var anInstance = _dereq_(18);
var toInteger = _dereq_(120);
var toLength = _dereq_(122);
var toIndex = _dereq_(119);
var gOPN = _dereq_(84).f;
var dP = _dereq_(80).f;
var arrayFill = _dereq_(21);
var setToStringTag = _dereq_(105);
var ARRAY_BUFFER = 'ArrayBuffer';
var DATA_VIEW = 'DataView';
var PROTOTYPE = 'prototype';
var WRONG_LENGTH = 'Wrong length!';
var WRONG_INDEX = 'Wrong index!';
var $ArrayBuffer = global[ARRAY_BUFFER];
var $DataView = global[DATA_VIEW];
var Math = global.Math;
var RangeError = global.RangeError;
// eslint-disable-next-line no-shadow-restricted-names
var Infinity = global.Infinity;
var BaseBuffer = $ArrayBuffer;
var abs = Math.abs;
var pow = Math.pow;
var floor = Math.floor;
var log = Math.log;
var LN2 = Math.LN2;
var BUFFER = 'buffer';
var BYTE_LENGTH = 'byteLength';
var BYTE_OFFSET = 'byteOffset';
var $BUFFER = DESCRIPTORS ? '_b' : BUFFER;
var $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;
var $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET;

// IEEE754 conversions based on https://github.com/feross/ieee754
function packIEEE754(value, mLen, nBytes) {
  var buffer = new Array(nBytes);
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;
  var i = 0;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  var e, m, c;
  value = abs(value);
  // eslint-disable-next-line no-self-compare
  if (value != value || value === Infinity) {
    // eslint-disable-next-line no-self-compare
    m = value != value ? 1 : 0;
    e = eMax;
  } else {
    e = floor(log(value) / LN2);
    if (value * (c = pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }
    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * pow(2, eBias - 1) * pow(2, mLen);
      e = 0;
    }
  }
  for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);
  e = e << mLen | m;
  eLen += mLen;
  for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);
  buffer[--i] |= s * 128;
  return buffer;
}
function unpackIEEE754(buffer, mLen, nBytes) {
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = eLen - 7;
  var i = nBytes - 1;
  var s = buffer[i--];
  var e = s & 127;
  var m;
  s >>= 7;
  for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);
  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);
  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : s ? -Infinity : Infinity;
  } else {
    m = m + pow(2, mLen);
    e = e - eBias;
  } return (s ? -1 : 1) * m * pow(2, e - mLen);
}

function unpackI32(bytes) {
  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
}
function packI8(it) {
  return [it & 0xff];
}
function packI16(it) {
  return [it & 0xff, it >> 8 & 0xff];
}
function packI32(it) {
  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
}
function packF64(it) {
  return packIEEE754(it, 52, 8);
}
function packF32(it) {
  return packIEEE754(it, 23, 4);
}

function addGetter(C, key, internal) {
  dP(C[PROTOTYPE], key, { get: function () { return this[internal]; } });
}

function get(view, bytes, index, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = store.slice(start, start + bytes);
  return isLittleEndian ? pack : pack.reverse();
}
function set(view, bytes, index, conversion, value, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = conversion(+value);
  for (var i = 0; i < bytes; i++) store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
}

if (!$typed.ABV) {
  $ArrayBuffer = function ArrayBuffer(length) {
    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
    var byteLength = toIndex(length);
    this._b = arrayFill.call(new Array(byteLength), 0);
    this[$LENGTH] = byteLength;
  };

  $DataView = function DataView(buffer, byteOffset, byteLength) {
    anInstance(this, $DataView, DATA_VIEW);
    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
    var bufferLength = buffer[$LENGTH];
    var offset = toInteger(byteOffset);
    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');
    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
    this[$BUFFER] = buffer;
    this[$OFFSET] = offset;
    this[$LENGTH] = byteLength;
  };

  if (DESCRIPTORS) {
    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
    addGetter($DataView, BUFFER, '_b');
    addGetter($DataView, BYTE_LENGTH, '_l');
    addGetter($DataView, BYTE_OFFSET, '_o');
  }

  redefineAll($DataView[PROTOTYPE], {
    getInt8: function getInt8(byteOffset) {
      return get(this, 1, byteOffset)[0] << 24 >> 24;
    },
    getUint8: function getUint8(byteOffset) {
      return get(this, 1, byteOffset)[0];
    },
    getInt16: function getInt16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
    },
    getUint16: function getUint16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return bytes[1] << 8 | bytes[0];
    },
    getInt32: function getInt32(byteOffset /* , littleEndian */) {
      return unpackI32(get(this, 4, byteOffset, arguments[1]));
    },
    getUint32: function getUint32(byteOffset /* , littleEndian */) {
      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
    },
    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
    },
    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
    },
    setInt8: function setInt8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setUint8: function setUint8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packF32, value, arguments[2]);
    },
    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
      set(this, 8, byteOffset, packF64, value, arguments[2]);
    }
  });
} else {
  if (!fails(function () {
    $ArrayBuffer(1);
  }) || !fails(function () {
    new $ArrayBuffer(-1); // eslint-disable-line no-new
  }) || fails(function () {
    new $ArrayBuffer(); // eslint-disable-line no-new
    new $ArrayBuffer(1.5); // eslint-disable-line no-new
    new $ArrayBuffer(NaN); // eslint-disable-line no-new
    return $ArrayBuffer.name != ARRAY_BUFFER;
  })) {
    $ArrayBuffer = function ArrayBuffer(length) {
      anInstance(this, $ArrayBuffer);
      return new BaseBuffer(toIndex(length));
    };
    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
    for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {
      if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);
    }
    if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;
  }
  // iOS Safari 7.x bug
  var view = new $DataView(new $ArrayBuffer(2));
  var $setInt8 = $DataView[PROTOTYPE].setInt8;
  view.setInt8(0, 2147483648);
  view.setInt8(1, 2147483649);
  if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {
    setInt8: function setInt8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    },
    setUint8: function setUint8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    }
  }, true);
}
setToStringTag($ArrayBuffer, ARRAY_BUFFER);
setToStringTag($DataView, DATA_VIEW);
hide($DataView[PROTOTYPE], $typed.VIEW, true);
exports[ARRAY_BUFFER] = $ArrayBuffer;
exports[DATA_VIEW] = $DataView;

},{"105":105,"119":119,"120":120,"122":122,"127":127,"18":18,"21":21,"39":39,"45":45,"51":51,"53":53,"70":70,"80":80,"84":84,"98":98}],127:[function(_dereq_,module,exports){
var global = _dereq_(51);
var hide = _dereq_(53);
var uid = _dereq_(128);
var TYPED = uid('typed_array');
var VIEW = uid('view');
var ABV = !!(global.ArrayBuffer && global.DataView);
var CONSTR = ABV;
var i = 0;
var l = 9;
var Typed;

var TypedArrayConstructors = (
  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'
).split(',');

while (i < l) {
  if (Typed = global[TypedArrayConstructors[i++]]) {
    hide(Typed.prototype, TYPED, true);
    hide(Typed.prototype, VIEW, true);
  } else CONSTR = false;
}

module.exports = {
  ABV: ABV,
  CONSTR: CONSTR,
  TYPED: TYPED,
  VIEW: VIEW
};

},{"128":128,"51":51,"53":53}],128:[function(_dereq_,module,exports){
var id = 0;
var px = Math.random();
module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};

},{}],129:[function(_dereq_,module,exports){
var global = _dereq_(51);
var navigator = global.navigator;

module.exports = navigator && navigator.userAgent || '';

},{"51":51}],130:[function(_dereq_,module,exports){
var isObject = _dereq_(62);
module.exports = function (it, TYPE) {
  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
  return it;
};

},{"62":62}],131:[function(_dereq_,module,exports){
var global = _dereq_(51);
var core = _dereq_(33);
var LIBRARY = _dereq_(70);
var wksExt = _dereq_(132);
var defineProperty = _dereq_(80).f;
module.exports = function (name) {
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
};

},{"132":132,"33":33,"51":51,"70":70,"80":80}],132:[function(_dereq_,module,exports){
exports.f = _dereq_(133);

},{"133":133}],133:[function(_dereq_,module,exports){
var store = _dereq_(107)('wks');
var uid = _dereq_(128);
var Symbol = _dereq_(51).Symbol;
var USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;

},{"107":107,"128":128,"51":51}],134:[function(_dereq_,module,exports){
var classof = _dereq_(28);
var ITERATOR = _dereq_(133)('iterator');
var Iterators = _dereq_(69);
module.exports = _dereq_(33).getIteratorMethod = function (it) {
  if (it != undefined) return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};

},{"133":133,"28":28,"33":33,"69":69}],135:[function(_dereq_,module,exports){
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
var $export = _dereq_(43);

$export($export.P, 'Array', { copyWithin: _dereq_(20) });

_dereq_(16)('copyWithin');

},{"16":16,"20":20,"43":43}],136:[function(_dereq_,module,exports){
'use strict';
var $export = _dereq_(43);
var $every = _dereq_(23)(4);

$export($export.P + $export.F * !_dereq_(109)([].every, true), 'Array', {
  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
  every: function every(callbackfn /* , thisArg */) {
    return $every(this, callbackfn, arguments[1]);
  }
});

},{"109":109,"23":23,"43":43}],137:[function(_dereq_,module,exports){
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
var $export = _dereq_(43);

$export($export.P, 'Array', { fill: _dereq_(21) });

_dereq_(16)('fill');

},{"16":16,"21":21,"43":43}],138:[function(_dereq_,module,exports){
'use strict';
var $export = _dereq_(43);
var $filter = _dereq_(23)(2);

$export($export.P + $export.F * !_dereq_(109)([].filter, true), 'Array', {
  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
  filter: function filter(callbackfn /* , thisArg */) {
    return $filter(this, callbackfn, arguments[1]);
  }
});

},{"109":109,"23":23,"43":43}],139:[function(_dereq_,module,exports){
'use strict';
// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
var $export = _dereq_(43);
var $find = _dereq_(23)(6);
var KEY = 'findIndex';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () { forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  findIndex: function findIndex(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
_dereq_(16)(KEY);

},{"16":16,"23":23,"43":43}],140:[function(_dereq_,module,exports){
'use strict';
// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
var $export = _dereq_(43);
var $find = _dereq_(23)(5);
var KEY = 'find';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () { forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  find: function find(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
_dereq_(16)(KEY);

},{"16":16,"23":23,"43":43}],141:[function(_dereq_,module,exports){
'use strict';
var $export = _dereq_(43);
var $forEach = _dereq_(23)(0);
var STRICT = _dereq_(109)([].forEach, true);

$export($export.P + $export.F * !STRICT, 'Array', {
  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
  forEach: function forEach(callbackfn /* , thisArg */) {
    return $forEach(this, callbackfn, arguments[1]);
  }
});

},{"109":109,"23":23,"43":43}],142:[function(_dereq_,module,exports){
'use strict';
var ctx = _dereq_(35);
var $export = _dereq_(43);
var toObject = _dereq_(123);
var call = _dereq_(64);
var isArrayIter = _dereq_(59);
var toLength = _dereq_(122);
var createProperty = _dereq_(34);
var getIterFn = _dereq_(134);

$export($export.S + $export.F * !_dereq_(67)(function (iter) { Array.from(iter); }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
    var O = toObject(arrayLike);
    var C = typeof this == 'function' ? this : Array;
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var index = 0;
    var iterFn = getIterFn(O);
    var length, result, step, iterator;
    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength(O.length);
      for (result = new C(length); length > index; index++) {
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});

},{"122":122,"123":123,"134":134,"34":34,"35":35,"43":43,"59":59,"64":64,"67":67}],143:[function(_dereq_,module,exports){
'use strict';
var $export = _dereq_(43);
var $indexOf = _dereq_(22)(false);
var $native = [].indexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !_dereq_(109)($native)), 'Array', {
  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
    return NEGATIVE_ZERO
      // convert -0 to +0
      ? $native.apply(this, arguments) || 0
      : $indexOf(this, searchElement, arguments[1]);
  }
});

},{"109":109,"22":22,"43":43}],144:[function(_dereq_,module,exports){
// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
var $export = _dereq_(43);

$export($export.S, 'Array', { isArray: _dereq_(60) });

},{"43":43,"60":60}],145:[function(_dereq_,module,exports){
'use strict';
var addToUnscopables = _dereq_(16);
var step = _dereq_(68);
var Iterators = _dereq_(69);
var toIObject = _dereq_(121);

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = _dereq_(66)(Array, 'Array', function (iterated, kind) {
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;
  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }
  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');

},{"121":121,"16":16,"66":66,"68":68,"69":69}],146:[function(_dereq_,module,exports){
'use strict';
// 22.1.3.13 Array.prototype.join(separator)
var $export = _dereq_(43);
var toIObject = _dereq_(121);
var arrayJoin = [].join;

// fallback for not array-like strings
$export($export.P + $export.F * (_dereq_(58) != Object || !_dereq_(109)(arrayJoin)), 'Array', {
  join: function join(separator) {
    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
  }
});

},{"109":109,"121":121,"43":43,"58":58}],147:[function(_dereq_,module,exports){
'use strict';
var $export = _dereq_(43);
var toIObject = _dereq_(121);
var toInteger = _dereq_(120);
var toLength = _dereq_(122);
var $native = [].lastIndexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !_dereq_(109)($native)), 'Array', {
  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
  lastIndexOf: function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {
    // convert -0 to +0
    if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0;
    var O = toIObject(this);
    var length = toLength(O.length);
    var index = length - 1;
    if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));
    if (index < 0) index = length + index;
    for (;index >= 0; index--) if (index in O) if (O[index] === searchElement) return index || 0;
    return -1;
  }
});

},{"109":109,"120":120,"121":121,"122":122,"43":43}],148:[function(_dereq_,module,exports){
'use strict';
var $export = _dereq_(43);
var $map = _dereq_(23)(1);

$export($export.P + $export.F * !_dereq_(109)([].map, true), 'Array', {
  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
  map: function map(callbackfn /* , thisArg */) {
    return $map(this, callbackfn, arguments[1]);
  }
});

},{"109":109,"23":23,"43":43}],149:[function(_dereq_,module,exports){
'use strict';
var $export = _dereq_(43);
var createProperty = _dereq_(34);

// WebKit Array.of isn't generic
$export($export.S + $export.F * _dereq_(45)(function () {
  function F() { /* empty */ }
  return !(Array.of.call(F) instanceof F);
}), 'Array', {
  // 22.1.2.3 Array.of( ...items)
  of: function of(/* ...args */) {
    var index = 0;
    var aLen = arguments.length;
    var result = new (typeof this == 'function' ? this : Array)(aLen);
    while (aLen > index) createProperty(result, index, arguments[index++]);
    result.length = aLen;
    return result;
  }
});

},{"34":34,"43":43,"45":45}],150:[function(_dereq_,module,exports){
'use strict';
var $export = _dereq_(43);
var $reduce = _dereq_(24);

$export($export.P + $export.F * !_dereq_(109)([].reduceRight, true), 'Array', {
  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
  reduceRight: function reduceRight(callbackfn /* , initialValue */) {
    return $reduce(this, callbackfn, arguments.length, arguments[1], true);
  }
});

},{"109":109,"24":24,"43":43}],151:[function(_dereq_,module,exports){
'use strict';
var $export = _dereq_(43);
var $reduce = _dereq_(24);

$export($export.P + $export.F * !_dereq_(109)([].reduce, true), 'Array', {
  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
  reduce: function reduce(callbackfn /* , initialValue */) {
    return $reduce(this, callbackfn, arguments.length, arguments[1], false);
  }
});

},{"109":109,"24":24,"43":43}],152:[function(_dereq_,module,exports){
'use strict';
var $export = _dereq_(43);
var html = _dereq_(54);
var cof = _dereq_(29);
var toAbsoluteIndex = _dereq_(118);
var toLength = _dereq_(122);
var arraySlice = [].slice;

// fallback for not array-like ES3 strings and DOM objects
$export($export.P + $export.F * _dereq_(45)(function () {
  if (html) arraySlice.call(html);
}), 'Array', {
  slice: function slice(begin, end) {
    var len = toLength(this.length);
    var klass = cof(this);
    end = end === undefined ? len : end;
    if (klass == 'Array') return arraySlice.call(this, begin, end);
    var start = toAbsoluteIndex(begin, len);
    var upTo = toAbsoluteIndex(end, len);
    var size = toLength(upTo - start);
    var cloned = new Array(size);
    var i = 0;
    for (; i < size; i++) cloned[i] = klass == 'String'
      ? this.charAt(start + i)
      : this[start + i];
    return cloned;
  }
});

},{"118":118,"122":122,"29":29,"43":43,"45":45,"54":54}],153:[function(_dereq_,module,exports){
'use strict';
var $export = _dereq_(43);
var $some = _dereq_(23)(3);

$export($export.P + $export.F * !_dereq_(109)([].some, true), 'Array', {
  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
  some: function some(callbackfn /* , thisArg */) {
    return $some(this, callbackfn, arguments[1]);
  }
});

},{"109":109,"23":23,"43":43}],154:[function(_dereq_,module,exports){
'use strict';
var $export = _dereq_(43);
var aFunction = _dereq_(14);
var toObject = _dereq_(123);
var fails = _dereq_(45);
var $sort = [].sort;
var test = [1, 2, 3];

$export($export.P + $export.F * (fails(function () {
  // IE8-
  test.sort(undefined);
}) || !fails(function () {
  // V8 bug
  test.sort(null);
  // Old WebKit
}) || !_dereq_(109)($sort)), 'Array', {
  // 22.1.3.25 Array.prototype.sort(comparefn)
  sort: function sort(comparefn) {
    return comparefn === undefined
      ? $sort.call(toObject(this))
      : $sort.call(toObject(this), aFunction(comparefn));
  }
});

},{"109":109,"123":123,"14":14,"43":43,"45":45}],155:[function(_dereq_,module,exports){
_dereq_(104)('Array');

},{"104":104}],156:[function(_dereq_,module,exports){
// 20.3.3.1 / 15.9.4.4 Date.now()
var $export = _dereq_(43);

$export($export.S, 'Date', { now: function () { return new Date().getTime(); } });

},{"43":43}],157:[function(_dereq_,module,exports){
// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
var $export = _dereq_(43);
var toISOString = _dereq_(36);

// PhantomJS / old WebKit has a broken implementations
$export($export.P + $export.F * (Date.prototype.toISOString !== toISOString), 'Date', {
  toISOString: toISOString
});

},{"36":36,"43":43}],158:[function(_dereq_,module,exports){
'use strict';
var $export = _dereq_(43);
var toObject = _dereq_(123);
var toPrimitive = _dereq_(124);

$export($export.P + $export.F * _dereq_(45)(function () {
  return new Date(NaN).toJSON() !== null
    || Date.prototype.toJSON.call({ toISOString: function () { return 1; } }) !== 1;
}), 'Date', {
  // eslint-disable-next-line no-unused-vars
  toJSON: function toJSON(key) {
    var O = toObject(this);
    var pv = toPrimitive(O);
    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
  }
});

},{"123":123,"124":124,"43":43,"45":45}],159:[function(_dereq_,module,exports){
var TO_PRIMITIVE = _dereq_(133)('toPrimitive');
var proto = Date.prototype;

if (!(TO_PRIMITIVE in proto)) _dereq_(53)(proto, TO_PRIMITIVE, _dereq_(37));

},{"133":133,"37":37,"53":53}],160:[function(_dereq_,module,exports){
var DateProto = Date.prototype;
var INVALID_DATE = 'Invalid Date';
var TO_STRING = 'toString';
var $toString = DateProto[TO_STRING];
var getTime = DateProto.getTime;
if (new Date(NaN) + '' != INVALID_DATE) {
  _dereq_(99)(DateProto, TO_STRING, function toString() {
    var value = getTime.call(this);
    // eslint-disable-next-line no-self-compare
    return value === value ? $toString.call(this) : INVALID_DATE;
  });
}

},{"99":99}],161:[function(_dereq_,module,exports){
// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
var $export = _dereq_(43);

$export($export.P, 'Function', { bind: _dereq_(27) });

},{"27":27,"43":43}],162:[function(_dereq_,module,exports){
'use strict';
var isObject = _dereq_(62);
var getPrototypeOf = _dereq_(86);
var HAS_INSTANCE = _dereq_(133)('hasInstance');
var FunctionProto = Function.prototype;
// 19.2.3.6 Function.prototype[@@hasInstance](V)
if (!(HAS_INSTANCE in FunctionProto)) _dereq_(80).f(FunctionProto, HAS_INSTANCE, { value: function (O) {
  if (typeof this != 'function' || !isObject(O)) return false;
  if (!isObject(this.prototype)) return O instanceof this;
  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
  while (O = getPrototypeOf(O)) if (this.prototype === O) return true;
  return false;
} });

},{"133":133,"62":62,"80":80,"86":86}],163:[function(_dereq_,module,exports){
var dP = _dereq_(80).f;
var FProto = Function.prototype;
var nameRE = /^\s*function ([^ (]*)/;
var NAME = 'name';

// 19.2.4.2 name
NAME in FProto || _dereq_(39) && dP(FProto, NAME, {
  configurable: true,
  get: function () {
    try {
      return ('' + this).match(nameRE)[1];
    } catch (e) {
      return '';
    }
  }
});

},{"39":39,"80":80}],164:[function(_dereq_,module,exports){
'use strict';
var strong = _dereq_(30);
var validate = _dereq_(130);
var MAP = 'Map';

// 23.1 Map Objects
module.exports = _dereq_(32)(MAP, function (get) {
  return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.1.3.6 Map.prototype.get(key)
  get: function get(key) {
    var entry = strong.getEntry(validate(this, MAP), key);
    return entry && entry.v;
  },
  // 23.1.3.9 Map.prototype.set(key, value)
  set: function set(key, value) {
    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
  }
}, strong, true);

},{"130":130,"30":30,"32":32}],165:[function(_dereq_,module,exports){
// 20.2.2.3 Math.acosh(x)
var $export = _dereq_(43);
var log1p = _dereq_(73);
var sqrt = Math.sqrt;
var $acosh = Math.acosh;

$export($export.S + $export.F * !($acosh
  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
  && Math.floor($acosh(Number.MAX_VALUE)) == 710
  // Tor Browser bug: Math.acosh(Infinity) -> NaN
  && $acosh(Infinity) == Infinity
), 'Math', {
  acosh: function acosh(x) {
    return (x = +x) < 1 ? NaN : x > 94906265.62425156
      ? Math.log(x) + Math.LN2
      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
  }
});

},{"43":43,"73":73}],166:[function(_dereq_,module,exports){
// 20.2.2.5 Math.asinh(x)
var $export = _dereq_(43);
var $asinh = Math.asinh;

function asinh(x) {
  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
}

// Tor Browser bug: Math.asinh(0) -> -0
$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', { asinh: asinh });

},{"43":43}],167:[function(_dereq_,module,exports){
// 20.2.2.7 Math.atanh(x)
var $export = _dereq_(43);
var $atanh = Math.atanh;

// Tor Browser bug: Math.atanh(-0) -> 0
$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
  atanh: function atanh(x) {
    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
  }
});

},{"43":43}],168:[function(_dereq_,module,exports){
// 20.2.2.9 Math.cbrt(x)
var $export = _dereq_(43);
var sign = _dereq_(74);

$export($export.S, 'Math', {
  cbrt: function cbrt(x) {
    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
  }
});

},{"43":43,"74":74}],169:[function(_dereq_,module,exports){
// 20.2.2.11 Math.clz32(x)
var $export = _dereq_(43);

$export($export.S, 'Math', {
  clz32: function clz32(x) {
    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
  }
});

},{"43":43}],170:[function(_dereq_,module,exports){
// 20.2.2.12 Math.cosh(x)
var $export = _dereq_(43);
var exp = Math.exp;

$export($export.S, 'Math', {
  cosh: function cosh(x) {
    return (exp(x = +x) + exp(-x)) / 2;
  }
});

},{"43":43}],171:[function(_dereq_,module,exports){
// 20.2.2.14 Math.expm1(x)
var $export = _dereq_(43);
var $expm1 = _dereq_(71);

$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', { expm1: $expm1 });

},{"43":43,"71":71}],172:[function(_dereq_,module,exports){
// 20.2.2.16 Math.fround(x)
var $export = _dereq_(43);

$export($export.S, 'Math', { fround: _dereq_(72) });

},{"43":43,"72":72}],173:[function(_dereq_,module,exports){
// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
var $export = _dereq_(43);
var abs = Math.abs;

$export($export.S, 'Math', {
  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars
    var sum = 0;
    var i = 0;
    var aLen = arguments.length;
    var larg = 0;
    var arg, div;
    while (i < aLen) {
      arg = abs(arguments[i++]);
      if (larg < arg) {
        div = larg / arg;
        sum = sum * div * div + 1;
        larg = arg;
      } else if (arg > 0) {
        div = arg / larg;
        sum += div * div;
      } else sum += arg;
    }
    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
  }
});

},{"43":43}],174:[function(_dereq_,module,exports){
// 20.2.2.18 Math.imul(x, y)
var $export = _dereq_(43);
var $imul = Math.imul;

// some WebKit versions fails with big numbers, some has wrong arity
$export($export.S + $export.F * _dereq_(45)(function () {
  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
}), 'Math', {
  imul: function imul(x, y) {
    var UINT16 = 0xffff;
    var xn = +x;
    var yn = +y;
    var xl = UINT16 & xn;
    var yl = UINT16 & yn;
    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
  }
});

},{"43":43,"45":45}],175:[function(_dereq_,module,exports){
// 20.2.2.21 Math.log10(x)
var $export = _dereq_(43);

$export($export.S, 'Math', {
  log10: function log10(x) {
    return Math.log(x) * Math.LOG10E;
  }
});

},{"43":43}],176:[function(_dereq_,module,exports){
// 20.2.2.20 Math.log1p(x)
var $export = _dereq_(43);

$export($export.S, 'Math', { log1p: _dereq_(73) });

},{"43":43,"73":73}],177:[function(_dereq_,module,exports){
// 20.2.2.22 Math.log2(x)
var $export = _dereq_(43);

$export($export.S, 'Math', {
  log2: function log2(x) {
    return Math.log(x) / Math.LN2;
  }
});

},{"43":43}],178:[function(_dereq_,module,exports){
// 20.2.2.28 Math.sign(x)
var $export = _dereq_(43);

$export($export.S, 'Math', { sign: _dereq_(74) });

},{"43":43,"74":74}],179:[function(_dereq_,module,exports){
// 20.2.2.30 Math.sinh(x)
var $export = _dereq_(43);
var expm1 = _dereq_(71);
var exp = Math.exp;

// V8 near Chromium 38 has a problem with very small numbers
$export($export.S + $export.F * _dereq_(45)(function () {
  return !Math.sinh(-2e-17) != -2e-17;
}), 'Math', {
  sinh: function sinh(x) {
    return Math.abs(x = +x) < 1
      ? (expm1(x) - expm1(-x)) / 2
      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
  }
});

},{"43":43,"45":45,"71":71}],180:[function(_dereq_,module,exports){
// 20.2.2.33 Math.tanh(x)
var $export = _dereq_(43);
var expm1 = _dereq_(71);
var exp = Math.exp;

$export($export.S, 'Math', {
  tanh: function tanh(x) {
    var a = expm1(x = +x);
    var b = expm1(-x);
    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
  }
});

},{"43":43,"71":71}],181:[function(_dereq_,module,exports){
// 20.2.2.34 Math.trunc(x)
var $export = _dereq_(43);

$export($export.S, 'Math', {
  trunc: function trunc(it) {
    return (it > 0 ? Math.floor : Math.ceil)(it);
  }
});

},{"43":43}],182:[function(_dereq_,module,exports){
'use strict';
var global = _dereq_(51);
var has = _dereq_(52);
var cof = _dereq_(29);
var inheritIfRequired = _dereq_(56);
var toPrimitive = _dereq_(124);
var fails = _dereq_(45);
var gOPN = _dereq_(84).f;
var gOPD = _dereq_(82).f;
var dP = _dereq_(80).f;
var $trim = _dereq_(115).trim;
var NUMBER = 'Number';
var $Number = global[NUMBER];
var Base = $Number;
var proto = $Number.prototype;
// Opera ~12 has broken Object#toString
var BROKEN_COF = cof(_dereq_(79)(proto)) == NUMBER;
var TRIM = 'trim' in String.prototype;

// 7.1.3 ToNumber(argument)
var toNumber = function (argument) {
  var it = toPrimitive(argument, false);
  if (typeof it == 'string' && it.length > 2) {
    it = TRIM ? it.trim() : $trim(it, 3);
    var first = it.charCodeAt(0);
    var third, radix, maxCode;
    if (first === 43 || first === 45) {
      third = it.charCodeAt(2);
      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
    } else if (first === 48) {
      switch (it.charCodeAt(1)) {
        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i
        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i
        default: return +it;
      }
      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {
        code = digits.charCodeAt(i);
        // parseInt parses a string to a first unavailable symbol
        // but ToNumber should return NaN if a string contains unavailable symbols
        if (code < 48 || code > maxCode) return NaN;
      } return parseInt(digits, radix);
    }
  } return +it;
};

if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {
  $Number = function Number(value) {
    var it = arguments.length < 1 ? 0 : value;
    var that = this;
    return that instanceof $Number
      // check on 1..constructor(foo) case
      && (BROKEN_COF ? fails(function () { proto.valueOf.call(that); }) : cof(that) != NUMBER)
        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
  };
  for (var keys = _dereq_(39) ? gOPN(Base) : (
    // ES3:
    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
    // ES6 (in case, if modules with ES6 Number statics required before):
    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
  ).split(','), j = 0, key; keys.length > j; j++) {
    if (has(Base, key = keys[j]) && !has($Number, key)) {
      dP($Number, key, gOPD(Base, key));
    }
  }
  $Number.prototype = proto;
  proto.constructor = $Number;
  _dereq_(99)(global, NUMBER, $Number);
}

},{"115":115,"124":124,"29":29,"39":39,"45":45,"51":51,"52":52,"56":56,"79":79,"80":80,"82":82,"84":84,"99":99}],183:[function(_dereq_,module,exports){
// 20.1.2.1 Number.EPSILON
var $export = _dereq_(43);

$export($export.S, 'Number', { EPSILON: Math.pow(2, -52) });

},{"43":43}],184:[function(_dereq_,module,exports){
// 20.1.2.2 Number.isFinite(number)
var $export = _dereq_(43);
var _isFinite = _dereq_(51).isFinite;

$export($export.S, 'Number', {
  isFinite: function isFinite(it) {
    return typeof it == 'number' && _isFinite(it);
  }
});

},{"43":43,"51":51}],185:[function(_dereq_,module,exports){
// 20.1.2.3 Number.isInteger(number)
var $export = _dereq_(43);

$export($export.S, 'Number', { isInteger: _dereq_(61) });

},{"43":43,"61":61}],186:[function(_dereq_,module,exports){
// 20.1.2.4 Number.isNaN(number)
var $export = _dereq_(43);

$export($export.S, 'Number', {
  isNaN: function isNaN(number) {
    // eslint-disable-next-line no-self-compare
    return number != number;
  }
});

},{"43":43}],187:[function(_dereq_,module,exports){
// 20.1.2.5 Number.isSafeInteger(number)
var $export = _dereq_(43);
var isInteger = _dereq_(61);
var abs = Math.abs;

$export($export.S, 'Number', {
  isSafeInteger: function isSafeInteger(number) {
    return isInteger(number) && abs(number) <= 0x1fffffffffffff;
  }
});

},{"43":43,"61":61}],188:[function(_dereq_,module,exports){
// 20.1.2.6 Number.MAX_SAFE_INTEGER
var $export = _dereq_(43);

$export($export.S, 'Number', { MAX_SAFE_INTEGER: 0x1fffffffffffff });

},{"43":43}],189:[function(_dereq_,module,exports){
// 20.1.2.10 Number.MIN_SAFE_INTEGER
var $export = _dereq_(43);

$export($export.S, 'Number', { MIN_SAFE_INTEGER: -0x1fffffffffffff });

},{"43":43}],190:[function(_dereq_,module,exports){
var $export = _dereq_(43);
var $parseFloat = _dereq_(93);
// 20.1.2.12 Number.parseFloat(string)
$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', { parseFloat: $parseFloat });

},{"43":43,"93":93}],191:[function(_dereq_,module,exports){
var $export = _dereq_(43);
var $parseInt = _dereq_(94);
// 20.1.2.13 Number.parseInt(string, radix)
$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', { parseInt: $parseInt });

},{"43":43,"94":94}],192:[function(_dereq_,module,exports){
'use strict';
var $export = _dereq_(43);
var toInteger = _dereq_(120);
var aNumberValue = _dereq_(15);
var repeat = _dereq_(114);
var $toFixed = 1.0.toFixed;
var floor = Math.floor;
var data = [0, 0, 0, 0, 0, 0];
var ERROR = 'Number.toFixed: incorrect invocation!';
var ZERO = '0';

var multiply = function (n, c) {
  var i = -1;
  var c2 = c;
  while (++i < 6) {
    c2 += n * data[i];
    data[i] = c2 % 1e7;
    c2 = floor(c2 / 1e7);
  }
};
var divide = function (n) {
  var i = 6;
  var c = 0;
  while (--i >= 0) {
    c += data[i];
    data[i] = floor(c / n);
    c = (c % n) * 1e7;
  }
};
var numToString = function () {
  var i = 6;
  var s = '';
  while (--i >= 0) {
    if (s !== '' || i === 0 || data[i] !== 0) {
      var t = String(data[i]);
      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
    }
  } return s;
};
var pow = function (x, n, acc) {
  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
};
var log = function (x) {
  var n = 0;
  var x2 = x;
  while (x2 >= 4096) {
    n += 12;
    x2 /= 4096;
  }
  while (x2 >= 2) {
    n += 1;
    x2 /= 2;
  } return n;
};

$export($export.P + $export.F * (!!$toFixed && (
  0.00008.toFixed(3) !== '0.000' ||
  0.9.toFixed(0) !== '1' ||
  1.255.toFixed(2) !== '1.25' ||
  1000000000000000128.0.toFixed(0) !== '1000000000000000128'
) || !_dereq_(45)(function () {
  // V8 ~ Android 4.3-
  $toFixed.call({});
})), 'Number', {
  toFixed: function toFixed(fractionDigits) {
    var x = aNumberValue(this, ERROR);
    var f = toInteger(fractionDigits);
    var s = '';
    var m = ZERO;
    var e, z, j, k;
    if (f < 0 || f > 20) throw RangeError(ERROR);
    // eslint-disable-next-line no-self-compare
    if (x != x) return 'NaN';
    if (x <= -1e21 || x >= 1e21) return String(x);
    if (x < 0) {
      s = '-';
      x = -x;
    }
    if (x > 1e-21) {
      e = log(x * pow(2, 69, 1)) - 69;
      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
      z *= 0x10000000000000;
      e = 52 - e;
      if (e > 0) {
        multiply(0, z);
        j = f;
        while (j >= 7) {
          multiply(1e7, 0);
          j -= 7;
        }
        multiply(pow(10, j, 1), 0);
        j = e - 1;
        while (j >= 23) {
          divide(1 << 23);
          j -= 23;
        }
        divide(1 << j);
        multiply(1, 1);
        divide(2);
        m = numToString();
      } else {
        multiply(0, z);
        multiply(1 << -e, 0);
        m = numToString() + repeat.call(ZERO, f);
      }
    }
    if (f > 0) {
      k = m.length;
      m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
    } else {
      m = s + m;
    } return m;
  }
});

},{"114":114,"120":120,"15":15,"43":43,"45":45}],193:[function(_dereq_,module,exports){
'use strict';
var $export = _dereq_(43);
var $fails = _dereq_(45);
var aNumberValue = _dereq_(15);
var $toPrecision = 1.0.toPrecision;

$export($export.P + $export.F * ($fails(function () {
  // IE7-
  return $toPrecision.call(1, undefined) !== '1';
}) || !$fails(function () {
  // V8 ~ Android 4.3-
  $toPrecision.call({});
})), 'Number', {
  toPrecision: function toPrecision(precision) {
    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision);
  }
});

},{"15":15,"43":43,"45":45}],194:[function(_dereq_,module,exports){
// 19.1.3.1 Object.assign(target, source)
var $export = _dereq_(43);

$export($export.S + $export.F, 'Object', { assign: _dereq_(78) });

},{"43":43,"78":78}],195:[function(_dereq_,module,exports){
var $export = _dereq_(43);
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
$export($export.S, 'Object', { create: _dereq_(79) });

},{"43":43,"79":79}],196:[function(_dereq_,module,exports){
var $export = _dereq_(43);
// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
$export($export.S + $export.F * !_dereq_(39), 'Object', { defineProperties: _dereq_(81) });

},{"39":39,"43":43,"81":81}],197:[function(_dereq_,module,exports){
var $export = _dereq_(43);
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !_dereq_(39), 'Object', { defineProperty: _dereq_(80).f });

},{"39":39,"43":43,"80":80}],198:[function(_dereq_,module,exports){
// 19.1.2.5 Object.freeze(O)
var isObject = _dereq_(62);
var meta = _dereq_(75).onFreeze;

_dereq_(90)('freeze', function ($freeze) {
  return function freeze(it) {
    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
  };
});

},{"62":62,"75":75,"90":90}],199:[function(_dereq_,module,exports){
// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
var toIObject = _dereq_(121);
var $getOwnPropertyDescriptor = _dereq_(82).f;

_dereq_(90)('getOwnPropertyDescriptor', function () {
  return function getOwnPropertyDescriptor(it, key) {
    return $getOwnPropertyDescriptor(toIObject(it), key);
  };
});

},{"121":121,"82":82,"90":90}],200:[function(_dereq_,module,exports){
// 19.1.2.7 Object.getOwnPropertyNames(O)
_dereq_(90)('getOwnPropertyNames', function () {
  return _dereq_(83).f;
});

},{"83":83,"90":90}],201:[function(_dereq_,module,exports){
// 19.1.2.9 Object.getPrototypeOf(O)
var toObject = _dereq_(123);
var $getPrototypeOf = _dereq_(86);

_dereq_(90)('getPrototypeOf', function () {
  return function getPrototypeOf(it) {
    return $getPrototypeOf(toObject(it));
  };
});

},{"123":123,"86":86,"90":90}],202:[function(_dereq_,module,exports){
// 19.1.2.11 Object.isExtensible(O)
var isObject = _dereq_(62);

_dereq_(90)('isExtensible', function ($isExtensible) {
  return function isExtensible(it) {
    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
  };
});

},{"62":62,"90":90}],203:[function(_dereq_,module,exports){
// 19.1.2.12 Object.isFrozen(O)
var isObject = _dereq_(62);

_dereq_(90)('isFrozen', function ($isFrozen) {
  return function isFrozen(it) {
    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
  };
});

},{"62":62,"90":90}],204:[function(_dereq_,module,exports){
// 19.1.2.13 Object.isSealed(O)
var isObject = _dereq_(62);

_dereq_(90)('isSealed', function ($isSealed) {
  return function isSealed(it) {
    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
  };
});

},{"62":62,"90":90}],205:[function(_dereq_,module,exports){
// 19.1.3.10 Object.is(value1, value2)
var $export = _dereq_(43);
$export($export.S, 'Object', { is: _dereq_(102) });

},{"102":102,"43":43}],206:[function(_dereq_,module,exports){
// 19.1.2.14 Object.keys(O)
var toObject = _dereq_(123);
var $keys = _dereq_(88);

_dereq_(90)('keys', function () {
  return function keys(it) {
    return $keys(toObject(it));
  };
});

},{"123":123,"88":88,"90":90}],207:[function(_dereq_,module,exports){
// 19.1.2.15 Object.preventExtensions(O)
var isObject = _dereq_(62);
var meta = _dereq_(75).onFreeze;

_dereq_(90)('preventExtensions', function ($preventExtensions) {
  return function preventExtensions(it) {
    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
  };
});

},{"62":62,"75":75,"90":90}],208:[function(_dereq_,module,exports){
// 19.1.2.17 Object.seal(O)
var isObject = _dereq_(62);
var meta = _dereq_(75).onFreeze;

_dereq_(90)('seal', function ($seal) {
  return function seal(it) {
    return $seal && isObject(it) ? $seal(meta(it)) : it;
  };
});

},{"62":62,"75":75,"90":90}],209:[function(_dereq_,module,exports){
// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = _dereq_(43);
$export($export.S, 'Object', { setPrototypeOf: _dereq_(103).set });

},{"103":103,"43":43}],210:[function(_dereq_,module,exports){
'use strict';
// 19.1.3.6 Object.prototype.toString()
var classof = _dereq_(28);
var test = {};
test[_dereq_(133)('toStringTag')] = 'z';
if (test + '' != '[object z]') {
  _dereq_(99)(Object.prototype, 'toString', function toString() {
    return '[object ' + classof(this) + ']';
  }, true);
}

},{"133":133,"28":28,"99":99}],211:[function(_dereq_,module,exports){
var $export = _dereq_(43);
var $parseFloat = _dereq_(93);
// 18.2.4 parseFloat(string)
$export($export.G + $export.F * (parseFloat != $parseFloat), { parseFloat: $parseFloat });

},{"43":43,"93":93}],212:[function(_dereq_,module,exports){
var $export = _dereq_(43);
var $parseInt = _dereq_(94);
// 18.2.5 parseInt(string, radix)
$export($export.G + $export.F * (parseInt != $parseInt), { parseInt: $parseInt });

},{"43":43,"94":94}],213:[function(_dereq_,module,exports){
'use strict';
var LIBRARY = _dereq_(70);
var global = _dereq_(51);
var ctx = _dereq_(35);
var classof = _dereq_(28);
var $export = _dereq_(43);
var isObject = _dereq_(62);
var aFunction = _dereq_(14);
var anInstance = _dereq_(18);
var forOf = _dereq_(49);
var speciesConstructor = _dereq_(108);
var task = _dereq_(117).set;
var microtask = _dereq_(76)();
var newPromiseCapabilityModule = _dereq_(77);
var perform = _dereq_(95);
var userAgent = _dereq_(129);
var promiseResolve = _dereq_(96);
var PROMISE = 'Promise';
var TypeError = global.TypeError;
var process = global.process;
var versions = process && process.versions;
var v8 = versions && versions.v8 || '';
var $Promise = global[PROMISE];
var isNode = classof(process) == 'process';
var empty = function () { /* empty */ };
var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;

var USE_NATIVE = !!function () {
  try {
    // correct subclassing with @@species support
    var promise = $Promise.resolve(1);
    var FakePromise = (promise.constructor = {})[_dereq_(133)('species')] = function (exec) {
      exec(empty, empty);
    };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function')
      && promise.then(empty) instanceof FakePromise
      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
      // we can't detect it synchronously, so just check versions
      && v8.indexOf('6.6') !== 0
      && userAgent.indexOf('Chrome/66') === -1;
  } catch (e) { /* empty */ }
}();

// helpers
var isThenable = function (it) {
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var notify = function (promise, isReject) {
  if (promise._n) return;
  promise._n = true;
  var chain = promise._c;
  microtask(function () {
    var value = promise._v;
    var ok = promise._s == 1;
    var i = 0;
    var run = function (reaction) {
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then, exited;
      try {
        if (handler) {
          if (!ok) {
            if (promise._h == 2) onHandleUnhandled(promise);
            promise._h = 1;
          }
          if (handler === true) result = value;
          else {
            if (domain) domain.enter();
            result = handler(value); // may throw
            if (domain) {
              domain.exit();
              exited = true;
            }
          }
          if (result === reaction.promise) {
            reject(TypeError('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (e) {
        if (domain && !exited) domain.exit();
        reject(e);
      }
    };
    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if (isReject && !promise._h) onUnhandled(promise);
  });
};
var onUnhandled = function (promise) {
  task.call(global, function () {
    var value = promise._v;
    var unhandled = isUnhandled(promise);
    var result, handler, console;
    if (unhandled) {
      result = perform(function () {
        if (isNode) {
          process.emit('unhandledRejection', value, promise);
        } else if (handler = global.onunhandledrejection) {
          handler({ promise: promise, reason: value });
        } else if ((console = global.console) && console.error) {
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if (unhandled && result.e) throw result.v;
  });
};
var isUnhandled = function (promise) {
  return promise._h !== 1 && (promise._a || promise._c).length === 0;
};
var onHandleUnhandled = function (promise) {
  task.call(global, function () {
    var handler;
    if (isNode) {
      process.emit('rejectionHandled', promise);
    } else if (handler = global.onrejectionhandled) {
      handler({ promise: promise, reason: promise._v });
    }
  });
};
var $reject = function (value) {
  var promise = this;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if (!promise._a) promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function (value) {
  var promise = this;
  var then;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if (promise === value) throw TypeError("Promise can't be resolved itself");
    if (then = isThenable(value)) {
      microtask(function () {
        var wrapper = { _w: promise, _d: false }; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch (e) {
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch (e) {
    $reject.call({ _w: promise, _d: false }, e); // wrap
  }
};

// constructor polyfill
if (!USE_NATIVE) {
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor) {
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch (err) {
      $reject.call(this, err);
    }
  };
  // eslint-disable-next-line no-unused-vars
  Internal = function Promise(executor) {
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = _dereq_(98)($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected) {
      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if (this._a) this._a.push(reaction);
      if (this._s) notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function (onRejected) {
      return this.then(undefined, onRejected);
    }
  });
  OwnPromiseCapability = function () {
    var promise = new Internal();
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject = ctx($reject, promise, 1);
  };
  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === $Promise || C === Wrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
_dereq_(105)($Promise, PROMISE);
_dereq_(104)(PROMISE);
Wrapper = _dereq_(33)[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    var $$reject = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x) {
    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
  }
});
$export($export.S + $export.F * !(USE_NATIVE && _dereq_(67)(function (iter) {
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var values = [];
      var index = 0;
      var remaining = 1;
      forOf(iterable, false, function (promise) {
        var $index = index++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.e) reject(result.v);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = perform(function () {
      forOf(iterable, false, function (promise) {
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if (result.e) reject(result.v);
    return capability.promise;
  }
});

},{"104":104,"105":105,"108":108,"117":117,"129":129,"133":133,"14":14,"18":18,"28":28,"33":33,"35":35,"43":43,"49":49,"51":51,"62":62,"67":67,"70":70,"76":76,"77":77,"95":95,"96":96,"98":98}],214:[function(_dereq_,module,exports){
// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
var $export = _dereq_(43);
var aFunction = _dereq_(14);
var anObject = _dereq_(19);
var rApply = (_dereq_(51).Reflect || {}).apply;
var fApply = Function.apply;
// MS Edge argumentsList argument is optional
$export($export.S + $export.F * !_dereq_(45)(function () {
  rApply(function () { /* empty */ });
}), 'Reflect', {
  apply: function apply(target, thisArgument, argumentsList) {
    var T = aFunction(target);
    var L = anObject(argumentsList);
    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
  }
});

},{"14":14,"19":19,"43":43,"45":45,"51":51}],215:[function(_dereq_,module,exports){
// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
var $export = _dereq_(43);
var create = _dereq_(79);
var aFunction = _dereq_(14);
var anObject = _dereq_(19);
var isObject = _dereq_(62);
var fails = _dereq_(45);
var bind = _dereq_(27);
var rConstruct = (_dereq_(51).Reflect || {}).construct;

// MS Edge supports only 2 arguments and argumentsList argument is optional
// FF Nightly sets third argument as `new.target`, but does not create `this` from it
var NEW_TARGET_BUG = fails(function () {
  function F() { /* empty */ }
  return !(rConstruct(function () { /* empty */ }, [], F) instanceof F);
});
var ARGS_BUG = !fails(function () {
  rConstruct(function () { /* empty */ });
});

$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
  construct: function construct(Target, args /* , newTarget */) {
    aFunction(Target);
    anObject(args);
    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);
    if (Target == newTarget) {
      // w/o altered newTarget, optimization for 0-4 arguments
      switch (args.length) {
        case 0: return new Target();
        case 1: return new Target(args[0]);
        case 2: return new Target(args[0], args[1]);
        case 3: return new Target(args[0], args[1], args[2]);
        case 4: return new Target(args[0], args[1], args[2], args[3]);
      }
      // w/o altered newTarget, lot of arguments case
      var $args = [null];
      $args.push.apply($args, args);
      return new (bind.apply(Target, $args))();
    }
    // with altered newTarget, not support built-in constructors
    var proto = newTarget.prototype;
    var instance = create(isObject(proto) ? proto : Object.prototype);
    var result = Function.apply.call(Target, instance, args);
    return isObject(result) ? result : instance;
  }
});

},{"14":14,"19":19,"27":27,"43":43,"45":45,"51":51,"62":62,"79":79}],216:[function(_dereq_,module,exports){
// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
var dP = _dereq_(80);
var $export = _dereq_(43);
var anObject = _dereq_(19);
var toPrimitive = _dereq_(124);

// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
$export($export.S + $export.F * _dereq_(45)(function () {
  // eslint-disable-next-line no-undef
  Reflect.defineProperty(dP.f({}, 1, { value: 1 }), 1, { value: 2 });
}), 'Reflect', {
  defineProperty: function defineProperty(target, propertyKey, attributes) {
    anObject(target);
    propertyKey = toPrimitive(propertyKey, true);
    anObject(attributes);
    try {
      dP.f(target, propertyKey, attributes);
      return true;
    } catch (e) {
      return false;
    }
  }
});

},{"124":124,"19":19,"43":43,"45":45,"80":80}],217:[function(_dereq_,module,exports){
// 26.1.4 Reflect.deleteProperty(target, propertyKey)
var $export = _dereq_(43);
var gOPD = _dereq_(82).f;
var anObject = _dereq_(19);

$export($export.S, 'Reflect', {
  deleteProperty: function deleteProperty(target, propertyKey) {
    var desc = gOPD(anObject(target), propertyKey);
    return desc && !desc.configurable ? false : delete target[propertyKey];
  }
});

},{"19":19,"43":43,"82":82}],218:[function(_dereq_,module,exports){
'use strict';
// 26.1.5 Reflect.enumerate(target)
var $export = _dereq_(43);
var anObject = _dereq_(19);
var Enumerate = function (iterated) {
  this._t = anObject(iterated); // target
  this._i = 0;                  // next index
  var keys = this._k = [];      // keys
  var key;
  for (key in iterated) keys.push(key);
};
_dereq_(65)(Enumerate, 'Object', function () {
  var that = this;
  var keys = that._k;
  var key;
  do {
    if (that._i >= keys.length) return { value: undefined, done: true };
  } while (!((key = keys[that._i++]) in that._t));
  return { value: key, done: false };
});

$export($export.S, 'Reflect', {
  enumerate: function enumerate(target) {
    return new Enumerate(target);
  }
});

},{"19":19,"43":43,"65":65}],219:[function(_dereq_,module,exports){
// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
var gOPD = _dereq_(82);
var $export = _dereq_(43);
var anObject = _dereq_(19);

$export($export.S, 'Reflect', {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
    return gOPD.f(anObject(target), propertyKey);
  }
});

},{"19":19,"43":43,"82":82}],220:[function(_dereq_,module,exports){
// 26.1.8 Reflect.getPrototypeOf(target)
var $export = _dereq_(43);
var getProto = _dereq_(86);
var anObject = _dereq_(19);

$export($export.S, 'Reflect', {
  getPrototypeOf: function getPrototypeOf(target) {
    return getProto(anObject(target));
  }
});

},{"19":19,"43":43,"86":86}],221:[function(_dereq_,module,exports){
// 26.1.6 Reflect.get(target, propertyKey [, receiver])
var gOPD = _dereq_(82);
var getPrototypeOf = _dereq_(86);
var has = _dereq_(52);
var $export = _dereq_(43);
var isObject = _dereq_(62);
var anObject = _dereq_(19);

function get(target, propertyKey /* , receiver */) {
  var receiver = arguments.length < 3 ? target : arguments[2];
  var desc, proto;
  if (anObject(target) === receiver) return target[propertyKey];
  if (desc = gOPD.f(target, propertyKey)) return has(desc, 'value')
    ? desc.value
    : desc.get !== undefined
      ? desc.get.call(receiver)
      : undefined;
  if (isObject(proto = getPrototypeOf(target))) return get(proto, propertyKey, receiver);
}

$export($export.S, 'Reflect', { get: get });

},{"19":19,"43":43,"52":52,"62":62,"82":82,"86":86}],222:[function(_dereq_,module,exports){
// 26.1.9 Reflect.has(target, propertyKey)
var $export = _dereq_(43);

$export($export.S, 'Reflect', {
  has: function has(target, propertyKey) {
    return propertyKey in target;
  }
});

},{"43":43}],223:[function(_dereq_,module,exports){
// 26.1.10 Reflect.isExtensible(target)
var $export = _dereq_(43);
var anObject = _dereq_(19);
var $isExtensible = Object.isExtensible;

$export($export.S, 'Reflect', {
  isExtensible: function isExtensible(target) {
    anObject(target);
    return $isExtensible ? $isExtensible(target) : true;
  }
});

},{"19":19,"43":43}],224:[function(_dereq_,module,exports){
// 26.1.11 Reflect.ownKeys(target)
var $export = _dereq_(43);

$export($export.S, 'Reflect', { ownKeys: _dereq_(92) });

},{"43":43,"92":92}],225:[function(_dereq_,module,exports){
// 26.1.12 Reflect.preventExtensions(target)
var $export = _dereq_(43);
var anObject = _dereq_(19);
var $preventExtensions = Object.preventExtensions;

$export($export.S, 'Reflect', {
  preventExtensions: function preventExtensions(target) {
    anObject(target);
    try {
      if ($preventExtensions) $preventExtensions(target);
      return true;
    } catch (e) {
      return false;
    }
  }
});

},{"19":19,"43":43}],226:[function(_dereq_,module,exports){
// 26.1.14 Reflect.setPrototypeOf(target, proto)
var $export = _dereq_(43);
var setProto = _dereq_(103);

if (setProto) $export($export.S, 'Reflect', {
  setPrototypeOf: function setPrototypeOf(target, proto) {
    setProto.check(target, proto);
    try {
      setProto.set(target, proto);
      return true;
    } catch (e) {
      return false;
    }
  }
});

},{"103":103,"43":43}],227:[function(_dereq_,module,exports){
// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
var dP = _dereq_(80);
var gOPD = _dereq_(82);
var getPrototypeOf = _dereq_(86);
var has = _dereq_(52);
var $export = _dereq_(43);
var createDesc = _dereq_(97);
var anObject = _dereq_(19);
var isObject = _dereq_(62);

function set(target, propertyKey, V /* , receiver */) {
  var receiver = arguments.length < 4 ? target : arguments[3];
  var ownDesc = gOPD.f(anObject(target), propertyKey);
  var existingDescriptor, proto;
  if (!ownDesc) {
    if (isObject(proto = getPrototypeOf(target))) {
      return set(proto, propertyKey, V, receiver);
    }
    ownDesc = createDesc(0);
  }
  if (has(ownDesc, 'value')) {
    if (ownDesc.writable === false || !isObject(receiver)) return false;
    if (existingDescriptor = gOPD.f(receiver, propertyKey)) {
      if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;
      existingDescriptor.value = V;
      dP.f(receiver, propertyKey, existingDescriptor);
    } else dP.f(receiver, propertyKey, createDesc(0, V));
    return true;
  }
  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
}

$export($export.S, 'Reflect', { set: set });

},{"19":19,"43":43,"52":52,"62":62,"80":80,"82":82,"86":86,"97":97}],228:[function(_dereq_,module,exports){
var global = _dereq_(51);
var inheritIfRequired = _dereq_(56);
var dP = _dereq_(80).f;
var gOPN = _dereq_(84).f;
var isRegExp = _dereq_(63);
var $flags = _dereq_(47);
var $RegExp = global.RegExp;
var Base = $RegExp;
var proto = $RegExp.prototype;
var re1 = /a/g;
var re2 = /a/g;
// "new" creates a new object, old webkit buggy here
var CORRECT_NEW = new $RegExp(re1) !== re1;

if (_dereq_(39) && (!CORRECT_NEW || _dereq_(45)(function () {
  re2[_dereq_(133)('match')] = false;
  // RegExp constructor can alter flags and IsRegExp works correct with @@match
  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
}))) {
  $RegExp = function RegExp(p, f) {
    var tiRE = this instanceof $RegExp;
    var piRE = isRegExp(p);
    var fiU = f === undefined;
    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p
      : inheritIfRequired(CORRECT_NEW
        ? new Base(piRE && !fiU ? p.source : p, f)
        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)
      , tiRE ? this : proto, $RegExp);
  };
  var proxy = function (key) {
    key in $RegExp || dP($RegExp, key, {
      configurable: true,
      get: function () { return Base[key]; },
      set: function (it) { Base[key] = it; }
    });
  };
  for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]);
  proto.constructor = $RegExp;
  $RegExp.prototype = proto;
  _dereq_(99)(global, 'RegExp', $RegExp);
}

_dereq_(104)('RegExp');

},{"104":104,"133":133,"39":39,"45":45,"47":47,"51":51,"56":56,"63":63,"80":80,"84":84,"99":99}],229:[function(_dereq_,module,exports){
'use strict';
var regexpExec = _dereq_(101);
_dereq_(43)({
  target: 'RegExp',
  proto: true,
  forced: regexpExec !== /./.exec
}, {
  exec: regexpExec
});

},{"101":101,"43":43}],230:[function(_dereq_,module,exports){
// 21.2.5.3 get RegExp.prototype.flags()
if (_dereq_(39) && /./g.flags != 'g') _dereq_(80).f(RegExp.prototype, 'flags', {
  configurable: true,
  get: _dereq_(47)
});

},{"39":39,"47":47,"80":80}],231:[function(_dereq_,module,exports){
'use strict';

var anObject = _dereq_(19);
var toLength = _dereq_(122);
var advanceStringIndex = _dereq_(17);
var regExpExec = _dereq_(100);

// @@match logic
_dereq_(46)('match', 1, function (defined, MATCH, $match, maybeCallNative) {
  return [
    // `String.prototype.match` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.match
    function match(regexp) {
      var O = defined(this);
      var fn = regexp == undefined ? undefined : regexp[MATCH];
      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
    },
    // `RegExp.prototype[@@match]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match
    function (regexp) {
      var res = maybeCallNative($match, regexp, this);
      if (res.done) return res.value;
      var rx = anObject(regexp);
      var S = String(this);
      if (!rx.global) return regExpExec(rx, S);
      var fullUnicode = rx.unicode;
      rx.lastIndex = 0;
      var A = [];
      var n = 0;
      var result;
      while ((result = regExpExec(rx, S)) !== null) {
        var matchStr = String(result[0]);
        A[n] = matchStr;
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
        n++;
      }
      return n === 0 ? null : A;
    }
  ];
});

},{"100":100,"122":122,"17":17,"19":19,"46":46}],232:[function(_dereq_,module,exports){
'use strict';

var anObject = _dereq_(19);
var toObject = _dereq_(123);
var toLength = _dereq_(122);
var toInteger = _dereq_(120);
var advanceStringIndex = _dereq_(17);
var regExpExec = _dereq_(100);
var max = Math.max;
var min = Math.min;
var floor = Math.floor;
var SUBSTITUTION_SYMBOLS = /\$([$&`']|\d\d?|<[^>]*>)/g;
var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&`']|\d\d?)/g;

var maybeToString = function (it) {
  return it === undefined ? it : String(it);
};

// @@replace logic
_dereq_(46)('replace', 2, function (defined, REPLACE, $replace, maybeCallNative) {
  return [
    // `String.prototype.replace` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.replace
    function replace(searchValue, replaceValue) {
      var O = defined(this);
      var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
      return fn !== undefined
        ? fn.call(searchValue, O, replaceValue)
        : $replace.call(String(O), searchValue, replaceValue);
    },
    // `RegExp.prototype[@@replace]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
    function (regexp, replaceValue) {
      var res = maybeCallNative($replace, regexp, this, replaceValue);
      if (res.done) return res.value;

      var rx = anObject(regexp);
      var S = String(this);
      var functionalReplace = typeof replaceValue === 'function';
      if (!functionalReplace) replaceValue = String(replaceValue);
      var global = rx.global;
      if (global) {
        var fullUnicode = rx.unicode;
        rx.lastIndex = 0;
      }
      var results = [];
      while (true) {
        var result = regExpExec(rx, S);
        if (result === null) break;
        results.push(result);
        if (!global) break;
        var matchStr = String(result[0]);
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
      }
      var accumulatedResult = '';
      var nextSourcePosition = 0;
      for (var i = 0; i < results.length; i++) {
        result = results[i];
        var matched = String(result[0]);
        var position = max(min(toInteger(result.index), S.length), 0);
        var captures = [];
        // NOTE: This is equivalent to
        //   captures = result.slice(1).map(maybeToString)
        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
        // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
        for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));
        var namedCaptures = result.groups;
        if (functionalReplace) {
          var replacerArgs = [matched].concat(captures, position, S);
          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
          var replacement = String(replaceValue.apply(undefined, replacerArgs));
        } else {
          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
        }
        if (position >= nextSourcePosition) {
          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
          nextSourcePosition = position + matched.length;
        }
      }
      return accumulatedResult + S.slice(nextSourcePosition);
    }
  ];

    // https://tc39.github.io/ecma262/#sec-getsubstitution
  function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
    var tailPos = position + matched.length;
    var m = captures.length;
    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
    if (namedCaptures !== undefined) {
      namedCaptures = toObject(namedCaptures);
      symbols = SUBSTITUTION_SYMBOLS;
    }
    return $replace.call(replacement, symbols, function (match, ch) {
      var capture;
      switch (ch.charAt(0)) {
        case '$': return '$';
        case '&': return matched;
        case '`': return str.slice(0, position);
        case "'": return str.slice(tailPos);
        case '<':
          capture = namedCaptures[ch.slice(1, -1)];
          break;
        default: // \d\d?
          var n = +ch;
          if (n === 0) return match;
          if (n > m) {
            var f = floor(n / 10);
            if (f === 0) return match;
            if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
            return match;
          }
          capture = captures[n - 1];
      }
      return capture === undefined ? '' : capture;
    });
  }
});

},{"100":100,"120":120,"122":122,"123":123,"17":17,"19":19,"46":46}],233:[function(_dereq_,module,exports){
'use strict';

var anObject = _dereq_(19);
var sameValue = _dereq_(102);
var regExpExec = _dereq_(100);

// @@search logic
_dereq_(46)('search', 1, function (defined, SEARCH, $search, maybeCallNative) {
  return [
    // `String.prototype.search` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.search
    function search(regexp) {
      var O = defined(this);
      var fn = regexp == undefined ? undefined : regexp[SEARCH];
      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
    },
    // `RegExp.prototype[@@search]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search
    function (regexp) {
      var res = maybeCallNative($search, regexp, this);
      if (res.done) return res.value;
      var rx = anObject(regexp);
      var S = String(this);
      var previousLastIndex = rx.lastIndex;
      if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;
      var result = regExpExec(rx, S);
      if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;
      return result === null ? -1 : result.index;
    }
  ];
});

},{"100":100,"102":102,"19":19,"46":46}],234:[function(_dereq_,module,exports){
'use strict';

var isRegExp = _dereq_(63);
var anObject = _dereq_(19);
var speciesConstructor = _dereq_(108);
var advanceStringIndex = _dereq_(17);
var toLength = _dereq_(122);
var callRegExpExec = _dereq_(100);
var regexpExec = _dereq_(101);
var fails = _dereq_(45);
var $min = Math.min;
var $push = [].push;
var $SPLIT = 'split';
var LENGTH = 'length';
var LAST_INDEX = 'lastIndex';
var MAX_UINT32 = 0xffffffff;

// babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError
var SUPPORTS_Y = !fails(function () { RegExp(MAX_UINT32, 'y'); });

// @@split logic
_dereq_(46)('split', 2, function (defined, SPLIT, $split, maybeCallNative) {
  var internalSplit;
  if (
    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
    ''[$SPLIT](/.?/)[LENGTH]
  ) {
    // based on es5-shim implementation, need to rework it
    internalSplit = function (separator, limit) {
      var string = String(this);
      if (separator === undefined && limit === 0) return [];
      // If `separator` is not a regex, use native split
      if (!isRegExp(separator)) return $split.call(string, separator, limit);
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') +
                  (separator.multiline ? 'm' : '') +
                  (separator.unicode ? 'u' : '') +
                  (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      var splitLimit = limit === undefined ? MAX_UINT32 : limit >>> 0;
      // Make `global` and avoid `lastIndex` issues by working with a copy
      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var match, lastIndex, lastLength;
      while (match = regexpExec.call(separatorCopy, string)) {
        lastIndex = separatorCopy[LAST_INDEX];
        if (lastIndex > lastLastIndex) {
          output.push(string.slice(lastLastIndex, match.index));
          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
          lastLength = match[0][LENGTH];
          lastLastIndex = lastIndex;
          if (output[LENGTH] >= splitLimit) break;
        }
        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
      }
      if (lastLastIndex === string[LENGTH]) {
        if (lastLength || !separatorCopy.test('')) output.push('');
      } else output.push(string.slice(lastLastIndex));
      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
    };
  // Chakra, V8
  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
    internalSplit = function (separator, limit) {
      return separator === undefined && limit === 0 ? [] : $split.call(this, separator, limit);
    };
  } else {
    internalSplit = $split;
  }

  return [
    // `String.prototype.split` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.split
    function split(separator, limit) {
      var O = defined(this);
      var splitter = separator == undefined ? undefined : separator[SPLIT];
      return splitter !== undefined
        ? splitter.call(separator, O, limit)
        : internalSplit.call(String(O), separator, limit);
    },
    // `RegExp.prototype[@@split]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
    //
    // NOTE: This cannot be properly polyfilled in engines that don't support
    // the 'y' flag.
    function (regexp, limit) {
      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== $split);
      if (res.done) return res.value;

      var rx = anObject(regexp);
      var S = String(this);
      var C = speciesConstructor(rx, RegExp);

      var unicodeMatching = rx.unicode;
      var flags = (rx.ignoreCase ? 'i' : '') +
                  (rx.multiline ? 'm' : '') +
                  (rx.unicode ? 'u' : '') +
                  (SUPPORTS_Y ? 'y' : 'g');

      // ^(? + rx + ) is needed, in combination with some S slicing, to
      // simulate the 'y' flag.
      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);
      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
      if (lim === 0) return [];
      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];
      var p = 0;
      var q = 0;
      var A = [];
      while (q < S.length) {
        splitter.lastIndex = SUPPORTS_Y ? q : 0;
        var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));
        var e;
        if (
          z === null ||
          (e = $min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p
        ) {
          q = advanceStringIndex(S, q, unicodeMatching);
        } else {
          A.push(S.slice(p, q));
          if (A.length === lim) return A;
          for (var i = 1; i <= z.length - 1; i++) {
            A.push(z[i]);
            if (A.length === lim) return A;
          }
          q = p = e;
        }
      }
      A.push(S.slice(p));
      return A;
    }
  ];
});

},{"100":100,"101":101,"108":108,"122":122,"17":17,"19":19,"45":45,"46":46,"63":63}],235:[function(_dereq_,module,exports){
'use strict';
_dereq_(230);
var anObject = _dereq_(19);
var $flags = _dereq_(47);
var DESCRIPTORS = _dereq_(39);
var TO_STRING = 'toString';
var $toString = /./[TO_STRING];

var define = function (fn) {
  _dereq_(99)(RegExp.prototype, TO_STRING, fn, true);
};

// 21.2.5.14 RegExp.prototype.toString()
if (_dereq_(45)(function () { return $toString.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {
  define(function toString() {
    var R = anObject(this);
    return '/'.concat(R.source, '/',
      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
  });
// FF44- RegExp#toString has a wrong name
} else if ($toString.name != TO_STRING) {
  define(function toString() {
    return $toString.call(this);
  });
}

},{"19":19,"230":230,"39":39,"45":45,"47":47,"99":99}],236:[function(_dereq_,module,exports){
'use strict';
var strong = _dereq_(30);
var validate = _dereq_(130);
var SET = 'Set';

// 23.2 Set Objects
module.exports = _dereq_(32)(SET, function (get) {
  return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.2.3.1 Set.prototype.add(value)
  add: function add(value) {
    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);
  }
}, strong);

},{"130":130,"30":30,"32":32}],237:[function(_dereq_,module,exports){
'use strict';
// B.2.3.2 String.prototype.anchor(name)
_dereq_(112)('anchor', function (createHTML) {
  return function anchor(name) {
    return createHTML(this, 'a', 'name', name);
  };
});

},{"112":112}],238:[function(_dereq_,module,exports){
'use strict';
// B.2.3.3 String.prototype.big()
_dereq_(112)('big', function (createHTML) {
  return function big() {
    return createHTML(this, 'big', '', '');
  };
});

},{"112":112}],239:[function(_dereq_,module,exports){
'use strict';
// B.2.3.4 String.prototype.blink()
_dereq_(112)('blink', function (createHTML) {
  return function blink() {
    return createHTML(this, 'blink', '', '');
  };
});

},{"112":112}],240:[function(_dereq_,module,exports){
'use strict';
// B.2.3.5 String.prototype.bold()
_dereq_(112)('bold', function (createHTML) {
  return function bold() {
    return createHTML(this, 'b', '', '');
  };
});

},{"112":112}],241:[function(_dereq_,module,exports){
'use strict';
var $export = _dereq_(43);
var $at = _dereq_(110)(false);
$export($export.P, 'String', {
  // 21.1.3.3 String.prototype.codePointAt(pos)
  codePointAt: function codePointAt(pos) {
    return $at(this, pos);
  }
});

},{"110":110,"43":43}],242:[function(_dereq_,module,exports){
// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])
'use strict';
var $export = _dereq_(43);
var toLength = _dereq_(122);
var context = _dereq_(111);
var ENDS_WITH = 'endsWith';
var $endsWith = ''[ENDS_WITH];

$export($export.P + $export.F * _dereq_(44)(ENDS_WITH), 'String', {
  endsWith: function endsWith(searchString /* , endPosition = @length */) {
    var that = context(this, searchString, ENDS_WITH);
    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
    var len = toLength(that.length);
    var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);
    var search = String(searchString);
    return $endsWith
      ? $endsWith.call(that, search, end)
      : that.slice(end - search.length, end) === search;
  }
});

},{"111":111,"122":122,"43":43,"44":44}],243:[function(_dereq_,module,exports){
'use strict';
// B.2.3.6 String.prototype.fixed()
_dereq_(112)('fixed', function (createHTML) {
  return function fixed() {
    return createHTML(this, 'tt', '', '');
  };
});

},{"112":112}],244:[function(_dereq_,module,exports){
'use strict';
// B.2.3.7 String.prototype.fontcolor(color)
_dereq_(112)('fontcolor', function (createHTML) {
  return function fontcolor(color) {
    return createHTML(this, 'font', 'color', color);
  };
});

},{"112":112}],245:[function(_dereq_,module,exports){
'use strict';
// B.2.3.8 String.prototype.fontsize(size)
_dereq_(112)('fontsize', function (createHTML) {
  return function fontsize(size) {
    return createHTML(this, 'font', 'size', size);
  };
});

},{"112":112}],246:[function(_dereq_,module,exports){
var $export = _dereq_(43);
var toAbsoluteIndex = _dereq_(118);
var fromCharCode = String.fromCharCode;
var $fromCodePoint = String.fromCodePoint;

// length should be 1, old FF problem
$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
  // 21.1.2.2 String.fromCodePoint(...codePoints)
  fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars
    var res = [];
    var aLen = arguments.length;
    var i = 0;
    var code;
    while (aLen > i) {
      code = +arguments[i++];
      if (toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');
      res.push(code < 0x10000
        ? fromCharCode(code)
        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
      );
    } return res.join('');
  }
});

},{"118":118,"43":43}],247:[function(_dereq_,module,exports){
// 21.1.3.7 String.prototype.includes(searchString, position = 0)
'use strict';
var $export = _dereq_(43);
var context = _dereq_(111);
var INCLUDES = 'includes';

$export($export.P + $export.F * _dereq_(44)(INCLUDES), 'String', {
  includes: function includes(searchString /* , position = 0 */) {
    return !!~context(this, searchString, INCLUDES)
      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
  }
});

},{"111":111,"43":43,"44":44}],248:[function(_dereq_,module,exports){
'use strict';
// B.2.3.9 String.prototype.italics()
_dereq_(112)('italics', function (createHTML) {
  return function italics() {
    return createHTML(this, 'i', '', '');
  };
});

},{"112":112}],249:[function(_dereq_,module,exports){
'use strict';
var $at = _dereq_(110)(true);

// 21.1.3.27 String.prototype[@@iterator]()
_dereq_(66)(String, 'String', function (iterated) {
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) return { value: undefined, done: true };
  point = $at(O, index);
  this._i += point.length;
  return { value: point, done: false };
});

},{"110":110,"66":66}],250:[function(_dereq_,module,exports){
'use strict';
// B.2.3.10 String.prototype.link(url)
_dereq_(112)('link', function (createHTML) {
  return function link(url) {
    return createHTML(this, 'a', 'href', url);
  };
});

},{"112":112}],251:[function(_dereq_,module,exports){
var $export = _dereq_(43);
var toIObject = _dereq_(121);
var toLength = _dereq_(122);

$export($export.S, 'String', {
  // 21.1.2.4 String.raw(callSite, ...substitutions)
  raw: function raw(callSite) {
    var tpl = toIObject(callSite.raw);
    var len = toLength(tpl.length);
    var aLen = arguments.length;
    var res = [];
    var i = 0;
    while (len > i) {
      res.push(String(tpl[i++]));
      if (i < aLen) res.push(String(arguments[i]));
    } return res.join('');
  }
});

},{"121":121,"122":122,"43":43}],252:[function(_dereq_,module,exports){
var $export = _dereq_(43);

$export($export.P, 'String', {
  // 21.1.3.13 String.prototype.repeat(count)
  repeat: _dereq_(114)
});

},{"114":114,"43":43}],253:[function(_dereq_,module,exports){
'use strict';
// B.2.3.11 String.prototype.small()
_dereq_(112)('small', function (createHTML) {
  return function small() {
    return createHTML(this, 'small', '', '');
  };
});

},{"112":112}],254:[function(_dereq_,module,exports){
// 21.1.3.18 String.prototype.startsWith(searchString [, position ])
'use strict';
var $export = _dereq_(43);
var toLength = _dereq_(122);
var context = _dereq_(111);
var STARTS_WITH = 'startsWith';
var $startsWith = ''[STARTS_WITH];

$export($export.P + $export.F * _dereq_(44)(STARTS_WITH), 'String', {
  startsWith: function startsWith(searchString /* , position = 0 */) {
    var that = context(this, searchString, STARTS_WITH);
    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
    var search = String(searchString);
    return $startsWith
      ? $startsWith.call(that, search, index)
      : that.slice(index, index + search.length) === search;
  }
});

},{"111":111,"122":122,"43":43,"44":44}],255:[function(_dereq_,module,exports){
'use strict';
// B.2.3.12 String.prototype.strike()
_dereq_(112)('strike', function (createHTML) {
  return function strike() {
    return createHTML(this, 'strike', '', '');
  };
});

},{"112":112}],256:[function(_dereq_,module,exports){
'use strict';
// B.2.3.13 String.prototype.sub()
_dereq_(112)('sub', function (createHTML) {
  return function sub() {
    return createHTML(this, 'sub', '', '');
  };
});

},{"112":112}],257:[function(_dereq_,module,exports){
'use strict';
// B.2.3.14 String.prototype.sup()
_dereq_(112)('sup', function (createHTML) {
  return function sup() {
    return createHTML(this, 'sup', '', '');
  };
});

},{"112":112}],258:[function(_dereq_,module,exports){
'use strict';
// 21.1.3.25 String.prototype.trim()
_dereq_(115)('trim', function ($trim) {
  return function trim() {
    return $trim(this, 3);
  };
});

},{"115":115}],259:[function(_dereq_,module,exports){
'use strict';
// ECMAScript 6 symbols shim
var global = _dereq_(51);
var has = _dereq_(52);
var DESCRIPTORS = _dereq_(39);
var $export = _dereq_(43);
var redefine = _dereq_(99);
var META = _dereq_(75).KEY;
var $fails = _dereq_(45);
var shared = _dereq_(107);
var setToStringTag = _dereq_(105);
var uid = _dereq_(128);
var wks = _dereq_(133);
var wksExt = _dereq_(132);
var wksDefine = _dereq_(131);
var enumKeys = _dereq_(42);
var isArray = _dereq_(60);
var anObject = _dereq_(19);
var isObject = _dereq_(62);
var toIObject = _dereq_(121);
var toPrimitive = _dereq_(124);
var createDesc = _dereq_(97);
var _create = _dereq_(79);
var gOPNExt = _dereq_(83);
var $GOPD = _dereq_(82);
var $DP = _dereq_(80);
var $keys = _dereq_(88);
var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global.Symbol;
var $JSON = global.JSON;
var _stringify = $JSON && $JSON.stringify;
var PROTOTYPE = 'prototype';
var HIDDEN = wks('_hidden');
var TO_PRIMITIVE = wks('toPrimitive');
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var OPSymbols = shared('op-symbols');
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == 'function';
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function () {
  return _create(dP({}, 'a', {
    get: function () { return dP(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (it, key, D) {
  var protoDesc = gOPD(ObjectProto, key);
  if (protoDesc) delete ObjectProto[key];
  dP(it, key, D);
  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function (tag) {
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D) {
  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = _create(D, { enumerable: createDesc(0, false) });
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P) {
  anObject(it);
  var keys = enumKeys(P = toIObject(P));
  var i = 0;
  var l = keys.length;
  var key;
  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P) {
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = toIObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
  var D = gOPD(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = gOPN(toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if (!USE_NATIVE) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function (value) {
      if (this === ObjectProto) $set.call(OPSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty;
  _dereq_(84).f = gOPNExt.f = $getOwnPropertyNames;
  _dereq_(89).f = $propertyIsEnumerable;
  _dereq_(85).f = $getOwnPropertySymbols;

  if (DESCRIPTORS && !_dereq_(70)) {
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function (name) {
    return wrap(wks(name));
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

for (var es6Symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);

for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function (key) {
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
  },
  useSetter: function () { setter = true; },
  useSimple: function () { setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it) {
    var args = [it];
    var i = 1;
    var replacer, $replacer;
    while (arguments.length > i) args.push(arguments[i++]);
    $replacer = replacer = args[1];
    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
    if (!isArray(replacer)) replacer = function (key, value) {
      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || _dereq_(53)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);

},{"105":105,"107":107,"121":121,"124":124,"128":128,"131":131,"132":132,"133":133,"19":19,"39":39,"42":42,"43":43,"45":45,"51":51,"52":52,"53":53,"60":60,"62":62,"70":70,"75":75,"79":79,"80":80,"82":82,"83":83,"84":84,"85":85,"88":88,"89":89,"97":97,"99":99}],260:[function(_dereq_,module,exports){
'use strict';
var $export = _dereq_(43);
var $typed = _dereq_(127);
var buffer = _dereq_(126);
var anObject = _dereq_(19);
var toAbsoluteIndex = _dereq_(118);
var toLength = _dereq_(122);
var isObject = _dereq_(62);
var ArrayBuffer = _dereq_(51).ArrayBuffer;
var speciesConstructor = _dereq_(108);
var $ArrayBuffer = buffer.ArrayBuffer;
var $DataView = buffer.DataView;
var $isView = $typed.ABV && ArrayBuffer.isView;
var $slice = $ArrayBuffer.prototype.slice;
var VIEW = $typed.VIEW;
var ARRAY_BUFFER = 'ArrayBuffer';

$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), { ArrayBuffer: $ArrayBuffer });

$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
  // 24.1.3.1 ArrayBuffer.isView(arg)
  isView: function isView(it) {
    return $isView && $isView(it) || isObject(it) && VIEW in it;
  }
});

$export($export.P + $export.U + $export.F * _dereq_(45)(function () {
  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
}), ARRAY_BUFFER, {
  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
  slice: function slice(start, end) {
    if ($slice !== undefined && end === undefined) return $slice.call(anObject(this), start); // FF fix
    var len = anObject(this).byteLength;
    var first = toAbsoluteIndex(start, len);
    var fin = toAbsoluteIndex(end === undefined ? len : end, len);
    var result = new (speciesConstructor(this, $ArrayBuffer))(toLength(fin - first));
    var viewS = new $DataView(this);
    var viewT = new $DataView(result);
    var index = 0;
    while (first < fin) {
      viewT.setUint8(index++, viewS.getUint8(first++));
    } return result;
  }
});

_dereq_(104)(ARRAY_BUFFER);

},{"104":104,"108":108,"118":118,"122":122,"126":126,"127":127,"19":19,"43":43,"45":45,"51":51,"62":62}],261:[function(_dereq_,module,exports){
var $export = _dereq_(43);
$export($export.G + $export.W + $export.F * !_dereq_(127).ABV, {
  DataView: _dereq_(126).DataView
});

},{"126":126,"127":127,"43":43}],262:[function(_dereq_,module,exports){
_dereq_(125)('Float32', 4, function (init) {
  return function Float32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"125":125}],263:[function(_dereq_,module,exports){
_dereq_(125)('Float64', 8, function (init) {
  return function Float64Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"125":125}],264:[function(_dereq_,module,exports){
_dereq_(125)('Int16', 2, function (init) {
  return function Int16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"125":125}],265:[function(_dereq_,module,exports){
_dereq_(125)('Int32', 4, function (init) {
  return function Int32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"125":125}],266:[function(_dereq_,module,exports){
_dereq_(125)('Int8', 1, function (init) {
  return function Int8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"125":125}],267:[function(_dereq_,module,exports){
_dereq_(125)('Uint16', 2, function (init) {
  return function Uint16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"125":125}],268:[function(_dereq_,module,exports){
_dereq_(125)('Uint32', 4, function (init) {
  return function Uint32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"125":125}],269:[function(_dereq_,module,exports){
_dereq_(125)('Uint8', 1, function (init) {
  return function Uint8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"125":125}],270:[function(_dereq_,module,exports){
_dereq_(125)('Uint8', 1, function (init) {
  return function Uint8ClampedArray(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
}, true);

},{"125":125}],271:[function(_dereq_,module,exports){
'use strict';
var global = _dereq_(51);
var each = _dereq_(23)(0);
var redefine = _dereq_(99);
var meta = _dereq_(75);
var assign = _dereq_(78);
var weak = _dereq_(31);
var isObject = _dereq_(62);
var validate = _dereq_(130);
var NATIVE_WEAK_MAP = _dereq_(130);
var IS_IE11 = !global.ActiveXObject && 'ActiveXObject' in global;
var WEAK_MAP = 'WeakMap';
var getWeak = meta.getWeak;
var isExtensible = Object.isExtensible;
var uncaughtFrozenStore = weak.ufstore;
var InternalMap;

var wrapper = function (get) {
  return function WeakMap() {
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
};

var methods = {
  // 23.3.3.3 WeakMap.prototype.get(key)
  get: function get(key) {
    if (isObject(key)) {
      var data = getWeak(key);
      if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);
      return data ? data[this._i] : undefined;
    }
  },
  // 23.3.3.5 WeakMap.prototype.set(key, value)
  set: function set(key, value) {
    return weak.def(validate(this, WEAK_MAP), key, value);
  }
};

// 23.3 WeakMap Objects
var $WeakMap = module.exports = _dereq_(32)(WEAK_MAP, wrapper, methods, weak, true, true);

// IE11 WeakMap frozen keys fix
if (NATIVE_WEAK_MAP && IS_IE11) {
  InternalMap = weak.getConstructor(wrapper, WEAK_MAP);
  assign(InternalMap.prototype, methods);
  meta.NEED = true;
  each(['delete', 'has', 'get', 'set'], function (key) {
    var proto = $WeakMap.prototype;
    var method = proto[key];
    redefine(proto, key, function (a, b) {
      // store frozen objects on internal weakmap shim
      if (isObject(a) && !isExtensible(a)) {
        if (!this._f) this._f = new InternalMap();
        var result = this._f[key](a, b);
        return key == 'set' ? this : result;
      // store all the rest on native weakmap
      } return method.call(this, a, b);
    });
  });
}

},{"130":130,"23":23,"31":31,"32":32,"51":51,"62":62,"75":75,"78":78,"99":99}],272:[function(_dereq_,module,exports){
'use strict';
var weak = _dereq_(31);
var validate = _dereq_(130);
var WEAK_SET = 'WeakSet';

// 23.4 WeakSet Objects
_dereq_(32)(WEAK_SET, function (get) {
  return function WeakSet() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.4.3.1 WeakSet.prototype.add(value)
  add: function add(value) {
    return weak.def(validate(this, WEAK_SET), value, true);
  }
}, weak, false, true);

},{"130":130,"31":31,"32":32}],273:[function(_dereq_,module,exports){
'use strict';
// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap
var $export = _dereq_(43);
var flattenIntoArray = _dereq_(48);
var toObject = _dereq_(123);
var toLength = _dereq_(122);
var aFunction = _dereq_(14);
var arraySpeciesCreate = _dereq_(26);

$export($export.P, 'Array', {
  flatMap: function flatMap(callbackfn /* , thisArg */) {
    var O = toObject(this);
    var sourceLen, A;
    aFunction(callbackfn);
    sourceLen = toLength(O.length);
    A = arraySpeciesCreate(O, 0);
    flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);
    return A;
  }
});

_dereq_(16)('flatMap');

},{"122":122,"123":123,"14":14,"16":16,"26":26,"43":43,"48":48}],274:[function(_dereq_,module,exports){
'use strict';
// https://github.com/tc39/Array.prototype.includes
var $export = _dereq_(43);
var $includes = _dereq_(22)(true);

$export($export.P, 'Array', {
  includes: function includes(el /* , fromIndex = 0 */) {
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

_dereq_(16)('includes');

},{"16":16,"22":22,"43":43}],275:[function(_dereq_,module,exports){
// https://github.com/tc39/proposal-object-values-entries
var $export = _dereq_(43);
var $entries = _dereq_(91)(true);

$export($export.S, 'Object', {
  entries: function entries(it) {
    return $entries(it);
  }
});

},{"43":43,"91":91}],276:[function(_dereq_,module,exports){
// https://github.com/tc39/proposal-object-getownpropertydescriptors
var $export = _dereq_(43);
var ownKeys = _dereq_(92);
var toIObject = _dereq_(121);
var gOPD = _dereq_(82);
var createProperty = _dereq_(34);

$export($export.S, 'Object', {
  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
    var O = toIObject(object);
    var getDesc = gOPD.f;
    var keys = ownKeys(O);
    var result = {};
    var i = 0;
    var key, desc;
    while (keys.length > i) {
      desc = getDesc(O, key = keys[i++]);
      if (desc !== undefined) createProperty(result, key, desc);
    }
    return result;
  }
});

},{"121":121,"34":34,"43":43,"82":82,"92":92}],277:[function(_dereq_,module,exports){
// https://github.com/tc39/proposal-object-values-entries
var $export = _dereq_(43);
var $values = _dereq_(91)(false);

$export($export.S, 'Object', {
  values: function values(it) {
    return $values(it);
  }
});

},{"43":43,"91":91}],278:[function(_dereq_,module,exports){
// https://github.com/tc39/proposal-promise-finally
'use strict';
var $export = _dereq_(43);
var core = _dereq_(33);
var global = _dereq_(51);
var speciesConstructor = _dereq_(108);
var promiseResolve = _dereq_(96);

$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {
  var C = speciesConstructor(this, core.Promise || global.Promise);
  var isFunction = typeof onFinally == 'function';
  return this.then(
    isFunction ? function (x) {
      return promiseResolve(C, onFinally()).then(function () { return x; });
    } : onFinally,
    isFunction ? function (e) {
      return promiseResolve(C, onFinally()).then(function () { throw e; });
    } : onFinally
  );
} });

},{"108":108,"33":33,"43":43,"51":51,"96":96}],279:[function(_dereq_,module,exports){
'use strict';
// https://github.com/tc39/proposal-string-pad-start-end
var $export = _dereq_(43);
var $pad = _dereq_(113);
var userAgent = _dereq_(129);

// https://github.com/zloirock/core-js/issues/280
var WEBKIT_BUG = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(userAgent);

$export($export.P + $export.F * WEBKIT_BUG, 'String', {
  padEnd: function padEnd(maxLength /* , fillString = ' ' */) {
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
  }
});

},{"113":113,"129":129,"43":43}],280:[function(_dereq_,module,exports){
'use strict';
// https://github.com/tc39/proposal-string-pad-start-end
var $export = _dereq_(43);
var $pad = _dereq_(113);
var userAgent = _dereq_(129);

// https://github.com/zloirock/core-js/issues/280
var WEBKIT_BUG = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(userAgent);

$export($export.P + $export.F * WEBKIT_BUG, 'String', {
  padStart: function padStart(maxLength /* , fillString = ' ' */) {
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
  }
});

},{"113":113,"129":129,"43":43}],281:[function(_dereq_,module,exports){
'use strict';
// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
_dereq_(115)('trimLeft', function ($trim) {
  return function trimLeft() {
    return $trim(this, 1);
  };
}, 'trimStart');

},{"115":115}],282:[function(_dereq_,module,exports){
'use strict';
// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
_dereq_(115)('trimRight', function ($trim) {
  return function trimRight() {
    return $trim(this, 2);
  };
}, 'trimEnd');

},{"115":115}],283:[function(_dereq_,module,exports){
_dereq_(131)('asyncIterator');

},{"131":131}],284:[function(_dereq_,module,exports){
var $iterators = _dereq_(145);
var getKeys = _dereq_(88);
var redefine = _dereq_(99);
var global = _dereq_(51);
var hide = _dereq_(53);
var Iterators = _dereq_(69);
var wks = _dereq_(133);
var ITERATOR = wks('iterator');
var TO_STRING_TAG = wks('toStringTag');
var ArrayValues = Iterators.Array;

var DOMIterables = {
  CSSRuleList: true, // TODO: Not spec compliant, should be false.
  CSSStyleDeclaration: false,
  CSSValueList: false,
  ClientRectList: false,
  DOMRectList: false,
  DOMStringList: false,
  DOMTokenList: true,
  DataTransferItemList: false,
  FileList: false,
  HTMLAllCollection: false,
  HTMLCollection: false,
  HTMLFormElement: false,
  HTMLSelectElement: false,
  MediaList: true, // TODO: Not spec compliant, should be false.
  MimeTypeArray: false,
  NamedNodeMap: false,
  NodeList: true,
  PaintRequestList: false,
  Plugin: false,
  PluginArray: false,
  SVGLengthList: false,
  SVGNumberList: false,
  SVGPathSegList: false,
  SVGPointList: false,
  SVGStringList: false,
  SVGTransformList: false,
  SourceBufferList: false,
  StyleSheetList: true, // TODO: Not spec compliant, should be false.
  TextTrackCueList: false,
  TextTrackList: false,
  TouchList: false
};

for (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {
  var NAME = collections[i];
  var explicit = DOMIterables[NAME];
  var Collection = global[NAME];
  var proto = Collection && Collection.prototype;
  var key;
  if (proto) {
    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);
    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
    Iterators[NAME] = ArrayValues;
    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);
  }
}

},{"133":133,"145":145,"51":51,"53":53,"69":69,"88":88,"99":99}],285:[function(_dereq_,module,exports){
var $export = _dereq_(43);
var $task = _dereq_(117);
$export($export.G + $export.B, {
  setImmediate: $task.set,
  clearImmediate: $task.clear
});

},{"117":117,"43":43}],286:[function(_dereq_,module,exports){
// ie9- setTimeout & setInterval additional parameters fix
var global = _dereq_(51);
var $export = _dereq_(43);
var userAgent = _dereq_(129);
var slice = [].slice;
var MSIE = /MSIE .\./.test(userAgent); // <- dirty ie9- check
var wrap = function (set) {
  return function (fn, time /* , ...args */) {
    var boundArgs = arguments.length > 2;
    var args = boundArgs ? slice.call(arguments, 2) : false;
    return set(boundArgs ? function () {
      // eslint-disable-next-line no-new-func
      (typeof fn == 'function' ? fn : Function(fn)).apply(this, args);
    } : fn, time);
  };
};
$export($export.G + $export.B + $export.F * MSIE, {
  setTimeout: wrap(global.setTimeout),
  setInterval: wrap(global.setInterval)
});

},{"129":129,"43":43,"51":51}],287:[function(_dereq_,module,exports){
_dereq_(286);
_dereq_(285);
_dereq_(284);
module.exports = _dereq_(33);

},{"284":284,"285":285,"286":286,"33":33}],288:[function(_dereq_,module,exports){
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
  typeof module === "object" ? module.exports : {}
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}

},{}]},{},[1]);

;var loader, define, requireModule, require, requirejs;

(function (global) {
  'use strict';

  function dict() {
    var obj = Object.create(null);
    obj['__'] = undefined;
    delete obj['__'];
    return obj;
  }

  // Save off the original values of these globals, so we can restore them if someone asks us to
  var oldGlobals = {
    loader: loader,
    define: define,
    requireModule: requireModule,
    require: require,
    requirejs: requirejs
  };

  requirejs = require = requireModule = function (id) {
    var pending = [];
    var mod = findModule(id, '(require)', pending);

    for (var i = pending.length - 1; i >= 0; i--) {
      pending[i].exports();
    }

    return mod.module.exports;
  };

  loader = {
    noConflict: function (aliases) {
      var oldName, newName;

      for (oldName in aliases) {
        if (aliases.hasOwnProperty(oldName)) {
          if (oldGlobals.hasOwnProperty(oldName)) {
            newName = aliases[oldName];

            global[newName] = global[oldName];
            global[oldName] = oldGlobals[oldName];
          }
        }
      }
    },
    // Option to enable or disable the generation of default exports
    makeDefaultExport: true
  };

  var registry = dict();
  var seen = dict();

  var uuid = 0;

  function unsupportedModule(length) {
    throw new Error('an unsupported module was defined, expected `define(id, deps, module)` instead got: `' + length + '` arguments to define`');
  }

  var defaultDeps = ['require', 'exports', 'module'];

  function Module(id, deps, callback, alias) {
    this.uuid = uuid++;
    this.id = id;
    this.deps = !deps.length && callback.length ? defaultDeps : deps;
    this.module = { exports: {} };
    this.callback = callback;
    this.hasExportsAsDep = false;
    this.isAlias = alias;
    this.reified = new Array(deps.length);

    /*
       Each module normally passes through these states, in order:
         new       : initial state
         pending   : this module is scheduled to be executed
         reifying  : this module's dependencies are being executed
         reified   : this module's dependencies finished executing successfully
         errored   : this module's dependencies failed to execute
         finalized : this module executed successfully
     */
    this.state = 'new';
  }

  Module.prototype.makeDefaultExport = function () {
    var exports = this.module.exports;
    if (exports !== null && (typeof exports === 'object' || typeof exports === 'function') && exports['default'] === undefined && Object.isExtensible(exports)) {
      exports['default'] = exports;
    }
  };

  Module.prototype.exports = function () {
    // if finalized, there is no work to do. If reifying, there is a
    // circular dependency so we must return our (partial) exports.
    if (this.state === 'finalized' || this.state === 'reifying') {
      return this.module.exports;
    }


    if (loader.wrapModules) {
      this.callback = loader.wrapModules(this.id, this.callback);
    }

    this.reify();

    var result = this.callback.apply(this, this.reified);
    this.reified.length = 0;
    this.state = 'finalized';

    if (!(this.hasExportsAsDep && result === undefined)) {
      this.module.exports = result;
    }
    if (loader.makeDefaultExport) {
      this.makeDefaultExport();
    }
    return this.module.exports;
  };

  Module.prototype.unsee = function () {
    this.state = 'new';
    this.module = { exports: {} };
  };

  Module.prototype.reify = function () {
    if (this.state === 'reified') {
      return;
    }
    this.state = 'reifying';
    try {
      this.reified = this._reify();
      this.state = 'reified';
    } finally {
      if (this.state === 'reifying') {
        this.state = 'errored';
      }
    }
  };

  Module.prototype._reify = function () {
    var reified = this.reified.slice();
    for (var i = 0; i < reified.length; i++) {
      var mod = reified[i];
      reified[i] = mod.exports ? mod.exports : mod.module.exports();
    }
    return reified;
  };

  Module.prototype.findDeps = function (pending) {
    if (this.state !== 'new') {
      return;
    }

    this.state = 'pending';

    var deps = this.deps;

    for (var i = 0; i < deps.length; i++) {
      var dep = deps[i];
      var entry = this.reified[i] = { exports: undefined, module: undefined };
      if (dep === 'exports') {
        this.hasExportsAsDep = true;
        entry.exports = this.module.exports;
      } else if (dep === 'require') {
        entry.exports = this.makeRequire();
      } else if (dep === 'module') {
        entry.exports = this.module;
      } else {
        entry.module = findModule(resolve(dep, this.id), this.id, pending);
      }
    }
  };

  Module.prototype.makeRequire = function () {
    var id = this.id;
    var r = function (dep) {
      return require(resolve(dep, id));
    };
    r['default'] = r;
    r.moduleId = id;
    r.has = function (dep) {
      return has(resolve(dep, id));
    };
    return r;
  };

  define = function (id, deps, callback) {
    var module = registry[id];

    // If a module for this id has already been defined and is in any state
    // other than `new` (meaning it has been or is currently being required),
    // then we return early to avoid redefinition.
    if (module && module.state !== 'new') {
      return;
    }

    if (arguments.length < 2) {
      unsupportedModule(arguments.length);
    }

    if (!Array.isArray(deps)) {
      callback = deps;
      deps = [];
    }

    if (callback instanceof Alias) {
      registry[id] = new Module(callback.id, deps, callback, true);
    } else {
      registry[id] = new Module(id, deps, callback, false);
    }
  };

  define.exports = function (name, defaultExport) {
    var module = registry[name];

    // If a module for this name has already been defined and is in any state
    // other than `new` (meaning it has been or is currently being required),
    // then we return early to avoid redefinition.
    if (module && module.state !== 'new') {
      return;
    }

    module = new Module(name, [], noop, null);
    module.module.exports = defaultExport;
    module.state = 'finalized';
    registry[name] = module;

    return module;
  };

  function noop() {}
  // we don't support all of AMD
  // define.amd = {};

  function Alias(id) {
    this.id = id;
  }

  define.alias = function (id, target) {
    if (arguments.length === 2) {
      return define(target, new Alias(id));
    }

    return new Alias(id);
  };

  function missingModule(id, referrer) {
    throw new Error('Could not find module `' + id + '` imported from `' + referrer + '`');
  }

  function findModule(id, referrer, pending) {
    var mod = registry[id] || registry[id + '/index'];

    while (mod && mod.isAlias) {
      mod = registry[mod.id] || registry[mod.id + '/index'];
    }

    if (!mod) {
      missingModule(id, referrer);
    }

    if (pending && mod.state !== 'pending' && mod.state !== 'finalized') {
      mod.findDeps(pending);
      pending.push(mod);
    }
    return mod;
  }

  function resolve(child, id) {
    if (child.charAt(0) !== '.') {
      return child;
    }


    var parts = child.split('/');
    var nameParts = id.split('/');
    var parentBase = nameParts.slice(0, -1);

    for (var i = 0, l = parts.length; i < l; i++) {
      var part = parts[i];

      if (part === '..') {
        if (parentBase.length === 0) {
          throw new Error('Cannot access parent module of root');
        }
        parentBase.pop();
      } else if (part === '.') {
        continue;
      } else {
        parentBase.push(part);
      }
    }

    return parentBase.join('/');
  }

  function has(id) {
    return !!(registry[id] || registry[id + '/index']);
  }

  requirejs.entries = requirejs._eak_seen = registry;
  requirejs.has = has;
  requirejs.unsee = function (id) {
    findModule(id, '(unsee)', false).unsee();
  };

  requirejs.clear = function () {
    requirejs.entries = requirejs._eak_seen = registry = dict();
    seen = dict();
  };

  // This code primes the JS engine for good performance by warming the
  // JIT compiler for these functions.
  define('foo', function () {});
  define('foo/bar', [], function () {});
  define('foo/asdf', ['module', 'exports', 'require'], function (module, exports, require) {
    if (require.has('foo/bar')) {
      require('foo/bar');
    }
  });
  define('foo/baz', [], define.alias('foo'));
  define('foo/quz', define.alias('foo'));
  define.alias('foo', 'foo/qux');
  define('foo/bar', ['foo', './quz', './baz', './asdf', './bar', '../foo'], function () {});
  define('foo/main', ['foo/bar'], function () {});
  define.exports('foo/exports', {});

  require('foo/exports');
  require('foo/main');
  require.unsee('foo/bar');

  requirejs.clear();

  if (typeof exports === 'object' && typeof module === 'object' && module.exports) {
    module.exports = { require: require, define: define };
  }
})(this);
;self.EmberENV.EXTEND_PROTOTYPES = false;

;(function() {
/*!
 * @overview  Ember - JavaScript Application Framework
 * @copyright Copyright 2011-2018 Tilde Inc. and contributors
 *            Portions Copyright 2006-2011 Strobe Inc.
 *            Portions Copyright 2008-2011 Apple Inc. All rights reserved.
 * @license   Licensed under MIT license
 *            See https://raw.github.com/emberjs/ember.js/master/LICENSE
 * @version   3.7.3
 */

/*globals process */
var enifed, requireModule, Ember;

// Used in @ember/-internals/environment/lib/global.js
mainContext = this; // eslint-disable-line no-undef

(function() {
  function missingModule(name, referrerName) {
    if (referrerName) {
      throw new Error('Could not find module ' + name + ' required by: ' + referrerName);
    } else {
      throw new Error('Could not find module ' + name);
    }
  }

  function internalRequire(_name, referrerName) {
    var name = _name;
    var mod = registry[name];

    if (!mod) {
      name = name + '/index';
      mod = registry[name];
    }

    var exports = seen[name];

    if (exports !== undefined) {
      return exports;
    }

    exports = seen[name] = {};

    if (!mod) {
      missingModule(_name, referrerName);
    }

    var deps = mod.deps;
    var callback = mod.callback;
    var reified = new Array(deps.length);

    for (var i = 0; i < deps.length; i++) {
      if (deps[i] === 'exports') {
        reified[i] = exports;
      } else if (deps[i] === 'require') {
        reified[i] = requireModule;
      } else {
        reified[i] = internalRequire(deps[i], name);
      }
    }

    callback.apply(this, reified);

    return exports;
  }

  var isNode =
    typeof window === 'undefined' &&
    typeof process !== 'undefined' &&
    {}.toString.call(process) === '[object process]';

  if (!isNode) {
    Ember = this.Ember = this.Ember || {};
  }

  if (typeof Ember === 'undefined') {
    Ember = {};
  }

  if (typeof Ember.__loader === 'undefined') {
    var registry = Object.create(null);
    var seen = Object.create(null);

    enifed = function(name, deps, callback) {
      var value = {};

      if (!callback) {
        value.deps = [];
        value.callback = deps;
      } else {
        value.deps = deps;
        value.callback = callback;
      }

      registry[name] = value;
    };

    requireModule = function(name) {
      return internalRequire(name, null);
    };

    // setup `require` module
    requireModule['default'] = requireModule;

    requireModule.has = function registryHas(moduleName) {
      return !!registry[moduleName] || !!registry[moduleName + '/index'];
    };

    requireModule._eak_seen = registry;

    Ember.__loader = {
      define: enifed,
      require: requireModule,
      registry: registry,
    };
  } else {
    enifed = Ember.__loader.define;
    requireModule = Ember.__loader.require;
  }
})();

enifed('@ember/-internals/browser-environment', ['exports'], function (exports) {
  'use strict';

  // check if window exists and actually is the global
  var hasDom = typeof self === 'object' && self !== null && self.Object === Object && typeof Window !== 'undefined' && self.constructor === Window && typeof document === 'object' && document !== null && self.document === document && typeof location === 'object' && location !== null && self.location === location && typeof history === 'object' && history !== null && self.history === history && typeof navigator === 'object' && navigator !== null && self.navigator === navigator && typeof navigator.userAgent === 'string';

  var window = hasDom ? self : null;
  var location$1 = hasDom ? self.location : null;
  var history$1 = hasDom ? self.history : null;
  var userAgent = hasDom ? self.navigator.userAgent : 'Lynx (textmode)';
  var isChrome = hasDom ? !!window.chrome && !window.opera : false;
  var isFirefox = hasDom ? typeof InstallTrigger !== 'undefined' : false;

  exports.window = window;
  exports.location = location$1;
  exports.history = history$1;
  exports.userAgent = userAgent;
  exports.isChrome = isChrome;
  exports.isFirefox = isFirefox;
  exports.hasDOM = hasDom;
});
enifed('@ember/-internals/console/index', ['exports', '@ember/debug', '@ember/deprecated-features'], function (exports, _debug, _deprecatedFeatures) {
  'use strict';

  // Deliver message that the function is deprecated

  var DEPRECATION_MESSAGE = 'Use of Ember.Logger is deprecated. Please use `console` for logging.';
  var DEPRECATION_ID = 'ember-console.deprecate-logger';
  var DEPRECATION_URL = 'https://emberjs.com/deprecations/v3.x#toc_use-console-rather-than-ember-logger';
  /**
     @module ember
  */

  /**
    Inside Ember-Metal, simply uses the methods from `imports.console`.
    Override this to provide more robust logging functionality.
  
    @class Logger
    @deprecated Use 'console' instead
  
    @namespace Ember
    @public
  */
  var DEPRECATED_LOGGER = void 0;

  if (_deprecatedFeatures.LOGGER) {
    DEPRECATED_LOGGER = {
      /**
      Logs the arguments to the console.
      You can pass as many arguments as you want and they will be joined together with a space.
       ```javascript
      var foo = 1;
      Ember.Logger.log('log value of foo:', foo);
      // "log value of foo: 1" will be printed to the console
      ```
      @method log
      @for Ember.Logger
      @param {*} arguments
      @public
      */
      log: function () {
        var _console;

        true && !false && (0, _debug.deprecate)(DEPRECATION_MESSAGE, false, {
          id: DEPRECATION_ID,
          until: '4.0.0',
          url: DEPRECATION_URL
        });

        return (_console = console).log.apply(_console, arguments); // eslint-disable-line no-console
      },

      /**
      Prints the arguments to the console with a warning icon.
      You can pass as many arguments as you want and they will be joined together with a space.
       ```javascript
      Ember.Logger.warn('Something happened!');
      // "Something happened!" will be printed to the console with a warning icon.
      ```
      @method warn
      @for Ember.Logger
      @param {*} arguments
      @public
      */
      warn: function () {
        var _console2;

        true && !false && (0, _debug.deprecate)(DEPRECATION_MESSAGE, false, {
          id: DEPRECATION_ID,
          until: '4.0.0',
          url: DEPRECATION_URL
        });

        return (_console2 = console).warn.apply(_console2, arguments); // eslint-disable-line no-console
      },

      /**
      Prints the arguments to the console with an error icon, red text and a stack trace.
      You can pass as many arguments as you want and they will be joined together with a space.
       ```javascript
      Ember.Logger.error('Danger! Danger!');
      // "Danger! Danger!" will be printed to the console in red text.
      ```
      @method error
      @for Ember.Logger
      @param {*} arguments
      @public
      */
      error: function () {
        var _console3;

        true && !false && (0, _debug.deprecate)(DEPRECATION_MESSAGE, false, {
          id: DEPRECATION_ID,
          until: '4.0.0',
          url: DEPRECATION_URL
        });

        return (_console3 = console).error.apply(_console3, arguments); // eslint-disable-line no-console
      },

      /**
      Logs the arguments to the console.
      You can pass as many arguments as you want and they will be joined together with a space.
       ```javascript
      var foo = 1;
      Ember.Logger.info('log value of foo:', foo);
      // "log value of foo: 1" will be printed to the console
      ```
      @method info
      @for Ember.Logger
      @param {*} arguments
      @public
      */
      info: function () {
        var _console4;

        true && !false && (0, _debug.deprecate)(DEPRECATION_MESSAGE, false, {
          id: DEPRECATION_ID,
          until: '4.0.0',
          url: DEPRECATION_URL
        });

        return (_console4 = console).info.apply(_console4, arguments); // eslint-disable-line no-console
      },

      /**
      Logs the arguments to the console in blue text.
      You can pass as many arguments as you want and they will be joined together with a space.
       ```javascript
      var foo = 1;
      Ember.Logger.debug('log value of foo:', foo);
      // "log value of foo: 1" will be printed to the console
      ```
      @method debug
      @for Ember.Logger
      @param {*} arguments
      @public
      */
      debug: function () {
        var _console6;

        true && !false && (0, _debug.deprecate)(DEPRECATION_MESSAGE, false, {
          id: DEPRECATION_ID,
          until: '4.0.0',
          url: DEPRECATION_URL
        });
        /* eslint-disable no-console */

        if (console.debug) {
          var _console5;

          return (_console5 = console).debug.apply(_console5, arguments);
        }
        return (_console6 = console).info.apply(_console6, arguments);
        /* eslint-enable no-console */
      },

      /**
      If the value passed into `Ember.Logger.assert` is not truthy it will throw an error with a stack trace.
       ```javascript
      Ember.Logger.assert(true); // undefined
      Ember.Logger.assert(true === false); // Throws an Assertion failed error.
      Ember.Logger.assert(true === false, 'Something invalid'); // Throws an Assertion failed error with message.
      ```
      @method assert
      @for Ember.Logger
      @param {Boolean} bool Value to test
      @param {String} message Assertion message on failed
      @public
      */
      assert: function () {
        var _console7;

        true && !false && (0, _debug.deprecate)(DEPRECATION_MESSAGE, false, {
          id: DEPRECATION_ID,
          until: '4.0.0',
          url: DEPRECATION_URL
        });

        return (_console7 = console).assert.apply(_console7, arguments); // eslint-disable-line no-console
      }
    };
  }

  exports.default = DEPRECATED_LOGGER;
});
enifed('@ember/-internals/container', ['exports', 'ember-babel', '@ember/-internals/owner', '@ember/-internals/utils', '@ember/debug', '@ember/polyfills'], function (exports, _emberBabel, _owner, _utils, _debug, _polyfills) {
    'use strict';

    exports.FACTORY_FOR = exports.Container = exports.privatize = exports.Registry = undefined;


    var leakTracking = void 0;
    var containers = void 0;
    if (true /* DEBUG */) {
            // requires v8
            // chrome --js-flags="--allow-natives-syntax --expose-gc"
            // node --allow-natives-syntax --expose-gc
            try {
                if (typeof gc === 'function') {
                    leakTracking = function () {
                        // avoid syntax errors when --allow-natives-syntax not present
                        var GetWeakSetValues = new Function('weakSet', 'return %GetWeakSetValues(weakSet, 0)');
                        containers = new WeakSet();
                        return {
                            hasContainers: function () {
                                gc();
                                return GetWeakSetValues(containers).length > 0;
                            },
                            reset: function () {
                                var values = GetWeakSetValues(containers);
                                for (var i = 0; i < values.length; i++) {
                                    containers.delete(values[i]);
                                }
                            }
                        };
                    }();
                }
            } catch (e) {
                // ignore
            }
        }
    /**
     A container used to instantiate and cache objects.
    
     Every `Container` must be associated with a `Registry`, which is referenced
     to determine the factory and options that should be used to instantiate
     objects.
    
     The public API for `Container` is still in flux and should not be considered
     stable.
    
     @private
     @class Container
     */

    var Container = function () {
        function Container(registry) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            (0, _emberBabel.classCallCheck)(this, Container);

            this.registry = registry;
            this.owner = options.owner || null;
            this.cache = (0, _utils.dictionary)(options.cache || null);
            this.factoryManagerCache = (0, _utils.dictionary)(options.factoryManagerCache || null);
            this.isDestroyed = false;
            this.isDestroying = false;
            if (true /* DEBUG */) {
                    this.validationCache = (0, _utils.dictionary)(options.validationCache || null);
                    if (containers !== undefined) {
                        containers.add(this);
                    }
                }
        }
        /**
         @private
         @property registry
         @type Registry
         @since 1.11.0
         */
        /**
         @private
         @property cache
         @type InheritingDict
         */
        /**
         @private
         @property validationCache
         @type InheritingDict
         */
        /**
         Given a fullName return a corresponding instance.
          The default behavior is for lookup to return a singleton instance.
         The singleton is scoped to the container, allowing multiple containers
         to all have their own locally scoped singletons.
          ```javascript
         let registry = new Registry();
         let container = registry.container();
          registry.register('api:twitter', Twitter);
          let twitter = container.lookup('api:twitter');
          twitter instanceof Twitter; // => true
          // by default the container will return singletons
         let twitter2 = container.lookup('api:twitter');
         twitter2 instanceof Twitter; // => true
          twitter === twitter2; //=> true
         ```
          If singletons are not wanted, an optional flag can be provided at lookup.
          ```javascript
         let registry = new Registry();
         let container = registry.container();
          registry.register('api:twitter', Twitter);
          let twitter = container.lookup('api:twitter', { singleton: false });
         let twitter2 = container.lookup('api:twitter', { singleton: false });
          twitter === twitter2; //=> false
         ```
          @private
         @method lookup
         @param {String} fullName
         @param {Object} [options]
         @param {String} [options.source] The fullname of the request source (used for local lookup)
         @return {any}
         */

        Container.prototype.lookup = function lookup(fullName, options) {
            true && !!this.isDestroyed && (0, _debug.assert)('expected container not to be destroyed', !this.isDestroyed);
            true && !this.registry.isValidFullName(fullName) && (0, _debug.assert)('fullName must be a proper full name', this.registry.isValidFullName(fullName));

            return _lookup(this, this.registry.normalize(fullName), options);
        };
        /**
         A depth first traversal, destroying the container, its descendant containers and all
         their managed objects.
          @private
         @method destroy
         */

        Container.prototype.destroy = function destroy() {
            destroyDestroyables(this);
            this.isDestroying = true;
        };

        Container.prototype.finalizeDestroy = function finalizeDestroy() {
            resetCache(this);
            this.isDestroyed = true;
        };
        /**
         Clear either the entire cache or just the cache for a particular key.
            @private
         @method reset
         @param {String} fullName optional key to reset; if missing, resets everything
        */

        Container.prototype.reset = function reset(fullName) {
            if (this.isDestroyed) return;
            if (fullName === undefined) {
                destroyDestroyables(this);
                resetCache(this);
            } else {
                resetMember(this, this.registry.normalize(fullName));
            }
        };
        /**
         Returns an object that can be used to provide an owner to a
         manually created instance.
          @private
         @method ownerInjection
         @returns { Object }
        */

        Container.prototype.ownerInjection = function ownerInjection() {
            var _ref;

            return _ref = {}, _ref[_owner.OWNER] = this.owner, _ref;
        };
        /**
         Given a fullName, return the corresponding factory. The consumer of the factory
         is responsible for the destruction of any factory instances, as there is no
         way for the container to ensure instances are destroyed when it itself is
         destroyed.
          @public
         @method factoryFor
         @param {String} fullName
         @param {Object} [options]
         @param {String} [options.source] The fullname of the request source (used for local lookup)
         @return {any}
         */

        Container.prototype.factoryFor = function factoryFor(fullName) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            true && !!this.isDestroyed && (0, _debug.assert)('expected container not to be destroyed', !this.isDestroyed);

            var normalizedName = this.registry.normalize(fullName);
            true && !this.registry.isValidFullName(normalizedName) && (0, _debug.assert)('fullName must be a proper full name', this.registry.isValidFullName(normalizedName));
            true && !(false /* EMBER_MODULE_UNIFICATION */ || !options.namespace) && (0, _debug.assert)('EMBER_MODULE_UNIFICATION must be enabled to pass a namespace option to factoryFor', false || !options.namespace);

            if (options.source || options.namespace) {
                normalizedName = this.registry.expandLocalLookup(fullName, options);
                if (!normalizedName) {
                    return;
                }
            }
            return _factoryFor(this, normalizedName, fullName);
        };

        return Container;
    }();

    if (true /* DEBUG */) {
            Container._leakTracking = leakTracking;
        }
    /*
     * Wrap a factory manager in a proxy which will not permit properties to be
     * set on the manager.
     */
    function wrapManagerInDeprecationProxy(manager) {
        if (_utils.HAS_NATIVE_PROXY) {
            var validator = {
                set: function (_obj, prop) {
                    throw new Error('You attempted to set "' + prop + '" on a factory manager created by container#factoryFor. A factory manager is a read-only construct.');
                }
            };
            // Note:
            // We have to proxy access to the manager here so that private property
            // access doesn't cause the above errors to occur.
            var m = manager;
            var proxiedManager = {
                class: m.class,
                create: function (props) {
                    return m.create(props);
                }
            };
            var proxy = new Proxy(proxiedManager, validator);
            FACTORY_FOR.set(proxy, manager);
        }
        return manager;
    }
    function isSingleton(container, fullName) {
        return container.registry.getOption(fullName, 'singleton') !== false;
    }
    function isInstantiatable(container, fullName) {
        return container.registry.getOption(fullName, 'instantiate') !== false;
    }
    function _lookup(container, fullName) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

        true && !(false /* EMBER_MODULE_UNIFICATION */ || !options.namespace) && (0, _debug.assert)('EMBER_MODULE_UNIFICATION must be enabled to pass a namespace option to lookup', false || !options.namespace);

        var normalizedName = fullName;
        if (options.source || options.namespace) {
            normalizedName = container.registry.expandLocalLookup(fullName, options);
            if (!normalizedName) {
                return;
            }
        }
        if (options.singleton !== false) {
            var cached = container.cache[normalizedName];
            if (cached !== undefined) {
                return cached;
            }
        }
        return instantiateFactory(container, normalizedName, fullName, options);
    }
    function _factoryFor(container, normalizedName, fullName) {
        var cached = container.factoryManagerCache[normalizedName];
        if (cached !== undefined) {
            return cached;
        }
        var factory = container.registry.resolve(normalizedName);
        if (factory === undefined) {
            return;
        }
        if (true /* DEBUG */ && factory && typeof factory._onLookup === 'function') {
            factory._onLookup(fullName);
        }
        var manager = new FactoryManager(container, factory, fullName, normalizedName);
        if (true /* DEBUG */) {
                manager = wrapManagerInDeprecationProxy(manager);
            }
        container.factoryManagerCache[normalizedName] = manager;
        return manager;
    }
    function isSingletonClass(container, fullName, _ref2) {
        var instantiate = _ref2.instantiate,
            singleton = _ref2.singleton;

        return singleton !== false && !instantiate && isSingleton(container, fullName) && !isInstantiatable(container, fullName);
    }
    function isSingletonInstance(container, fullName, _ref3) {
        var instantiate = _ref3.instantiate,
            singleton = _ref3.singleton;

        return singleton !== false && instantiate !== false && isSingleton(container, fullName) && isInstantiatable(container, fullName);
    }
    function isFactoryClass(container, fullname, _ref4) {
        var instantiate = _ref4.instantiate,
            singleton = _ref4.singleton;

        return instantiate === false && (singleton === false || !isSingleton(container, fullname)) && !isInstantiatable(container, fullname);
    }
    function isFactoryInstance(container, fullName, _ref5) {
        var instantiate = _ref5.instantiate,
            singleton = _ref5.singleton;

        return instantiate !== false && (singleton !== false || isSingleton(container, fullName)) && isInstantiatable(container, fullName);
    }
    function instantiateFactory(container, normalizedName, fullName, options) {
        var factoryManager = _factoryFor(container, normalizedName, fullName);
        if (factoryManager === undefined) {
            return;
        }
        // SomeClass { singleton: true, instantiate: true } | { singleton: true } | { instantiate: true } | {}
        // By default majority of objects fall into this case
        if (isSingletonInstance(container, fullName, options)) {
            return container.cache[normalizedName] = factoryManager.create();
        }
        // SomeClass { singleton: false, instantiate: true }
        if (isFactoryInstance(container, fullName, options)) {
            return factoryManager.create();
        }
        // SomeClass { singleton: true, instantiate: false } | { instantiate: false } | { singleton: false, instantiation: false }
        if (isSingletonClass(container, fullName, options) || isFactoryClass(container, fullName, options)) {
            return factoryManager.class;
        }
        throw new Error('Could not create factory');
    }
    function processInjections(container, injections, result) {
        if (true /* DEBUG */) {
                container.registry.validateInjections(injections);
            }
        var hash = result.injections;
        if (hash === undefined) {
            hash = result.injections = {};
        }
        for (var i = 0; i < injections.length; i++) {
            var _injections$i = injections[i],
                property = _injections$i.property,
                specifier = _injections$i.specifier,
                source = _injections$i.source;

            if (source) {
                hash[property] = _lookup(container, specifier, { source: source });
            } else {
                hash[property] = _lookup(container, specifier);
            }
            if (!result.isDynamic) {
                result.isDynamic = !isSingleton(container, specifier);
            }
        }
    }
    function buildInjections(container, typeInjections, injections) {
        var result = {
            injections: undefined,
            isDynamic: false
        };
        if (typeInjections !== undefined) {
            processInjections(container, typeInjections, result);
        }
        if (injections !== undefined) {
            processInjections(container, injections, result);
        }
        return result;
    }
    function injectionsFor(container, fullName) {
        var registry = container.registry;

        var _fullName$split = fullName.split(':'),
            type = _fullName$split[0];

        var typeInjections = registry.getTypeInjections(type);
        var injections = registry.getInjections(fullName);
        return buildInjections(container, typeInjections, injections);
    }
    function destroyDestroyables(container) {
        var cache = container.cache;
        var keys = Object.keys(cache);
        for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            var value = cache[key];
            if (value.destroy) {
                value.destroy();
            }
        }
    }
    function resetCache(container) {
        container.cache = (0, _utils.dictionary)(null);
        container.factoryManagerCache = (0, _utils.dictionary)(null);
    }
    function resetMember(container, fullName) {
        var member = container.cache[fullName];
        delete container.factoryManagerCache[fullName];
        if (member) {
            delete container.cache[fullName];
            if (member.destroy) {
                member.destroy();
            }
        }
    }
    var FACTORY_FOR = new WeakMap();

    var FactoryManager = function () {
        function FactoryManager(container, factory, fullName, normalizedName) {
            (0, _emberBabel.classCallCheck)(this, FactoryManager);

            this.container = container;
            this.owner = container.owner;
            this.class = factory;
            this.fullName = fullName;
            this.normalizedName = normalizedName;
            this.madeToString = undefined;
            this.injections = undefined;
            FACTORY_FOR.set(this, this);
        }

        FactoryManager.prototype.toString = function toString() {
            if (this.madeToString === undefined) {
                this.madeToString = this.container.registry.makeToString(this.class, this.fullName);
            }
            return this.madeToString;
        };

        FactoryManager.prototype.create = function create(options) {
            var injectionsCache = this.injections;
            if (injectionsCache === undefined) {
                var _injectionsFor = injectionsFor(this.container, this.normalizedName),
                    injections = _injectionsFor.injections,
                    isDynamic = _injectionsFor.isDynamic;

                injectionsCache = injections;
                if (!isDynamic) {
                    this.injections = injections;
                }
            }
            var props = injectionsCache;
            if (options !== undefined) {
                props = (0, _polyfills.assign)({}, injectionsCache, options);
            }
            if (true /* DEBUG */) {
                    var lazyInjections = void 0;
                    var validationCache = this.container.validationCache;
                    // Ensure that all lazy injections are valid at instantiation time
                    if (!validationCache[this.fullName] && this.class && typeof this.class._lazyInjections === 'function') {
                        lazyInjections = this.class._lazyInjections();
                        lazyInjections = this.container.registry.normalizeInjectionsHash(lazyInjections);
                        this.container.registry.validateInjections(lazyInjections);
                    }
                    validationCache[this.fullName] = true;
                }
            if (!this.class.create) {
                throw new Error('Failed to create an instance of \'' + this.normalizedName + '\'. Most likely an improperly defined class or' + ' an invalid module export.');
            }
            // required to allow access to things like
            // the customized toString, _debugContainerKey,
            // owner, etc. without a double extend and without
            // modifying the objects properties
            if (typeof this.class._initFactory === 'function') {
                this.class._initFactory(this);
            } else {
                // in the non-EmberObject case we need to still setOwner
                // this is required for supporting glimmer environment and
                // template instantiation which rely heavily on
                // `options[OWNER]` being passed into `create`
                // TODO: clean this up, and remove in future versions
                if (options === undefined || props === undefined) {
                    // avoid mutating `props` here since they are the cached injections
                    props = (0, _polyfills.assign)({}, props);
                }
                (0, _owner.setOwner)(props, this.owner);
            }
            var instance = this.class.create(props);
            FACTORY_FOR.set(instance, this);
            return instance;
        };

        return FactoryManager;
    }();

    var VALID_FULL_NAME_REGEXP = /^[^:]+:[^:]+$/;
    /**
     A registry used to store factory and option information keyed
     by type.
    
     A `Registry` stores the factory and option information needed by a
     `Container` to instantiate and cache objects.
    
     The API for `Registry` is still in flux and should not be considered stable.
    
     @private
     @class Registry
     @since 1.11.0
    */

    var Registry = function () {
        function Registry() {
            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            (0, _emberBabel.classCallCheck)(this, Registry);

            this.fallback = options.fallback || null;
            this.resolver = options.resolver || null;
            this.registrations = (0, _utils.dictionary)(options.registrations || null);
            this._typeInjections = (0, _utils.dictionary)(null);
            this._injections = (0, _utils.dictionary)(null);
            this._localLookupCache = Object.create(null);
            this._normalizeCache = (0, _utils.dictionary)(null);
            this._resolveCache = (0, _utils.dictionary)(null);
            this._failSet = new Set();
            this._options = (0, _utils.dictionary)(null);
            this._typeOptions = (0, _utils.dictionary)(null);
        }
        /**
         A backup registry for resolving registrations when no matches can be found.
            @private
         @property fallback
         @type Registry
         */
        /**
         An object that has a `resolve` method that resolves a name.
            @private
         @property resolver
         @type Resolver
         */
        /**
         @private
         @property registrations
         @type InheritingDict
         */
        /**
         @private
            @property _typeInjections
         @type InheritingDict
         */
        /**
         @private
            @property _injections
         @type InheritingDict
         */
        /**
         @private
            @property _normalizeCache
         @type InheritingDict
         */
        /**
         @private
            @property _resolveCache
         @type InheritingDict
         */
        /**
         @private
            @property _options
         @type InheritingDict
         */
        /**
         @private
            @property _typeOptions
         @type InheritingDict
         */
        /**
         Creates a container based on this registry.
            @private
         @method container
         @param {Object} options
         @return {Container} created container
         */

        Registry.prototype.container = function container(options) {
            return new Container(this, options);
        };
        /**
         Registers a factory for later injection.
            Example:
            ```javascript
         let registry = new Registry();
            registry.register('model:user', Person, {singleton: false });
         registry.register('fruit:favorite', Orange);
         registry.register('communication:main', Email, {singleton: false});
         ```
            @private
         @method register
         @param {String} fullName
         @param {Function} factory
         @param {Object} options
         */

        Registry.prototype.register = function register(fullName, factory) {
            var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

            true && !this.isValidFullName(fullName) && (0, _debug.assert)('fullName must be a proper full name', this.isValidFullName(fullName));
            true && !(factory !== undefined) && (0, _debug.assert)('Attempting to register an unknown factory: \'' + fullName + '\'', factory !== undefined);

            var normalizedName = this.normalize(fullName);
            true && !!this._resolveCache[normalizedName] && (0, _debug.assert)('Cannot re-register: \'' + fullName + '\', as it has already been resolved.', !this._resolveCache[normalizedName]);

            this._failSet.delete(normalizedName);
            this.registrations[normalizedName] = factory;
            this._options[normalizedName] = options;
        };
        /**
         Unregister a fullName
            ```javascript
         let registry = new Registry();
         registry.register('model:user', User);
            registry.resolve('model:user').create() instanceof User //=> true
            registry.unregister('model:user')
         registry.resolve('model:user') === undefined //=> true
         ```
            @private
         @method unregister
         @param {String} fullName
         */

        Registry.prototype.unregister = function unregister(fullName) {
            true && !this.isValidFullName(fullName) && (0, _debug.assert)('fullName must be a proper full name', this.isValidFullName(fullName));

            var normalizedName = this.normalize(fullName);
            this._localLookupCache = Object.create(null);
            delete this.registrations[normalizedName];
            delete this._resolveCache[normalizedName];
            delete this._options[normalizedName];
            this._failSet.delete(normalizedName);
        };
        /**
         Given a fullName return the corresponding factory.
            By default `resolve` will retrieve the factory from
         the registry.
            ```javascript
         let registry = new Registry();
         registry.register('api:twitter', Twitter);
            registry.resolve('api:twitter') // => Twitter
         ```
            Optionally the registry can be provided with a custom resolver.
         If provided, `resolve` will first provide the custom resolver
         the opportunity to resolve the fullName, otherwise it will fallback
         to the registry.
            ```javascript
         let registry = new Registry();
         registry.resolver = function(fullName) {
            // lookup via the module system of choice
          };
            // the twitter factory is added to the module system
         registry.resolve('api:twitter') // => Twitter
         ```
            @private
         @method resolve
         @param {String} fullName
         @param {Object} [options]
         @param {String} [options.source] the fullname of the request source (used for local lookups)
         @return {Function} fullName's factory
         */

        Registry.prototype.resolve = function resolve(fullName, options) {
            var factory = _resolve(this, this.normalize(fullName), options);
            if (factory === undefined && this.fallback !== null) {
                var _fallback;

                factory = (_fallback = this.fallback).resolve.apply(_fallback, arguments);
            }
            return factory;
        };
        /**
         A hook that can be used to describe how the resolver will
         attempt to find the factory.
            For example, the default Ember `.describe` returns the full
         class name (including namespace) where Ember's resolver expects
         to find the `fullName`.
            @private
         @method describe
         @param {String} fullName
         @return {string} described fullName
         */

        Registry.prototype.describe = function describe(fullName) {
            if (this.resolver !== null && this.resolver.lookupDescription) {
                return this.resolver.lookupDescription(fullName);
            } else if (this.fallback !== null) {
                return this.fallback.describe(fullName);
            } else {
                return fullName;
            }
        };
        /**
         A hook to enable custom fullName normalization behavior
            @private
         @method normalizeFullName
         @param {String} fullName
         @return {string} normalized fullName
         */

        Registry.prototype.normalizeFullName = function normalizeFullName(fullName) {
            if (this.resolver !== null && this.resolver.normalize) {
                return this.resolver.normalize(fullName);
            } else if (this.fallback !== null) {
                return this.fallback.normalizeFullName(fullName);
            } else {
                return fullName;
            }
        };
        /**
         Normalize a fullName based on the application's conventions
            @private
         @method normalize
         @param {String} fullName
         @return {string} normalized fullName
         */

        Registry.prototype.normalize = function normalize(fullName) {
            return this._normalizeCache[fullName] || (this._normalizeCache[fullName] = this.normalizeFullName(fullName));
        };
        /**
         @method makeToString
            @private
         @param {any} factory
         @param {string} fullName
         @return {function} toString function
         */

        Registry.prototype.makeToString = function makeToString(factory, fullName) {
            if (this.resolver !== null && this.resolver.makeToString) {
                return this.resolver.makeToString(factory, fullName);
            } else if (this.fallback !== null) {
                return this.fallback.makeToString(factory, fullName);
            } else {
                return factory.toString();
            }
        };
        /**
         Given a fullName check if the container is aware of its factory
         or singleton instance.
            @private
         @method has
         @param {String} fullName
         @param {Object} [options]
         @param {String} [options.source] the fullname of the request source (used for local lookups)
         @return {Boolean}
         */

        Registry.prototype.has = function has(fullName, options) {
            if (!this.isValidFullName(fullName)) {
                return false;
            }
            var source = options && options.source && this.normalize(options.source);
            var namespace = options && options.namespace || undefined;
            return _has(this, this.normalize(fullName), source, namespace);
        };
        /**
         Allow registering options for all factories of a type.
            ```javascript
         let registry = new Registry();
         let container = registry.container();
            // if all of type `connection` must not be singletons
         registry.optionsForType('connection', { singleton: false });
            registry.register('connection:twitter', TwitterConnection);
         registry.register('connection:facebook', FacebookConnection);
            let twitter = container.lookup('connection:twitter');
         let twitter2 = container.lookup('connection:twitter');
            twitter === twitter2; // => false
            let facebook = container.lookup('connection:facebook');
         let facebook2 = container.lookup('connection:facebook');
            facebook === facebook2; // => false
         ```
            @private
         @method optionsForType
         @param {String} type
         @param {Object} options
         */

        Registry.prototype.optionsForType = function optionsForType(type, options) {
            this._typeOptions[type] = options;
        };

        Registry.prototype.getOptionsForType = function getOptionsForType(type) {
            var optionsForType = this._typeOptions[type];
            if (optionsForType === undefined && this.fallback !== null) {
                optionsForType = this.fallback.getOptionsForType(type);
            }
            return optionsForType;
        };
        /**
         @private
         @method options
         @param {String} fullName
         @param {Object} options
         */

        Registry.prototype.options = function options(fullName, _options) {
            var normalizedName = this.normalize(fullName);
            this._options[normalizedName] = _options;
        };

        Registry.prototype.getOptions = function getOptions(fullName) {
            var normalizedName = this.normalize(fullName);
            var options = this._options[normalizedName];
            if (options === undefined && this.fallback !== null) {
                options = this.fallback.getOptions(fullName);
            }
            return options;
        };

        Registry.prototype.getOption = function getOption(fullName, optionName) {
            var options = this._options[fullName];
            if (options !== undefined && options[optionName] !== undefined) {
                return options[optionName];
            }
            var type = fullName.split(':')[0];
            options = this._typeOptions[type];
            if (options && options[optionName] !== undefined) {
                return options[optionName];
            } else if (this.fallback !== null) {
                return this.fallback.getOption(fullName, optionName);
            }
            return undefined;
        };
        /**
         Used only via `injection`.
            Provides a specialized form of injection, specifically enabling
         all objects of one type to be injected with a reference to another
         object.
            For example, provided each object of type `controller` needed a `router`.
         one would do the following:
            ```javascript
         let registry = new Registry();
         let container = registry.container();
            registry.register('router:main', Router);
         registry.register('controller:user', UserController);
         registry.register('controller:post', PostController);
            registry.typeInjection('controller', 'router', 'router:main');
            let user = container.lookup('controller:user');
         let post = container.lookup('controller:post');
            user.router instanceof Router; //=> true
         post.router instanceof Router; //=> true
            // both controllers share the same router
         user.router === post.router; //=> true
         ```
            @private
         @method typeInjection
         @param {String} type
         @param {String} property
         @param {String} fullName
         */

        Registry.prototype.typeInjection = function typeInjection(type, property, fullName) {
            true && !this.isValidFullName(fullName) && (0, _debug.assert)('fullName must be a proper full name', this.isValidFullName(fullName));

            var fullNameType = fullName.split(':')[0];
            true && !(fullNameType !== type) && (0, _debug.assert)('Cannot inject a \'' + fullName + '\' on other ' + type + '(s).', fullNameType !== type);

            var injections = this._typeInjections[type] || (this._typeInjections[type] = []);
            injections.push({ property: property, specifier: fullName });
        };
        /**
         Defines injection rules.
            These rules are used to inject dependencies onto objects when they
         are instantiated.
            Two forms of injections are possible:
            * Injecting one fullName on another fullName
         * Injecting one fullName on a type
            Example:
            ```javascript
         let registry = new Registry();
         let container = registry.container();
            registry.register('source:main', Source);
         registry.register('model:user', User);
         registry.register('model:post', Post);
            // injecting one fullName on another fullName
         // eg. each user model gets a post model
         registry.injection('model:user', 'post', 'model:post');
            // injecting one fullName on another type
         registry.injection('model', 'source', 'source:main');
            let user = container.lookup('model:user');
         let post = container.lookup('model:post');
            user.source instanceof Source; //=> true
         post.source instanceof Source; //=> true
            user.post instanceof Post; //=> true
            // and both models share the same source
         user.source === post.source; //=> true
         ```
            @private
         @method injection
         @param {String} factoryName
         @param {String} property
         @param {String} injectionName
         */

        Registry.prototype.injection = function injection(fullName, property, injectionName) {
            true && !this.isValidFullName(injectionName) && (0, _debug.assert)('Invalid injectionName, expected: \'type:name\' got: ' + injectionName, this.isValidFullName(injectionName));

            var normalizedInjectionName = this.normalize(injectionName);
            if (fullName.indexOf(':') === -1) {
                return this.typeInjection(fullName, property, normalizedInjectionName);
            }
            true && !this.isValidFullName(fullName) && (0, _debug.assert)('fullName must be a proper full name', this.isValidFullName(fullName));

            var normalizedName = this.normalize(fullName);
            var injections = this._injections[normalizedName] || (this._injections[normalizedName] = []);
            injections.push({ property: property, specifier: normalizedInjectionName });
        };
        /**
         @private
         @method knownForType
         @param {String} type the type to iterate over
        */

        Registry.prototype.knownForType = function knownForType(type) {
            var localKnown = (0, _utils.dictionary)(null);
            var registeredNames = Object.keys(this.registrations);
            for (var index = 0; index < registeredNames.length; index++) {
                var fullName = registeredNames[index];
                var itemType = fullName.split(':')[0];
                if (itemType === type) {
                    localKnown[fullName] = true;
                }
            }
            var fallbackKnown = void 0,
                resolverKnown = void 0;
            if (this.fallback !== null) {
                fallbackKnown = this.fallback.knownForType(type);
            }
            if (this.resolver !== null && this.resolver.knownForType) {
                resolverKnown = this.resolver.knownForType(type);
            }
            return (0, _polyfills.assign)({}, fallbackKnown, localKnown, resolverKnown);
        };

        Registry.prototype.isValidFullName = function isValidFullName(fullName) {
            return VALID_FULL_NAME_REGEXP.test(fullName);
        };

        Registry.prototype.getInjections = function getInjections(fullName) {
            var injections = this._injections[fullName];
            if (this.fallback !== null) {
                var fallbackInjections = this.fallback.getInjections(fullName);
                if (fallbackInjections !== undefined) {
                    injections = injections === undefined ? fallbackInjections : injections.concat(fallbackInjections);
                }
            }
            return injections;
        };

        Registry.prototype.getTypeInjections = function getTypeInjections(type) {
            var injections = this._typeInjections[type];
            if (this.fallback !== null) {
                var fallbackInjections = this.fallback.getTypeInjections(type);
                if (fallbackInjections !== undefined) {
                    injections = injections === undefined ? fallbackInjections : injections.concat(fallbackInjections);
                }
            }
            return injections;
        };
        /**
         Given a fullName and a source fullName returns the fully resolved
         fullName. Used to allow for local lookup.
            ```javascript
         let registry = new Registry();
            // the twitter factory is added to the module system
         registry.expandLocalLookup('component:post-title', { source: 'template:post' }) // => component:post/post-title
         ```
            @private
         @method expandLocalLookup
         @param {String} fullName
         @param {Object} [options]
         @param {String} [options.source] the fullname of the request source (used for local lookups)
         @return {String} fullName
         */

        Registry.prototype.expandLocalLookup = function expandLocalLookup(fullName, options) {
            if (this.resolver !== null && this.resolver.expandLocalLookup) {
                true && !this.isValidFullName(fullName) && (0, _debug.assert)('fullName must be a proper full name', this.isValidFullName(fullName));
                true && !(!options.source || this.isValidFullName(options.source)) && (0, _debug.assert)('options.source must be a proper full name', !options.source || this.isValidFullName(options.source));

                var normalizedFullName = this.normalize(fullName);
                var normalizedSource = this.normalize(options.source);
                return _expandLocalLookup(this, normalizedFullName, normalizedSource, options.namespace);
            } else if (this.fallback !== null) {
                return this.fallback.expandLocalLookup(fullName, options);
            } else {
                return null;
            }
        };

        return Registry;
    }();

    if (true /* DEBUG */) {
            var proto = Registry.prototype;
            proto.normalizeInjectionsHash = function (hash) {
                var injections = [];
                for (var key in hash) {
                    if (hash.hasOwnProperty(key)) {
                        var _hash$key = hash[key],
                            specifier = _hash$key.specifier,
                            source = _hash$key.source,
                            namespace = _hash$key.namespace;

                        true && !this.isValidFullName(specifier) && (0, _debug.assert)('Expected a proper full name, given \'' + specifier + '\'', this.isValidFullName(specifier));

                        injections.push({
                            property: key,
                            specifier: specifier,
                            source: source,
                            namespace: namespace
                        });
                    }
                }
                return injections;
            };
            proto.validateInjections = function (injections) {
                if (!injections) {
                    return;
                }
                for (var i = 0; i < injections.length; i++) {
                    var _injections$i2 = injections[i],
                        specifier = _injections$i2.specifier,
                        source = _injections$i2.source,
                        namespace = _injections$i2.namespace;

                    true && !this.has(specifier, { source: source, namespace: namespace }) && (0, _debug.assert)('Attempting to inject an unknown injection: \'' + specifier + '\'', this.has(specifier, { source: source, namespace: namespace }));
                }
            };
        }
    function _expandLocalLookup(registry, normalizedName, normalizedSource, namespace) {
        var cache = registry._localLookupCache;
        var normalizedNameCache = cache[normalizedName];
        if (!normalizedNameCache) {
            normalizedNameCache = cache[normalizedName] = Object.create(null);
        }
        var cacheKey = namespace || normalizedSource;
        var cached = normalizedNameCache[cacheKey];
        if (cached !== undefined) {
            return cached;
        }
        var expanded = registry.resolver.expandLocalLookup(normalizedName, normalizedSource, namespace);
        return normalizedNameCache[cacheKey] = expanded;
    }
    function _resolve(registry, _normalizedName, options) {
        var normalizedName = _normalizedName;
        // when `source` is provided expand normalizedName
        // and source into the full normalizedName
        if (options !== undefined && (options.source || options.namespace)) {
            normalizedName = registry.expandLocalLookup(_normalizedName, options);
            if (!normalizedName) {
                return;
            }
        }
        var cached = registry._resolveCache[normalizedName];
        if (cached !== undefined) {
            return cached;
        }
        if (registry._failSet.has(normalizedName)) {
            return;
        }
        var resolved = void 0;
        if (registry.resolver) {
            resolved = registry.resolver.resolve(normalizedName);
        }
        if (resolved === undefined) {
            resolved = registry.registrations[normalizedName];
        }
        if (resolved === undefined) {
            registry._failSet.add(normalizedName);
        } else {
            registry._resolveCache[normalizedName] = resolved;
        }
        return resolved;
    }
    function _has(registry, fullName, source, namespace) {
        return registry.resolve(fullName, { source: source, namespace: namespace }) !== undefined;
    }
    var privateNames = (0, _utils.dictionary)(null);
    var privateSuffix = ('' + Math.random() + Date.now()).replace('.', '');
    function privatize(_ref6) {
        var fullName = _ref6[0];

        var name = privateNames[fullName];
        if (name) {
            return name;
        }

        var _fullName$split2 = fullName.split(':'),
            type = _fullName$split2[0],
            rawName = _fullName$split2[1];

        return privateNames[fullName] = (0, _utils.intern)(type + ':' + rawName + '-' + privateSuffix);
    }

    /*
    Public API for the container is still in flux.
    The public API, specified on the application namespace should be considered the stable API.
    // @module container
      @private
    */

    exports.Registry = Registry;
    exports.privatize = privatize;
    exports.Container = Container;
    exports.FACTORY_FOR = FACTORY_FOR;
});
enifed('@ember/-internals/environment', ['exports'], function (exports) {
    'use strict';

    // from lodash to catch fake globals
    function checkGlobal(value) {
        return value && value.Object === Object ? value : undefined;
    }
    // element ids can ruin global miss checks
    function checkElementIdShadowing(value) {
        return value && value.nodeType === undefined ? value : undefined;
    }
    // export real global
    var global$1 = checkGlobal(checkElementIdShadowing(typeof global === 'object' && global)) || checkGlobal(typeof self === 'object' && self) || checkGlobal(typeof window === 'object' && window) || typeof mainContext !== 'undefined' && mainContext || // set before strict mode in Ember loader/wrapper
    new Function('return this')(); // eval outside of strict mode

    // legacy imports/exports/lookup stuff (should we keep this??)
    var context = function (global, Ember) {
        return Ember === undefined ? { imports: global, exports: global, lookup: global } : {
            // import jQuery
            imports: Ember.imports || global,
            // export Ember
            exports: Ember.exports || global,
            // search for Namespaces
            lookup: Ember.lookup || global
        };
    }(global$1, global$1.Ember);
    function getLookup() {
        return context.lookup;
    }
    function setLookup(value) {
        context.lookup = value;
    }

    /**
      The hash of environment variables used to control various configuration
      settings. To specify your own or override default settings, add the
      desired properties to a global hash named `EmberENV` (or `ENV` for
      backwards compatibility with earlier versions of Ember). The `EmberENV`
      hash must be created before loading Ember.
    
      @class EmberENV
      @type Object
      @public
    */
    var ENV = {
        ENABLE_OPTIONAL_FEATURES: false,
        /**
          Determines whether Ember should add to `Array`, `Function`, and `String`
          native object prototypes, a few extra methods in order to provide a more
          friendly API.
             We generally recommend leaving this option set to true however, if you need
          to turn it off, you can add the configuration property
          `EXTEND_PROTOTYPES` to `EmberENV` and set it to `false`.
             Note, when disabled (the default configuration for Ember Addons), you will
          instead have to access all methods and functions from the Ember
          namespace.
             @property EXTEND_PROTOTYPES
          @type Boolean
          @default true
          @for EmberENV
          @public
        */
        EXTEND_PROTOTYPES: {
            Array: true,
            Function: true,
            String: true
        },
        /**
          The `LOG_STACKTRACE_ON_DEPRECATION` property, when true, tells Ember to log
          a full stack trace during deprecation warnings.
             @property LOG_STACKTRACE_ON_DEPRECATION
          @type Boolean
          @default true
          @for EmberENV
          @public
        */
        LOG_STACKTRACE_ON_DEPRECATION: true,
        /**
          The `LOG_VERSION` property, when true, tells Ember to log versions of all
          dependent libraries in use.
             @property LOG_VERSION
          @type Boolean
          @default true
          @for EmberENV
          @public
        */
        LOG_VERSION: true,
        RAISE_ON_DEPRECATION: false,
        STRUCTURED_PROFILE: false,
        /**
          Whether to insert a `<div class="ember-view" />` wrapper around the
          application template. See RFC #280.
             This is not intended to be set directly, as the implementation may change in
          the future. Use `@ember/optional-features` instead.
             @property _APPLICATION_TEMPLATE_WRAPPER
          @for EmberENV
          @type Boolean
          @default true
          @private
        */
        _APPLICATION_TEMPLATE_WRAPPER: true,
        /**
          Whether to use Glimmer Component semantics (as opposed to the classic "Curly"
          components semantics) for template-only components. See RFC #278.
             This is not intended to be set directly, as the implementation may change in
          the future. Use `@ember/optional-features` instead.
             @property _TEMPLATE_ONLY_GLIMMER_COMPONENTS
          @for EmberENV
          @type Boolean
          @default false
          @private
        */
        _TEMPLATE_ONLY_GLIMMER_COMPONENTS: false,
        /**
          Whether the app is using jQuery. See RFC #294.
             This is not intended to be set directly, as the implementation may change in
          the future. Use `@ember/optional-features` instead.
             @property _JQUERY_INTEGRATION
          @for EmberENV
          @type Boolean
          @default true
          @private
        */
        _JQUERY_INTEGRATION: true,
        EMBER_LOAD_HOOKS: {},
        FEATURES: {}
    };
    (function (EmberENV) {
        if (typeof EmberENV !== 'object' || EmberENV === null) return;
        for (var flag in EmberENV) {
            if (!EmberENV.hasOwnProperty(flag) || flag === 'EXTEND_PROTOTYPES' || flag === 'EMBER_LOAD_HOOKS') continue;
            var defaultValue = ENV[flag];
            if (defaultValue === true) {
                ENV[flag] = EmberENV[flag] !== false;
            } else if (defaultValue === false) {
                ENV[flag] = EmberENV[flag] === true;
            }
        }
        var EXTEND_PROTOTYPES = EmberENV.EXTEND_PROTOTYPES;

        if (EXTEND_PROTOTYPES !== undefined) {
            if (typeof EXTEND_PROTOTYPES === 'object' && EXTEND_PROTOTYPES !== null) {
                ENV.EXTEND_PROTOTYPES.String = EXTEND_PROTOTYPES.String !== false;
                ENV.EXTEND_PROTOTYPES.Function = EXTEND_PROTOTYPES.Function !== false;
                ENV.EXTEND_PROTOTYPES.Array = EXTEND_PROTOTYPES.Array !== false;
            } else {
                var isEnabled = EXTEND_PROTOTYPES !== false;
                ENV.EXTEND_PROTOTYPES.String = isEnabled;
                ENV.EXTEND_PROTOTYPES.Function = isEnabled;
                ENV.EXTEND_PROTOTYPES.Array = isEnabled;
            }
        }
        // TODO this does not seem to be used by anything,
        //      can we remove it? do we need to deprecate it?
        var EMBER_LOAD_HOOKS = EmberENV.EMBER_LOAD_HOOKS;

        if (typeof EMBER_LOAD_HOOKS === 'object' && EMBER_LOAD_HOOKS !== null) {
            for (var hookName in EMBER_LOAD_HOOKS) {
                if (!EMBER_LOAD_HOOKS.hasOwnProperty(hookName)) continue;
                var hooks = EMBER_LOAD_HOOKS[hookName];
                if (Array.isArray(hooks)) {
                    ENV.EMBER_LOAD_HOOKS[hookName] = hooks.filter(function (hook) {
                        return typeof hook === 'function';
                    });
                }
            }
        }
        var FEATURES = EmberENV.FEATURES;

        if (typeof FEATURES === 'object' && FEATURES !== null) {
            for (var feature in FEATURES) {
                if (!FEATURES.hasOwnProperty(feature)) continue;
                ENV.FEATURES[feature] = FEATURES[feature] === true;
            }
        }
    })(global$1.EmberENV || global$1.ENV);
    function getENV() {
        return ENV;
    }

    exports.global = global$1;
    exports.context = context;
    exports.getLookup = getLookup;
    exports.setLookup = setLookup;
    exports.ENV = ENV;
    exports.getENV = getENV;
});
enifed("@ember/-internals/error-handling/index", ["exports"], function (exports) {
    "use strict";

    exports.getOnerror = getOnerror;
    exports.setOnerror = setOnerror;
    exports.getDispatchOverride = getDispatchOverride;
    exports.setDispatchOverride = setDispatchOverride;
    var onerror = void 0;
    var onErrorTarget = exports.onErrorTarget = {
        get onerror() {
            return onerror;
        }
    };
    // Ember.onerror getter
    function getOnerror() {
        return onerror;
    }
    // Ember.onerror setter
    function setOnerror(handler) {
        onerror = handler;
    }
    var dispatchOverride = void 0;
    // allows testing adapter to override dispatch
    function getDispatchOverride() {
        return dispatchOverride;
    }
    function setDispatchOverride(handler) {
        dispatchOverride = handler;
    }
});
enifed('@ember/-internals/extension-support/index', ['exports', '@ember/-internals/extension-support/lib/data_adapter', '@ember/-internals/extension-support/lib/container_debug_adapter'], function (exports, _data_adapter, _container_debug_adapter) {
  'use strict';

  Object.defineProperty(exports, 'DataAdapter', {
    enumerable: true,
    get: function () {
      return _data_adapter.default;
    }
  });
  Object.defineProperty(exports, 'ContainerDebugAdapter', {
    enumerable: true,
    get: function () {
      return _container_debug_adapter.default;
    }
  });
});
enifed('@ember/-internals/extension-support/lib/container_debug_adapter', ['exports', '@ember/string', '@ember/-internals/runtime'], function (exports, _string, _runtime) {
  'use strict';

  exports.default = _runtime.Object.extend({
    /**
      The resolver instance of the application
      being debugged. This property will be injected
      on creation.
       @property resolver
      @default null
      @public
    */
    resolver: null,

    /**
      Returns true if it is possible to catalog a list of available
      classes in the resolver for a given type.
       @method canCatalogEntriesByType
      @param {String} type The type. e.g. "model", "controller", "route".
      @return {boolean} whether a list is available for this type.
      @public
    */
    canCatalogEntriesByType: function (type) {
      if (type === 'model' || type === 'template') {
        return false;
      }

      return true;
    },

    /**
      Returns the available classes a given type.
       @method catalogEntriesByType
      @param {String} type The type. e.g. "model", "controller", "route".
      @return {Array} An array of strings.
      @public
    */
    catalogEntriesByType: function (type) {
      var namespaces = (0, _runtime.A)(_runtime.Namespace.NAMESPACES);
      var types = (0, _runtime.A)();
      var typeSuffixRegex = new RegExp((0, _string.classify)(type) + '$');

      namespaces.forEach(function (namespace) {
        for (var key in namespace) {
          if (!namespace.hasOwnProperty(key)) {
            continue;
          }
          if (typeSuffixRegex.test(key)) {
            var klass = namespace[key];
            if ((0, _runtime.typeOf)(klass) === 'class') {
              types.push((0, _string.dasherize)(key.replace(typeSuffixRegex, '')));
            }
          }
        }
      });
      return types;
    }
  });
});
enifed('@ember/-internals/extension-support/lib/data_adapter', ['exports', '@ember/-internals/owner', '@ember/runloop', '@ember/-internals/metal', '@ember/string', '@ember/-internals/runtime'], function (exports, _owner, _runloop, _metal, _string, _runtime) {
  'use strict';

  exports.default = _runtime.Object.extend({
    init: function () {
      this._super.apply(this, arguments);
      this.releaseMethods = (0, _runtime.A)();
    },

    /**
      The container-debug-adapter which is used
      to list all models.
       @property containerDebugAdapter
      @default undefined
      @since 1.5.0
      @public
    **/
    containerDebugAdapter: undefined,

    /**
      The number of attributes to send
      as columns. (Enough to make the record
      identifiable).
       @private
      @property attributeLimit
      @default 3
      @since 1.3.0
    */
    attributeLimit: 3,

    /**
       Ember Data > v1.0.0-beta.18
       requires string model names to be passed
       around instead of the actual factories.
        This is a stamp for the Ember Inspector
       to differentiate between the versions
       to be able to support older versions too.
        @public
       @property acceptsModelName
     */
    acceptsModelName: true,

    /**
      Stores all methods that clear observers.
      These methods will be called on destruction.
       @private
      @property releaseMethods
      @since 1.3.0
    */
    releaseMethods: (0, _runtime.A)(),

    /**
      Specifies how records can be filtered.
      Records returned will need to have a `filterValues`
      property with a key for every name in the returned array.
       @public
      @method getFilters
      @return {Array} List of objects defining filters.
       The object should have a `name` and `desc` property.
    */
    getFilters: function () {
      return (0, _runtime.A)();
    },

    /**
      Fetch the model types and observe them for changes.
       @public
      @method watchModelTypes
       @param {Function} typesAdded Callback to call to add types.
      Takes an array of objects containing wrapped types (returned from `wrapModelType`).
       @param {Function} typesUpdated Callback to call when a type has changed.
      Takes an array of objects containing wrapped types.
       @return {Function} Method to call to remove all observers
    */
    watchModelTypes: function (typesAdded, typesUpdated) {
      var _this = this;

      var modelTypes = this.getModelTypes();
      var releaseMethods = (0, _runtime.A)();
      var typesToSend = void 0;

      typesToSend = modelTypes.map(function (type) {
        var klass = type.klass;
        var wrapped = _this.wrapModelType(klass, type.name);
        releaseMethods.push(_this.observeModelType(type.name, typesUpdated));
        return wrapped;
      });

      typesAdded(typesToSend);

      var release = function () {
        releaseMethods.forEach(function (fn) {
          return fn();
        });
        _this.releaseMethods.removeObject(release);
      };
      this.releaseMethods.pushObject(release);
      return release;
    },
    _nameToClass: function (type) {
      if (typeof type === 'string') {
        var owner = (0, _owner.getOwner)(this);
        var Factory = owner.factoryFor('model:' + type);
        type = Factory && Factory.class;
      }
      return type;
    },

    /**
      Fetch the records of a given type and observe them for changes.
       @public
      @method watchRecords
       @param {String} modelName The model name.
       @param {Function} recordsAdded Callback to call to add records.
      Takes an array of objects containing wrapped records.
      The object should have the following properties:
        columnValues: {Object} The key and value of a table cell.
        object: {Object} The actual record object.
       @param {Function} recordsUpdated Callback to call when a record has changed.
      Takes an array of objects containing wrapped records.
       @param {Function} recordsRemoved Callback to call when a record has removed.
      Takes the following parameters:
        index: The array index where the records were removed.
        count: The number of records removed.
       @return {Function} Method to call to remove all observers.
    */
    watchRecords: function (modelName, recordsAdded, recordsUpdated, recordsRemoved) {
      var _this2 = this;

      var releaseMethods = (0, _runtime.A)();
      var klass = this._nameToClass(modelName);
      var records = this.getRecords(klass, modelName);
      var release = void 0;

      function recordUpdated(updatedRecord) {
        recordsUpdated([updatedRecord]);
      }

      var recordsToSend = records.map(function (record) {
        releaseMethods.push(_this2.observeRecord(record, recordUpdated));
        return _this2.wrapRecord(record);
      });

      var contentDidChange = function (array, idx, removedCount, addedCount) {
        for (var i = idx; i < idx + addedCount; i++) {
          var record = (0, _metal.objectAt)(array, i);
          var wrapped = _this2.wrapRecord(record);
          releaseMethods.push(_this2.observeRecord(record, recordUpdated));
          recordsAdded([wrapped]);
        }

        if (removedCount) {
          recordsRemoved(idx, removedCount);
        }
      };

      var observer = {
        didChange: contentDidChange,
        willChange: function () {
          return this;
        }
      };
      (0, _metal.addArrayObserver)(records, this, observer);

      release = function () {
        releaseMethods.forEach(function (fn) {
          return fn();
        });
        (0, _metal.removeArrayObserver)(records, _this2, observer);
        _this2.releaseMethods.removeObject(release);
      };

      recordsAdded(recordsToSend);

      this.releaseMethods.pushObject(release);
      return release;
    },

    /**
      Clear all observers before destruction
      @private
      @method willDestroy
    */
    willDestroy: function () {
      this._super.apply(this, arguments);
      this.releaseMethods.forEach(function (fn) {
        return fn();
      });
    },

    /**
      Detect whether a class is a model.
       Test that against the model class
      of your persistence library.
       @public
      @method detect
      @return boolean Whether the class is a model class or not.
    */
    detect: function () {
      return false;
    },

    /**
      Get the columns for a given model type.
       @public
      @method columnsForType
      @return {Array} An array of columns of the following format:
       name: {String} The name of the column.
       desc: {String} Humanized description (what would show in a table column name).
    */
    columnsForType: function () {
      return (0, _runtime.A)();
    },

    /**
      Adds observers to a model type class.
       @private
      @method observeModelType
      @param {String} modelName The model type name.
      @param {Function} typesUpdated Called when a type is modified.
      @return {Function} The function to call to remove observers.
    */

    observeModelType: function (modelName, typesUpdated) {
      var _this3 = this;

      var klass = this._nameToClass(modelName);
      var records = this.getRecords(klass, modelName);

      function onChange() {
        typesUpdated([this.wrapModelType(klass, modelName)]);
      }

      var observer = {
        didChange: function (array, idx, removedCount, addedCount) {
          // Only re-fetch records if the record count changed
          // (which is all we care about as far as model types are concerned).
          if (removedCount > 0 || addedCount > 0) {
            (0, _runloop.scheduleOnce)('actions', this, onChange);
          }
        },
        willChange: function () {
          return this;
        }
      };

      (0, _metal.addArrayObserver)(records, this, observer);

      var release = function () {
        return (0, _metal.removeArrayObserver)(records, _this3, observer);
      };

      return release;
    },

    /**
      Wraps a given model type and observes changes to it.
       @private
      @method wrapModelType
      @param {Class} klass A model class.
      @param {String} modelName Name of the class.
      @return {Object} Contains the wrapped type and the function to remove observers
      Format:
        type: {Object} The wrapped type.
          The wrapped type has the following format:
            name: {String} The name of the type.
            count: {Integer} The number of records available.
            columns: {Columns} An array of columns to describe the record.
            object: {Class} The actual Model type class.
        release: {Function} The function to remove observers.
    */
    wrapModelType: function (klass, name) {
      var records = this.getRecords(klass, name);
      var typeToSend = void 0;

      typeToSend = {
        name: name,
        count: (0, _metal.get)(records, 'length'),
        columns: this.columnsForType(klass),
        object: klass
      };

      return typeToSend;
    },

    /**
      Fetches all models defined in the application.
       @private
      @method getModelTypes
      @return {Array} Array of model types.
    */
    getModelTypes: function () {
      var _this4 = this;

      var containerDebugAdapter = this.get('containerDebugAdapter');
      var types = void 0;

      if (containerDebugAdapter.canCatalogEntriesByType('model')) {
        types = containerDebugAdapter.catalogEntriesByType('model');
      } else {
        types = this._getObjectsOnNamespaces();
      }

      // New adapters return strings instead of classes.
      types = (0, _runtime.A)(types).map(function (name) {
        return {
          klass: _this4._nameToClass(name),
          name: name
        };
      });
      types = (0, _runtime.A)(types).filter(function (type) {
        return _this4.detect(type.klass);
      });

      return (0, _runtime.A)(types);
    },

    /**
      Loops over all namespaces and all objects
      attached to them.
       @private
      @method _getObjectsOnNamespaces
      @return {Array} Array of model type strings.
    */
    _getObjectsOnNamespaces: function () {
      var _this5 = this;

      var namespaces = (0, _runtime.A)(_runtime.Namespace.NAMESPACES);
      var types = (0, _runtime.A)();

      namespaces.forEach(function (namespace) {
        for (var key in namespace) {
          if (!namespace.hasOwnProperty(key)) {
            continue;
          }
          // Even though we will filter again in `getModelTypes`,
          // we should not call `lookupFactory` on non-models
          if (!_this5.detect(namespace[key])) {
            continue;
          }
          var name = (0, _string.dasherize)(key);
          types.push(name);
        }
      });
      return types;
    },

    /**
      Fetches all loaded records for a given type.
       @public
      @method getRecords
      @return {Array} An array of records.
       This array will be observed for changes,
       so it should update when new records are added/removed.
    */
    getRecords: function () {
      return (0, _runtime.A)();
    },

    /**
      Wraps a record and observers changes to it.
       @private
      @method wrapRecord
      @param {Object} record The record instance.
      @return {Object} The wrapped record. Format:
      columnValues: {Array}
      searchKeywords: {Array}
    */
    wrapRecord: function (record) {
      var recordToSend = { object: record };

      recordToSend.columnValues = this.getRecordColumnValues(record);
      recordToSend.searchKeywords = this.getRecordKeywords(record);
      recordToSend.filterValues = this.getRecordFilterValues(record);
      recordToSend.color = this.getRecordColor(record);

      return recordToSend;
    },

    /**
      Gets the values for each column.
       @public
      @method getRecordColumnValues
      @return {Object} Keys should match column names defined
      by the model type.
    */
    getRecordColumnValues: function () {
      return {};
    },

    /**
      Returns keywords to match when searching records.
       @public
      @method getRecordKeywords
      @return {Array} Relevant keywords for search.
    */
    getRecordKeywords: function () {
      return (0, _runtime.A)();
    },

    /**
      Returns the values of filters defined by `getFilters`.
       @public
      @method getRecordFilterValues
      @param {Object} record The record instance.
      @return {Object} The filter values.
    */
    getRecordFilterValues: function () {
      return {};
    },

    /**
      Each record can have a color that represents its state.
       @public
      @method getRecordColor
      @param {Object} record The record instance
      @return {String} The records color.
        Possible options: black, red, blue, green.
    */
    getRecordColor: function () {
      return null;
    },

    /**
      Observes all relevant properties and re-sends the wrapped record
      when a change occurs.
       @public
      @method observerRecord
      @return {Function} The function to call to remove all observers.
    */
    observeRecord: function () {
      return function () {};
    }
  });
});
enifed('@ember/-internals/glimmer', ['exports', '@glimmer/runtime', '@glimmer/util', '@glimmer/node', 'node-module', 'ember-babel', '@ember/-internals/owner', '@glimmer/opcode-compiler', '@ember/-internals/runtime', '@ember/-internals/utils', '@glimmer/reference', '@ember/-internals/metal', '@ember/-internals/views', '@ember/debug', '@ember/-internals/browser-environment', '@ember/instrumentation', '@ember/service', '@ember/-internals/environment', '@ember/polyfills', '@ember/string', '@glimmer/wire-format', '@ember/-internals/container', '@ember/deprecated-features', '@ember/runloop', 'rsvp', '@ember/-internals/routing'], function (exports, _runtime, _util, _node, _nodeModule, _emberBabel, _owner, _opcodeCompiler, _runtime2, _utils, _reference, _metal, _views, _debug, _browserEnvironment, _instrumentation, _service, _environment2, _polyfills, _string, _wireFormat, _container, _deprecatedFeatures, _runloop, _rsvp, _routing) {
    'use strict';

    exports.modifierCapabilties = exports.getModifierManager = exports.setModifierManager = exports.getComponentManager = exports.setComponentManager = exports.capabilities = exports.OutletView = exports.DebugStack = exports.iterableFor = exports.INVOKE = exports.UpdatableReference = exports.AbstractComponentManager = exports._experimentalMacros = exports._registerMacros = exports.setupApplicationRegistry = exports.setupEngineRegistry = exports.setTemplates = exports.getTemplates = exports.hasTemplate = exports.setTemplate = exports.getTemplate = exports.renderSettled = exports._resetRenderers = exports.InteractiveRenderer = exports.InertRenderer = exports.Renderer = exports.isHTMLSafe = exports.htmlSafe = exports.escapeExpression = exports.SafeString = exports.Environment = exports.helper = exports.Helper = exports.ROOT_REF = exports.Component = exports.LinkComponent = exports.TextArea = exports.TextField = exports.Checkbox = exports.template = exports.RootTemplate = exports.NodeDOMTreeConstruction = exports.isSerializationFirstNode = exports.DOMTreeConstruction = exports.DOMChanges = undefined;
    Object.defineProperty(exports, 'DOMChanges', {
        enumerable: true,
        get: function () {
            return _runtime.DOMChanges;
        }
    });
    Object.defineProperty(exports, 'DOMTreeConstruction', {
        enumerable: true,
        get: function () {
            return _runtime.DOMTreeConstruction;
        }
    });
    Object.defineProperty(exports, 'isSerializationFirstNode', {
        enumerable: true,
        get: function () {
            return _util.isSerializationFirstNode;
        }
    });
    Object.defineProperty(exports, 'NodeDOMTreeConstruction', {
        enumerable: true,
        get: function () {
            return _node.NodeDOMTreeConstruction;
        }
    });


    var _CoreView$extend;

    var _templateObject = (0, _emberBabel.taggedTemplateLiteralLoose)(['template:components/-default'], ['template:components/-default']),
        _templateObject2 = (0, _emberBabel.taggedTemplateLiteralLoose)(['component:-default'], ['component:-default']),
        _templateObject3 = (0, _emberBabel.taggedTemplateLiteralLoose)(['template:-root'], ['template:-root']),
        _templateObject4 = (0, _emberBabel.taggedTemplateLiteralLoose)(['template-compiler:main'], ['template-compiler:main']);

    function template(json) {
        return new FactoryWrapper((0, _opcodeCompiler.templateFactory)(json));
    }

    var FactoryWrapper = function () {
        function FactoryWrapper(factory) {
            (0, _emberBabel.classCallCheck)(this, FactoryWrapper);

            this.factory = factory;
            this.id = factory.id;
            this.meta = factory.meta;
        }

        FactoryWrapper.prototype.create = function create(injections) {
            var owner = (0, _owner.getOwner)(injections);
            return this.factory.create(injections.compiler, { owner: owner });
        };

        return FactoryWrapper;
    }();

    var RootTemplate = template({ "id": "HlDcU23A", "block": "{\"symbols\":[],\"statements\":[[1,[27,\"component\",[[22,0,[]]],null],false]],\"hasEval\":false}", "meta": { "moduleName": "packages/@ember/-internals/glimmer/lib/templates/root.hbs" } });

    /**
    @module @ember/component
    */
    var RECOMPUTE_TAG = (0, _utils.symbol)('RECOMPUTE_TAG');
    function isHelperFactory(helper) {
        return typeof helper === 'object' && helper !== null && helper.class && helper.class.isHelperFactory;
    }
    function isSimpleHelper(helper) {
        return helper.destroy === undefined;
    }
    /**
      Ember Helpers are functions that can compute values, and are used in templates.
      For example, this code calls a helper named `format-currency`:
    
      ```handlebars
      <div>{{format-currency cents currency="$"}}</div>
      ```
    
      Additionally a helper can be called as a nested helper (sometimes called a
      subexpression). In this example, the computed value of a helper is passed
      to a component named `show-money`:
    
      ```handlebars
      {{show-money amount=(format-currency cents currency="$")}}
      ```
    
      Helpers defined using a class must provide a `compute` function. For example:
    
      ```app/helpers/format-currency.js
      import Helper from '@ember/component/helper';
    
      export default Helper.extend({
        compute([cents], { currency }) {
          return `${currency}${cents * 0.01}`;
        }
      });
      ```
    
      Each time the input to a helper changes, the `compute` function will be
      called again.
    
      As instances, these helpers also have access to the container and will accept
      injected dependencies.
    
      Additionally, class helpers can call `recompute` to force a new computation.
    
      @class Helper
      @public
      @since 1.13.0
    */
    var Helper = _runtime2.FrameworkObject.extend({
        init: function () {
            this._super.apply(this, arguments);
            this[RECOMPUTE_TAG] = _reference.DirtyableTag.create();
        },

        /**
          On a class-based helper, it may be useful to force a recomputation of that
          helpers value. This is akin to `rerender` on a component.
             For example, this component will rerender when the `currentUser` on a
          session service changes:
             ```app/helpers/current-user-email.js
          import Helper from '@ember/component/helper'
          import { inject as service } from '@ember/service'
          import { observer } from '@ember/object'
             export default Helper.extend({
            session: service(),
            onNewUser: observer('session.currentUser', function() {
              this.recompute();
            }),
            compute() {
              return this.get('session.currentUser.email');
            }
          });
          ```
             @method recompute
          @public
          @since 1.13.0
        */
        recompute: function () {
            this[RECOMPUTE_TAG].inner.dirty();
        }
    });
    Helper.isHelperFactory = true;

    var Wrapper = function () {
        function Wrapper(compute) {
            (0, _emberBabel.classCallCheck)(this, Wrapper);

            this.compute = compute;
            this.isHelperFactory = true;
        }

        Wrapper.prototype.create = function create() {
            // needs new instance or will leak containers
            return {
                compute: this.compute
            };
        };

        return Wrapper;
    }();
    /**
      In many cases, the ceremony of a full `Helper` class is not required.
      The `helper` method create pure-function helpers without instances. For
      example:
    
      ```app/helpers/format-currency.js
      import { helper } from '@ember/component/helper';
    
      export default helper(function(params, hash) {
        let cents = params[0];
        let currency = hash.currency;
        return `${currency}${cents * 0.01}`;
      });
      ```
    
      @static
      @param {Function} helper The helper function
      @method helper
      @for @ember/component/helper
      @public
      @since 1.13.0
    */

    function helper(helperFn) {
        return new Wrapper(helperFn);
    }

    function _toBool(predicate) {
        if ((0, _runtime2.isArray)(predicate)) {
            return predicate.length !== 0;
        } else {
            return !!predicate;
        }
    }

    var UPDATE = (0, _utils.symbol)('UPDATE');
    var INVOKE = (0, _utils.symbol)('INVOKE');
    var ACTION = (0, _utils.symbol)('ACTION');
    var maybeFreeze = void 0;
    if (true /* DEBUG */) {
            // gaurding this in a DEBUG gaurd (as well as all invocations)
            // so that it is properly stripped during the minification's
            // dead code elimination
            maybeFreeze = function (obj) {
                // re-freezing an already frozen object introduces a significant
                // performance penalty on Chrome (tested through 59).
                //
                // See: https://bugs.chromium.org/p/v8/issues/detail?id=6450
                if (!Object.isFrozen(obj)) {
                    Object.freeze(obj);
                }
            };
        }

    var EmberPathReference = function () {
        function EmberPathReference() {
            (0, _emberBabel.classCallCheck)(this, EmberPathReference);
        }

        EmberPathReference.prototype.get = function get(key) {
            return PropertyReference.create(this, key);
        };

        return EmberPathReference;
    }();

    var CachedReference$1 = function (_EmberPathReference) {
        (0, _emberBabel.inherits)(CachedReference$1, _EmberPathReference);

        function CachedReference$1() {
            (0, _emberBabel.classCallCheck)(this, CachedReference$1);

            var _this = (0, _emberBabel.possibleConstructorReturn)(this, _EmberPathReference.call(this));

            _this._lastRevision = null;
            _this._lastValue = null;
            return _this;
        }

        CachedReference$1.prototype.value = function value() {
            var tag = this.tag,
                _lastRevision = this._lastRevision,
                _lastValue = this._lastValue;

            if (_lastRevision === null || !tag.validate(_lastRevision)) {
                _lastValue = this._lastValue = this.compute();
                this._lastRevision = tag.value();
            }
            return _lastValue;
        };

        return CachedReference$1;
    }(EmberPathReference);

    var RootReference = function (_ConstReference) {
        (0, _emberBabel.inherits)(RootReference, _ConstReference);

        function RootReference(value) {
            (0, _emberBabel.classCallCheck)(this, RootReference);

            var _this2 = (0, _emberBabel.possibleConstructorReturn)(this, _ConstReference.call(this, value));

            _this2.children = Object.create(null);
            return _this2;
        }

        RootReference.prototype.get = function get(propertyKey) {
            var ref = this.children[propertyKey];
            if (ref === undefined) {
                ref = this.children[propertyKey] = new RootPropertyReference(this.inner, propertyKey);
            }
            return ref;
        };

        return RootReference;
    }(_reference.ConstReference);

    var _TwoWayFlushDetectionTag = void 0;
    if (true /* DEBUG */) {
            _TwoWayFlushDetectionTag = function () {
                TwoWayFlushDetectionTag.create = function create(tag, key, ref) {
                    return new _reference.TagWrapper(tag.type, new _TwoWayFlushDetectionTag(tag, key, ref));
                };

                function TwoWayFlushDetectionTag(tag, key, ref) {
                    (0, _emberBabel.classCallCheck)(this, TwoWayFlushDetectionTag);

                    this.tag = tag;
                    this.parent = null;
                    this.key = key;
                    this.ref = ref;
                }

                TwoWayFlushDetectionTag.prototype.value = function value() {
                    return this.tag.value();
                };

                TwoWayFlushDetectionTag.prototype.validate = function validate(ticket) {
                    var parent = this.parent,
                        key = this.key;

                    var isValid = this.tag.validate(ticket);
                    if (isValid && parent) {
                        (0, _metal.didRender)(parent, key, this.ref);
                    }
                    return isValid;
                };

                TwoWayFlushDetectionTag.prototype.didCompute = function didCompute(parent) {
                    this.parent = parent;
                    (0, _metal.didRender)(parent, this.key, this.ref);
                };

                return TwoWayFlushDetectionTag;
            }();
        }

    var PropertyReference = function (_CachedReference$) {
        (0, _emberBabel.inherits)(PropertyReference, _CachedReference$);

        function PropertyReference() {
            (0, _emberBabel.classCallCheck)(this, PropertyReference);

            return (0, _emberBabel.possibleConstructorReturn)(this, _CachedReference$.apply(this, arguments));
        }

        PropertyReference.create = function create(parentReference, propertyKey) {
            if ((0, _reference.isConst)(parentReference)) {
                return new RootPropertyReference(parentReference.value(), propertyKey);
            } else {
                return new NestedPropertyReference(parentReference, propertyKey);
            }
        };

        PropertyReference.prototype.get = function get(key) {
            return new NestedPropertyReference(this, key);
        };

        return PropertyReference;
    }(CachedReference$1);

    var RootPropertyReference = function (_PropertyReference) {
        (0, _emberBabel.inherits)(RootPropertyReference, _PropertyReference);

        function RootPropertyReference(parentValue, propertyKey) {
            (0, _emberBabel.classCallCheck)(this, RootPropertyReference);

            var _this4 = (0, _emberBabel.possibleConstructorReturn)(this, _PropertyReference.call(this));

            _this4._parentValue = parentValue;
            _this4._propertyKey = propertyKey;
            if (true /* DEBUG */) {
                    _this4.tag = _TwoWayFlushDetectionTag.create((0, _metal.tagForProperty)(parentValue, propertyKey), propertyKey, _this4);
                } else {
                _this4.tag = (0, _metal.tagForProperty)(parentValue, propertyKey);
            }
            if (true /* DEBUG */) {
                    (0, _metal.watchKey)(parentValue, propertyKey);
                }
            return _this4;
        }

        RootPropertyReference.prototype.compute = function compute() {
            var _parentValue = this._parentValue,
                _propertyKey = this._propertyKey;

            if (true /* DEBUG */) {
                    this.tag.inner.didCompute(_parentValue);
                }
            return (0, _metal.get)(_parentValue, _propertyKey);
        };

        RootPropertyReference.prototype[UPDATE] = function (value) {
            (0, _metal.set)(this._parentValue, this._propertyKey, value);
        };

        return RootPropertyReference;
    }(PropertyReference);

    var NestedPropertyReference = function (_PropertyReference2) {
        (0, _emberBabel.inherits)(NestedPropertyReference, _PropertyReference2);

        function NestedPropertyReference(parentReference, propertyKey) {
            (0, _emberBabel.classCallCheck)(this, NestedPropertyReference);

            var _this5 = (0, _emberBabel.possibleConstructorReturn)(this, _PropertyReference2.call(this));

            var parentReferenceTag = parentReference.tag;
            var parentObjectTag = _reference.UpdatableTag.create(_reference.CONSTANT_TAG);
            _this5._parentReference = parentReference;
            _this5._parentObjectTag = parentObjectTag;
            _this5._propertyKey = propertyKey;
            if (true /* DEBUG */) {
                    var tag = (0, _reference.combine)([parentReferenceTag, parentObjectTag]);
                    _this5.tag = _TwoWayFlushDetectionTag.create(tag, propertyKey, _this5);
                } else {
                _this5.tag = (0, _reference.combine)([parentReferenceTag, parentObjectTag]);
            }
            return _this5;
        }

        NestedPropertyReference.prototype.compute = function compute() {
            var _parentReference = this._parentReference,
                _parentObjectTag = this._parentObjectTag,
                _propertyKey = this._propertyKey;

            var parentValue = _parentReference.value();
            _parentObjectTag.inner.update((0, _metal.tagForProperty)(parentValue, _propertyKey));
            var parentValueType = typeof parentValue;
            if (parentValueType === 'string' && _propertyKey === 'length') {
                return parentValue.length;
            }
            if (parentValueType === 'object' && parentValue !== null || parentValueType === 'function') {
                if (true /* DEBUG */) {
                        (0, _metal.watchKey)(parentValue, _propertyKey);
                    }
                if (true /* DEBUG */) {
                        this.tag.inner.didCompute(parentValue);
                    }
                return (0, _metal.get)(parentValue, _propertyKey);
            } else {
                return undefined;
            }
        };

        NestedPropertyReference.prototype[UPDATE] = function (value) {
            var parent = this._parentReference.value();
            (0, _metal.set)(parent, this._propertyKey, value);
        };

        return NestedPropertyReference;
    }(PropertyReference);

    var UpdatableReference = function (_EmberPathReference2) {
        (0, _emberBabel.inherits)(UpdatableReference, _EmberPathReference2);

        function UpdatableReference(value) {
            (0, _emberBabel.classCallCheck)(this, UpdatableReference);

            var _this6 = (0, _emberBabel.possibleConstructorReturn)(this, _EmberPathReference2.call(this));

            _this6.tag = _reference.DirtyableTag.create();
            _this6._value = value;
            return _this6;
        }

        UpdatableReference.prototype.value = function value() {
            return this._value;
        };

        UpdatableReference.prototype.update = function update(value) {
            var _value = this._value;

            if (value !== _value) {
                this.tag.inner.dirty();
                this._value = value;
            }
        };

        return UpdatableReference;
    }(EmberPathReference);

    var ConditionalReference$1 = function (_ConditionalReference) {
        (0, _emberBabel.inherits)(ConditionalReference$1, _ConditionalReference);

        ConditionalReference$1.create = function create(reference) {
            if ((0, _reference.isConst)(reference)) {
                var value = reference.value();
                if ((0, _utils.isProxy)(value)) {
                    return new RootPropertyReference(value, 'isTruthy');
                } else {
                    return _runtime.PrimitiveReference.create(_toBool(value));
                }
            }
            return new ConditionalReference$1(reference);
        };

        function ConditionalReference$1(reference) {
            (0, _emberBabel.classCallCheck)(this, ConditionalReference$1);

            var _this7 = (0, _emberBabel.possibleConstructorReturn)(this, _ConditionalReference.call(this, reference));

            _this7.objectTag = _reference.UpdatableTag.create(_reference.CONSTANT_TAG);
            _this7.tag = (0, _reference.combine)([reference.tag, _this7.objectTag]);
            return _this7;
        }

        ConditionalReference$1.prototype.toBool = function toBool(predicate) {
            if ((0, _utils.isProxy)(predicate)) {
                this.objectTag.inner.update((0, _metal.tagForProperty)(predicate, 'isTruthy'));
                return (0, _metal.get)(predicate, 'isTruthy');
            } else {
                this.objectTag.inner.update((0, _metal.tagFor)(predicate));
                return _toBool(predicate);
            }
        };

        return ConditionalReference$1;
    }(_runtime.ConditionalReference);

    var SimpleHelperReference = function (_CachedReference$2) {
        (0, _emberBabel.inherits)(SimpleHelperReference, _CachedReference$2);

        SimpleHelperReference.create = function create(helper$$1, args) {
            if ((0, _reference.isConst)(args)) {
                var positional = args.positional,
                    named = args.named;

                var positionalValue = positional.value();
                var namedValue = named.value();
                if (true /* DEBUG */) {
                        maybeFreeze(positionalValue);
                        maybeFreeze(namedValue);
                    }
                var result = helper$$1(positionalValue, namedValue);
                return valueToRef(result);
            } else {
                return new SimpleHelperReference(helper$$1, args);
            }
        };

        function SimpleHelperReference(helper$$1, args) {
            (0, _emberBabel.classCallCheck)(this, SimpleHelperReference);

            var _this8 = (0, _emberBabel.possibleConstructorReturn)(this, _CachedReference$2.call(this));

            _this8.tag = args.tag;
            _this8.helper = helper$$1;
            _this8.args = args;
            return _this8;
        }

        SimpleHelperReference.prototype.compute = function compute() {
            var helper$$1 = this.helper,
                _args2 = this.args,
                positional = _args2.positional,
                named = _args2.named;

            var positionalValue = positional.value();
            var namedValue = named.value();
            if (true /* DEBUG */) {
                    maybeFreeze(positionalValue);
                    maybeFreeze(namedValue);
                }
            return helper$$1(positionalValue, namedValue);
        };

        return SimpleHelperReference;
    }(CachedReference$1);

    var ClassBasedHelperReference = function (_CachedReference$3) {
        (0, _emberBabel.inherits)(ClassBasedHelperReference, _CachedReference$3);

        ClassBasedHelperReference.create = function create(instance, args) {
            return new ClassBasedHelperReference(instance, args);
        };

        function ClassBasedHelperReference(instance, args) {
            (0, _emberBabel.classCallCheck)(this, ClassBasedHelperReference);

            var _this9 = (0, _emberBabel.possibleConstructorReturn)(this, _CachedReference$3.call(this));

            _this9.tag = (0, _reference.combine)([instance[RECOMPUTE_TAG], args.tag]);
            _this9.instance = instance;
            _this9.args = args;
            return _this9;
        }

        ClassBasedHelperReference.prototype.compute = function compute() {
            var instance = this.instance,
                _args3 = this.args,
                positional = _args3.positional,
                named = _args3.named;

            var positionalValue = positional.value();
            var namedValue = named.value();
            if (true /* DEBUG */) {
                    maybeFreeze(positionalValue);
                    maybeFreeze(namedValue);
                }
            return instance.compute(positionalValue, namedValue);
        };

        return ClassBasedHelperReference;
    }(CachedReference$1);

    var InternalHelperReference = function (_CachedReference$4) {
        (0, _emberBabel.inherits)(InternalHelperReference, _CachedReference$4);

        function InternalHelperReference(helper$$1, args) {
            (0, _emberBabel.classCallCheck)(this, InternalHelperReference);

            var _this10 = (0, _emberBabel.possibleConstructorReturn)(this, _CachedReference$4.call(this));

            _this10.tag = args.tag;
            _this10.helper = helper$$1;
            _this10.args = args;
            return _this10;
        }

        InternalHelperReference.prototype.compute = function compute() {
            var helper$$1 = this.helper,
                args = this.args;

            return helper$$1(args);
        };

        return InternalHelperReference;
    }(CachedReference$1);

    var UnboundReference = function (_ConstReference2) {
        (0, _emberBabel.inherits)(UnboundReference, _ConstReference2);

        function UnboundReference() {
            (0, _emberBabel.classCallCheck)(this, UnboundReference);

            return (0, _emberBabel.possibleConstructorReturn)(this, _ConstReference2.apply(this, arguments));
        }

        UnboundReference.create = function create(value) {
            return valueToRef(value, false);
        };

        UnboundReference.prototype.get = function get(key) {
            return valueToRef((0, _metal.get)(this.inner, key), false);
        };

        return UnboundReference;
    }(_reference.ConstReference);

    var ReadonlyReference = function (_CachedReference$5) {
        (0, _emberBabel.inherits)(ReadonlyReference, _CachedReference$5);

        function ReadonlyReference(inner) {
            (0, _emberBabel.classCallCheck)(this, ReadonlyReference);

            var _this12 = (0, _emberBabel.possibleConstructorReturn)(this, _CachedReference$5.call(this));

            _this12.inner = inner;
            return _this12;
        }

        ReadonlyReference.prototype.compute = function compute() {
            return this.inner.value();
        };

        ReadonlyReference.prototype.get = function get(key) {
            return this.inner.get(key);
        };

        (0, _emberBabel.createClass)(ReadonlyReference, [{
            key: 'tag',
            get: function () {
                return this.inner.tag;
            }
        }, {
            key: INVOKE,
            get: function () {
                return this.inner[INVOKE];
            }
        }]);

        return ReadonlyReference;
    }(CachedReference$1);

    function referenceFromParts(root, parts) {
        var reference = root;
        for (var i = 0; i < parts.length; i++) {
            reference = reference.get(parts[i]);
        }
        return reference;
    }
    function valueToRef(value) {
        var bound = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        if (value !== null && typeof value === 'object') {
            // root of interop with ember objects
            return bound ? new RootReference(value) : new UnboundReference(value);
        }
        // ember doesn't do observing with functions
        if (typeof value === 'function') {
            return new UnboundReference(value);
        }
        return _runtime.PrimitiveReference.create(value);
    }

    var DIRTY_TAG = (0, _utils.symbol)('DIRTY_TAG');
    var ARGS = (0, _utils.symbol)('ARGS');
    var ROOT_REF = (0, _utils.symbol)('ROOT_REF');
    var IS_DISPATCHING_ATTRS = (0, _utils.symbol)('IS_DISPATCHING_ATTRS');
    var HAS_BLOCK = (0, _utils.symbol)('HAS_BLOCK');
    var BOUNDS = (0, _utils.symbol)('BOUNDS');
    /**
    @module @ember/component
    */
    /**
      A `Component` is a view that is completely
      isolated. Properties accessed in its templates go
      to the view object and actions are targeted at
      the view object. There is no access to the
      surrounding context or outer controller; all
      contextual information must be passed in.
    
      The easiest way to create a `Component` is via
      a template. If you name a template
      `app/templates/components/my-foo.hbs`, you will be able to use
      `{{my-foo}}` in other templates, which will make
      an instance of the isolated component.
    
      ```app/templates/components/my-foo.hbs
      {{person-profile person=currentUser}}
      ```
    
      ```app/templates/components/person-profile.hbs
      <h1>{{person.title}}</h1>
      <img src={{person.avatar}}>
      <p class='signature'>{{person.signature}}</p>
      ```
    
      You can use `yield` inside a template to
      include the **contents** of any block attached to
      the component. The block will be executed in the
      context of the surrounding context or outer controller:
    
      ```handlebars
      {{#person-profile person=currentUser}}
        <p>Admin mode</p>
        {{! Executed in the controller's context. }}
      {{/person-profile}}
      ```
    
      ```app/templates/components/person-profile.hbs
      <h1>{{person.title}}</h1>
      {{! Executed in the component's context. }}
      {{yield}} {{! block contents }}
      ```
    
      If you want to customize the component, in order to
      handle events or actions, you implement a subclass
      of `Component` named after the name of the
      component.
    
      For example, you could implement the action
      `hello` for the `person-profile` component:
    
      ```app/components/person-profile.js
      import Component from '@ember/component';
    
      export default Component.extend({
        actions: {
          hello(name) {
            console.log("Hello", name);
          }
        }
      });
      ```
    
      And then use it in the component's template:
    
      ```app/templates/components/person-profile.hbs
      <h1>{{person.title}}</h1>
      {{yield}} <!-- block contents -->
      <button {{action 'hello' person.name}}>
        Say Hello to {{person.name}}
      </button>
      ```
    
      Components must have a `-` in their name to avoid
      conflicts with built-in controls that wrap HTML
      elements. This is consistent with the same
      requirement in web components.
    
      ## HTML Tag
    
      The default HTML tag name used for a component's DOM representation is `div`.
      This can be customized by setting the `tagName` property.
      The following component class:
    
      ```app/components/emphasized-paragraph.js
      import Component from '@ember/component';
    
      export default Component.extend({
        tagName: 'em'
      });
      ```
    
      Would result in instances with the following HTML:
    
      ```html
      <em id="ember1" class="ember-view"></em>
      ```
    
      ## HTML `class` Attribute
    
      The HTML `class` attribute of a component's tag can be set by providing a
      `classNames` property that is set to an array of strings:
    
      ```app/components/my-widget.js
      import Component from '@ember/component';
    
      export default Component.extend({
        classNames: ['my-class', 'my-other-class']
      });
      ```
    
      Will result in component instances with an HTML representation of:
    
      ```html
      <div id="ember1" class="ember-view my-class my-other-class"></div>
      ```
    
      `class` attribute values can also be set by providing a `classNameBindings`
      property set to an array of properties names for the component. The return value
      of these properties will be added as part of the value for the components's `class`
      attribute. These properties can be computed properties:
    
      ```app/components/my-widget.js
      import Component from '@ember/component';
      import { computed } from '@ember/object';
    
      export default Component.extend({
        classNameBindings: ['propertyA', 'propertyB'],
    
        propertyA: 'from-a',
        propertyB: computed(function() {
          if (someLogic) { return 'from-b'; }
        })
      });
      ```
    
      Will result in component instances with an HTML representation of:
    
      ```html
      <div id="ember1" class="ember-view from-a from-b"></div>
      ```
    
      If the value of a class name binding returns a boolean the property name
      itself will be used as the class name if the property is true.
      The class name will not be added if the value is `false` or `undefined`.
    
      ```app/components/my-widget.js
      import Component from '@ember/component';
    
      export default Component.extend({
        classNameBindings: ['hovered'],
    
        hovered: true
      });
      ```
    
      Will result in component instances with an HTML representation of:
    
      ```html
      <div id="ember1" class="ember-view hovered"></div>
      ```
    
      When using boolean class name bindings you can supply a string value other
      than the property name for use as the `class` HTML attribute by appending the
      preferred value after a ":" character when defining the binding:
    
      ```app/components/my-widget.js
      import Component from '@ember/component';
    
      export default Component.extend({
        classNameBindings: ['awesome:so-very-cool'],
    
        awesome: true
      });
      ```
    
      Will result in component instances with an HTML representation of:
    
      ```html
      <div id="ember1" class="ember-view so-very-cool"></div>
      ```
    
      Boolean value class name bindings whose property names are in a
      camelCase-style format will be converted to a dasherized format:
    
      ```app/components/my-widget.js
      import Component from '@ember/component';
    
      export default Component.extend({
        classNameBindings: ['isUrgent'],
    
        isUrgent: true
      });
      ```
    
      Will result in component instances with an HTML representation of:
    
      ```html
      <div id="ember1" class="ember-view is-urgent"></div>
      ```
    
      Class name bindings can also refer to object values that are found by
      traversing a path relative to the component itself:
    
      ```app/components/my-widget.js
      import Component from '@ember/component';
      import EmberObject from '@ember/object';
    
      export default Component.extend({
        classNameBindings: ['messages.empty'],
    
        messages: EmberObject.create({
          empty: true
        })
      });
      ```
    
      Will result in component instances with an HTML representation of:
    
      ```html
      <div id="ember1" class="ember-view empty"></div>
      ```
    
      If you want to add a class name for a property which evaluates to true and
      and a different class name if it evaluates to false, you can pass a binding
      like this:
    
      ```app/components/my-widget.js
      import Component from '@ember/component';
    
      export default Component.extend({
        classNameBindings: ['isEnabled:enabled:disabled'],
        isEnabled: true
      });
      ```
    
      Will result in component instances with an HTML representation of:
    
      ```html
      <div id="ember1" class="ember-view enabled"></div>
      ```
    
      When isEnabled is `false`, the resulting HTML representation looks like
      this:
    
      ```html
      <div id="ember1" class="ember-view disabled"></div>
      ```
    
      This syntax offers the convenience to add a class if a property is `false`:
    
      ```app/components/my-widget.js
      import Component from '@ember/component';
    
      // Applies no class when isEnabled is true and class 'disabled' when isEnabled is false
      export default Component.extend({
        classNameBindings: ['isEnabled::disabled'],
        isEnabled: true
      });
      ```
    
      Will result in component instances with an HTML representation of:
    
      ```html
      <div id="ember1" class="ember-view"></div>
      ```
    
      When the `isEnabled` property on the component is set to `false`, it will result
      in component instances with an HTML representation of:
    
      ```html
      <div id="ember1" class="ember-view disabled"></div>
      ```
    
      Updates to the value of a class name binding will result in automatic
      update of the  HTML `class` attribute in the component's rendered HTML
      representation. If the value becomes `false` or `undefined` the class name
      will be removed.
      Both `classNames` and `classNameBindings` are concatenated properties. See
      [EmberObject](/api/ember/release/classes/EmberObject) documentation for more
      information about concatenated properties.
    
      ## HTML Attributes
    
      The HTML attribute section of a component's tag can be set by providing an
      `attributeBindings` property set to an array of property names on the component.
      The return value of these properties will be used as the value of the component's
      HTML associated attribute:
    
      ```app/components/my-anchor.js
      import Component from '@ember/component';
    
      export default Component.extend({
        tagName: 'a',
        attributeBindings: ['href'],
    
        href: 'http://google.com'
      });
      ```
    
      Will result in component instances with an HTML representation of:
    
      ```html
      <a id="ember1" class="ember-view" href="http://google.com"></a>
      ```
    
      One property can be mapped on to another by placing a ":" between
      the source property and the destination property:
    
      ```app/components/my-anchor.js
      import Component from '@ember/component';
    
      export default Component.extend({
        tagName: 'a',
        attributeBindings: ['url:href'],
    
        url: 'http://google.com'
      });
      ```
    
      Will result in component instances with an HTML representation of:
    
      ```html
      <a id="ember1" class="ember-view" href="http://google.com"></a>
      ```
    
      Namespaced attributes (e.g. `xlink:href`) are supported, but have to be
      mapped, since `:` is not a valid character for properties in Javascript:
    
      ```app/components/my-use.js
      import Component from '@ember/component';
    
      export default Component.extend({
        tagName: 'use',
        attributeBindings: ['xlinkHref:xlink:href'],
    
        xlinkHref: '#triangle'
      });
      ```
    
      Will result in component instances with an HTML representation of:
    
      ```html
      <use xlink:href="#triangle"></use>
      ```
    
      If the return value of an `attributeBindings` monitored property is a boolean
      the attribute will be present or absent depending on the value:
    
      ```app/components/my-text-input.js
      import Component from '@ember/component';
    
      export default Component.extend({
        tagName: 'input',
        attributeBindings: ['disabled'],
    
        disabled: false
      });
      ```
    
      Will result in a component instance with an HTML representation of:
    
      ```html
      <input id="ember1" class="ember-view" />
      ```
    
      `attributeBindings` can refer to computed properties:
    
      ```app/components/my-text-input.js
      import Component from '@ember/component';
      import { computed } from '@ember/object';
    
      export default Component.extend({
        tagName: 'input',
        attributeBindings: ['disabled'],
    
        disabled: computed(function() {
          if (someLogic) {
            return true;
          } else {
            return false;
          }
        })
      });
      ```
    
      To prevent setting an attribute altogether, use `null` or `undefined` as the
      return value of the `attributeBindings` monitored property:
    
      ```app/components/my-text-input.js
      import Component from '@ember/component';
    
      export default Component.extend({
        tagName: 'form',
        attributeBindings: ['novalidate'],
        novalidate: null
      });
      ```
    
      Updates to the property of an attribute binding will result in automatic
      update of the  HTML attribute in the component's rendered HTML representation.
      `attributeBindings` is a concatenated property. See [EmberObject](/api/ember/release/classes/EmberObject)
      documentation for more information about concatenated properties.
    
      ## Layouts
    
      See [Ember.Templates.helpers.yield](/api/ember/release/classes/Ember.Templates.helpers/methods/yield?anchor=yield)
      for more information.
    
      Layout can be used to wrap content in a component. In addition
      to wrapping content in a Component's template, you can also use
      the public layout API in your Component JavaScript.
    
      ```app/templates/components/person-profile.hbs
        <h1>Person's Title</h1>
        <div class='details'>{{yield}}</div>
      ```
    
      ```app/components/person-profile.js
        import Component from '@ember/component';
        import layout from '../templates/components/person-profile';
    
        export default Component.extend({
          layout
        });
      ```
    
      If you call the `person-profile` component like so:
    
      ```
      {{#person-profile}}
        <h2>Chief Basket Weaver</h2>
        <h3>Fisherman Industries</h3>
      {{/person-profile}}
      ```
    
      It will result in the following HTML output:
    
      ```html
        <h1>Person's Title</h1>
        <div class="details">
          <h2>Chief Basket Weaver</h2>
          <h3>Fisherman Industries</h3>
        </div>
      ```
    
      ## Responding to Browser Events
    
      Components can respond to user-initiated events in one of three ways: method
      implementation, through an event manager, and through `{{action}}` helper use
      in their template or layout.
    
      ### Method Implementation
    
      Components can respond to user-initiated events by implementing a method that
      matches the event name. A `jQuery.Event` object will be passed as the
      argument to this method.
    
      ```app/components/my-widget.js
      import Component from '@ember/component';
    
      export default Component.extend({
        click(event) {
          // will be called when an instance's
          // rendered element is clicked
        }
      });
      ```
    
      ### `{{action}}` Helper
    
      See [Ember.Templates.helpers.action](/api/ember/release/classes/Ember.Templates.helpers/methods/yield?anchor=yield).
    
      ### Event Names
    
      All of the event handling approaches described above respond to the same set
      of events. The names of the built-in events are listed below. (The hash of
      built-in events exists in `Ember.EventDispatcher`.) Additional, custom events
      can be registered by using `Application.customEvents`.
    
      Touch events:
    
      * `touchStart`
      * `touchMove`
      * `touchEnd`
      * `touchCancel`
    
      Keyboard events:
    
      * `keyDown`
      * `keyUp`
      * `keyPress`
    
      Mouse events:
    
      * `mouseDown`
      * `mouseUp`
      * `contextMenu`
      * `click`
      * `doubleClick`
      * `mouseMove`
      * `focusIn`
      * `focusOut`
      * `mouseEnter`
      * `mouseLeave`
    
      Form events:
    
      * `submit`
      * `change`
      * `focusIn`
      * `focusOut`
      * `input`
    
      HTML5 drag and drop events:
    
      * `dragStart`
      * `drag`
      * `dragEnter`
      * `dragLeave`
      * `dragOver`
      * `dragEnd`
      * `drop`
    
      @class Component
      @extends Ember.CoreView
      @uses Ember.TargetActionSupport
      @uses Ember.ClassNamesSupport
      @uses Ember.ActionSupport
      @uses Ember.ViewMixin
      @uses Ember.ViewStateSupport
      @public
    */
    var Component = _views.CoreView.extend(_views.ChildViewsSupport, _views.ViewStateSupport, _views.ClassNamesSupport, _runtime2.TargetActionSupport, _views.ActionSupport, _views.ViewMixin, (_CoreView$extend = {
        isComponent: true,
        init: function () {
            var _this13 = this;

            this._super.apply(this, arguments);
            this[IS_DISPATCHING_ATTRS] = false;
            this[DIRTY_TAG] = _reference.DirtyableTag.create();
            this[ROOT_REF] = new RootReference(this);
            this[BOUNDS] = null;
            // If in a tagless component, assert that no event handlers are defined
            true && !(this.tagName !== '' || !this.renderer._destinedForDOM || !function () {
                var eventDispatcher = (0, _owner.getOwner)(_this13).lookup('event_dispatcher:main');
                var events = eventDispatcher && eventDispatcher._finalEvents || {};
                // tslint:disable-next-line:forin
                for (var key in events) {
                    var methodName = events[key];
                    if (typeof _this13[methodName] === 'function') {
                        return true; // indicate that the assertion should be triggered
                    }
                }
                return false;
            }()) && (0, _debug.assert)(
            // tslint:disable-next-line:max-line-length
            'You can not define a function that handles DOM events in the `' + this + '` tagless component since it doesn\'t have any DOM element.', this.tagName !== '' || !this.renderer._destinedForDOM || !function () {
                var eventDispatcher = (0, _owner.getOwner)(_this13).lookup('event_dispatcher:main');var events = eventDispatcher && eventDispatcher._finalEvents || {};for (var key in events) {
                    var methodName = events[key];if (typeof _this13[methodName] === 'function') {
                        return true;
                    }
                }return false;
            }());
        },
        rerender: function () {
            this[DIRTY_TAG].inner.dirty();
            this._super();
        }
    }, _CoreView$extend[_metal.PROPERTY_DID_CHANGE] = function (key) {
        if (this[IS_DISPATCHING_ATTRS]) {
            return;
        }
        var args = this[ARGS];
        var reference = args !== undefined ? args[key] : undefined;
        if (reference !== undefined && reference[UPDATE] !== undefined) {
            reference[UPDATE]((0, _metal.get)(this, key));
        }
    }, _CoreView$extend.getAttr = function (key) {
        // TODO Intimate API should be deprecated
        return this.get(key);
    }, _CoreView$extend.readDOMAttr = function (name) {
        // TODO revisit this
        var element = (0, _views.getViewElement)(this);
        var isSVG = element.namespaceURI === _runtime.SVG_NAMESPACE;

        var _normalizeProperty = (0, _runtime.normalizeProperty)(element, name),
            type = _normalizeProperty.type,
            normalized = _normalizeProperty.normalized;

        if (isSVG || type === 'attr') {
            return element.getAttribute(normalized);
        }
        return element[normalized];
    }, _CoreView$extend.didReceiveAttrs = function () {}, _CoreView$extend.didRender = function () {}, _CoreView$extend.willRender = function () {}, _CoreView$extend.didUpdateAttrs = function () {}, _CoreView$extend.willUpdate = function () {}, _CoreView$extend.didUpdate = function () {}, _CoreView$extend));
    Component.toString = function () {
        return '@ember/component';
    };
    Component.reopenClass({
        isComponentFactory: true,
        positionalParams: []
    });

    var layout = template({ "id": "hvtsz7RF", "block": "{\"symbols\":[],\"statements\":[],\"hasEval\":false}", "meta": { "moduleName": "packages/@ember/-internals/glimmer/lib/templates/empty.hbs" } });

    /**
    @module @ember/component
    */
    /**
      The internal class used to create text inputs when the `{{input}}`
      helper is used with `type` of `checkbox`.
    
      See [Ember.Templates.helpers.input](/api/ember/release/classes/Ember.Templates.helpers/methods/input?anchor=input)  for usage details.
    
      ## Direct manipulation of `checked`
    
      The `checked` attribute of an `Checkbox` object should always be set
      through the Ember object or by interacting with its rendered element
      representation via the mouse, keyboard, or touch. Updating the value of the
      checkbox via jQuery will result in the checked value of the object and its
      element losing synchronization.
    
      ## Layout and LayoutName properties
    
      Because HTML `input` elements are self closing `layout` and `layoutName`
      properties will not be applied.
    
      @class Checkbox
      @extends Component
      @public
    */
    var Checkbox = Component.extend({
        layout: layout,
        classNames: ['ember-checkbox'],
        tagName: 'input',
        attributeBindings: ['type', 'checked', 'indeterminate', 'disabled', 'tabindex', 'name', 'autofocus', 'required', 'form'],
        type: 'checkbox',
        disabled: false,
        indeterminate: false,
        didInsertElement: function () {
            this._super.apply(this, arguments);
            (0, _metal.get)(this, 'element').indeterminate = !!(0, _metal.get)(this, 'indeterminate');
        },
        change: function () {
            (0, _metal.set)(this, 'checked', this.element.checked);
        }
    });
    Checkbox.toString = function () {
        return '@ember/component/checkbox';
    };

    /**
    @module @ember/component
    */
    var inputTypes = Object.create(null);
    function canSetTypeOfInput(type) {
        if (type in inputTypes) {
            return inputTypes[type];
        }
        // if running in outside of a browser always return the
        // original type
        if (!_browserEnvironment.hasDOM) {
            inputTypes[type] = type;
            return type;
        }
        var inputTypeTestElement = document.createElement('input');
        try {
            inputTypeTestElement.type = type;
        } catch (e) {
            // ignored
        }
        return inputTypes[type] = inputTypeTestElement.type === type;
    }
    /**
    
      The internal class used to create text inputs when the `{{input}}`
      helper is used with `type` of `text`.
    
      See [Ember.Templates.helpers.input](/api/ember/release/classes/Ember.Templates.helpers/methods/input?anchor=input)  for usage details.
    
      ## Layout and LayoutName properties
    
      Because HTML `input` elements are self closing `layout` and `layoutName`
      properties will not be applied.
    
      @class TextField
      @extends Component
      @uses Ember.TextSupport
      @public
    */
    var TextField = Component.extend(_views.TextSupport, {
        layout: layout,
        classNames: ['ember-text-field'],
        tagName: 'input',
        attributeBindings: ['accept', 'autocomplete', 'autosave', 'dir', 'formaction', 'formenctype', 'formmethod', 'formnovalidate', 'formtarget', 'height', 'inputmode', 'lang', 'list', 'type', 'max', 'min', 'multiple', 'name', 'pattern', 'size', 'step', 'value', 'width'],
        /**
          The `value` attribute of the input element. As the user inputs text, this
          property is updated live.
             @property value
          @type String
          @default ""
          @public
        */
        value: '',
        /**
          The `type` attribute of the input element.
             @property type
          @type String
          @default "text"
          @public
        */
        type: (0, _metal.computed)({
            get: function () {
                return 'text';
            },
            set: function (_key, value) {
                var type = 'text';
                if (canSetTypeOfInput(value)) {
                    type = value;
                }
                return type;
            }
        }),
        /**
          The `size` of the text field in characters.
             @property size
          @type String
          @default null
          @public
        */
        size: null,
        /**
          The `pattern` attribute of input element.
             @property pattern
          @type String
          @default null
          @public
        */
        pattern: null,
        /**
          The `min` attribute of input element used with `type="number"` or `type="range"`.
             @property min
          @type String
          @default null
          @since 1.4.0
          @public
        */
        min: null,
        /**
          The `max` attribute of input element used with `type="number"` or `type="range"`.
             @property max
          @type String
          @default null
          @since 1.4.0
          @public
        */
        max: null
    });
    TextField.toString = function () {
        return '@ember/component/text-field';
    };

    /**
    @module @ember/component
    */
    /**
      `{{textarea}}` inserts a new instance of `<textarea>` tag into the template.
      The attributes of `{{textarea}}` match those of the native HTML tags as
      closely as possible.
    
      The following HTML attributes can be set:
    
        * `value`
        * `name`
        * `rows`
        * `cols`
        * `placeholder`
        * `disabled`
        * `maxlength`
        * `tabindex`
        * `selectionEnd`
        * `selectionStart`
        * `autocomplete`
        * `selectionDirection`
        * `wrap`
        * `readonly`
        * `autofocus`
        * `form`
        * `spellcheck`
        * `required`
    
      When set to a quoted string, these value will be directly applied to the HTML
      element. When left unquoted, these values will be bound to a property on the
      template's current rendering context (most typically a controller instance).
    
      Unbound:
    
      ```handlebars
      {{textarea value="Lots of static text that ISN'T bound"}}
      ```
    
      Would result in the following HTML:
    
      ```html
      <textarea class="ember-text-area">
        Lots of static text that ISN'T bound
      </textarea>
      ```
    
      Bound:
    
      In the following example, the `writtenWords` property on the application
      Controller will be updated live as the user types 'Lots of text that IS
      bound' into the text area of their browser's window.
    
      ```app/controllers/application.js
      import Controller from '@ember/controller';
    
      export default Controller.extend({
        writtenWords: "Lots of text that IS bound"
      });
      ```
    
      ```handlebars
      {{textarea value=writtenWords}}
      ```
    
      Would result in the following HTML:
    
      ```html
      <textarea class="ember-text-area">
        Lots of text that IS bound
      </textarea>
      ```
    
      If you wanted a one way binding between the text area and a div tag
      somewhere else on your screen, you could use `oneWay`:
    
      ```app/controllers/application.js
      import Controller from '@ember/controller';
      import { oneWay } from '@ember/object/computed';
    
      export default Controller.extend({
        writtenWords: "Lots of text that IS bound",
    
        outputWrittenWords: oneWay("writtenWords")
      });
      ```
    
      ```handlebars
      {{textarea value=writtenWords}}
      <div>
        {{outputWrittenWords}}
      </div>
      ```
    
      Would result in the following HTML:
    
      ```html
      <textarea class="ember-text-area">
        Lots of text that IS bound
      </textarea>
      <-- the following div will be updated in real time as you type -->
      <div>
        Lots of text that IS bound
      </div>
      ```
    
      Finally, this example really shows the power and ease of Ember when two
      properties are bound to eachother via `alias`. Type into
      either text area box and they'll both stay in sync. Note that
      `alias` costs more in terms of performance, so only use it when
      your really binding in both directions:
    
      ```app/controllers/application.js
      import Controller from '@ember/controller';
      import { alias } from '@ember/object/computed';
    
      export default Controller.extend({
        writtenWords: "Lots of text that IS bound",
    
        twoWayWrittenWords: alias("writtenWords")
      });
      ```
    
      ```handlebars
      {{textarea value=writtenWords}}
      {{textarea value=twoWayWrittenWords}}
      ```
    
      ```html
      <textarea id="ember1" class="ember-text-area">
        Lots of text that IS bound
      </textarea>
      <-- both updated in real time -->
      <textarea id="ember2" class="ember-text-area">
        Lots of text that IS bound
      </textarea>
      ```
    
      ### Actions
    
      The helper can send multiple actions based on user events.
      The action property defines the action which is send when
      the user presses the return key.
    
      ```handlebars
      {{input action="submit"}}
      ```
    
      The helper allows some user events to send actions.
    
      * `enter`
      * `insert-newline`
      * `escape-press`
      * `focus-in`
      * `focus-out`
      * `key-press`
    
      For example, if you desire an action to be sent when the input is blurred,
      you only need to setup the action name to the event name property.
    
      ```handlebars
      {{textarea focus-out="alertMessage"}}
      ```
    
      See more about [Text Support Actions](/api/ember/release/classes/TextArea)
    
      ### Extension
    
      Internally, `{{textarea}}` creates an instance of `TextArea`, passing
      arguments from the helper to `TextArea`'s `create` method. You can
      extend the capabilities of text areas in your application by reopening this
      class. For example, if you are building a Bootstrap project where `data-*`
      attributes are used, you can globally add support for a `data-*` attribute
      on all `{{textarea}}`s' in your app by reopening `TextArea` or
      `TextSupport` and adding it to the `attributeBindings` concatenated
      property:
    
      ```javascript
      import TextArea from '@ember/component/text-area';
    
      TextArea.reopen({
        attributeBindings: ['data-error']
      });
      ```
    
      Keep in mind when writing `TextArea` subclasses that `TextArea`
      itself extends `Component`. Expect isolated component semantics, not
      legacy 1.x view semantics (like `controller` being present).
    
      See more about [Ember components](/api/ember/release/classes/Component)
    
      @method textarea
      @for Ember.Templates.helpers
      @param {Hash} options
      @public
    */
    /**
      The internal class used to create textarea element when the `{{textarea}}`
      helper is used.
    
      See [Ember.Templates.helpers.textarea](/api/ember/release/classes/Ember.Templates.helpers/methods/textarea?anchor=textarea)  for usage details.
    
      ## Layout and LayoutName properties
    
      Because HTML `textarea` elements do not contain inner HTML the `layout` and
      `layoutName` properties will not be applied.
    
      @class TextArea
      @extends Component
      @uses Ember.TextSupport
      @public
    */
    var TextArea = Component.extend(_views.TextSupport, {
        classNames: ['ember-text-area'],
        layout: layout,
        tagName: 'textarea',
        attributeBindings: ['rows', 'cols', 'name', 'selectionEnd', 'selectionStart', 'autocomplete', 'wrap', 'lang', 'dir', 'value'],
        rows: null,
        cols: null
    });
    TextArea.toString = function () {
        return '@ember/component/text-area';
    };

    var layout$1 = template({ "id": "r9g6x1y/", "block": "{\"symbols\":[\"&default\"],\"statements\":[[4,\"if\",[[23,[\"linkTitle\"]]],null,{\"statements\":[[1,[21,\"linkTitle\"],false]],\"parameters\":[]},{\"statements\":[[14,1]],\"parameters\":[]}]],\"hasEval\":false}", "meta": { "moduleName": "packages/@ember/-internals/glimmer/lib/templates/link-to.hbs" } });

    /**
    @module ember
    */
    /**
      @module @ember/routing
    */
    /**
      `LinkComponent` renders an element whose `click` event triggers a
      transition of the application's instance of `Router` to
      a supplied route by name.
    
      `LinkComponent` components are invoked with {{#link-to}}. Properties
      of this class can be overridden with `reopen` to customize application-wide
      behavior.
    
      @class LinkComponent
      @extends Component
      @see {Ember.Templates.helpers.link-to}
      @public
    **/
    var LinkComponent = Component.extend({
        layout: layout$1,
        tagName: 'a',
        /**
          Used to determine when this `LinkComponent` is active.
             @property current-when
          @public
        */
        'current-when': null,
        /**
          Sets the `title` attribute of the `LinkComponent`'s HTML element.
             @property title
          @default null
          @public
        **/
        title: null,
        /**
          Sets the `rel` attribute of the `LinkComponent`'s HTML element.
             @property rel
          @default null
          @public
        **/
        rel: null,
        /**
          Sets the `tabindex` attribute of the `LinkComponent`'s HTML element.
             @property tabindex
          @default null
          @public
        **/
        tabindex: null,
        /**
          Sets the `target` attribute of the `LinkComponent`'s HTML element.
             @since 1.8.0
          @property target
          @default null
          @public
        **/
        target: null,
        /**
          The CSS class to apply to `LinkComponent`'s element when its `active`
          property is `true`.
             @property activeClass
          @type String
          @default active
          @public
        **/
        activeClass: 'active',
        /**
          The CSS class to apply to `LinkComponent`'s element when its `loading`
          property is `true`.
             @property loadingClass
          @type String
          @default loading
          @private
        **/
        loadingClass: 'loading',
        /**
          The CSS class to apply to a `LinkComponent`'s element when its `disabled`
          property is `true`.
             @property disabledClass
          @type String
          @default disabled
          @private
        **/
        disabledClass: 'disabled',
        /**
          Determines whether the `LinkComponent` will trigger routing via
          the `replaceWith` routing strategy.
             @property replace
          @type Boolean
          @default false
          @public
        **/
        replace: false,
        /**
          By default the `{{link-to}}` component will bind to the `href` and
          `title` attributes. It's discouraged that you override these defaults,
          however you can push onto the array if needed.
             @property attributeBindings
          @type Array | String
          @default ['title', 'rel', 'tabindex', 'target']
          @public
        */
        attributeBindings: ['href', 'title', 'rel', 'tabindex', 'target'],
        /**
          By default the `{{link-to}}` component will bind to the `active`, `loading`,
          and `disabled` classes. It is discouraged to override these directly.
             @property classNameBindings
          @type Array
          @default ['active', 'loading', 'disabled', 'ember-transitioning-in', 'ember-transitioning-out']
          @public
        */
        classNameBindings: ['active', 'loading', 'disabled', 'transitioningIn', 'transitioningOut'],
        /**
          By default the `{{link-to}}` component responds to the `click` event. You
          can override this globally by setting this property to your custom
          event name.
             This is particularly useful on mobile when one wants to avoid the 300ms
          click delay using some sort of custom `tap` event.
             @property eventName
          @type String
          @default click
          @private
        */
        eventName: 'click',
        // this is doc'ed here so it shows up in the events
        // section of the API documentation, which is where
        // people will likely go looking for it.
        /**
          Triggers the `LinkComponent`'s routing behavior. If
          `eventName` is changed to a value other than `click`
          the routing behavior will trigger on that custom event
          instead.
             @event click
          @private
        */
        /**
          An overridable method called when `LinkComponent` objects are instantiated.
             Example:
             ```app/components/my-link.js
          import LinkComponent from '@ember/routing/link-component';
             export default LinkComponent.extend({
            init() {
              this._super(...arguments);
              console.log('Event is ' + this.get('eventName'));
            }
          });
          ```
             NOTE: If you do override `init` for a framework class like `Component`,
          be sure to call `this._super(...arguments)` in your
          `init` declaration! If you don't, Ember may not have an opportunity to
          do important setup work, and you'll see strange behavior in your
          application.
             @method init
          @private
        */
        init: function () {
            this._super.apply(this, arguments);
            // Map desired event name to invoke function
            var eventName = (0, _metal.get)(this, 'eventName');
            this.on(eventName, this, this._invoke);
        },

        _routing: (0, _service.inject)('-routing'),
        /**
          Accessed as a classname binding to apply the `LinkComponent`'s `disabledClass`
          CSS `class` to the element when the link is disabled.
             When `true` interactions with the element will not trigger route changes.
          @property disabled
          @private
        */
        disabled: (0, _metal.computed)({
            get: function (_key) {
                // always returns false for `get` because (due to the `set` just below)
                // the cached return value from the set will prevent this getter from _ever_
                // being called after a set has occured
                return false;
            },
            set: function (_key, value) {
                this._isDisabled = value;
                return value ? (0, _metal.get)(this, 'disabledClass') : false;
            }
        }),
        _isActive: function (routerState) {
            if ((0, _metal.get)(this, 'loading')) {
                return false;
            }
            var currentWhen = (0, _metal.get)(this, 'current-when');
            if (typeof currentWhen === 'boolean') {
                return currentWhen;
            }
            var isCurrentWhenSpecified = !!currentWhen;
            currentWhen = currentWhen || (0, _metal.get)(this, 'qualifiedRouteName');
            currentWhen = currentWhen.split(' ');
            var routing = (0, _metal.get)(this, '_routing');
            var models = (0, _metal.get)(this, 'models');
            var resolvedQueryParams = (0, _metal.get)(this, 'resolvedQueryParams');
            for (var i = 0; i < currentWhen.length; i++) {
                if (routing.isActiveForRoute(models, resolvedQueryParams, currentWhen[i], routerState, isCurrentWhenSpecified)) {
                    return true;
                }
            }
            return false;
        },

        /**
          Accessed as a classname binding to apply the `LinkComponent`'s `activeClass`
          CSS `class` to the element when the link is active.
             A `LinkComponent` is considered active when its `currentWhen` property is `true`
          or the application's current route is the route the `LinkComponent` would trigger
          transitions into.
             The `currentWhen` property can match against multiple routes by separating
          route names using the ` ` (space) character.
             @property active
          @private
        */
        active: (0, _metal.computed)('activeClass', '_active', function computeLinkToComponentActiveClass() {
            return this.get('_active') ? (0, _metal.get)(this, 'activeClass') : false;
        }),
        _active: (0, _metal.computed)('_routing.currentState', 'attrs.params', function computeLinkToComponentActive() {
            var currentState = (0, _metal.get)(this, '_routing.currentState');
            if (!currentState) {
                return false;
            }
            return this._isActive(currentState);
        }),
        willBeActive: (0, _metal.computed)('_routing.targetState', function computeLinkToComponentWillBeActive() {
            var routing = (0, _metal.get)(this, '_routing');
            var targetState = (0, _metal.get)(routing, 'targetState');
            if ((0, _metal.get)(routing, 'currentState') === targetState) {
                return;
            }
            return this._isActive(targetState);
        }),
        transitioningIn: (0, _metal.computed)('active', 'willBeActive', function computeLinkToComponentTransitioningIn() {
            if ((0, _metal.get)(this, 'willBeActive') === true && !(0, _metal.get)(this, '_active')) {
                return 'ember-transitioning-in';
            } else {
                return false;
            }
        }),
        transitioningOut: (0, _metal.computed)('active', 'willBeActive', function computeLinkToComponentTransitioningOut() {
            if ((0, _metal.get)(this, 'willBeActive') === false && (0, _metal.get)(this, '_active')) {
                return 'ember-transitioning-out';
            } else {
                return false;
            }
        }),
        /**
          Event handler that invokes the link, activating the associated route.
             @method _invoke
          @param {Event} event
          @private
        */
        _invoke: function (event) {
            if (!(0, _views.isSimpleClick)(event)) {
                return true;
            }
            var preventDefault = (0, _metal.get)(this, 'preventDefault');
            var targetAttribute = (0, _metal.get)(this, 'target');
            if (preventDefault !== false && (!targetAttribute || targetAttribute === '_self')) {
                event.preventDefault();
            }
            if ((0, _metal.get)(this, 'bubbles') === false) {
                event.stopPropagation();
            }
            if (this._isDisabled) {
                return false;
            }
            if ((0, _metal.get)(this, 'loading')) {
                // tslint:disable-next-line:max-line-length
                true && (0, _debug.warn)('This link-to is in an inactive loading state because at least one of its parameters presently has a null/undefined value, or the provided route name is invalid.', false, {
                    id: 'ember-glimmer.link-to.inactive-loading-state'
                });

                return false;
            }
            if (targetAttribute && targetAttribute !== '_self') {
                return false;
            }
            var qualifiedRouteName = (0, _metal.get)(this, 'qualifiedRouteName');
            var models = (0, _metal.get)(this, 'models');
            var queryParams = (0, _metal.get)(this, 'queryParams.values');
            var shouldReplace = (0, _metal.get)(this, 'replace');
            var payload = {
                queryParams: queryParams,
                routeName: qualifiedRouteName
            };
            // tslint:disable-next-line:max-line-length
            (0, _instrumentation.flaggedInstrument)('interaction.link-to', payload, this._generateTransition(payload, qualifiedRouteName, models, queryParams, shouldReplace));
            return false;
        },
        _generateTransition: function (payload, qualifiedRouteName, models, queryParams, shouldReplace) {
            var routing = (0, _metal.get)(this, '_routing');
            return function () {
                payload.transition = routing.transitionTo(qualifiedRouteName, models, queryParams, shouldReplace);
            };
        },

        queryParams: null,
        qualifiedRouteName: (0, _metal.computed)('targetRouteName', '_routing.currentState', function computeLinkToComponentQualifiedRouteName() {
            var params = (0, _metal.get)(this, 'params');
            var paramsLength = params.length;
            var lastParam = params[paramsLength - 1];
            if (lastParam && lastParam.isQueryParams) {
                paramsLength--;
            }
            var onlyQueryParamsSupplied = this[HAS_BLOCK] ? paramsLength === 0 : paramsLength === 1;
            if (onlyQueryParamsSupplied) {
                return (0, _metal.get)(this, '_routing.currentRouteName');
            }
            return (0, _metal.get)(this, 'targetRouteName');
        }),
        resolvedQueryParams: (0, _metal.computed)('queryParams', function computeLinkToComponentResolvedQueryParams() {
            var resolvedQueryParams = {};
            var queryParams = (0, _metal.get)(this, 'queryParams');
            if (!queryParams) {
                return resolvedQueryParams;
            }
            var values = queryParams.values;
            for (var key in values) {
                if (!values.hasOwnProperty(key)) {
                    continue;
                }
                resolvedQueryParams[key] = values[key];
            }
            return resolvedQueryParams;
        }),
        /**
          Sets the element's `href` attribute to the url for
          the `LinkComponent`'s targeted route.
             If the `LinkComponent`'s `tagName` is changed to a value other
          than `a`, this property will be ignored.
             @property href
          @private
        */
        href: (0, _metal.computed)('models', 'qualifiedRouteName', function computeLinkToComponentHref() {
            if ((0, _metal.get)(this, 'tagName') !== 'a') {
                return;
            }
            var qualifiedRouteName = (0, _metal.get)(this, 'qualifiedRouteName');
            var models = (0, _metal.get)(this, 'models');
            if ((0, _metal.get)(this, 'loading')) {
                return (0, _metal.get)(this, 'loadingHref');
            }
            var routing = (0, _metal.get)(this, '_routing');
            var queryParams = (0, _metal.get)(this, 'queryParams.values');
            if (true /* DEBUG */) {
                    /*
                     * Unfortunately, to get decent error messages, we need to do this.
                     * In some future state we should be able to use a "feature flag"
                     * which allows us to strip this without needing to call it twice.
                     *
                     * if (isDebugBuild()) {
                     *   // Do the useful debug thing, probably including try/catch.
                     * } else {
                     *   // Do the performant thing.
                     * }
                     */
                    try {
                        routing.generateURL(qualifiedRouteName, models, queryParams);
                    } catch (e) {
                        // tslint:disable-next-line:max-line-length
                        true && !false && (0, _debug.assert)('You attempted to define a `{{link-to "' + qualifiedRouteName + '"}}` but did not pass the parameters required for generating its dynamic segments. ' + e.message);
                    }
                }
            return routing.generateURL(qualifiedRouteName, models, queryParams);
        }),
        loading: (0, _metal.computed)('_modelsAreLoaded', 'qualifiedRouteName', function computeLinkToComponentLoading() {
            var qualifiedRouteName = (0, _metal.get)(this, 'qualifiedRouteName');
            var modelsAreLoaded = (0, _metal.get)(this, '_modelsAreLoaded');
            if (!modelsAreLoaded || qualifiedRouteName === null || qualifiedRouteName === undefined) {
                return (0, _metal.get)(this, 'loadingClass');
            }
        }),
        _modelsAreLoaded: (0, _metal.computed)('models', function computeLinkToComponentModelsAreLoaded() {
            var models = (0, _metal.get)(this, 'models');
            for (var i = 0; i < models.length; i++) {
                var model = models[i];
                if (model === null || model === undefined) {
                    return false;
                }
            }
            return true;
        }),
        /**
          The default href value to use while a link-to is loading.
          Only applies when tagName is 'a'
             @property loadingHref
          @type String
          @default #
          @private
        */
        loadingHref: '#',
        didReceiveAttrs: function () {
            var queryParams = void 0;
            var params = (0, _metal.get)(this, 'params');
            if (params) {
                // Do not mutate params in place
                params = params.slice();
            }
            true && !(params && params.length) && (0, _debug.assert)('You must provide one or more parameters to the link-to component.', params && params.length);

            var disabledWhen = (0, _metal.get)(this, 'disabledWhen');
            if (disabledWhen !== undefined) {
                this.set('disabled', disabledWhen);
            }
            // Process the positional arguments, in order.
            // 1. Inline link title comes first, if present.
            if (!this[HAS_BLOCK]) {
                this.set('linkTitle', params.shift());
            }
            // 2. `targetRouteName` is now always at index 0.
            this.set('targetRouteName', params[0]);
            // 3. The last argument (if still remaining) is the `queryParams` object.
            var lastParam = params[params.length - 1];
            if (lastParam && lastParam.isQueryParams) {
                queryParams = params.pop();
            } else {
                queryParams = { values: {} };
            }
            this.set('queryParams', queryParams);
            // 4. Any remaining indices (excepting `targetRouteName` at 0) are `models`.
            params.shift();
            this.set('models', params);
        }
    });
    LinkComponent.toString = function () {
        return '@ember/routing/link-component';
    };
    LinkComponent.reopenClass({
        positionalParams: 'params'
    });

    // @ts-check
    var DebugStack = void 0;
    if (true /* DEBUG */) {
            var Element = function Element(name) {
                (0, _emberBabel.classCallCheck)(this, Element);

                this.name = name;
            };

            var TemplateElement = function (_Element) {
                (0, _emberBabel.inherits)(TemplateElement, _Element);

                function TemplateElement() {
                    (0, _emberBabel.classCallCheck)(this, TemplateElement);

                    return (0, _emberBabel.possibleConstructorReturn)(this, _Element.apply(this, arguments));
                }

                return TemplateElement;
            }(Element);

            var EngineElement = function (_Element2) {
                (0, _emberBabel.inherits)(EngineElement, _Element2);

                function EngineElement() {
                    (0, _emberBabel.classCallCheck)(this, EngineElement);

                    return (0, _emberBabel.possibleConstructorReturn)(this, _Element2.apply(this, arguments));
                }

                return EngineElement;
            }(Element);
            // tslint:disable-next-line:no-shadowed-variable


            DebugStack = function () {
                function DebugStack() {
                    (0, _emberBabel.classCallCheck)(this, DebugStack);

                    this._stack = [];
                }

                DebugStack.prototype.push = function push(name) {
                    this._stack.push(new TemplateElement(name));
                };

                DebugStack.prototype.pushEngine = function pushEngine(name) {
                    this._stack.push(new EngineElement(name));
                };

                DebugStack.prototype.pop = function pop() {
                    var element = this._stack.pop();
                    if (element) {
                        return element.name;
                    }
                };

                DebugStack.prototype.peek = function peek() {
                    var template = this._currentTemplate();
                    var engine = this._currentEngine();
                    if (engine) {
                        return '"' + template + '" (in "' + engine + '")';
                    } else if (template) {
                        return '"' + template + '"';
                    }
                };

                DebugStack.prototype._currentTemplate = function _currentTemplate() {
                    return this._getCurrentByType(TemplateElement);
                };

                DebugStack.prototype._currentEngine = function _currentEngine() {
                    return this._getCurrentByType(EngineElement);
                };

                DebugStack.prototype._getCurrentByType = function _getCurrentByType(type) {
                    for (var i = this._stack.length; i >= 0; i--) {
                        var element = this._stack[i];
                        if (element instanceof type) {
                            return element.name;
                        }
                    }
                };

                return DebugStack;
            }();
        }
    var DebugStack$1 = DebugStack;

    /**
    @module ember
    */
    /**
      The `{{#each}}` helper loops over elements in a collection. It is an extension
      of the base Handlebars `{{#each}}` helper.
      The default behavior of `{{#each}}` is to yield its inner block once for every
      item in an array passing the item as the first block parameter.
    
      ```javascript
      var developers = [{ name: 'Yehuda' },{ name: 'Tom' }, { name: 'Paul' }];
      ```
    
      ```handlebars
      {{#each developers key="name" as |person|}}
        {{person.name}}
        {{! `this` is whatever it was outside the #each }}
      {{/each}}
      ```
    
      The same rules apply to arrays of primitives.
    
      ```javascript
      var developerNames = ['Yehuda', 'Tom', 'Paul']
      ```
    
      ```handlebars
      {{#each developerNames key="@index" as |name|}}
        {{name}}
      {{/each}}
      ```
    
      During iteration, the index of each item in the array is provided as a second block parameter.
    
      ```handlebars
      <ul>
        {{#each people as |person index|}}
          <li>Hello, {{person.name}}! You're number {{index}} in line</li>
        {{/each}}
      </ul>
      ```
    
      ### Specifying Keys
    
      The `key` option is used to tell Ember how to determine if the array being
      iterated over with `{{#each}}` has changed between renders. By helping Ember
      detect that some elements in the array are the same, DOM elements can be
      re-used, significantly improving rendering speed.
    
      For example, here's the `{{#each}}` helper with its `key` set to `id`:
    
      ```handlebars
      {{#each model key="id" as |item|}}
      {{/each}}
      ```
    
      When this `{{#each}}` re-renders, Ember will match up the previously rendered
      items (and reorder the generated DOM elements) based on each item's `id`
      property.
      By default the item's own reference is used.
    
      ### {{else}} condition
    
      `{{#each}}` can have a matching `{{else}}`. The contents of this block will render
      if the collection is empty.
    
      ```handlebars
      {{#each developers as |person|}}
        {{person.name}}
      {{else}}
        <p>Sorry, nobody is available for this task.</p>
      {{/each}}
      ```
    
      @method each
      @for Ember.Templates.helpers
      @public
     */
    /**
      The `{{each-in}}` helper loops over properties on an object.
    
      For example, given a `user` object that looks like:
    
      ```javascript
      {
        "name": "Shelly Sails",
        "age": 42
      }
      ```
    
      This template would display all properties on the `user`
      object in a list:
    
      ```handlebars
      <ul>
      {{#each-in user as |key value|}}
        <li>{{key}}: {{value}}</li>
      {{/each-in}}
      </ul>
      ```
    
      Outputting their name and age.
    
      @method each-in
      @for Ember.Templates.helpers
      @public
      @since 2.1.0
    */
    var EACH_IN_REFERENCE = (0, _utils.symbol)('EACH_IN');

    var EachInReference = function () {
        function EachInReference(inner) {
            (0, _emberBabel.classCallCheck)(this, EachInReference);

            this.inner = inner;
            this.tag = inner.tag;
            this[EACH_IN_REFERENCE] = true;
        }

        EachInReference.prototype.value = function value() {
            return this.inner.value();
        };

        EachInReference.prototype.get = function get(key) {
            return this.inner.get(key);
        };

        return EachInReference;
    }();

    function isEachIn(ref) {
        return ref !== null && typeof ref === 'object' && ref[EACH_IN_REFERENCE];
    }
    function eachIn(_vm, args) {
        return new EachInReference(args.positional.at(0));
    }

    var ITERATOR_KEY_GUID = 'be277757-bbbe-4620-9fcb-213ef433cca2';
    function _iterableFor(ref, keyPath) {
        if (isEachIn(ref)) {
            return new EachInIterable(ref, keyPath || '@key');
        } else {
            return new EachIterable(ref, keyPath || '@identity');
        }
    }

    var BoundedIterator = function () {
        function BoundedIterator(length, keyFor) {
            (0, _emberBabel.classCallCheck)(this, BoundedIterator);

            this.length = length;
            this.keyFor = keyFor;
            this.position = 0;
        }

        BoundedIterator.prototype.isEmpty = function isEmpty() {
            return false;
        };

        BoundedIterator.prototype.memoFor = function memoFor(position) {
            return position;
        };

        BoundedIterator.prototype.next = function next() {
            var length = this.length,
                keyFor = this.keyFor,
                position = this.position;

            if (position >= length) {
                return null;
            }
            var value = this.valueFor(position);
            var memo = this.memoFor(position);
            var key = keyFor(value, memo, position);
            this.position++;
            return { key: key, value: value, memo: memo };
        };

        return BoundedIterator;
    }();

    var ArrayIterator = function (_BoundedIterator) {
        (0, _emberBabel.inherits)(ArrayIterator, _BoundedIterator);

        function ArrayIterator(array, length, keyFor) {
            (0, _emberBabel.classCallCheck)(this, ArrayIterator);

            var _this16 = (0, _emberBabel.possibleConstructorReturn)(this, _BoundedIterator.call(this, length, keyFor));

            _this16.array = array;
            return _this16;
        }

        ArrayIterator.from = function from(array, keyFor) {
            var length = array.length;

            if (length === 0) {
                return EMPTY_ITERATOR;
            } else {
                return new this(array, length, keyFor);
            }
        };

        ArrayIterator.fromForEachable = function fromForEachable(object, keyFor) {
            var array = [];
            object.forEach(function (item) {
                return array.push(item);
            });
            return this.from(array, keyFor);
        };

        ArrayIterator.prototype.valueFor = function valueFor(position) {
            return this.array[position];
        };

        return ArrayIterator;
    }(BoundedIterator);

    var EmberArrayIterator = function (_BoundedIterator2) {
        (0, _emberBabel.inherits)(EmberArrayIterator, _BoundedIterator2);

        function EmberArrayIterator(array, length, keyFor) {
            (0, _emberBabel.classCallCheck)(this, EmberArrayIterator);

            var _this17 = (0, _emberBabel.possibleConstructorReturn)(this, _BoundedIterator2.call(this, length, keyFor));

            _this17.array = array;
            return _this17;
        }

        EmberArrayIterator.from = function from(array, keyFor) {
            var length = array.length;

            if (length === 0) {
                return EMPTY_ITERATOR;
            } else {
                return new this(array, length, keyFor);
            }
        };

        EmberArrayIterator.prototype.valueFor = function valueFor(position) {
            return (0, _metal.objectAt)(this.array, position);
        };

        return EmberArrayIterator;
    }(BoundedIterator);

    var ObjectIterator = function (_BoundedIterator3) {
        (0, _emberBabel.inherits)(ObjectIterator, _BoundedIterator3);

        function ObjectIterator(keys, values, length, keyFor) {
            (0, _emberBabel.classCallCheck)(this, ObjectIterator);

            var _this18 = (0, _emberBabel.possibleConstructorReturn)(this, _BoundedIterator3.call(this, length, keyFor));

            _this18.keys = keys;
            _this18.values = values;
            return _this18;
        }

        ObjectIterator.fromIndexable = function fromIndexable(obj, keyFor) {
            var keys = Object.keys(obj);
            var values = [];
            var length = keys.length;

            for (var i = 0; i < length; i++) {
                values.push((0, _metal.get)(obj, keys[i]));
            }
            if (length === 0) {
                return EMPTY_ITERATOR;
            } else {
                return new this(keys, values, length, keyFor);
            }
        };

        ObjectIterator.fromForEachable = function fromForEachable(obj, keyFor) {
            var _arguments = arguments;

            var keys = [];
            var values = [];
            var length = 0;
            var isMapLike = false;
            obj.forEach(function (value, key) {
                isMapLike = isMapLike || _arguments.length >= 2;
                if (isMapLike) {
                    keys.push(key);
                }
                values.push(value);
                length++;
            });
            if (length === 0) {
                return EMPTY_ITERATOR;
            } else if (isMapLike) {
                return new this(keys, values, length, keyFor);
            } else {
                return new ArrayIterator(values, length, keyFor);
            }
        };

        ObjectIterator.prototype.valueFor = function valueFor(position) {
            return this.values[position];
        };

        ObjectIterator.prototype.memoFor = function memoFor(position) {
            return this.keys[position];
        };

        return ObjectIterator;
    }(BoundedIterator);

    var NativeIterator = function () {
        function NativeIterator(iterable, result, keyFor) {
            (0, _emberBabel.classCallCheck)(this, NativeIterator);

            this.iterable = iterable;
            this.result = result;
            this.keyFor = keyFor;
            this.position = 0;
        }

        NativeIterator.from = function from(iterable, keyFor) {
            var iterator = iterable[Symbol.iterator]();
            var result = iterator.next();
            var value = result.value,
                done = result.done;

            if (done) {
                return EMPTY_ITERATOR;
            } else if (Array.isArray(value) && value.length === 2) {
                return new this(iterator, result, keyFor);
            } else {
                return new ArrayLikeNativeIterator(iterator, result, keyFor);
            }
        };

        NativeIterator.prototype.isEmpty = function isEmpty() {
            return false;
        };

        NativeIterator.prototype.next = function next() {
            var iterable = this.iterable,
                result = this.result,
                position = this.position,
                keyFor = this.keyFor;

            if (result.done) {
                return null;
            }
            var value = this.valueFor(result, position);
            var memo = this.memoFor(result, position);
            var key = keyFor(value, memo, position);
            this.position++;
            this.result = iterable.next();
            return { key: key, value: value, memo: memo };
        };

        return NativeIterator;
    }();

    var ArrayLikeNativeIterator = function (_NativeIterator) {
        (0, _emberBabel.inherits)(ArrayLikeNativeIterator, _NativeIterator);

        function ArrayLikeNativeIterator() {
            (0, _emberBabel.classCallCheck)(this, ArrayLikeNativeIterator);

            return (0, _emberBabel.possibleConstructorReturn)(this, _NativeIterator.apply(this, arguments));
        }

        ArrayLikeNativeIterator.prototype.valueFor = function valueFor(result) {
            return result.value;
        };

        ArrayLikeNativeIterator.prototype.memoFor = function memoFor(_result, position) {
            return position;
        };

        return ArrayLikeNativeIterator;
    }(NativeIterator);

    var MapLikeNativeIterator = function (_NativeIterator2) {
        (0, _emberBabel.inherits)(MapLikeNativeIterator, _NativeIterator2);

        function MapLikeNativeIterator() {
            (0, _emberBabel.classCallCheck)(this, MapLikeNativeIterator);

            return (0, _emberBabel.possibleConstructorReturn)(this, _NativeIterator2.apply(this, arguments));
        }

        MapLikeNativeIterator.prototype.valueFor = function valueFor(result) {
            return result.value[1];
        };

        MapLikeNativeIterator.prototype.memoFor = function memoFor(result) {
            return result.value[0];
        };

        return MapLikeNativeIterator;
    }(NativeIterator);

    var EMPTY_ITERATOR = {
        isEmpty: function () {
            return true;
        },
        next: function () {
            true && !false && (0, _debug.assert)('Cannot call next() on an empty iterator');

            return null;
        }
    };

    var EachInIterable = function () {
        function EachInIterable(ref, keyPath) {
            (0, _emberBabel.classCallCheck)(this, EachInIterable);

            this.ref = ref;
            this.keyPath = keyPath;
            this.valueTag = _reference.UpdatableTag.create(_reference.CONSTANT_TAG);
            this.tag = (0, _reference.combine)([ref.tag, this.valueTag]);
        }

        EachInIterable.prototype.iterate = function iterate() {
            var ref = this.ref,
                valueTag = this.valueTag;

            var iterable = ref.value();
            var tag = (0, _metal.tagFor)(iterable);
            if ((0, _utils.isProxy)(iterable)) {
                // this is because the each-in doesn't actually get(proxy, 'key') but bypasses it
                // and the proxy's tag is lazy updated on access
                iterable = (0, _runtime2._contentFor)(iterable);
            }
            valueTag.inner.update(tag);
            if (!isIndexable(iterable)) {
                return EMPTY_ITERATOR;
            }
            if (Array.isArray(iterable) || (0, _runtime2.isEmberArray)(iterable)) {
                return ObjectIterator.fromIndexable(iterable, this.keyFor(true));
            } else if (_utils.HAS_NATIVE_SYMBOL && isNativeIterable(iterable)) {
                return MapLikeNativeIterator.from(iterable, this.keyFor());
            } else if (hasForEach(iterable)) {
                return ObjectIterator.fromForEachable(iterable, this.keyFor());
            } else {
                return ObjectIterator.fromIndexable(iterable, this.keyFor(true));
            }
        };

        EachInIterable.prototype.valueReferenceFor = function valueReferenceFor(item) {
            return new UpdatableReference(item.value);
        };

        EachInIterable.prototype.updateValueReference = function updateValueReference(ref, item) {
            ref.update(item.value);
        };

        EachInIterable.prototype.memoReferenceFor = function memoReferenceFor(item) {
            return new UpdatableReference(item.memo);
        };

        EachInIterable.prototype.updateMemoReference = function updateMemoReference(ref, item) {
            ref.update(item.memo);
        };

        EachInIterable.prototype.keyFor = function keyFor() {
            var hasUniqueKeys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
            var keyPath = this.keyPath;

            switch (keyPath) {
                case '@key':
                    return hasUniqueKeys ? ObjectKey : Unique(MapKey);
                case '@index':
                    return Index;
                case '@identity':
                    return Unique(Identity);
                default:
                    true && !(keyPath[0] !== '@') && (0, _debug.assert)('Invalid key: ' + keyPath, keyPath[0] !== '@');

                    return Unique(KeyPath(keyPath));
            }
        };

        return EachInIterable;
    }();

    var EachIterable = function () {
        function EachIterable(ref, keyPath) {
            (0, _emberBabel.classCallCheck)(this, EachIterable);

            this.ref = ref;
            this.keyPath = keyPath;
            this.valueTag = _reference.UpdatableTag.create(_reference.CONSTANT_TAG);
            this.tag = (0, _reference.combine)([ref.tag, this.valueTag]);
        }

        EachIterable.prototype.iterate = function iterate() {
            var ref = this.ref,
                valueTag = this.valueTag;

            var iterable = ref.value();
            valueTag.inner.update((0, _metal.tagForProperty)(iterable, '[]'));
            if (iterable === null || typeof iterable !== 'object') {
                return EMPTY_ITERATOR;
            }
            var keyFor = this.keyFor();
            if (Array.isArray(iterable)) {
                return ArrayIterator.from(iterable, keyFor);
            } else if ((0, _runtime2.isEmberArray)(iterable)) {
                return EmberArrayIterator.from(iterable, keyFor);
            } else if (_utils.HAS_NATIVE_SYMBOL && isNativeIterable(iterable)) {
                return ArrayLikeNativeIterator.from(iterable, keyFor);
            } else if (hasForEach(iterable)) {
                return ArrayIterator.fromForEachable(iterable, keyFor);
            } else {
                return EMPTY_ITERATOR;
            }
        };

        EachIterable.prototype.valueReferenceFor = function valueReferenceFor(item) {
            return new UpdatableReference(item.value);
        };

        EachIterable.prototype.updateValueReference = function updateValueReference(ref, item) {
            ref.update(item.value);
        };

        EachIterable.prototype.memoReferenceFor = function memoReferenceFor(item) {
            return new UpdatableReference(item.memo);
        };

        EachIterable.prototype.updateMemoReference = function updateMemoReference(ref, item) {
            ref.update(item.memo);
        };

        EachIterable.prototype.keyFor = function keyFor() {
            var keyPath = this.keyPath;

            switch (keyPath) {
                case '@index':
                    return Index;
                case '@identity':
                    return Unique(Identity);
                default:
                    true && !(keyPath[0] !== '@') && (0, _debug.assert)('Invalid key: ' + keyPath, keyPath[0] !== '@');

                    return Unique(KeyPath(keyPath));
            }
        };

        return EachIterable;
    }();

    function hasForEach(value) {
        return typeof value['forEach'] === 'function';
    }
    function isNativeIterable(value) {
        return typeof value[Symbol.iterator] === 'function';
    }
    function isIndexable(value) {
        return value !== null && (typeof value === 'object' || typeof value === 'function');
    }
    // Position in an array is guarenteed to be unique
    function Index(_value, _memo, position) {
        return String(position);
    }
    // Object.keys(...) is guarenteed to be strings and unique
    function ObjectKey(_value, memo) {
        return memo;
    }
    // Map keys can be any objects
    function MapKey(_value, memo) {
        return Identity(memo);
    }
    function Identity(value) {
        switch (typeof value) {
            case 'string':
                return value;
            case 'number':
                return String(value);
            default:
                return (0, _utils.guidFor)(value);
        }
    }
    function KeyPath(keyPath) {
        return function (value) {
            return String((0, _metal.get)(value, keyPath));
        };
    }
    function Unique(func) {
        var seen = {};
        return function (value, memo, position) {
            var key = func(value, memo, position);
            var count = seen[key];
            if (count === undefined) {
                seen[key] = 0;
                return key;
            } else {
                seen[key] = ++count;
                return '' + key + ITERATOR_KEY_GUID + count;
            }
        };
    }

    /**
    @module @ember/string
    */

    var SafeString = function () {
        function SafeString(string) {
            (0, _emberBabel.classCallCheck)(this, SafeString);

            this.string = string;
        }

        SafeString.prototype.toString = function toString() {
            return '' + this.string;
        };

        SafeString.prototype.toHTML = function toHTML() {
            return this.toString();
        };

        return SafeString;
    }();

    var escape = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#x27;',
        '`': '&#x60;',
        '=': '&#x3D;'
    };
    var possible = /[&<>"'`=]/;
    var badChars = /[&<>"'`=]/g;
    function escapeChar(chr) {
        return escape[chr];
    }
    function escapeExpression(string) {
        if (typeof string !== 'string') {
            // don't escape SafeStrings, since they're already safe
            if (string && string.toHTML) {
                return string.toHTML();
            } else if (string === null || string === undefined) {
                return '';
            } else if (!string) {
                return string + '';
            }
            // Force a string conversion as this will be done by the append regardless and
            // the regex test will do this transparently behind the scenes, causing issues if
            // an object's to string has escaped characters in it.
            string = '' + string;
        }
        if (!possible.test(string)) {
            return string;
        }
        return string.replace(badChars, escapeChar);
    }
    /**
      Mark a string as safe for unescaped output with Ember templates. If you
      return HTML from a helper, use this function to
      ensure Ember's rendering layer does not escape the HTML.
    
      ```javascript
      import { htmlSafe } from '@ember/string';
    
      htmlSafe('<div>someString</div>')
      ```
    
      @method htmlSafe
      @for @ember/template
      @static
      @return {Handlebars.SafeString} A string that will not be HTML escaped by Handlebars.
      @public
    */
    function htmlSafe(str) {
        if (str === null || str === undefined) {
            str = '';
        } else if (typeof str !== 'string') {
            str = '' + str;
        }
        return new SafeString(str);
    }
    /**
      Detects if a string was decorated using `htmlSafe`.
    
      ```javascript
      import { htmlSafe, isHTMLSafe } from '@ember/string';
    
      var plainString = 'plain string',
          safeString = htmlSafe('<div>someValue</div>');
    
      isHTMLSafe(plainString); // false
      isHTMLSafe(safeString);  // true
      ```
    
      @method isHTMLSafe
      @for @ember/template
      @static
      @return {Boolean} `true` if the string was decorated with `htmlSafe`, `false` otherwise.
      @public
    */
    function isHTMLSafe(str) {
        return str !== null && typeof str === 'object' && typeof str.toHTML === 'function';
    }

    /* globals module, URL */
    var nodeURL = void 0;
    var parsingNode = void 0;
    function installProtocolForURL(environment) {
        var protocol = void 0;
        if (_browserEnvironment.hasDOM) {
            protocol = browserProtocolForURL.call(environment, 'foobar:baz');
        }
        // Test to see if our DOM implementation parses
        // and normalizes URLs.
        if (protocol === 'foobar:') {
            // Swap in the method that doesn't do this test now that
            // we know it works.
            environment.protocolForURL = browserProtocolForURL;
        } else if (typeof URL === 'object') {
            // URL globally provided, likely from FastBoot's sandbox
            nodeURL = URL;
            environment.protocolForURL = nodeProtocolForURL;
        } else if (typeof _nodeModule.require === 'function') {
            // Otherwise, we need to fall back to our own URL parsing.
            // Global `require` is shadowed by Ember's loader so we have to use the fully
            // qualified `module.require`.
            // tslint:disable-next-line:no-require-imports
            nodeURL = (0, _nodeModule.require)('url');
            environment.protocolForURL = nodeProtocolForURL;
        } else {
            throw new Error('Could not find valid URL parsing mechanism for URL Sanitization');
        }
    }
    function browserProtocolForURL(url) {
        if (!parsingNode) {
            parsingNode = document.createElement('a');
        }
        parsingNode.href = url;
        return parsingNode.protocol;
    }
    function nodeProtocolForURL(url) {
        var protocol = null;
        if (typeof url === 'string') {
            protocol = nodeURL.parse(url).protocol;
        }
        return protocol === null ? ':' : protocol;
    }

    var Environment$1 = function (_Environment) {
        (0, _emberBabel.inherits)(Environment$1, _Environment);

        function Environment$1(injections) {
            (0, _emberBabel.classCallCheck)(this, Environment$1);

            var _this21 = (0, _emberBabel.possibleConstructorReturn)(this, _Environment.call(this, injections));

            _this21.inTransaction = false;
            _this21.owner = injections[_owner.OWNER];
            _this21.isInteractive = _this21.owner.lookup('-environment:main').isInteractive;
            // can be removed once https://github.com/tildeio/glimmer/pull/305 lands
            _this21.destroyedComponents = [];
            installProtocolForURL(_this21);
            if (true /* DEBUG */) {
                    _this21.debugStack = new DebugStack$1();
                }
            return _this21;
        }

        Environment$1.create = function create(options) {
            return new this(options);
        };
        // this gets clobbered by installPlatformSpecificProtocolForURL
        // it really should just delegate to a platform specific injection


        Environment$1.prototype.protocolForURL = function protocolForURL(s) {
            return s;
        };

        Environment$1.prototype.lookupComponent = function lookupComponent(name, meta) {
            return (0, _views.lookupComponent)(meta.owner, name, meta);
        };

        Environment$1.prototype.toConditionalReference = function toConditionalReference(reference) {
            return ConditionalReference$1.create(reference);
        };

        Environment$1.prototype.iterableFor = function iterableFor(ref, key) {
            return _iterableFor(ref, key);
        };

        Environment$1.prototype.scheduleInstallModifier = function scheduleInstallModifier(modifier, manager) {
            if (this.isInteractive) {
                _Environment.prototype.scheduleInstallModifier.call(this, modifier, manager);
            }
        };

        Environment$1.prototype.scheduleUpdateModifier = function scheduleUpdateModifier(modifier, manager) {
            if (this.isInteractive) {
                _Environment.prototype.scheduleUpdateModifier.call(this, modifier, manager);
            }
        };

        Environment$1.prototype.didDestroy = function didDestroy(destroyable) {
            destroyable.destroy();
        };

        Environment$1.prototype.begin = function begin() {
            this.inTransaction = true;
            _Environment.prototype.begin.call(this);
        };

        Environment$1.prototype.commit = function commit() {
            var destroyedComponents = this.destroyedComponents;
            this.destroyedComponents = [];
            // components queued for destruction must be destroyed before firing
            // `didCreate` to prevent errors when removing and adding a component
            // with the same name (would throw an error when added to view registry)
            for (var i = 0; i < destroyedComponents.length; i++) {
                destroyedComponents[i].destroy();
            }
            try {
                _Environment.prototype.commit.call(this);
            } finally {
                this.inTransaction = false;
            }
        };

        return Environment$1;
    }(_runtime.Environment);

    if (true /* DEBUG */) {
            var StyleAttributeManager = function (_SimpleDynamicAttribu) {
                (0, _emberBabel.inherits)(StyleAttributeManager, _SimpleDynamicAttribu);

                function StyleAttributeManager() {
                    (0, _emberBabel.classCallCheck)(this, StyleAttributeManager);

                    return (0, _emberBabel.possibleConstructorReturn)(this, _SimpleDynamicAttribu.apply(this, arguments));
                }

                StyleAttributeManager.prototype.set = function set(dom, value, env) {
                    true && (0, _debug.warn)((0, _views.constructStyleDeprecationMessage)(value), function () {
                        if (value === null || value === undefined || isHTMLSafe(value)) {
                            return true;
                        }
                        return false;
                    }(), { id: 'ember-htmlbars.style-xss-warning' });

                    _SimpleDynamicAttribu.prototype.set.call(this, dom, value, env);
                };

                StyleAttributeManager.prototype.update = function update(value, env) {
                    true && (0, _debug.warn)((0, _views.constructStyleDeprecationMessage)(value), function () {
                        if (value === null || value === undefined || isHTMLSafe(value)) {
                            return true;
                        }
                        return false;
                    }(), { id: 'ember-htmlbars.style-xss-warning' });

                    _SimpleDynamicAttribu.prototype.update.call(this, value, env);
                };

                return StyleAttributeManager;
            }(_runtime.SimpleDynamicAttribute);

            Environment$1.prototype.attributeFor = function (element, attribute, isTrusting, namespace) {
                if (attribute === 'style' && !isTrusting) {
                    return new StyleAttributeManager({ element: element, name: attribute, namespace: namespace });
                }
                return _runtime.Environment.prototype.attributeFor.call(this, element, attribute, isTrusting, namespace);
            };
        }

    // implements the ComponentManager interface as defined in glimmer:
    // tslint:disable-next-line:max-line-length
    // https://github.com/glimmerjs/glimmer-vm/blob/v0.24.0-beta.4/packages/%40glimmer/runtime/lib/component/interfaces.ts#L21

    var AbstractManager = function () {
        function AbstractManager() {
            (0, _emberBabel.classCallCheck)(this, AbstractManager);

            this.debugStack = undefined;
        }

        AbstractManager.prototype.prepareArgs = function prepareArgs(_state, _args) {
            return null;
        };

        AbstractManager.prototype.didCreateElement = function didCreateElement(_component, _element, _operations) {}
        // noop

        // inheritors should also call `this.debugStack.pop()` to
        // ensure the rerendering assertion messages are properly
        // maintained
        ;

        AbstractManager.prototype.didRenderLayout = function didRenderLayout(_component, _bounds) {
            // noop
        };

        AbstractManager.prototype.didCreate = function didCreate(_bucket) {}
        // noop

        // inheritors should also call `this._pushToDebugStack`
        // to ensure the rerendering assertion messages are
        // properly maintained
        ;

        AbstractManager.prototype.update = function update(_bucket, _dynamicScope) {}
        // noop

        // inheritors should also call `this.debugStack.pop()` to
        // ensure the rerendering assertion messages are properly
        // maintained
        ;

        AbstractManager.prototype.didUpdateLayout = function didUpdateLayout(_bucket, _bounds) {
            // noop
        };

        AbstractManager.prototype.didUpdate = function didUpdate(_bucket) {
            // noop
        };

        return AbstractManager;
    }();

    if (true /* DEBUG */) {
            AbstractManager.prototype._pushToDebugStack = function (name, environment) {
                this.debugStack = environment.debugStack;
                this.debugStack.push(name);
            };
            AbstractManager.prototype._pushEngineToDebugStack = function (name, environment) {
                this.debugStack = environment.debugStack;
                this.debugStack.pushEngine(name);
            };
        }

    function instrumentationPayload(def) {
        return { object: def.name + ':' + def.outlet };
    }
    var CAPABILITIES = {
        dynamicLayout: false,
        dynamicTag: false,
        prepareArgs: false,
        createArgs: false,
        attributeHook: false,
        elementHook: false,
        createCaller: true,
        dynamicScope: true,
        updateHook: true,
        createInstance: true
    };

    var OutletComponentManager = function (_AbstractManager) {
        (0, _emberBabel.inherits)(OutletComponentManager, _AbstractManager);

        function OutletComponentManager() {
            (0, _emberBabel.classCallCheck)(this, OutletComponentManager);

            return (0, _emberBabel.possibleConstructorReturn)(this, _AbstractManager.apply(this, arguments));
        }

        OutletComponentManager.prototype.create = function create(environment, definition, _args, dynamicScope) {
            if (true /* DEBUG */) {
                    this._pushToDebugStack('template:' + definition.template.referrer.moduleName, environment);
                }
            dynamicScope.outletState = definition.ref;
            var controller = definition.controller;
            var self = controller === undefined ? _runtime.UNDEFINED_REFERENCE : new RootReference(controller);
            return {
                self: self,
                finalize: (0, _instrumentation._instrumentStart)('render.outlet', instrumentationPayload, definition)
            };
        };

        OutletComponentManager.prototype.layoutFor = function layoutFor(_state, _component, _env) {
            throw new Error('Method not implemented.');
        };

        OutletComponentManager.prototype.getLayout = function getLayout(_ref, _resolver) {
            var template = _ref.template;

            // The router has already resolved the template
            var layout = template.asLayout();
            return {
                handle: layout.compile(),
                symbolTable: layout.symbolTable
            };
        };

        OutletComponentManager.prototype.getCapabilities = function getCapabilities() {
            return CAPABILITIES;
        };

        OutletComponentManager.prototype.getSelf = function getSelf(_ref2) {
            var self = _ref2.self;

            return self;
        };

        OutletComponentManager.prototype.getTag = function getTag() {
            // an outlet has no hooks
            return _reference.CONSTANT_TAG;
        };

        OutletComponentManager.prototype.didRenderLayout = function didRenderLayout(state) {
            state.finalize();
            if (true /* DEBUG */) {
                    this.debugStack.pop();
                }
        };

        OutletComponentManager.prototype.getDestructor = function getDestructor() {
            return null;
        };

        return OutletComponentManager;
    }(AbstractManager);

    var OUTLET_MANAGER = new OutletComponentManager();

    var OutletComponentDefinition = function OutletComponentDefinition(state) {
        var manager = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : OUTLET_MANAGER;

        (0, _emberBabel.classCallCheck)(this, OutletComponentDefinition);

        this.state = state;
        this.manager = manager;
    };

    function createRootOutlet(outletView) {
        if (_environment2.ENV._APPLICATION_TEMPLATE_WRAPPER) {
            var WRAPPED_CAPABILITIES = (0, _polyfills.assign)({}, CAPABILITIES, {
                dynamicTag: true,
                elementHook: true
            });
            var WrappedOutletComponentManager = function (_OutletComponentManag) {
                (0, _emberBabel.inherits)(WrappedOutletComponentManager, _OutletComponentManag);

                function WrappedOutletComponentManager() {
                    (0, _emberBabel.classCallCheck)(this, WrappedOutletComponentManager);

                    return (0, _emberBabel.possibleConstructorReturn)(this, _OutletComponentManag.apply(this, arguments));
                }

                WrappedOutletComponentManager.prototype.getTagName = function getTagName(_component) {
                    return 'div';
                };

                WrappedOutletComponentManager.prototype.getLayout = function getLayout(state) {
                    // The router has already resolved the template
                    var template = state.template;
                    var layout = template.asWrappedLayout();
                    return {
                        handle: layout.compile(),
                        symbolTable: layout.symbolTable
                    };
                };

                WrappedOutletComponentManager.prototype.getCapabilities = function getCapabilities() {
                    return WRAPPED_CAPABILITIES;
                };

                WrappedOutletComponentManager.prototype.didCreateElement = function didCreateElement(component, element, _operations) {
                    // to add GUID id and class
                    element.setAttribute('class', 'ember-view');
                    element.setAttribute('id', (0, _utils.guidFor)(component));
                };

                return WrappedOutletComponentManager;
            }(OutletComponentManager);
            var WRAPPED_OUTLET_MANAGER = new WrappedOutletComponentManager();
            return new OutletComponentDefinition(outletView.state, WRAPPED_OUTLET_MANAGER);
        } else {
            return new OutletComponentDefinition(outletView.state);
        }
    }

    // tslint:disable-next-line:no-empty
    function NOOP() {}
    /**
      @module ember
    */
    /**
      Represents the internal state of the component.
    
      @class ComponentStateBucket
      @private
    */

    var ComponentStateBucket = function () {
        function ComponentStateBucket(environment, component, args, finalizer, hasWrappedElement) {
            (0, _emberBabel.classCallCheck)(this, ComponentStateBucket);

            this.environment = environment;
            this.component = component;
            this.args = args;
            this.finalizer = finalizer;
            this.hasWrappedElement = hasWrappedElement;
            this.classRef = null;
            this.classRef = null;
            this.argsRevision = args === null ? 0 : args.tag.value();
        }

        ComponentStateBucket.prototype.destroy = function destroy() {
            var component = this.component,
                environment = this.environment;

            if (environment.isInteractive) {
                component.trigger('willDestroyElement');
                component.trigger('willClearRender');
            }
            environment.destroyedComponents.push(component);
        };

        ComponentStateBucket.prototype.finalize = function finalize() {
            var finalizer = this.finalizer;

            finalizer();
            this.finalizer = NOOP;
        };

        return ComponentStateBucket;
    }();

    function referenceForKey(component, key) {
        return component[ROOT_REF].get(key);
    }
    function referenceForParts(component, parts) {
        var isAttrs = parts[0] === 'attrs';
        // TODO deprecate this
        if (isAttrs) {
            parts.shift();
            if (parts.length === 1) {
                return referenceForKey(component, parts[0]);
            }
        }
        return referenceFromParts(component[ROOT_REF], parts);
    }
    // TODO we should probably do this transform at build time
    function wrapComponentClassAttribute(hash) {
        if (hash === null) {
            return;
        }
        var keys = hash[0],
            values = hash[1];

        var index = keys === null ? -1 : keys.indexOf('class');
        if (index !== -1) {
            var value = values[index];
            if (!Array.isArray(value)) {
                return;
            }
            var type = value[0];

            if (type === _wireFormat.Ops.Get || type === _wireFormat.Ops.MaybeLocal) {
                var path = value[value.length - 1];
                var propName = path[path.length - 1];
                values[index] = [_wireFormat.Ops.Helper, '-class', [value, propName], null];
            }
        }
    }
    var AttributeBinding = {
        parse: function (microsyntax) {
            var colonIndex = microsyntax.indexOf(':');
            if (colonIndex === -1) {
                true && !(microsyntax !== 'class') && (0, _debug.assert)('You cannot use class as an attributeBinding, use classNameBindings instead.', microsyntax !== 'class');

                return [microsyntax, microsyntax, true];
            } else {
                var prop = microsyntax.substring(0, colonIndex);
                var attribute = microsyntax.substring(colonIndex + 1);
                true && !(attribute !== 'class') && (0, _debug.assert)('You cannot use class as an attributeBinding, use classNameBindings instead.', attribute !== 'class');

                return [prop, attribute, false];
            }
        },
        install: function (_element, component, parsed, operations) {
            var prop = parsed[0],
                attribute = parsed[1],
                isSimple = parsed[2];

            if (attribute === 'id') {
                var elementId = (0, _metal.get)(component, prop);
                if (elementId === undefined || elementId === null) {
                    elementId = component.elementId;
                }
                elementId = _runtime.PrimitiveReference.create(elementId);
                operations.setAttribute('id', elementId, true, null);
                // operations.addStaticAttribute(element, 'id', elementId);
                return;
            }
            var isPath = prop.indexOf('.') > -1;
            var reference = isPath ? referenceForParts(component, prop.split('.')) : referenceForKey(component, prop);
            true && !!(isSimple && isPath) && (0, _debug.assert)('Illegal attributeBinding: \'' + prop + '\' is not a valid attribute name.', !(isSimple && isPath));

            if (attribute === 'style') {
                reference = new StyleBindingReference(reference, referenceForKey(component, 'isVisible'));
            }
            operations.setAttribute(attribute, reference, false, null);
            // operations.addDynamicAttribute(element, attribute, reference, false);
        }
    };
    var DISPLAY_NONE = 'display: none;';
    var SAFE_DISPLAY_NONE = htmlSafe(DISPLAY_NONE);

    var StyleBindingReference = function (_CachedReference) {
        (0, _emberBabel.inherits)(StyleBindingReference, _CachedReference);

        function StyleBindingReference(inner, isVisible) {
            (0, _emberBabel.classCallCheck)(this, StyleBindingReference);

            var _this25 = (0, _emberBabel.possibleConstructorReturn)(this, _CachedReference.call(this));

            _this25.inner = inner;
            _this25.isVisible = isVisible;
            _this25.tag = (0, _reference.combine)([inner.tag, isVisible.tag]);
            return _this25;
        }

        StyleBindingReference.prototype.compute = function compute() {
            var value = this.inner.value();
            var isVisible = this.isVisible.value();
            if (isVisible !== false) {
                return value;
            } else if (!value) {
                return SAFE_DISPLAY_NONE;
            } else {
                var style = value + ' ' + DISPLAY_NONE;
                return isHTMLSafe(value) ? htmlSafe(style) : style;
            }
        };

        return StyleBindingReference;
    }(_reference.CachedReference);

    var IsVisibleBinding = {
        install: function (_element, component, operations) {
            operations.setAttribute('style', (0, _reference.map)(referenceForKey(component, 'isVisible'), this.mapStyleValue), false, null);
            // // the upstream type for addDynamicAttribute's `value` argument
            // // appears to be incorrect. It is currently a Reference<string>, I
            // // think it should be a Reference<string|null>.
            // operations.addDynamicAttribute(element, 'style', ref as any as Reference<string>, false);
        },
        mapStyleValue: function (isVisible) {
            return isVisible === false ? SAFE_DISPLAY_NONE : null;
        }
    };
    var ClassNameBinding = {
        install: function (_element, component, microsyntax, operations) {
            var _microsyntax$split = microsyntax.split(':'),
                prop = _microsyntax$split[0],
                truthy = _microsyntax$split[1],
                falsy = _microsyntax$split[2];

            var isStatic = prop === '';
            if (isStatic) {
                operations.setAttribute('class', _runtime.PrimitiveReference.create(truthy), true, null);
            } else {
                var isPath = prop.indexOf('.') > -1;
                var parts = isPath ? prop.split('.') : [];
                var value = isPath ? referenceForParts(component, parts) : referenceForKey(component, prop);
                var ref = void 0;
                if (truthy === undefined) {
                    ref = new SimpleClassNameBindingReference(value, isPath ? parts[parts.length - 1] : prop);
                } else {
                    ref = new ColonClassNameBindingReference(value, truthy, falsy);
                }
                operations.setAttribute('class', ref, false, null);
                // // the upstream type for addDynamicAttribute's `value` argument
                // // appears to be incorrect. It is currently a Reference<string>, I
                // // think it should be a Reference<string|null>.
                // operations.addDynamicAttribute(element, 'class', ref as any as Reference<string>, false);
            }
        }
    };

    var SimpleClassNameBindingReference = function (_CachedReference2) {
        (0, _emberBabel.inherits)(SimpleClassNameBindingReference, _CachedReference2);

        function SimpleClassNameBindingReference(inner, path) {
            (0, _emberBabel.classCallCheck)(this, SimpleClassNameBindingReference);

            var _this26 = (0, _emberBabel.possibleConstructorReturn)(this, _CachedReference2.call(this));

            _this26.inner = inner;
            _this26.path = path;
            _this26.tag = inner.tag;
            _this26.inner = inner;
            _this26.path = path;
            _this26.dasherizedPath = null;
            return _this26;
        }

        SimpleClassNameBindingReference.prototype.compute = function compute() {
            var value = this.inner.value();
            if (value === true) {
                var path = this.path,
                    dasherizedPath = this.dasherizedPath;

                return dasherizedPath || (this.dasherizedPath = (0, _string.dasherize)(path));
            } else if (value || value === 0) {
                return String(value);
            } else {
                return null;
            }
        };

        return SimpleClassNameBindingReference;
    }(_reference.CachedReference);

    var ColonClassNameBindingReference = function (_CachedReference3) {
        (0, _emberBabel.inherits)(ColonClassNameBindingReference, _CachedReference3);

        function ColonClassNameBindingReference(inner) {
            var truthy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            var falsy = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

            (0, _emberBabel.classCallCheck)(this, ColonClassNameBindingReference);

            var _this27 = (0, _emberBabel.possibleConstructorReturn)(this, _CachedReference3.call(this));

            _this27.inner = inner;
            _this27.truthy = truthy;
            _this27.falsy = falsy;
            _this27.tag = inner.tag;
            return _this27;
        }

        ColonClassNameBindingReference.prototype.compute = function compute() {
            var inner = this.inner,
                truthy = this.truthy,
                falsy = this.falsy;

            return inner.value() ? truthy : falsy;
        };

        return ColonClassNameBindingReference;
    }(_reference.CachedReference);

    // ComponentArgs takes EvaluatedNamedArgs and converts them into the
    // inputs needed by CurlyComponents (attrs and props, with mutable
    // cells, etc).


    function processComponentArgs(namedArgs) {
        var keys = namedArgs.names;
        var attrs = namedArgs.value();
        var props = Object.create(null);
        var args = Object.create(null);
        props[ARGS] = args;
        for (var i = 0; i < keys.length; i++) {
            var name = keys[i];
            var ref = namedArgs.get(name);
            var value = attrs[name];
            if (typeof value === 'function' && value[ACTION]) {
                attrs[name] = value;
            } else if (ref[UPDATE]) {
                attrs[name] = new MutableCell(ref, value);
            }
            args[name] = ref;
            props[name] = value;
        }
        props.attrs = attrs;
        return props;
    }
    var REF = (0, _utils.symbol)('REF');

    var MutableCell = function () {
        function MutableCell(ref, value) {
            (0, _emberBabel.classCallCheck)(this, MutableCell);

            this[_views.MUTABLE_CELL] = true;
            this[REF] = ref;
            this.value = value;
        }

        MutableCell.prototype.update = function update(val) {
            this[REF][UPDATE](val);
        };

        return MutableCell;
    }();

    function aliasIdToElementId(args, props) {
        if (args.named.has('id')) {
            // tslint:disable-next-line:max-line-length
            true && !!args.named.has('elementId') && (0, _debug.assert)('You cannot invoke a component with both \'id\' and \'elementId\' at the same time.', !args.named.has('elementId'));

            props.elementId = props.id;
        }
    }
    function isTemplateFactory(template) {
        return typeof template.create === 'function';
    }
    // We must traverse the attributeBindings in reverse keeping track of
    // what has already been applied. This is essentially refining the concatenated
    // properties applying right to left.
    function applyAttributeBindings(element, attributeBindings, component, operations) {
        var seen = [];
        var i = attributeBindings.length - 1;
        while (i !== -1) {
            var binding = attributeBindings[i];
            var parsed = AttributeBinding.parse(binding);
            var attribute = parsed[1];
            if (seen.indexOf(attribute) === -1) {
                seen.push(attribute);
                AttributeBinding.install(element, component, parsed, operations);
            }
            i--;
        }
        if (seen.indexOf('id') === -1) {
            var id = component.elementId ? component.elementId : (0, _utils.guidFor)(component);
            operations.setAttribute('id', _runtime.PrimitiveReference.create(id), false, null);
        }
        if (seen.indexOf('style') === -1) {
            IsVisibleBinding.install(element, component, operations);
        }
    }
    var DEFAULT_LAYOUT = (0, _container.privatize)(_templateObject);

    var CurlyComponentManager = function (_AbstractManager2) {
        (0, _emberBabel.inherits)(CurlyComponentManager, _AbstractManager2);

        function CurlyComponentManager() {
            (0, _emberBabel.classCallCheck)(this, CurlyComponentManager);

            return (0, _emberBabel.possibleConstructorReturn)(this, _AbstractManager2.apply(this, arguments));
        }

        CurlyComponentManager.prototype.getLayout = function getLayout(state, _resolver) {
            return {
                // TODO fix
                handle: state.handle,
                symbolTable: state.symbolTable
            };
        };

        CurlyComponentManager.prototype.templateFor = function templateFor(component, resolver) {
            var layout = (0, _metal.get)(component, 'layout');
            if (layout !== undefined) {
                // This needs to be cached by template.id
                if (isTemplateFactory(layout)) {
                    return resolver.createTemplate(layout, (0, _owner.getOwner)(component));
                } else {
                    // we were provided an instance already
                    return layout;
                }
            }
            var owner = (0, _owner.getOwner)(component);
            var layoutName = (0, _metal.get)(component, 'layoutName');
            if (layoutName) {
                var _template = owner.lookup('template:' + layoutName);
                if (_template) {
                    return _template;
                }
            }
            return owner.lookup(DEFAULT_LAYOUT);
        };

        CurlyComponentManager.prototype.getDynamicLayout = function getDynamicLayout(_ref3, resolver) {
            var component = _ref3.component;

            var template = this.templateFor(component, resolver);
            var layout = template.asWrappedLayout();
            return {
                handle: layout.compile(),
                symbolTable: layout.symbolTable
            };
        };

        CurlyComponentManager.prototype.getTagName = function getTagName(state) {
            var component = state.component,
                hasWrappedElement = state.hasWrappedElement;

            if (!hasWrappedElement) {
                return null;
            }
            return component && component.tagName || 'div';
        };

        CurlyComponentManager.prototype.getCapabilities = function getCapabilities(state) {
            return state.capabilities;
        };

        CurlyComponentManager.prototype.prepareArgs = function prepareArgs(state, args) {
            var positionalParams = state.ComponentClass.class.positionalParams;
            // early exits

            if (positionalParams === undefined || positionalParams === null || args.positional.length === 0) {
                return null;
            }
            var named = void 0;
            if (typeof positionalParams === 'string') {
                var _named;

                true && !!args.named.has(positionalParams) && (0, _debug.assert)('You cannot specify positional parameters and the hash argument `' + positionalParams + '`.', !args.named.has(positionalParams));

                named = (_named = {}, _named[positionalParams] = args.positional.capture(), _named);
                (0, _polyfills.assign)(named, args.named.capture().map);
            } else if (Array.isArray(positionalParams) && positionalParams.length > 0) {
                var count = Math.min(positionalParams.length, args.positional.length);
                named = {};
                (0, _polyfills.assign)(named, args.named.capture().map);
                if (_deprecatedFeatures.POSITIONAL_PARAM_CONFLICT) {
                    for (var i = 0; i < count; i++) {
                        var name = positionalParams[i];
                        true && !!args.named.has(name) && (0, _debug.deprecate)('You cannot specify both a positional param (at position ' + i + ') and the hash argument `' + name + '`.', !args.named.has(name), {
                            id: 'ember-glimmer.positional-param-conflict',
                            until: '3.5.0'
                        });

                        named[name] = args.positional.at(i);
                    }
                }
            } else {
                return null;
            }
            return { positional: _util.EMPTY_ARRAY, named: named };
        };
        /*
         * This hook is responsible for actually instantiating the component instance.
         * It also is where we perform additional bookkeeping to support legacy
         * features like exposed by view mixins like ChildViewSupport, ActionSupport,
         * etc.
         */

        CurlyComponentManager.prototype.create = function create(environment, state, args, dynamicScope, callerSelfRef, hasBlock) {
            if (true /* DEBUG */) {
                    this._pushToDebugStack('component:' + state.name, environment);
                }
            // Get the nearest concrete component instance from the scope. "Virtual"
            // components will be skipped.
            var parentView = dynamicScope.view;
            // Get the Ember.Component subclass to instantiate for this component.
            var factory = state.ComponentClass;
            // Capture the arguments, which tells Glimmer to give us our own, stable
            // copy of the Arguments object that is safe to hold on to between renders.
            var capturedArgs = args.named.capture();
            var props = processComponentArgs(capturedArgs);
            // Alias `id` argument to `elementId` property on the component instance.
            aliasIdToElementId(args, props);
            // Set component instance's parentView property to point to nearest concrete
            // component.
            props.parentView = parentView;
            // Set whether this component was invoked with a block
            // (`{{#my-component}}{{/my-component}}`) or without one
            // (`{{my-component}}`).
            props[HAS_BLOCK] = hasBlock;
            // Save the current `this` context of the template as the component's
            // `_targetObject`, so bubbled actions are routed to the right place.
            props._targetObject = callerSelfRef.value();
            // static layout asserts CurriedDefinition
            if (state.template) {
                props.layout = state.template;
            }
            // Now that we've built up all of the properties to set on the component instance,
            // actually create it.
            var component = factory.create(props);
            var finalizer = (0, _instrumentation._instrumentStart)('render.component', initialRenderInstrumentDetails, component);
            // We become the new parentView for downstream components, so save our
            // component off on the dynamic scope.
            dynamicScope.view = component;
            // Unless we're the root component, we need to add ourselves to our parent
            // component's childViews array.
            if (parentView !== null && parentView !== undefined) {
                (0, _views.addChildView)(parentView, component);
            }
            component.trigger('didReceiveAttrs');
            var hasWrappedElement = component.tagName !== '';
            // We usually do this in the `didCreateElement`, but that hook doesn't fire for tagless components
            if (!hasWrappedElement) {
                if (environment.isInteractive) {
                    component.trigger('willRender');
                }
                component._transitionTo('hasElement');
                if (environment.isInteractive) {
                    component.trigger('willInsertElement');
                }
            }
            // Track additional lifecycle metadata about this component in a state bucket.
            // Essentially we're saving off all the state we'll need in the future.
            var bucket = new ComponentStateBucket(environment, component, capturedArgs, finalizer, hasWrappedElement);
            if (args.named.has('class')) {
                bucket.classRef = args.named.get('class');
            }
            if (true /* DEBUG */) {
                    processComponentInitializationAssertions(component, props);
                }
            if (environment.isInteractive && hasWrappedElement) {
                component.trigger('willRender');
            }
            return bucket;
        };

        CurlyComponentManager.prototype.getSelf = function getSelf(_ref4) {
            var component = _ref4.component;

            return component[ROOT_REF];
        };

        CurlyComponentManager.prototype.didCreateElement = function didCreateElement(_ref5, element, operations) {
            var component = _ref5.component,
                classRef = _ref5.classRef,
                environment = _ref5.environment;

            (0, _views.setViewElement)(component, element);
            var attributeBindings = component.attributeBindings,
                classNames = component.classNames,
                classNameBindings = component.classNameBindings;

            if (attributeBindings && attributeBindings.length) {
                applyAttributeBindings(element, attributeBindings, component, operations);
            } else {
                var id = component.elementId ? component.elementId : (0, _utils.guidFor)(component);
                operations.setAttribute('id', _runtime.PrimitiveReference.create(id), false, null);
                IsVisibleBinding.install(element, component, operations);
            }
            if (classRef) {
                var ref = new SimpleClassNameBindingReference(classRef, classRef['_propertyKey']);
                operations.setAttribute('class', ref, false, null);
            }
            if (classNames && classNames.length) {
                classNames.forEach(function (name) {
                    operations.setAttribute('class', _runtime.PrimitiveReference.create(name), false, null);
                });
            }
            if (classNameBindings && classNameBindings.length) {
                classNameBindings.forEach(function (binding) {
                    ClassNameBinding.install(element, component, binding, operations);
                });
            }
            operations.setAttribute('class', _runtime.PrimitiveReference.create('ember-view'), false, null);
            if ('ariaRole' in component) {
                operations.setAttribute('role', referenceForKey(component, 'ariaRole'), false, null);
            }
            component._transitionTo('hasElement');
            if (environment.isInteractive) {
                component.trigger('willInsertElement');
            }
        };

        CurlyComponentManager.prototype.didRenderLayout = function didRenderLayout(bucket, bounds) {
            bucket.component[BOUNDS] = bounds;
            bucket.finalize();
            if (true /* DEBUG */) {
                    this.debugStack.pop();
                }
        };

        CurlyComponentManager.prototype.getTag = function getTag(_ref6) {
            var args = _ref6.args,
                component = _ref6.component;

            return args ? (0, _reference.combine)([args.tag, component[DIRTY_TAG]]) : component[DIRTY_TAG];
        };

        CurlyComponentManager.prototype.didCreate = function didCreate(_ref7) {
            var component = _ref7.component,
                environment = _ref7.environment;

            if (environment.isInteractive) {
                component._transitionTo('inDOM');
                component.trigger('didInsertElement');
                component.trigger('didRender');
            }
        };

        CurlyComponentManager.prototype.update = function update(bucket) {
            var component = bucket.component,
                args = bucket.args,
                argsRevision = bucket.argsRevision,
                environment = bucket.environment;

            if (true /* DEBUG */) {
                    this._pushToDebugStack(component._debugContainerKey, environment);
                }
            bucket.finalizer = (0, _instrumentation._instrumentStart)('render.component', rerenderInstrumentDetails, component);
            if (args && !args.tag.validate(argsRevision)) {
                var props = processComponentArgs(args);
                bucket.argsRevision = args.tag.value();
                component[IS_DISPATCHING_ATTRS] = true;
                component.setProperties(props);
                component[IS_DISPATCHING_ATTRS] = false;
                component.trigger('didUpdateAttrs');
                component.trigger('didReceiveAttrs');
            }
            if (environment.isInteractive) {
                component.trigger('willUpdate');
                component.trigger('willRender');
            }
        };

        CurlyComponentManager.prototype.didUpdateLayout = function didUpdateLayout(bucket) {
            bucket.finalize();
            if (true /* DEBUG */) {
                    this.debugStack.pop();
                }
        };

        CurlyComponentManager.prototype.didUpdate = function didUpdate(_ref8) {
            var component = _ref8.component,
                environment = _ref8.environment;

            if (environment.isInteractive) {
                component.trigger('didUpdate');
                component.trigger('didRender');
            }
        };

        CurlyComponentManager.prototype.getDestructor = function getDestructor(stateBucket) {
            return stateBucket;
        };

        return CurlyComponentManager;
    }(AbstractManager);

    function processComponentInitializationAssertions(component, props) {
        true && !function () {
            var classNameBindings = component.classNameBindings;

            for (var i = 0; i < classNameBindings.length; i++) {
                var binding = classNameBindings[i];
                if (typeof binding !== 'string' || binding.length === 0) {
                    return false;
                }
            }
            return true;
        }() && (0, _debug.assert)('classNameBindings must be non-empty strings: ' + component, function () {
            var classNameBindings = component.classNameBindings;for (var i = 0; i < classNameBindings.length; i++) {
                var binding = classNameBindings[i];if (typeof binding !== 'string' || binding.length === 0) {
                    return false;
                }
            }return true;
        }());
        true && !function () {
            var classNameBindings = component.classNameBindings;

            for (var i = 0; i < classNameBindings.length; i++) {
                var binding = classNameBindings[i];
                if (binding.split(' ').length > 1) {
                    return false;
                }
            }
            return true;
        }() && (0, _debug.assert)('classNameBindings must not have spaces in them: ' + component, function () {
            var classNameBindings = component.classNameBindings;for (var i = 0; i < classNameBindings.length; i++) {
                var binding = classNameBindings[i];if (binding.split(' ').length > 1) {
                    return false;
                }
            }return true;
        }());
        true && !(component.tagName !== '' || !component.classNameBindings || component.classNameBindings.length === 0) && (0, _debug.assert)('You cannot use `classNameBindings` on a tag-less component: ' + component, component.tagName !== '' || !component.classNameBindings || component.classNameBindings.length === 0);
        true && !(component.tagName !== '' || props.id === component.elementId || !component.elementId && component.elementId !== '') && (0, _debug.assert)('You cannot use `elementId` on a tag-less component: ' + component, component.tagName !== '' || props.id === component.elementId || !component.elementId && component.elementId !== '');
        true && !(component.tagName !== '' || !component.attributeBindings || component.attributeBindings.length === 0) && (0, _debug.assert)('You cannot use `attributeBindings` on a tag-less component: ' + component, component.tagName !== '' || !component.attributeBindings || component.attributeBindings.length === 0);
    }
    function initialRenderInstrumentDetails(component) {
        return component.instrumentDetails({ initialRender: true });
    }
    function rerenderInstrumentDetails(component) {
        return component.instrumentDetails({ initialRender: false });
    }
    var CURLY_CAPABILITIES = {
        dynamicLayout: true,
        dynamicTag: true,
        prepareArgs: true,
        createArgs: true,
        attributeHook: true,
        elementHook: true,
        createCaller: true,
        dynamicScope: true,
        updateHook: true,
        createInstance: true
    };
    var CURLY_COMPONENT_MANAGER = new CurlyComponentManager();

    var CurlyComponentDefinition =
    // tslint:disable-next-line:no-shadowed-variable
    function CurlyComponentDefinition(name, ComponentClass, handle, template, args) {
        (0, _emberBabel.classCallCheck)(this, CurlyComponentDefinition);

        this.name = name;
        this.ComponentClass = ComponentClass;
        this.handle = handle;
        this.manager = CURLY_COMPONENT_MANAGER;
        var layout = template && template.asLayout();
        var symbolTable = layout ? layout.symbolTable : undefined;
        this.symbolTable = symbolTable;
        this.template = template;
        this.args = args;
        this.state = {
            name: name,
            ComponentClass: ComponentClass,
            handle: handle,
            template: template,
            capabilities: CURLY_CAPABILITIES,
            symbolTable: symbolTable
        };
    };

    var RootComponentManager = function (_CurlyComponentManage) {
        (0, _emberBabel.inherits)(RootComponentManager, _CurlyComponentManage);

        function RootComponentManager(component) {
            (0, _emberBabel.classCallCheck)(this, RootComponentManager);

            var _this29 = (0, _emberBabel.possibleConstructorReturn)(this, _CurlyComponentManage.call(this));

            _this29.component = component;
            return _this29;
        }

        RootComponentManager.prototype.getLayout = function getLayout(_state, resolver) {
            var template = this.templateFor(this.component, resolver);
            var layout = template.asWrappedLayout();
            return {
                handle: layout.compile(),
                symbolTable: layout.symbolTable
            };
        };

        RootComponentManager.prototype.create = function create(environment, _state, _args, dynamicScope) {
            var component = this.component;
            if (true /* DEBUG */) {
                    this._pushToDebugStack(component._debugContainerKey, environment);
                }
            var finalizer = (0, _instrumentation._instrumentStart)('render.component', initialRenderInstrumentDetails, component);
            dynamicScope.view = component;
            var hasWrappedElement = component.tagName !== '';
            // We usually do this in the `didCreateElement`, but that hook doesn't fire for tagless components
            if (!hasWrappedElement) {
                if (environment.isInteractive) {
                    component.trigger('willRender');
                }
                component._transitionTo('hasElement');
                if (environment.isInteractive) {
                    component.trigger('willInsertElement');
                }
            }
            if (true /* DEBUG */) {
                    processComponentInitializationAssertions(component, {});
                }
            return new ComponentStateBucket(environment, component, null, finalizer, hasWrappedElement);
        };

        return RootComponentManager;
    }(CurlyComponentManager);
    // ROOT is the top-level template it has nothing but one yield.
    // it is supposed to have a dummy element


    var ROOT_CAPABILITIES = {
        dynamicLayout: false,
        dynamicTag: true,
        prepareArgs: false,
        createArgs: false,
        attributeHook: true,
        elementHook: true,
        createCaller: true,
        dynamicScope: true,
        updateHook: true,
        createInstance: false
    };

    var RootComponentDefinition = function () {
        function RootComponentDefinition(component) {
            (0, _emberBabel.classCallCheck)(this, RootComponentDefinition);

            this.component = component;
            var manager = new RootComponentManager(component);
            this.manager = manager;
            var factory = _container.FACTORY_FOR.get(component);
            this.state = {
                name: factory.fullName.slice(10),
                capabilities: ROOT_CAPABILITIES,
                ComponentClass: factory,
                handle: null
            };
        }

        RootComponentDefinition.prototype.getTag = function getTag(_ref9) {
            var component = _ref9.component;

            return component[DIRTY_TAG];
        };

        return RootComponentDefinition;
    }();

    var DynamicScope = function () {
        function DynamicScope(view, outletState) {
            (0, _emberBabel.classCallCheck)(this, DynamicScope);

            this.view = view;
            this.outletState = outletState;
        }

        DynamicScope.prototype.child = function child() {
            return new DynamicScope(this.view, this.outletState);
        };

        DynamicScope.prototype.get = function get(key) {
            // tslint:disable-next-line:max-line-length
            true && !(key === 'outletState') && (0, _debug.assert)('Using `-get-dynamic-scope` is only supported for `outletState` (you used `' + key + '`).', key === 'outletState');

            return this.outletState;
        };

        DynamicScope.prototype.set = function set(key, value) {
            // tslint:disable-next-line:max-line-length
            true && !(key === 'outletState') && (0, _debug.assert)('Using `-with-dynamic-scope` is only supported for `outletState` (you used `' + key + '`).', key === 'outletState');

            this.outletState = value;
            return value;
        };

        return DynamicScope;
    }();

    var RootState = function () {
        function RootState(root, env, template, self, parentElement, dynamicScope, builder) {
            var _this30 = this;

            (0, _emberBabel.classCallCheck)(this, RootState);

            true && !(template !== undefined) && (0, _debug.assert)('You cannot render `' + self.value() + '` without a template.', template !== undefined);

            this.id = (0, _views.getViewId)(root);
            this.env = env;
            this.root = root;
            this.result = undefined;
            this.shouldReflush = false;
            this.destroyed = false;
            var options = this.options = {
                alwaysRevalidate: false
            };
            this.render = function () {
                var layout = template.asLayout();
                var handle = layout.compile();
                var iterator = (0, _runtime.renderMain)(layout['compiler'].program, env, self, dynamicScope, builder(env, { element: parentElement, nextSibling: null }), handle);
                var iteratorResult = void 0;
                do {
                    iteratorResult = iterator.next();
                } while (!iteratorResult.done);
                var result = _this30.result = iteratorResult.value;
                // override .render function after initial render
                _this30.render = function () {
                    return result.rerender(options);
                };
            };
        }

        RootState.prototype.isFor = function isFor(possibleRoot) {
            return this.root === possibleRoot;
        };

        RootState.prototype.destroy = function destroy() {
            var result = this.result,
                env = this.env;

            this.destroyed = true;
            this.env = undefined;
            this.root = null;
            this.result = undefined;
            this.render = undefined;
            if (result) {
                /*
                 Handles these scenarios:
                        * When roots are removed during standard rendering process, a transaction exists already
                   `.begin()` / `.commit()` are not needed.
                 * When roots are being destroyed manually (`component.append(); component.destroy() case), no
                   transaction exists already.
                 * When roots are being destroyed during `Renderer#destroy`, no transaction exists
                        */
                var needsTransaction = !env.inTransaction;
                if (needsTransaction) {
                    env.begin();
                }
                try {
                    result.destroy();
                } finally {
                    if (needsTransaction) {
                        env.commit();
                    }
                }
            }
        };

        return RootState;
    }();

    var renderers = [];
    function _resetRenderers() {
        renderers.length = 0;
    }
    (0, _metal.setHasViews)(function () {
        return renderers.length > 0;
    });
    function register(renderer) {
        true && !(renderers.indexOf(renderer) === -1) && (0, _debug.assert)('Cannot register the same renderer twice', renderers.indexOf(renderer) === -1);

        renderers.push(renderer);
    }
    function deregister(renderer) {
        var index = renderers.indexOf(renderer);
        true && !(index !== -1) && (0, _debug.assert)('Cannot deregister unknown unregistered renderer', index !== -1);

        renderers.splice(index, 1);
    }
    function loopBegin() {
        for (var i = 0; i < renderers.length; i++) {
            renderers[i]._scheduleRevalidate();
        }
    }
    function K() {
        /* noop */
    }
    var renderSettledDeferred = null;
    /*
      Returns a promise which will resolve when rendering has settled. Settled in
      this context is defined as when all of the tags in use are "current" (e.g.
      `renderers.every(r => r._isValid())`). When this is checked at the _end_ of
      the run loop, this essentially guarantees that all rendering is completed.
    
      @method renderSettled
      @returns {Promise<void>} a promise which fulfills when rendering has settled
    */
    function renderSettled() {
        if (renderSettledDeferred === null) {
            renderSettledDeferred = _rsvp.default.defer();
            // if there is no current runloop, the promise created above will not have
            // a chance to resolve (because its resolved in backburner's "end" event)
            if (!(0, _runloop.getCurrentRunLoop)()) {
                // ensure a runloop has been kicked off
                _runloop.backburner.schedule('actions', null, K);
            }
        }
        return renderSettledDeferred.promise;
    }
    function resolveRenderPromise() {
        if (renderSettledDeferred !== null) {
            var resolve = renderSettledDeferred.resolve;
            renderSettledDeferred = null;
            _runloop.backburner.join(null, resolve);
        }
    }
    var loops = 0;
    function loopEnd() {
        for (var i = 0; i < renderers.length; i++) {
            if (!renderers[i]._isValid()) {
                if (loops > 10) {
                    loops = 0;
                    // TODO: do something better
                    renderers[i].destroy();
                    throw new Error('infinite rendering invalidation detected');
                }
                loops++;
                return _runloop.backburner.join(null, K);
            }
        }
        loops = 0;
        resolveRenderPromise();
    }
    _runloop.backburner.on('begin', loopBegin);
    _runloop.backburner.on('end', loopEnd);

    var Renderer = function () {
        function Renderer(env, rootTemplate) {
            var _viewRegistry = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _views.fallbackViewRegistry;

            var destinedForDOM = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
            var builder = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : _runtime.clientBuilder;

            (0, _emberBabel.classCallCheck)(this, Renderer);

            this._env = env;
            this._rootTemplate = rootTemplate;
            this._viewRegistry = _viewRegistry;
            this._destinedForDOM = destinedForDOM;
            this._destroyed = false;
            this._roots = [];
            this._lastRevision = -1;
            this._isRenderingRoots = false;
            this._removedRoots = [];
            this._builder = builder;
        }
        // renderer HOOKS


        Renderer.prototype.appendOutletView = function appendOutletView(view, target) {
            var definition = createRootOutlet(view);
            this._appendDefinition(view, (0, _runtime.curry)(definition), target);
        };

        Renderer.prototype.appendTo = function appendTo(view, target) {
            var definition = new RootComponentDefinition(view);
            this._appendDefinition(view, (0, _runtime.curry)(definition), target);
        };

        Renderer.prototype._appendDefinition = function _appendDefinition(root, definition, target) {
            var self = new UnboundReference(definition);
            var dynamicScope = new DynamicScope(null, _runtime.UNDEFINED_REFERENCE);
            var rootState = new RootState(root, this._env, this._rootTemplate, self, target, dynamicScope, this._builder);
            this._renderRoot(rootState);
        };

        Renderer.prototype.rerender = function rerender() {
            this._scheduleRevalidate();
        };

        Renderer.prototype.register = function register(view) {
            var id = (0, _views.getViewId)(view);
            true && !!this._viewRegistry[id] && (0, _debug.assert)('Attempted to register a view with an id already in use: ' + id, !this._viewRegistry[id]);

            this._viewRegistry[id] = view;
        };

        Renderer.prototype.unregister = function unregister(view) {
            delete this._viewRegistry[(0, _views.getViewId)(view)];
        };

        Renderer.prototype.remove = function remove(view) {
            view._transitionTo('destroying');
            this.cleanupRootFor(view);
            (0, _views.setViewElement)(view, null);
            if (this._destinedForDOM) {
                view.trigger('didDestroyElement');
            }
            if (!view.isDestroying) {
                view.destroy();
            }
        };

        Renderer.prototype.cleanupRootFor = function cleanupRootFor(view) {
            // no need to cleanup roots if we have already been destroyed
            if (this._destroyed) {
                return;
            }
            var roots = this._roots;
            // traverse in reverse so we can remove items
            // without mucking up the index
            var i = this._roots.length;
            while (i--) {
                var root = roots[i];
                if (root.isFor(view)) {
                    root.destroy();
                    roots.splice(i, 1);
                }
            }
        };

        Renderer.prototype.destroy = function destroy() {
            if (this._destroyed) {
                return;
            }
            this._destroyed = true;
            this._clearAllRoots();
        };

        Renderer.prototype.getBounds = function getBounds(view) {
            var bounds = view[BOUNDS];
            var parentElement = bounds.parentElement();
            var firstNode = bounds.firstNode();
            var lastNode = bounds.lastNode();
            return { parentElement: parentElement, firstNode: firstNode, lastNode: lastNode };
        };

        Renderer.prototype.createElement = function createElement(tagName) {
            return this._env.getAppendOperations().createElement(tagName);
        };

        Renderer.prototype._renderRoot = function _renderRoot(root) {
            var roots = this._roots;

            roots.push(root);
            if (roots.length === 1) {
                register(this);
            }
            this._renderRootsTransaction();
        };

        Renderer.prototype._renderRoots = function _renderRoots() {
            var roots = this._roots,
                env = this._env,
                removedRoots = this._removedRoots;

            var globalShouldReflush = void 0;
            var initialRootsLength = void 0;
            do {
                env.begin();
                try {
                    // ensure that for the first iteration of the loop
                    // each root is processed
                    initialRootsLength = roots.length;
                    globalShouldReflush = false;
                    for (var i = 0; i < roots.length; i++) {
                        var root = roots[i];
                        if (root.destroyed) {
                            // add to the list of roots to be removed
                            // they will be removed from `this._roots` later
                            removedRoots.push(root);
                            // skip over roots that have been marked as destroyed
                            continue;
                        }
                        var shouldReflush = root.shouldReflush;
                        // when processing non-initial reflush loops,
                        // do not process more roots than needed

                        if (i >= initialRootsLength && !shouldReflush) {
                            continue;
                        }
                        root.options.alwaysRevalidate = shouldReflush;
                        // track shouldReflush based on this roots render result
                        shouldReflush = root.shouldReflush = (0, _metal.runInTransaction)(root, 'render');
                        // globalShouldReflush should be `true` if *any* of
                        // the roots need to reflush
                        globalShouldReflush = globalShouldReflush || shouldReflush;
                    }
                    this._lastRevision = _reference.CURRENT_TAG.value();
                } finally {
                    env.commit();
                }
            } while (globalShouldReflush || roots.length > initialRootsLength);
            // remove any roots that were destroyed during this transaction
            while (removedRoots.length) {
                var _root = removedRoots.pop();
                var rootIndex = roots.indexOf(_root);
                roots.splice(rootIndex, 1);
            }
            if (this._roots.length === 0) {
                deregister(this);
            }
        };

        Renderer.prototype._renderRootsTransaction = function _renderRootsTransaction() {
            if (this._isRenderingRoots) {
                // currently rendering roots, a new root was added and will
                // be processed by the existing _renderRoots invocation
                return;
            }
            // used to prevent calling _renderRoots again (see above)
            // while we are actively rendering roots
            this._isRenderingRoots = true;
            var completedWithoutError = false;
            try {
                this._renderRoots();
                completedWithoutError = true;
            } finally {
                if (!completedWithoutError) {
                    this._lastRevision = _reference.CURRENT_TAG.value();
                    if (this._env.inTransaction === true) {
                        this._env.commit();
                    }
                }
                this._isRenderingRoots = false;
            }
        };

        Renderer.prototype._clearAllRoots = function _clearAllRoots() {
            var roots = this._roots;
            for (var i = 0; i < roots.length; i++) {
                var root = roots[i];
                root.destroy();
            }
            this._removedRoots.length = 0;
            this._roots = [];
            // if roots were present before destroying
            // deregister this renderer instance
            if (roots.length) {
                deregister(this);
            }
        };

        Renderer.prototype._scheduleRevalidate = function _scheduleRevalidate() {
            _runloop.backburner.scheduleOnce('render', this, this._revalidate);
        };

        Renderer.prototype._isValid = function _isValid() {
            return this._destroyed || this._roots.length === 0 || _reference.CURRENT_TAG.validate(this._lastRevision);
        };

        Renderer.prototype._revalidate = function _revalidate() {
            if (this._isValid()) {
                return;
            }
            this._renderRootsTransaction();
        };

        return Renderer;
    }();

    var InertRenderer = function (_Renderer) {
        (0, _emberBabel.inherits)(InertRenderer, _Renderer);

        function InertRenderer() {
            (0, _emberBabel.classCallCheck)(this, InertRenderer);

            return (0, _emberBabel.possibleConstructorReturn)(this, _Renderer.apply(this, arguments));
        }

        InertRenderer.create = function create(_ref10) {
            var env = _ref10.env,
                rootTemplate = _ref10.rootTemplate,
                _viewRegistry = _ref10._viewRegistry,
                builder = _ref10.builder;

            return new this(env, rootTemplate, _viewRegistry, false, builder);
        };

        InertRenderer.prototype.getElement = function getElement(_view) {
            throw new Error('Accessing `this.element` is not allowed in non-interactive environments (such as FastBoot).');
        };

        return InertRenderer;
    }(Renderer);

    var InteractiveRenderer = function (_Renderer2) {
        (0, _emberBabel.inherits)(InteractiveRenderer, _Renderer2);

        function InteractiveRenderer() {
            (0, _emberBabel.classCallCheck)(this, InteractiveRenderer);

            return (0, _emberBabel.possibleConstructorReturn)(this, _Renderer2.apply(this, arguments));
        }

        InteractiveRenderer.create = function create(_ref11) {
            var env = _ref11.env,
                rootTemplate = _ref11.rootTemplate,
                _viewRegistry = _ref11._viewRegistry,
                builder = _ref11.builder;

            return new this(env, rootTemplate, _viewRegistry, true, builder);
        };

        InteractiveRenderer.prototype.getElement = function getElement(view) {
            return (0, _views.getViewElement)(view);
        };

        return InteractiveRenderer;
    }(Renderer);

    var TEMPLATES = {};
    function setTemplates(templates) {
        TEMPLATES = templates;
    }
    function getTemplates() {
        return TEMPLATES;
    }
    function getTemplate(name) {
        if (TEMPLATES.hasOwnProperty(name)) {
            return TEMPLATES[name];
        }
    }
    function hasTemplate(name) {
        return TEMPLATES.hasOwnProperty(name);
    }
    function setTemplate(name, template) {
        return TEMPLATES[name] = template;
    }

    ///<reference path="./simple-dom.d.ts" />

    /**
    @module ember
    */
    /**
      Calls [loc](/api/classes/Ember.String.html#method_loc) with the
      provided string. This is a convenient way to localize text within a template.
      For example:
    
      ```javascript
      Ember.STRINGS = {
        '_welcome_': 'Bonjour'
      };
      ```
    
      ```handlebars
      <div class='message'>
        {{loc '_welcome_'}}
      </div>
      ```
    
      ```html
      <div class='message'>
        Bonjour
      </div>
      ```
    
      See [String.loc](/api/ember/release/classes/String/methods/loc?anchor=loc) for how to
      set up localized string references.
    
      @method loc
      @for Ember.Templates.helpers
      @param {String} str The string to format.
      @see {String#loc}
      @public
    */
    var loc$1 = helper(function (params) {
        return _string.loc.apply(null, params);
    });

    var CompileTimeLookup = function () {
        function CompileTimeLookup(resolver) {
            (0, _emberBabel.classCallCheck)(this, CompileTimeLookup);

            this.resolver = resolver;
        }

        CompileTimeLookup.prototype.getCapabilities = function getCapabilities(handle) {
            var definition = this.resolver.resolve(handle);
            var manager = definition.manager,
                state = definition.state;

            return manager.getCapabilities(state);
        };

        CompileTimeLookup.prototype.getLayout = function getLayout(handle) {
            var _resolver$resolve = this.resolver.resolve(handle),
                manager = _resolver$resolve.manager,
                state = _resolver$resolve.state;

            var capabilities = manager.getCapabilities(state);
            if (capabilities.dynamicLayout) {
                return null;
            }
            var invocation = manager.getLayout(state, this.resolver);
            return {
                // TODO: this seems weird, it already is compiled
                compile: function () {
                    return invocation.handle;
                },

                symbolTable: invocation.symbolTable
            };
        };

        CompileTimeLookup.prototype.lookupHelper = function lookupHelper(name, referrer) {
            return this.resolver.lookupHelper(name, referrer);
        };

        CompileTimeLookup.prototype.lookupModifier = function lookupModifier(name, referrer) {
            return this.resolver.lookupModifier(name, referrer);
        };

        CompileTimeLookup.prototype.lookupComponentDefinition = function lookupComponentDefinition(name, referrer) {
            return this.resolver.lookupComponentHandle(name, referrer);
        };

        CompileTimeLookup.prototype.lookupPartial = function lookupPartial(name, referrer) {
            return this.resolver.lookupPartial(name, referrer);
        };

        return CompileTimeLookup;
    }();

    var MANAGERS = new WeakMap();
    var getPrototypeOf = Object.getPrototypeOf;
    function setManager(factory, obj) {
        MANAGERS.set(obj, factory);
        return obj;
    }
    function getManager(obj) {
        var pointer = obj;
        while (pointer !== undefined && pointer !== null) {
            if (MANAGERS.has(pointer)) {
                return MANAGERS.get(pointer);
            }
            pointer = getPrototypeOf(pointer);
        }
        return;
    }
    function valueForCapturedArgs(args) {
        return {
            named: args.named.value(),
            positional: args.positional.value()
        };
    }

    var CAPABILITIES$1 = {
        dynamicLayout: false,
        dynamicTag: false,
        prepareArgs: false,
        createArgs: true,
        attributeHook: false,
        elementHook: false,
        createCaller: false,
        dynamicScope: true,
        updateHook: true,
        createInstance: true
    };
    function capabilities(managerAPI) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        true && !(managerAPI === '3.4') && (0, _debug.assert)('Invalid component manager compatibility specified', managerAPI === '3.4');

        return {
            asyncLifeCycleCallbacks: !!options.asyncLifecycleCallbacks,
            destructor: !!options.destructor
        };
    }
    function hasAsyncLifeCycleCallbacks(delegate) {
        return delegate.capabilities.asyncLifeCycleCallbacks;
    }
    function hasDestructors(delegate) {
        return delegate.capabilities.destructor;
    }
    /**
      The CustomComponentManager allows addons to provide custom component
      implementations that integrate seamlessly into Ember. This is accomplished
      through a delegate, registered with the custom component manager, which
      implements a set of hooks that determine component behavior.
    
      To create a custom component manager, instantiate a new CustomComponentManager
      class and pass the delegate as the first argument:
    
      ```js
      let manager = new CustomComponentManager({
        // ...delegate implementation...
      });
      ```
    
      ## Delegate Hooks
    
      Throughout the lifecycle of a component, the component manager will invoke
      delegate hooks that are responsible for surfacing those lifecycle changes to
      the end developer.
    
      * `create()` - invoked when a new instance of a component should be created
      * `update()` - invoked when the arguments passed to a component change
      * `getContext()` - returns the object that should be
    */

    var CustomComponentManager = function (_AbstractManager3) {
        (0, _emberBabel.inherits)(CustomComponentManager, _AbstractManager3);

        function CustomComponentManager() {
            (0, _emberBabel.classCallCheck)(this, CustomComponentManager);

            return (0, _emberBabel.possibleConstructorReturn)(this, _AbstractManager3.apply(this, arguments));
        }

        CustomComponentManager.prototype.create = function create(_env, definition, args) {
            var delegate = definition.delegate;

            var capturedArgs = args.capture();
            var invocationArgs = valueForCapturedArgs(capturedArgs);
            var component = delegate.createComponent(definition.ComponentClass.class, invocationArgs);
            return new CustomComponentState(delegate, component, capturedArgs);
        };

        CustomComponentManager.prototype.update = function update(_ref12) {
            var delegate = _ref12.delegate,
                component = _ref12.component,
                args = _ref12.args;

            delegate.updateComponent(component, valueForCapturedArgs(args));
        };

        CustomComponentManager.prototype.didCreate = function didCreate(_ref13) {
            var delegate = _ref13.delegate,
                component = _ref13.component;

            if (hasAsyncLifeCycleCallbacks(delegate)) {
                delegate.didCreateComponent(component);
            }
        };

        CustomComponentManager.prototype.didUpdate = function didUpdate(_ref14) {
            var delegate = _ref14.delegate,
                component = _ref14.component;

            if (hasAsyncLifeCycleCallbacks(delegate)) {
                delegate.didUpdateComponent(component);
            }
        };

        CustomComponentManager.prototype.getContext = function getContext(_ref15) {
            var delegate = _ref15.delegate,
                component = _ref15.component;

            delegate.getContext(component);
        };

        CustomComponentManager.prototype.getSelf = function getSelf(_ref16) {
            var delegate = _ref16.delegate,
                component = _ref16.component;

            var context = delegate.getContext(component);
            return new RootReference(context);
        };

        CustomComponentManager.prototype.getDestructor = function getDestructor(state) {
            if (hasDestructors(state.delegate)) {
                return state;
            } else {
                return null;
            }
        };

        CustomComponentManager.prototype.getCapabilities = function getCapabilities() {
            return CAPABILITIES$1;
        };

        CustomComponentManager.prototype.getTag = function getTag(_ref17) {
            var args = _ref17.args;

            return args.tag;
        };

        CustomComponentManager.prototype.didRenderLayout = function didRenderLayout() {};

        CustomComponentManager.prototype.getLayout = function getLayout(state) {
            return {
                handle: state.template.asLayout().compile(),
                symbolTable: state.symbolTable
            };
        };

        return CustomComponentManager;
    }(AbstractManager);

    var CUSTOM_COMPONENT_MANAGER = new CustomComponentManager();
    /**
     * Stores internal state about a component instance after it's been created.
     */

    var CustomComponentState = function () {
        function CustomComponentState(delegate, component, args) {
            (0, _emberBabel.classCallCheck)(this, CustomComponentState);

            this.delegate = delegate;
            this.component = component;
            this.args = args;
        }

        CustomComponentState.prototype.destroy = function destroy() {
            var delegate = this.delegate,
                component = this.component;

            if (hasDestructors(delegate)) {
                delegate.destroyComponent(component);
            }
        };

        return CustomComponentState;
    }();

    var CustomManagerDefinition = function CustomManagerDefinition(name, ComponentClass, delegate, template) {
        (0, _emberBabel.classCallCheck)(this, CustomManagerDefinition);

        this.name = name;
        this.ComponentClass = ComponentClass;
        this.delegate = delegate;
        this.template = template;
        this.manager = CUSTOM_COMPONENT_MANAGER;
        var layout = template.asLayout();
        var symbolTable = layout.symbolTable;
        this.symbolTable = symbolTable;
        this.state = {
            name: name,
            ComponentClass: ComponentClass,
            template: template,
            symbolTable: symbolTable,
            delegate: delegate
        };
    };

    var CAPABILITIES$2 = {
        dynamicLayout: false,
        dynamicTag: false,
        prepareArgs: false,
        createArgs: false,
        attributeHook: false,
        elementHook: false,
        createCaller: true,
        dynamicScope: true,
        updateHook: true,
        createInstance: true
    };

    var TemplateOnlyComponentManager = function (_AbstractManager4) {
        (0, _emberBabel.inherits)(TemplateOnlyComponentManager, _AbstractManager4);

        function TemplateOnlyComponentManager() {
            (0, _emberBabel.classCallCheck)(this, TemplateOnlyComponentManager);

            return (0, _emberBabel.possibleConstructorReturn)(this, _AbstractManager4.apply(this, arguments));
        }

        TemplateOnlyComponentManager.prototype.getLayout = function getLayout(template) {
            var layout = template.asLayout();
            return {
                handle: layout.compile(),
                symbolTable: layout.symbolTable
            };
        };

        TemplateOnlyComponentManager.prototype.getCapabilities = function getCapabilities() {
            return CAPABILITIES$2;
        };

        TemplateOnlyComponentManager.prototype.create = function create() {
            return null;
        };

        TemplateOnlyComponentManager.prototype.getSelf = function getSelf() {
            return _runtime.NULL_REFERENCE;
        };

        TemplateOnlyComponentManager.prototype.getTag = function getTag() {
            return _reference.CONSTANT_TAG;
        };

        TemplateOnlyComponentManager.prototype.getDestructor = function getDestructor() {
            return null;
        };

        return TemplateOnlyComponentManager;
    }(AbstractManager);

    var MANAGER = new TemplateOnlyComponentManager();

    var TemplateOnlyComponentDefinition = function TemplateOnlyComponentDefinition(state) {
        (0, _emberBabel.classCallCheck)(this, TemplateOnlyComponentDefinition);

        this.state = state;
        this.manager = MANAGER;
    };

    var ComponentAssertionReference = function () {
        function ComponentAssertionReference(component, message) {
            (0, _emberBabel.classCallCheck)(this, ComponentAssertionReference);

            this.component = component;
            this.message = message;
            this.tag = component.tag;
        }

        ComponentAssertionReference.prototype.value = function value() {
            var value = this.component.value();
            if (typeof value === 'string') {
                throw new TypeError(this.message);
            }
            return value;
        };

        ComponentAssertionReference.prototype.get = function get(property) {
            return this.component.get(property);
        };

        return ComponentAssertionReference;
    }();

    var componentAssertionHelper = function (_vm, args) {
        if (true /* DEBUG */) {
                return new ComponentAssertionReference(args.positional.at(0), args.positional.at(1).value());
            } else {
            return args.positional.at(0);
        }
    };

    function classHelper(_ref18) {
        var positional = _ref18.positional;

        var path = positional.at(0);
        var args = positional.length;
        var value = path.value();
        if (value === true) {
            if (args > 1) {
                return (0, _string.dasherize)(positional.at(1).value());
            }
            return null;
        }
        if (value === false) {
            if (args > 2) {
                return (0, _string.dasherize)(positional.at(2).value());
            }
            return null;
        }
        return value;
    }
    function classHelper$1(_vm, args) {
        return new InternalHelperReference(classHelper, args.capture());
    }

    function htmlSafe$1(_ref19) {
        var positional = _ref19.positional;

        var path = positional.at(0);
        return new SafeString(path.value());
    }
    function htmlSafeHelper(_vm, args) {
        return new InternalHelperReference(htmlSafe$1, args.capture());
    }

    function inputTypeHelper(_ref20) {
        var positional = _ref20.positional;

        var type = positional.at(0).value();
        if (type === 'checkbox') {
            return '-checkbox';
        }
        return '-text-field';
    }
    function inputTypeHelper$1(_vm, args) {
        return new InternalHelperReference(inputTypeHelper, args.capture());
    }

    function normalizeClass(_ref21) {
        var positional = _ref21.positional;

        var classNameParts = positional.at(0).value().split('.');
        var className = classNameParts[classNameParts.length - 1];
        var value = positional.at(1).value();
        if (value === true) {
            return (0, _string.dasherize)(className);
        } else if (!value && value !== 0) {
            return '';
        } else {
            return String(value);
        }
    }
    function normalizeClassHelper(_vm, args) {
        return new InternalHelperReference(normalizeClass, args.capture());
    }

    /**
    @module ember
    */
    /**
      The `{{action}}` helper provides a way to pass triggers for behavior (usually
      just a function) between components, and into components from controllers.
    
      ### Passing functions with the action helper
    
      There are three contexts an action helper can be used in. The first two
      contexts to discuss are attribute context, and Handlebars value context.
    
      ```handlebars
      {{! An example of attribute context }}
      <div onclick={{action "save"}}></div>
      {{! Examples of Handlebars value context }}
      {{input on-input=(action "save")}}
      {{yield (action "refreshData") andAnotherParam}}
      ```
    
      In these contexts,
      the helper is called a "closure action" helper. Its behavior is simple:
      If passed a function name, read that function off the `actions` property
      of the current context. Once that function is read, or immediately if a function was
      passed, create a closure over that function and any arguments.
      The resulting value of an action helper used this way is simply a function.
    
      For example, in the attribute context:
    
      ```handlebars
      {{! An example of attribute context }}
      <div onclick={{action "save"}}></div>
      ```
    
      The resulting template render logic would be:
    
      ```js
      var div = document.createElement('div');
      var actionFunction = (function(context){
        return function() {
          return context.actions.save.apply(context, arguments);
        };
      })(context);
      div.onclick = actionFunction;
      ```
    
      Thus when the div is clicked, the action on that context is called.
      Because the `actionFunction` is just a function, closure actions can be
      passed between components and still execute in the correct context.
    
      Here is an example action handler on a component:
    
      ```app/components/my-component.js
      import Component from '@ember/component';
    
      export default Component.extend({
        actions: {
          save() {
            this.get('model').save();
          }
        }
      });
      ```
    
      Actions are always looked up on the `actions` property of the current context.
      This avoids collisions in the naming of common actions, such as `destroy`.
      Two options can be passed to the `action` helper when it is used in this way.
    
      * `target=someProperty` will look to `someProperty` instead of the current
        context for the `actions` hash. This can be useful when targeting a
        service for actions.
      * `value="target.value"` will read the path `target.value` off the first
        argument to the action when it is called and rewrite the first argument
        to be that value. This is useful when attaching actions to event listeners.
    
      ### Invoking an action
    
      Closure actions curry both their scope and any arguments. When invoked, any
      additional arguments are added to the already curried list.
      Actions should be invoked using the [sendAction](/api/ember/release/classes/Component/methods/sendAction?anchor=sendAction)
      method. The first argument to `sendAction` is the action to be called, and
      additional arguments are passed to the action function. This has interesting
      properties combined with currying of arguments. For example:
    
      ```app/components/my-component.js
      import Component from '@ember/component';
    
      export default Component.extend({
        actions: {
          // Usage {{input on-input=(action (action 'setName' model) value="target.value")}}
          setName(model, name) {
            model.set('name', name);
          }
        }
      });
      ```
    
      The first argument (`model`) was curried over, and the run-time argument (`event`)
      becomes a second argument. Action calls can be nested this way because each simply
      returns a function. Any function can be passed to the `{{action}}` helper, including
      other actions.
    
      Actions invoked with `sendAction` have the same currying behavior as demonstrated
      with `on-input` above. For example:
    
      ```app/components/my-input.js
      import Component from '@ember/component';
    
      export default Component.extend({
        actions: {
          setName(model, name) {
            model.set('name', name);
          }
        }
      });
      ```
    
      ```handlebars
      {{my-input submit=(action 'setName' model)}}
      ```
    
      ```app/components/my-component.js
      import Component from '@ember/component';
    
      export default Component.extend({
        click() {
          // Note that model is not passed, it was curried in the template
          this.sendAction('submit', 'bob');
        }
      });
      ```
    
      ### Attaching actions to DOM elements
    
      The third context of the `{{action}}` helper can be called "element space".
      For example:
    
      ```handlebars
      {{! An example of element space }}
      <div {{action "save"}}></div>
      ```
    
      Used this way, the `{{action}}` helper provides a useful shortcut for
      registering an HTML element in a template for a single DOM event and
      forwarding that interaction to the template's context (controller or component).
      If the context of a template is a controller, actions used this way will
      bubble to routes when the controller does not implement the specified action.
      Once an action hits a route, it will bubble through the route hierarchy.
    
      ### Event Propagation
    
      `{{action}}` helpers called in element space can control event bubbling. Note
      that the closure style actions cannot.
    
      Events triggered through the action helper will automatically have
      `.preventDefault()` called on them. You do not need to do so in your event
      handlers. If you need to allow event propagation (to handle file inputs for
      example) you can supply the `preventDefault=false` option to the `{{action}}` helper:
    
      ```handlebars
      <div {{action "sayHello" preventDefault=false}}>
        <input type="file" />
        <input type="checkbox" />
      </div>
      ```
    
      To disable bubbling, pass `bubbles=false` to the helper:
    
      ```handlebars
      <button {{action 'edit' post bubbles=false}}>Edit</button>
      ```
    
      To disable bubbling with closure style actions you must create your own
      wrapper helper that makes use of `event.stopPropagation()`:
    
      ```handlebars
      <div onclick={{disable-bubbling (action "sayHello")}}>Hello</div>
      ```
    
      ```app/helpers/disable-bubbling.js
      import { helper } from '@ember/component/helper';
    
      export function disableBubbling([action]) {
        return function(event) {
          event.stopPropagation();
          return action(event);
        };
      }
      export default helper(disableBubbling);
      ```
    
      If you need the default handler to trigger you should either register your
      own event handler, or use event methods on your view class. See
      ["Responding to Browser Events"](/api/ember/release/classes/Component)
      in the documentation for `Component` for more information.
    
      ### Specifying DOM event type
    
      `{{action}}` helpers called in element space can specify an event type.
      By default the `{{action}}` helper registers for DOM `click` events. You can
      supply an `on` option to the helper to specify a different DOM event name:
    
      ```handlebars
      <div {{action "anActionName" on="doubleClick"}}>
        click me
      </div>
      ```
    
      See ["Event Names"](/api/ember/release/classes/Component) for a list of
      acceptable DOM event names.
    
      ### Specifying whitelisted modifier keys
    
      `{{action}}` helpers called in element space can specify modifier keys.
      By default the `{{action}}` helper will ignore click events with pressed modifier
      keys. You can supply an `allowedKeys` option to specify which keys should not be ignored.
    
      ```handlebars
      <div {{action "anActionName" allowedKeys="alt"}}>
        click me
      </div>
      ```
    
      This way the action will fire when clicking with the alt key pressed down.
      Alternatively, supply "any" to the `allowedKeys` option to accept any combination of modifier keys.
    
      ```handlebars
      <div {{action "anActionName" allowedKeys="any"}}>
        click me with any key pressed
      </div>
      ```
    
      ### Specifying a Target
    
      A `target` option can be provided to the helper to change
      which object will receive the method call. This option must be a path
      to an object, accessible in the current context:
    
      ```app/templates/application.hbs
      <div {{action "anActionName" target=someService}}>
        click me
      </div>
      ```
    
      ```app/controllers/application.js
      import Controller from '@ember/controller';
      import { inject as service } from '@ember/service';
    
      export default Controller.extend({
        someService: service()
      });
      ```
    
      @method action
      @for Ember.Templates.helpers
      @public
    */
    function action(_vm, args) {
        var named = args.named,
            positional = args.positional;

        var capturedArgs = positional.capture();
        // The first two argument slots are reserved.
        // pos[0] is the context (or `this`)
        // pos[1] is the action name or function
        // Anything else is an action argument.

        var _capturedArgs$referen = capturedArgs.references,
            context = _capturedArgs$referen[0],
            action = _capturedArgs$referen[1],
            restArgs = _capturedArgs$referen.slice(2);
        // TODO: Is there a better way of doing this?


        var debugKey = action._propertyKey;
        var target = named.has('target') ? named.get('target') : context;
        var processArgs = makeArgsProcessor(named.has('value') && named.get('value'), restArgs);
        var fn = void 0;
        if (typeof action[INVOKE] === 'function') {
            fn = makeClosureAction(action, action, action[INVOKE], processArgs, debugKey);
        } else if ((0, _reference.isConst)(target) && (0, _reference.isConst)(action)) {
            fn = makeClosureAction(context.value(), target.value(), action.value(), processArgs, debugKey);
        } else {
            fn = makeDynamicClosureAction(context.value(), target, action, processArgs, debugKey);
        }
        fn[ACTION] = true;
        return new UnboundReference(fn);
    }
    function NOOP$1(args) {
        return args;
    }
    function makeArgsProcessor(valuePathRef, actionArgsRef) {
        var mergeArgs = void 0;
        if (actionArgsRef.length > 0) {
            mergeArgs = function (args) {
                return actionArgsRef.map(function (ref) {
                    return ref.value();
                }).concat(args);
            };
        }
        var readValue = void 0;
        if (valuePathRef) {
            readValue = function (args) {
                var valuePath = valuePathRef.value();
                if (valuePath && args.length > 0) {
                    args[0] = (0, _metal.get)(args[0], valuePath);
                }
                return args;
            };
        }
        if (mergeArgs && readValue) {
            return function (args) {
                return readValue(mergeArgs(args));
            };
        } else {
            return mergeArgs || readValue || NOOP$1;
        }
    }
    function makeDynamicClosureAction(context, targetRef, actionRef, processArgs, debugKey) {
        // We don't allow undefined/null values, so this creates a throw-away action to trigger the assertions
        if (true /* DEBUG */) {
                makeClosureAction(context, targetRef.value(), actionRef.value(), processArgs, debugKey);
            }
        return function () {
            return makeClosureAction(context, targetRef.value(), actionRef.value(), processArgs, debugKey).apply(undefined, arguments);
        };
    }
    function makeClosureAction(context, target, action, processArgs, debugKey) {
        var self = void 0;
        var fn = void 0;
        true && !(action !== undefined && action !== null) && (0, _debug.assert)('Action passed is null or undefined in (action) from ' + target + '.', action !== undefined && action !== null);

        if (typeof action[INVOKE] === 'function') {
            self = action;
            fn = action[INVOKE];
        } else {
            var typeofAction = typeof action;
            if (typeofAction === 'string') {
                self = target;
                fn = target.actions && target.actions[action];
                true && !fn && (0, _debug.assert)('An action named \'' + action + '\' was not found in ' + target, fn);
            } else if (typeofAction === 'function') {
                self = context;
                fn = action;
            } else {
                // tslint:disable-next-line:max-line-length
                true && !false && (0, _debug.assert)('An action could not be made for `' + (debugKey || action) + '` in ' + target + '. Please confirm that you are using either a quoted action name (i.e. `(action \'' + (debugKey || 'myAction') + '\')`) or a function available in ' + target + '.', false);
            }
        }
        return function () {
            for (var _len = arguments.length, args = Array(_len), _key2 = 0; _key2 < _len; _key2++) {
                args[_key2] = arguments[_key2];
            }

            var payload = { target: self, args: args, label: '@glimmer/closure-action' };
            return (0, _instrumentation.flaggedInstrument)('interaction.ember-action', payload, function () {
                return _runloop.join.apply(undefined, [self, fn].concat(processArgs(args)));
            });
        };
    }

    /**
    @module ember
    */
    /**
       Use the `{{array}}` helper to create an array to pass as an option to your
       components.
    
       ```handlebars
       {{my-component people=(array
         'Tom Dade'
         'Yehuda Katz'
         this.myOtherPerson)
       }}
       ```
    
       Would result in an object such as:
    
       ```js
       ['Tom Date', 'Yehuda Katz', this.get('myOtherPerson')]
       ```
    
       Where the 3rd item in the array is bound to updates of the `myOtherPerson` property.
    
       @method array
       @for Ember.Templates.helpers
       @param {Array} options
       @return {Array} Array
       @category array-helper
       @since 3.7.0
       @public
     */
    function array(_vm, args) {
        return args.positional.capture();
    }

    var isEmpty = function (value) {
        return value === null || value === undefined || typeof value.toString !== 'function';
    };
    var normalizeTextValue = function (value) {
        if (isEmpty(value)) {
            return '';
        }
        return String(value);
    };
    /**
    @module ember
    */
    /**
      Concatenates the given arguments into a string.
    
      Example:
    
      ```handlebars
      {{some-component name=(concat firstName " " lastName)}}
    
      {{! would pass name="<first name value> <last name value>" to the component}}
      ```
    
      @public
      @method concat
      @for Ember.Templates.helpers
      @since 1.13.0
    */
    function concat(_ref22) {
        var positional = _ref22.positional;

        return positional.value().map(normalizeTextValue).join('');
    }
    function concat$1(_vm, args) {
        return new InternalHelperReference(concat, args.capture());
    }

    /**
    @module ember
    */
    /**
      Dynamically look up a property on an object. The second argument to `{{get}}`
      should have a string value, although it can be bound.
    
      For example, these two usages are equivalent:
    
      ```handlebars
      {{person.height}}
      {{get person "height"}}
      ```
    
      If there were several facts about a person, the `{{get}}` helper can dynamically
      pick one:
    
      ```handlebars
      {{get person factName}}
      ```
    
      For a more complex example, this template would allow the user to switch
      between showing the user's height and weight with a click:
    
      ```handlebars
      {{get person factName}}
      <button {{action (action (mut factName)) "height"}}>Show height</button>
      <button {{action (action (mut factName)) "weight"}}>Show weight</button>
      ```
    
      The `{{get}}` helper can also respect mutable values itself. For example:
    
      ```handlebars
      {{input value=(mut (get person factName)) type="text"}}
      <button {{action (action (mut factName)) "height"}}>Show height</button>
      <button {{action (action (mut factName)) "weight"}}>Show weight</button>
      ```
    
      Would allow the user to swap what fact is being displayed, and also edit
      that fact via a two-way mutable binding.
    
      @public
      @method get
      @for Ember.Templates.helpers
      @since 2.1.0
     */
    function get$1(_vm, args) {
        return GetHelperReference.create(args.positional.at(0), args.positional.at(1));
    }
    function referenceFromPath(source, path) {
        var innerReference = void 0;
        if (path === undefined || path === null || path === '') {
            innerReference = _runtime.NULL_REFERENCE;
        } else if (typeof path === 'string' && path.indexOf('.') > -1) {
            innerReference = referenceFromParts(source, path.split('.'));
        } else {
            innerReference = source.get(path);
        }
        return innerReference;
    }

    var GetHelperReference = function (_CachedReference$6) {
        (0, _emberBabel.inherits)(GetHelperReference, _CachedReference$6);

        GetHelperReference.create = function create(sourceReference, pathReference) {
            if ((0, _reference.isConst)(pathReference)) {
                var path = pathReference.value();
                return referenceFromPath(sourceReference, path);
            } else {
                return new GetHelperReference(sourceReference, pathReference);
            }
        };

        function GetHelperReference(sourceReference, pathReference) {
            (0, _emberBabel.classCallCheck)(this, GetHelperReference);

            var _this35 = (0, _emberBabel.possibleConstructorReturn)(this, _CachedReference$6.call(this));

            _this35.sourceReference = sourceReference;
            _this35.pathReference = pathReference;
            _this35.lastPath = null;
            _this35.innerReference = _runtime.NULL_REFERENCE;
            var innerTag = _this35.innerTag = _reference.UpdatableTag.create(_reference.CONSTANT_TAG);
            _this35.tag = (0, _reference.combine)([sourceReference.tag, pathReference.tag, innerTag]);
            return _this35;
        }

        GetHelperReference.prototype.compute = function compute() {
            var lastPath = this.lastPath,
                innerReference = this.innerReference,
                innerTag = this.innerTag;

            var path = this.pathReference.value();
            if (path !== lastPath) {
                innerReference = referenceFromPath(this.sourceReference, path);
                innerTag.inner.update(innerReference.tag);
                this.innerReference = innerReference;
                this.lastPath = path;
            }
            return innerReference.value();
        };

        GetHelperReference.prototype[UPDATE] = function (value) {
            (0, _metal.set)(this.sourceReference.value(), this.pathReference.value(), value);
        };

        return GetHelperReference;
    }(CachedReference$1);

    /**
    @module ember
    */
    /**
       Use the `{{hash}}` helper to create a hash to pass as an option to your
       components. This is specially useful for contextual components where you can
       just yield a hash:
    
       ```handlebars
       {{yield (hash
          name='Sarah'
          title=office
       )}}
       ```
    
       Would result in an object such as:
    
       ```js
       { name: 'Sarah', title: this.get('office') }
       ```
    
       Where the `title` is bound to updates of the `office` property.
    
       Note that the hash is an empty object with no prototype chain, therefore
       common methods like `toString` are not available in the resulting hash.
       If you need to use such a method, you can use the `call` or `apply`
       approach:
    
       ```js
       function toString(obj) {
         return Object.prototype.toString.apply(obj);
       }
       ```
    
       @method hash
       @for Ember.Templates.helpers
       @param {Object} options
       @return {Object} Hash
       @since 2.3.0
       @public
     */

    function hash(_vm, args) {
        return args.named.capture();
    }

    /**
    @module ember
    */

    var ConditionalHelperReference = function (_CachedReference$7) {
        (0, _emberBabel.inherits)(ConditionalHelperReference, _CachedReference$7);

        ConditionalHelperReference.create = function create(_condRef, truthyRef, falsyRef) {
            var condRef = ConditionalReference$1.create(_condRef);
            if ((0, _reference.isConst)(condRef)) {
                return condRef.value() ? truthyRef : falsyRef;
            } else {
                return new ConditionalHelperReference(condRef, truthyRef, falsyRef);
            }
        };

        function ConditionalHelperReference(cond, truthy, falsy) {
            (0, _emberBabel.classCallCheck)(this, ConditionalHelperReference);

            var _this36 = (0, _emberBabel.possibleConstructorReturn)(this, _CachedReference$7.call(this));

            _this36.branchTag = _reference.UpdatableTag.create(_reference.CONSTANT_TAG);
            _this36.tag = (0, _reference.combine)([cond.tag, _this36.branchTag]);
            _this36.cond = cond;
            _this36.truthy = truthy;
            _this36.falsy = falsy;
            return _this36;
        }

        ConditionalHelperReference.prototype.compute = function compute() {
            var branch = this.cond.value() ? this.truthy : this.falsy;
            this.branchTag.inner.update(branch.tag);
            return branch.value();
        };

        return ConditionalHelperReference;
    }(CachedReference$1);
    /**
      The `if` helper allows you to conditionally render one of two branches,
      depending on the "truthiness" of a property.
      For example the following values are all falsey: `false`, `undefined`, `null`, `""`, `0`, `NaN` or an empty array.
    
      This helper has two forms, block and inline.
    
      ## Block form
    
      You can use the block form of `if` to conditionally render a section of the template.
    
      To use it, pass the conditional value to the `if` helper,
      using the block form to wrap the section of template you want to conditionally render.
      Like so:
    
      ```handlebars
      {{! will not render if foo is falsey}}
      {{#if foo}}
        Welcome to the {{foo.bar}}
      {{/if}}
      ```
    
      You can also specify a template to show if the property is falsey by using
      the `else` helper.
    
      ```handlebars
      {{! is it raining outside?}}
      {{#if isRaining}}
        Yes, grab an umbrella!
      {{else}}
        No, it's lovely outside!
      {{/if}}
      ```
    
      You are also able to combine `else` and `if` helpers to create more complex
      conditional logic.
    
      ```handlebars
      {{#if isMorning}}
        Good morning
      {{else if isAfternoon}}
        Good afternoon
      {{else}}
        Good night
      {{/if}}
      ```
    
      ## Inline form
    
      The inline `if` helper conditionally renders a single property or string.
    
      In this form, the `if` helper receives three arguments, the conditional value,
      the value to render when truthy, and the value to render when falsey.
    
      For example, if `useLongGreeting` is truthy, the following:
    
      ```handlebars
      {{if useLongGreeting "Hello" "Hi"}} Alex
      ```
    
      Will render:
    
      ```html
      Hello Alex
      ```
    
      ### Nested `if`
    
      You can use the `if` helper inside another helper as a nested helper:
    
      ```handlebars
      {{some-component height=(if isBig "100" "10")}}
      ```
    
      One detail to keep in mind is that both branches of the `if` helper will be evaluated,
      so if you have `{{if condition "foo" (expensive-operation "bar")`,
      `expensive-operation` will always calculate.
    
      @method if
      @for Ember.Templates.helpers
      @public
    */

    function inlineIf(_vm, _ref23) {
        var positional = _ref23.positional;

        true && !(positional.length === 3 || positional.length === 2) && (0, _debug.assert)('The inline form of the `if` helper expects two or three arguments, e.g. ' + '`{{if trialExpired "Expired" expiryDate}}`.', positional.length === 3 || positional.length === 2);

        return ConditionalHelperReference.create(positional.at(0), positional.at(1), positional.at(2));
    }
    /**
      The inline `unless` helper conditionally renders a single property or string.
      This helper acts like a ternary operator. If the first property is falsy,
      the second argument will be displayed, otherwise, the third argument will be
      displayed
    
      ```handlebars
      {{unless useLongGreeting "Hi" "Hello"}} Ben
      ```
    
      You can use the `unless` helper inside another helper as a subexpression.
    
      ```handlebars
      {{some-component height=(unless isBig "10" "100")}}
      ```
    
      @method unless
      @for Ember.Templates.helpers
      @public
    */
    function inlineUnless(_vm, _ref24) {
        var positional = _ref24.positional;

        true && !(positional.length === 3 || positional.length === 2) && (0, _debug.assert)('The inline form of the `unless` helper expects two or three arguments, e.g. ' + '`{{unless isFirstLogin "Welcome back!"}}`.', positional.length === 3 || positional.length === 2);

        return ConditionalHelperReference.create(positional.at(0), positional.at(2), positional.at(1));
    }

    /**
    @module ember
    */
    /**
      `log` allows you to output the value of variables in the current rendering
      context. `log` also accepts primitive types such as strings or numbers.
    
      ```handlebars
      {{log "myVariable:" myVariable }}
      ```
    
      @method log
      @for Ember.Templates.helpers
      @param {Array} params
      @public
    */
    function log(_ref25) {
        var _console;

        var positional = _ref25.positional;

        /* eslint-disable no-console */
        (_console = console).log.apply(_console, positional.value());
        /* eslint-enable no-console */
    }
    function log$1(_vm, args) {
        return new InternalHelperReference(log, args.capture());
    }

    /**
    @module ember
    */
    /**
      The `mut` helper lets you __clearly specify__ that a child `Component` can update the
      (mutable) value passed to it, which will __change the value of the parent component__.
    
      To specify that a parameter is mutable, when invoking the child `Component`:
    
      ```handlebars
      {{my-child childClickCount=(mut totalClicks)}}
      ```
    
      The child `Component` can then modify the parent's value just by modifying its own
      property:
    
      ```javascript
      // my-child.js
      export default Component.extend({
        click() {
          this.incrementProperty('childClickCount');
        }
      });
      ```
    
      Note that for curly components (`{{my-component}}`) the bindings are already mutable,
      making the `mut` unnecessary.
    
      Additionally, the `mut` helper can be combined with the `action` helper to
      mutate a value. For example:
    
      ```handlebars
      {{my-child childClickCount=totalClicks click-count-change=(action (mut totalClicks))}}
      ```
    
      The child `Component` would invoke the action with the new click value:
    
      ```javascript
      // my-child.js
      export default Component.extend({
        click() {
          this.get('click-count-change')(this.get('childClickCount') + 1);
        }
      });
      ```
    
      The `mut` helper changes the `totalClicks` value to what was provided as the action argument.
    
      The `mut` helper, when used with `action`, will return a function that
      sets the value passed to `mut` to its first argument. This works like any other
      closure action and interacts with the other features `action` provides.
      As an example, we can create a button that increments a value passing the value
      directly to the `action`:
    
      ```handlebars
      {{! inc helper is not provided by Ember }}
      <button onclick={{action (mut count) (inc count)}}>
        Increment count
      </button>
      ```
    
      You can also use the `value` option:
    
      ```handlebars
      <input value={{name}} oninput={{action (mut name) value="target.value"}}>
      ```
    
      @method mut
      @param {Object} [attr] the "two-way" attribute that can be modified.
      @for Ember.Templates.helpers
      @public
    */
    var MUT_REFERENCE = (0, _utils.symbol)('MUT');
    var SOURCE = (0, _utils.symbol)('SOURCE');
    function isMut(ref) {
        return ref && ref[MUT_REFERENCE];
    }
    function unMut(ref) {
        return ref[SOURCE] || ref;
    }
    function mut(_vm, args) {
        var rawRef = args.positional.at(0);
        if (isMut(rawRef)) {
            return rawRef;
        }
        // TODO: Improve this error message. This covers at least two distinct
        // cases:
        //
        // 1. (mut "not a path") – passing a literal, result from a helper
        //    invocation, etc
        //
        // 2. (mut receivedValue) – passing a value received from the caller
        //    that was originally derived from a literal, result from a helper
        //    invocation, etc
        //
        // This message is alright for the first case, but could be quite
        // confusing for the second case.
        true && !rawRef[UPDATE] && (0, _debug.assert)('You can only pass a path to mut', rawRef[UPDATE]);

        var wrappedRef = Object.create(rawRef);
        wrappedRef[SOURCE] = rawRef;
        wrappedRef[INVOKE] = rawRef[UPDATE];
        wrappedRef[MUT_REFERENCE] = true;
        return wrappedRef;
    }

    /**
    @module ember
    */
    /**
      This is a helper to be used in conjunction with the link-to helper.
      It will supply url query parameters to the target route.
    
      Example
    
      ```handlebars
      {{#link-to 'posts' (query-params direction="asc")}}Sort{{/link-to}}
      ```
    
      @method query-params
      @for Ember.Templates.helpers
      @param {Object} hash takes a hash of query parameters
      @return {Object} A `QueryParams` object for `{{link-to}}`
      @public
    */
    function queryParams(_ref26) {
        var positional = _ref26.positional,
            named = _ref26.named;

        // tslint:disable-next-line:max-line-length
        true && !(positional.value().length === 0) && (0, _debug.assert)("The `query-params` helper only accepts hash parameters, e.g. (query-params queryParamPropertyName='foo') as opposed to just (query-params 'foo')", positional.value().length === 0);

        return new _routing.QueryParams((0, _polyfills.assign)({}, named.value()));
    }
    function queryParams$1(_vm, args) {
        return new InternalHelperReference(queryParams, args.capture());
    }

    /**
      The `readonly` helper let's you specify that a binding is one-way only,
      instead of two-way.
      When you pass a `readonly` binding from an outer context (e.g. parent component),
      to to an inner context (e.g. child component), you are saying that changing that
      property in the inner context does not change the value in the outer context.
    
      To specify that a binding is read-only, when invoking the child `Component`:
    
      ```app/components/my-parent.js
      export default Component.extend({
        totalClicks: 3
      });
      ```
    
      ```app/templates/components/my-parent.hbs
      {{log totalClicks}} // -> 3
      {{my-child childClickCount=(readonly totalClicks)}}
      ```
    
      Now, when you update `childClickCount`:
    
      ```app/components/my-child.js
      export default Component.extend({
        click() {
          this.incrementProperty('childClickCount');
        }
      });
      ```
    
      The value updates in the child component, but not the parent component:
    
      ```app/templates/components/my-child.hbs
      {{log childClickCount}} //-> 4
      ```
    
      ```app/templates/components/my-parent.hbs
      {{log totalClicks}} //-> 3
      {{my-child childClickCount=(readonly totalClicks)}}
      ```
    
      ### Objects and Arrays
    
      When passing a property that is a complex object (e.g. object, array) instead of a primitive object (e.g. number, string),
      only the reference to the object is protected using the readonly helper.
      This means that you can change properties of the object both on the parent component, as well as the child component.
      The `readonly` binding behaves similar to the `const` keyword in JavaScript.
    
      Let's look at an example:
    
      First let's set up the parent component:
    
      ```app/components/my-parent.js
      import Component from '@ember/component';
    
      export default Component.extend({
        clicks: null,
    
        init() {
          this._super(...arguments);
          this.set('clicks', { total: 3 });
        }
      });
      ```
    
      ```app/templates/components/my-parent.hbs
      {{log clicks.total}} //-> 3
      {{my-child childClicks=(readonly clicks)}}
      ```
    
      Now, if you update the `total` property of `childClicks`:
    
      ```app/components/my-child.js
      import Component from '@ember/component';
    
      export default Component.extend({
        click() {
          this.get('clicks').incrementProperty('total');
        }
      });
      ```
    
      You will see the following happen:
    
      ```app/templates/components/my-parent.hbs
      {{log clicks.total}} //-> 4
      {{my-child childClicks=(readonly clicks)}}
      ```
    
      ```app/templates/components/my-child.hbs
      {{log childClicks.total}} //-> 4
      ```
    
      @method readonly
      @param {Object} [attr] the read-only attribute.
      @for Ember.Templates.helpers
      @private
    */
    function readonly(_vm, args) {
        var ref = unMut(args.positional.at(0));
        return new ReadonlyReference(ref);
    }

    /**
    @module ember
    */
    /**
      The `{{unbound}}` helper disconnects the one-way binding of a property,
      essentially freezing its value at the moment of rendering. For example,
      in this example the display of the variable `name` will not change even
      if it is set with a new value:
    
      ```handlebars
      {{unbound name}}
      ```
    
      Like any helper, the `unbound` helper can accept a nested helper expression.
      This allows for custom helpers to be rendered unbound:
    
      ```handlebars
      {{unbound (some-custom-helper)}}
      {{unbound (capitalize name)}}
      {{! You can use any helper, including unbound, in a nested expression }}
      {{capitalize (unbound name)}}
      ```
    
      The `unbound` helper only accepts a single argument, and it return an
      unbound value.
    
      @method unbound
      @for Ember.Templates.helpers
      @public
    */
    function unbound(_vm, args) {
        true && !(args.positional.length === 1 && args.named.length === 0) && (0, _debug.assert)('unbound helper cannot be called with multiple params or hash params', args.positional.length === 1 && args.named.length === 0);

        return UnboundReference.create(args.positional.at(0).value());
    }

    var MODIFIERS = ['alt', 'shift', 'meta', 'ctrl'];
    var POINTER_EVENT_TYPE_REGEX = /^click|mouse|touch/;
    function isAllowedEvent(event, allowedKeys) {
        if (allowedKeys === null || allowedKeys === undefined) {
            if (POINTER_EVENT_TYPE_REGEX.test(event.type)) {
                return (0, _views.isSimpleClick)(event);
            } else {
                allowedKeys = '';
            }
        }
        if (allowedKeys.indexOf('any') >= 0) {
            return true;
        }
        for (var i = 0; i < MODIFIERS.length; i++) {
            if (event[MODIFIERS[i] + 'Key'] && allowedKeys.indexOf(MODIFIERS[i]) === -1) {
                return false;
            }
        }
        return true;
    }
    var ActionHelper = {
        // registeredActions is re-exported for compatibility with older plugins
        // that were using this undocumented API.
        registeredActions: _views.ActionManager.registeredActions,
        registerAction: function (actionState) {
            var actionId = actionState.actionId;

            _views.ActionManager.registeredActions[actionId] = actionState;
            return actionId;
        },
        unregisterAction: function (actionState) {
            var actionId = actionState.actionId;

            delete _views.ActionManager.registeredActions[actionId];
        }
    };

    var ActionState = function () {
        function ActionState(element, actionId, actionName, actionArgs, namedArgs, positionalArgs, implicitTarget, dom, tag) {
            (0, _emberBabel.classCallCheck)(this, ActionState);

            this.element = element;
            this.actionId = actionId;
            this.actionName = actionName;
            this.actionArgs = actionArgs;
            this.namedArgs = namedArgs;
            this.positional = positionalArgs;
            this.implicitTarget = implicitTarget;
            this.dom = dom;
            this.eventName = this.getEventName();
            this.tag = tag;
        }

        ActionState.prototype.getEventName = function getEventName() {
            return this.namedArgs.get('on').value() || 'click';
        };

        ActionState.prototype.getActionArgs = function getActionArgs() {
            var result = new Array(this.actionArgs.length);
            for (var i = 0; i < this.actionArgs.length; i++) {
                result[i] = this.actionArgs[i].value();
            }
            return result;
        };

        ActionState.prototype.getTarget = function getTarget() {
            var implicitTarget = this.implicitTarget,
                namedArgs = this.namedArgs;

            var target = void 0;
            if (namedArgs.has('target')) {
                target = namedArgs.get('target').value();
            } else {
                target = implicitTarget.value();
            }
            return target;
        };

        ActionState.prototype.handler = function handler(event) {
            var _this37 = this;

            var actionName = this.actionName,
                namedArgs = this.namedArgs;

            var bubbles = namedArgs.get('bubbles');
            var preventDefault = namedArgs.get('preventDefault');
            var allowedKeys = namedArgs.get('allowedKeys');
            var target = this.getTarget();
            var shouldBubble = bubbles.value() !== false;
            if (!isAllowedEvent(event, allowedKeys.value())) {
                return true;
            }
            if (preventDefault.value() !== false) {
                event.preventDefault();
            }
            if (!shouldBubble) {
                event.stopPropagation();
            }
            (0, _runloop.join)(function () {
                var args = _this37.getActionArgs();
                var payload = {
                    args: args,
                    target: target,
                    name: null
                };
                if (typeof actionName[INVOKE] === 'function') {
                    (0, _instrumentation.flaggedInstrument)('interaction.ember-action', payload, function () {
                        actionName[INVOKE].apply(actionName, args);
                    });
                    return;
                }
                if (typeof actionName === 'function') {
                    (0, _instrumentation.flaggedInstrument)('interaction.ember-action', payload, function () {
                        actionName.apply(target, args);
                    });
                    return;
                }
                payload.name = actionName;
                if (target.send) {
                    (0, _instrumentation.flaggedInstrument)('interaction.ember-action', payload, function () {
                        target.send.apply(target, [actionName].concat(args));
                    });
                } else {
                    true && !(typeof target[actionName] === 'function') && (0, _debug.assert)('The action \'' + actionName + '\' did not exist on ' + target, typeof target[actionName] === 'function');

                    (0, _instrumentation.flaggedInstrument)('interaction.ember-action', payload, function () {
                        target[actionName].apply(target, args);
                    });
                }
            });
            return shouldBubble;
        };

        ActionState.prototype.destroy = function destroy() {
            ActionHelper.unregisterAction(this);
        };

        return ActionState;
    }();
    // implements ModifierManager<Action>


    var ActionModifierManager = function () {
        function ActionModifierManager() {
            (0, _emberBabel.classCallCheck)(this, ActionModifierManager);
        }

        ActionModifierManager.prototype.create = function create(element, _state, args, _dynamicScope, dom) {
            var _args$capture = args.capture(),
                named = _args$capture.named,
                positional = _args$capture.positional,
                tag = _args$capture.tag;

            var implicitTarget = void 0;
            var actionName = void 0;
            var actionNameRef = void 0;
            if (positional.length > 1) {
                implicitTarget = positional.at(0);
                actionNameRef = positional.at(1);
                if (actionNameRef[INVOKE]) {
                    actionName = actionNameRef;
                } else {
                    var actionLabel = actionNameRef._propertyKey;
                    actionName = actionNameRef.value();
                    true && !(typeof actionName === 'string' || typeof actionName === 'function') && (0, _debug.assert)('You specified a quoteless path, `' + actionLabel + '`, to the ' + '{{action}} helper which did not resolve to an action name (a ' + 'string). Perhaps you meant to use a quoted actionName? (e.g. ' + '{{action "' + actionLabel + '"}}).', typeof actionName === 'string' || typeof actionName === 'function');
                }
            }
            var actionArgs = [];
            // The first two arguments are (1) `this` and (2) the action name.
            // Everything else is a param.
            for (var i = 2; i < positional.length; i++) {
                actionArgs.push(positional.at(i));
            }
            var actionId = (0, _utils.uuid)();
            return new ActionState(element, actionId, actionName, actionArgs, named, positional, implicitTarget, dom, tag);
        };

        ActionModifierManager.prototype.install = function install(actionState) {
            var dom = actionState.dom,
                element = actionState.element,
                actionId = actionState.actionId;

            ActionHelper.registerAction(actionState);
            dom.setAttribute(element, 'data-ember-action', '');
            dom.setAttribute(element, 'data-ember-action-' + actionId, actionId);
        };

        ActionModifierManager.prototype.update = function update(actionState) {
            var positional = actionState.positional;

            var actionNameRef = positional.at(1);
            if (!actionNameRef[INVOKE]) {
                actionState.actionName = actionNameRef.value();
            }
            actionState.eventName = actionState.getEventName();
        };

        ActionModifierManager.prototype.getTag = function getTag(actionState) {
            return actionState.tag;
        };

        ActionModifierManager.prototype.getDestructor = function getDestructor(modifier) {
            return modifier;
        };

        return ActionModifierManager;
    }();

    // Currently there are no capabilities for modifiers


    function capabilities$1(_managerAPI, _optionalFeatures) {
        return {};
    }

    var CustomModifierDefinition = function CustomModifierDefinition(name, ModifierClass, delegate) {
        (0, _emberBabel.classCallCheck)(this, CustomModifierDefinition);

        this.name = name;
        this.ModifierClass = ModifierClass;
        this.delegate = delegate;
        this.manager = CUSTOM_MODIFIER_MANAGER;
        this.state = {
            ModifierClass: ModifierClass,
            name: name,
            delegate: delegate
        };
    };

    var CustomModifierState = function () {
        function CustomModifierState(element, delegate, modifier, args) {
            (0, _emberBabel.classCallCheck)(this, CustomModifierState);

            this.element = element;
            this.delegate = delegate;
            this.modifier = modifier;
            this.args = args;
        }

        CustomModifierState.prototype.destroy = function destroy() {
            var delegate = this.delegate,
                modifier = this.modifier,
                args = this.args;

            var modifierArgs = valueForCapturedArgs(args);
            delegate.destroyModifier(modifier, modifierArgs);
        };

        return CustomModifierState;
    }();
    /**
      The CustomModifierManager allows addons to provide custom modifier
      implementations that integrate seamlessly into Ember. This is accomplished
      through a delegate, registered with the custom modifier manager, which
      implements a set of hooks that determine modifier behavior.
      To create a custom modifier manager, instantiate a new CustomModifierManager
      class and pass the delegate as the first argument:
      ```js
      let manager = new CustomModifierManager({
        // ...delegate implementation...
      });
      ```
      ## Delegate Hooks
      Throughout the lifecycle of a modifier, the modifier manager will invoke
      delegate hooks that are responsible for surfacing those lifecycle changes to
      the end developer.
      * `createModifier()` - invoked when a new instance of a modifier should be created
      * `installModifier()` - invoked when the modifier is installed on the element
      * `updateModifier()` - invoked when the arguments passed to a modifier change
      * `destroyModifier()` - invoked when the modifier is about to be destroyed
    */

    var CustomModifierManager = function () {
        function CustomModifierManager() {
            (0, _emberBabel.classCallCheck)(this, CustomModifierManager);
        }

        CustomModifierManager.prototype.create = function create(element, definition, args) {
            var capturedArgs = args.capture();
            var modifierArgs = valueForCapturedArgs(capturedArgs);
            var instance = definition.delegate.createModifier(definition.ModifierClass, modifierArgs);
            return new CustomModifierState(element, definition.delegate, instance, capturedArgs);
        };

        CustomModifierManager.prototype.getTag = function getTag(_ref27) {
            var args = _ref27.args;

            return args.tag;
        };

        CustomModifierManager.prototype.install = function install(state) {
            var element = state.element,
                args = state.args,
                delegate = state.delegate,
                modifier = state.modifier;

            var modifierArgs = valueForCapturedArgs(args);
            delegate.installModifier(modifier, element, modifierArgs);
        };

        CustomModifierManager.prototype.update = function update(state) {
            var args = state.args,
                delegate = state.delegate,
                modifier = state.modifier;

            var modifierArgs = valueForCapturedArgs(args);
            delegate.updateModifier(modifier, modifierArgs);
        };

        CustomModifierManager.prototype.getDestructor = function getDestructor(state) {
            return state;
        };

        return CustomModifierManager;
    }();

    var CUSTOM_MODIFIER_MANAGER = new CustomModifierManager();

    function hashToArgs(hash) {
        if (hash === null) return null;
        var names = hash[0].map(function (key) {
            return '@' + key;
        });
        return [names, hash[1]];
    }

    function textAreaMacro(_name, params, hash, builder) {
        var definition = builder.compiler['resolver'].lookupComponentDefinition('-text-area', builder.referrer);
        wrapComponentClassAttribute(hash);
        builder.component.static(definition, [params || [], hashToArgs(hash), null, null]);
        return true;
    }

    function buildSyntax(type, params, hash, builder) {
        var definition = builder.compiler['resolver'].lookupComponentDefinition(type, builder.referrer);
        builder.component.static(definition, [params, hashToArgs(hash), null, null]);
        return true;
    }
    /**
      The `{{input}}` helper lets you create an HTML `<input />` component.
      It causes an `TextField` component to be rendered.  For more info,
      see the [TextField](/api/ember/release/classes/TextField) docs and
      the [templates guide](https://guides.emberjs.com/release/templates/input-helpers/).
    
      ```handlebars
      {{input value="987"}}
      ```
    
      renders as:
    
      ```HTML
      <input type="text" value="987" />
      ```
    
      ### Text field
    
      If no `type` option is specified, a default of type 'text' is used.
      Many of the standard HTML attributes may be passed to this helper.
      <table>
        <tr><td>`readonly`</td><td>`required`</td><td>`autofocus`</td></tr>
        <tr><td>`value`</td><td>`placeholder`</td><td>`disabled`</td></tr>
        <tr><td>`size`</td><td>`tabindex`</td><td>`maxlength`</td></tr>
        <tr><td>`name`</td><td>`min`</td><td>`max`</td></tr>
        <tr><td>`pattern`</td><td>`accept`</td><td>`autocomplete`</td></tr>
        <tr><td>`autosave`</td><td>`formaction`</td><td>`formenctype`</td></tr>
        <tr><td>`formmethod`</td><td>`formnovalidate`</td><td>`formtarget`</td></tr>
        <tr><td>`height`</td><td>`inputmode`</td><td>`multiple`</td></tr>
        <tr><td>`step`</td><td>`width`</td><td>`form`</td></tr>
        <tr><td>`selectionDirection`</td><td>`spellcheck`</td><td>&nbsp;</td></tr>
      </table>
      When set to a quoted string, these values will be directly applied to the HTML
      element. When left unquoted, these values will be bound to a property on the
      template's current rendering context (most typically a controller instance).
      A very common use of this helper is to bind the `value` of an input to an Object's attribute:
    
      ```handlebars
      Search:
      {{input value=searchWord}}
      ```
    
      In this example, the initial value in the `<input />` will be set to the value of `searchWord`.
      If the user changes the text, the value of `searchWord` will also be updated.
    
      ### Actions
    
      The helper can send multiple actions based on user events.
      The action property defines the action which is sent when
      the user presses the return key.
    
      ```handlebars
      {{input action="submit"}}
      ```
    
      The helper allows some user events to send actions.
    
      * `enter`
      * `insert-newline`
      * `escape-press`
      * `focus-in`
      * `focus-out`
      * `key-press`
      * `key-up`
    
      For example, if you desire an action to be sent when the input is blurred,
      you only need to setup the action name to the event name property.
    
      ```handlebars
      {{input focus-out="alertMessage"}}
      ```
      See more about [Text Support Actions](/api/ember/release/classes/TextField)
    
      ### Extending `TextField`
    
      Internally, `{{input type="text"}}` creates an instance of `TextField`, passing
      arguments from the helper to `TextField`'s `create` method. You can extend the
      capabilities of text inputs in your applications by reopening this class. For example,
      if you are building a Bootstrap project where `data-*` attributes are used, you
      can add one to the `TextField`'s `attributeBindings` property:
    
      ```javascript
      import TextField from '@ember/component/text-field';
      TextField.reopen({
        attributeBindings: ['data-error']
      });
      ```
    
      Keep in mind when writing `TextField` subclasses that `TextField`
      itself extends `Component`. Expect isolated component semantics, not
      legacy 1.x view semantics (like `controller` being present).
      See more about [Ember components](/api/ember/release/classes/Component)
    
      ### Checkbox
    
      Checkboxes are special forms of the `{{input}}` helper.  To create a `<checkbox />`:
    
      ```handlebars
      Emberize Everything:
      {{input type="checkbox" name="isEmberized" checked=isEmberized}}
      ```
    
      This will bind checked state of this checkbox to the value of `isEmberized`  -- if either one changes,
      it will be reflected in the other.
    
      The following HTML attributes can be set via the helper:
    
      * `checked`
      * `disabled`
      * `tabindex`
      * `indeterminate`
      * `name`
      * `autofocus`
      * `form`
    
      ### Extending `Checkbox`
    
      Internally, `{{input type="checkbox"}}` creates an instance of `Checkbox`, passing
      arguments from the helper to `Checkbox`'s `create` method. You can extend the
      capablilties of checkbox inputs in your applications by reopening this class. For example,
      if you wanted to add a css class to all checkboxes in your application:
    
      ```javascript
      import Checkbox from '@ember/component/checkbox';
    
      Checkbox.reopen({
        classNames: ['my-app-checkbox']
      });
      ```
    
      @method input
      @for Ember.Templates.helpers
      @param {Hash} options
      @public
    */
    function inputMacro(_name, params, hash, builder) {
        if (params === null) {
            params = [];
        }
        if (hash !== null) {
            var keys = hash[0];
            var values = hash[1];
            var typeIndex = keys.indexOf('type');
            if (typeIndex > -1) {
                var typeArg = values[typeIndex];
                if (Array.isArray(typeArg)) {
                    // there is an AST plugin that converts this to an expression
                    // it really should just compile in the component call too.
                    var inputTypeExpr = params[0];
                    builder.dynamicComponent(inputTypeExpr, null, params.slice(1), hash, true, null, null);
                    return true;
                }
                if (typeArg === 'checkbox') {
                    true && !(keys.indexOf('value') === -1) && (0, _debug.assert)("{{input type='checkbox'}} does not support setting `value=someBooleanValue`; " + 'you must use `checked=someBooleanValue` instead.', keys.indexOf('value') === -1);

                    wrapComponentClassAttribute(hash);
                    return buildSyntax('-checkbox', params, hash, builder);
                }
            }
        }
        return buildSyntax('-text-field', params, hash, builder);
    }

    /**
    @module ember
    */
    /**
        The `let` helper receives one or more positional arguments and yields
        them out as block params.
    
        This allows the developer to introduce shorter names for certain computations
        in the template.
    
        This is especially useful if you are passing properties to a component
        that receives a lot of options and you want to clean up the invocation.
    
        For the following example, the template receives a `post` object with
        `content` and `title` properties.
    
        We are going to call the `my-post` component, passing a title which is
        the title of the post suffixed with the name of the blog, the content
        of the post, and a series of options defined in-place.
    
        ```handlebars
        {{#let
            (concat post.title ' | The Ember.js Blog')
            post.content
            (hash
              theme="high-contrast"
              enableComments=true
            )
            as |title content options|
        }}
          {{my-post title=title content=content options=options}}
        {{/let}}
      ```
    
      @method let
      @for Ember.Templates.helpers
      @public
    */
    function blockLetMacro(params, _hash, template, _inverse, builder) {
        if (template !== null) {
            if (params !== null) {
                builder.compileParams(params);
                builder.invokeStaticBlock(template, params.length);
            } else {
                builder.invokeStatic(template);
            }
        }
        return true;
    }

    var CAPABILITIES$3 = {
        dynamicLayout: true,
        dynamicTag: false,
        prepareArgs: false,
        createArgs: false,
        attributeHook: false,
        elementHook: false,
        createCaller: true,
        dynamicScope: true,
        updateHook: true,
        createInstance: true
    };

    var MountManager = function (_AbstractManager5) {
        (0, _emberBabel.inherits)(MountManager, _AbstractManager5);

        function MountManager() {
            (0, _emberBabel.classCallCheck)(this, MountManager);

            return (0, _emberBabel.possibleConstructorReturn)(this, _AbstractManager5.apply(this, arguments));
        }

        MountManager.prototype.getDynamicLayout = function getDynamicLayout(state, _) {
            var template = state.engine.lookup('template:application');
            var layout = template.asLayout();
            return {
                handle: layout.compile(),
                symbolTable: layout.symbolTable
            };
        };

        MountManager.prototype.getCapabilities = function getCapabilities() {
            return CAPABILITIES$3;
        };

        MountManager.prototype.create = function create(environment, state) {
            if (true /* DEBUG */) {
                    this._pushEngineToDebugStack('engine:' + state.name, environment);
                }
            // TODO
            // mount is a runtime helper, this shouldn't use dynamic layout
            // we should resolve the engine app template in the helper
            // it also should use the owner that looked up the mount helper.
            var engine = environment.owner.buildChildEngineInstance(state.name);
            engine.boot();
            var applicationFactory = engine.factoryFor('controller:application');
            var controllerFactory = applicationFactory || (0, _routing.generateControllerFactory)(engine, 'application');
            var controller = void 0;
            var self = void 0;
            var bucket = void 0;
            var tag = void 0;
            if (true /* EMBER_ENGINES_MOUNT_PARAMS */) {
                    var modelRef = state.modelRef;
                    if (modelRef === undefined) {
                        controller = controllerFactory.create();
                        self = new RootReference(controller);
                        tag = _reference.CONSTANT_TAG;
                        bucket = { engine: engine, controller: controller, self: self, tag: tag };
                    } else {
                        var model = modelRef.value();
                        var modelRev = modelRef.tag.value();
                        controller = controllerFactory.create({ model: model });
                        self = new RootReference(controller);
                        tag = modelRef.tag;
                        bucket = { engine: engine, controller: controller, self: self, tag: tag, modelRef: modelRef, modelRev: modelRev };
                    }
                } else {
                controller = controllerFactory.create();
                self = new RootReference(controller);
                tag = _reference.CONSTANT_TAG;
                bucket = { engine: engine, controller: controller, self: self, tag: tag };
            }
            return bucket;
        };

        MountManager.prototype.getSelf = function getSelf(_ref28) {
            var self = _ref28.self;

            return self;
        };

        MountManager.prototype.getTag = function getTag(state) {
            return state.tag;
        };

        MountManager.prototype.getDestructor = function getDestructor(_ref29) {
            var engine = _ref29.engine;

            return engine;
        };

        MountManager.prototype.didRenderLayout = function didRenderLayout() {
            if (true /* DEBUG */) {
                    this.debugStack.pop();
                }
        };

        MountManager.prototype.update = function update(bucket) {
            if (true /* EMBER_ENGINES_MOUNT_PARAMS */) {
                    var controller = bucket.controller,
                        modelRef = bucket.modelRef,
                        modelRev = bucket.modelRev;

                    if (!modelRef.tag.validate(modelRev)) {
                        var model = modelRef.value();
                        bucket.modelRev = modelRef.tag.value();
                        controller.set('model', model);
                    }
                }
        };

        return MountManager;
    }(AbstractManager);

    var MOUNT_MANAGER = new MountManager();

    var MountDefinition = function MountDefinition(name, modelRef) {
        (0, _emberBabel.classCallCheck)(this, MountDefinition);

        this.manager = MOUNT_MANAGER;
        this.state = { name: name, modelRef: modelRef };
    };

    function mountHelper(vm, args) {
        var env = vm.env;
        var nameRef = args.positional.at(0);
        var modelRef = args.named.has('model') ? args.named.get('model') : undefined;
        return new DynamicEngineReference(nameRef, env, modelRef);
    }
    /**
      The `{{mount}}` helper lets you embed a routeless engine in a template.
      Mounting an engine will cause an instance to be booted and its `application`
      template to be rendered.
    
      For example, the following template mounts the `ember-chat` engine:
    
      ```handlebars
      {{! application.hbs }}
      {{mount "ember-chat"}}
      ```
    
      Additionally, you can also pass in a `model` argument that will be
      set as the engines model. This can be an existing object:
    
      ```
      <div>
        {{mount 'admin' model=userSettings}}
      </div>
      ```
    
      Or an inline `hash`, and you can even pass components:
    
      ```
      <div>
        <h1>Application template!</h1>
        {{mount 'admin' model=(hash
            title='Secret Admin'
            signInButton=(component 'sign-in-button')
        )}}
      </div>
      ```
    
      @method mount
      @param {String} name Name of the engine to mount.
      @param {Object} [model] Object that will be set as
                              the model of the engine.
      @for Ember.Templates.helpers
      @category ember-application-engines
      @public
    */
    function mountMacro(_name, params, hash, builder) {
        if (true /* EMBER_ENGINES_MOUNT_PARAMS */) {
                true && !(params.length === 1) && (0, _debug.assert)('You can only pass a single positional argument to the {{mount}} helper, e.g. {{mount "chat-engine"}}.', params.length === 1);
            } else {
            true && !(params.length === 1 && hash === null) && (0, _debug.assert)('You can only pass a single argument to the {{mount}} helper, e.g. {{mount "chat-engine"}}.', params.length === 1 && hash === null);
        }
        var expr = [_wireFormat.Ops.Helper, '-mount', params || [], hash];
        builder.dynamicComponent(expr, null, [], null, false, null, null);
        return true;
    }

    var DynamicEngineReference = function () {
        function DynamicEngineReference(nameRef, env, modelRef) {
            (0, _emberBabel.classCallCheck)(this, DynamicEngineReference);

            this.tag = nameRef.tag;
            this.nameRef = nameRef;
            this.modelRef = modelRef;
            this.env = env;
            this._lastName = null;
            this._lastDef = null;
        }

        DynamicEngineReference.prototype.value = function value() {
            var env = this.env,
                nameRef = this.nameRef,
                modelRef = this.modelRef;

            var name = nameRef.value();
            if (typeof name === 'string') {
                if (this._lastName === name) {
                    return this._lastDef;
                }
                true && !env.owner.hasRegistration('engine:' + name) && (0, _debug.assert)('You used `{{mount \'' + name + '\'}}`, but the engine \'' + name + '\' can not be found.', env.owner.hasRegistration('engine:' + name));

                if (!env.owner.hasRegistration('engine:' + name)) {
                    return null;
                }
                this._lastName = name;
                this._lastDef = (0, _runtime.curry)(new MountDefinition(name, modelRef));
                return this._lastDef;
            } else {
                true && !(name === null || name === undefined) && (0, _debug.assert)('Invalid engine name \'' + name + '\' specified, engine name must be either a string, null or undefined.', name === null || name === undefined);

                this._lastDef = null;
                this._lastName = null;
                return null;
            }
        };

        DynamicEngineReference.prototype.get = function get() {
            return _runtime.UNDEFINED_REFERENCE;
        };

        return DynamicEngineReference;
    }();

    /**
     * Represents the root outlet.
     */

    var RootOutletReference = function () {
        function RootOutletReference(outletState) {
            (0, _emberBabel.classCallCheck)(this, RootOutletReference);

            this.outletState = outletState;
            this.tag = _reference.DirtyableTag.create();
        }

        RootOutletReference.prototype.get = function get(key) {
            return new PathReference(this, key);
        };

        RootOutletReference.prototype.value = function value() {
            return this.outletState;
        };

        RootOutletReference.prototype.update = function update(state) {
            this.outletState.outlets.main = state;
            this.tag.inner.dirty();
        };

        return RootOutletReference;
    }();
    /**
     * Represents the connected outlet.
     */

    var OutletReference = function () {
        function OutletReference(parentStateRef, outletNameRef) {
            (0, _emberBabel.classCallCheck)(this, OutletReference);

            this.parentStateRef = parentStateRef;
            this.outletNameRef = outletNameRef;
            this.tag = (0, _reference.combine)([parentStateRef.tag, outletNameRef.tag]);
        }

        OutletReference.prototype.value = function value() {
            var outletState = this.parentStateRef.value();
            var outlets = outletState === undefined ? undefined : outletState.outlets;
            return outlets === undefined ? undefined : outlets[this.outletNameRef.value()];
        };

        OutletReference.prototype.get = function get(key) {
            return new PathReference(this, key);
        };

        return OutletReference;
    }();
    /**
     * Outlet state is dirtied from root.
     * This just using the parent tag for dirtiness.
     */

    var PathReference = function () {
        function PathReference(parent, key) {
            (0, _emberBabel.classCallCheck)(this, PathReference);

            this.parent = parent;
            this.key = key;
            this.tag = parent.tag;
        }

        PathReference.prototype.get = function get(key) {
            return new PathReference(this, key);
        };

        PathReference.prototype.value = function value() {
            var parent = this.parent.value();
            return parent && parent[this.key];
        };

        return PathReference;
    }();

    /**
      The `{{outlet}}` helper lets you specify where a child route will render in
      your template. An important use of the `{{outlet}}` helper is in your
      application's `application.hbs` file:
    
      ```handlebars
      {{! app/templates/application.hbs }}
      <!-- header content goes here, and will always display -->
      {{my-header}}
      <div class="my-dynamic-content">
        <!-- this content will change based on the current route, which depends on the current URL -->
        {{outlet}}
      </div>
      <!-- footer content goes here, and will always display -->
      {{my-footer}}
      ```
    
      You may also specify a name for the `{{outlet}}`, which is useful when using more than one
      `{{outlet}}` in a template:
    
      ```handlebars
      {{outlet "menu"}}
      {{outlet "sidebar"}}
      {{outlet "main"}}
      ```
    
      Your routes can then render into a specific one of these `outlet`s by specifying the `outlet`
      attribute in your `renderTemplate` function:
    
      ```app/routes/menu.js
      import Route from '@ember/routing/route';
    
      export default Route.extend({
        renderTemplate() {
          this.render({ outlet: 'menu' });
        }
      });
      ```
    
      See the [routing guide](https://guides.emberjs.com/release/routing/rendering-a-template/) for more
      information on how your `route` interacts with the `{{outlet}}` helper.
      Note: Your content __will not render__ if there isn't an `{{outlet}}` for it.
    
      @method outlet
      @param {String} [name]
      @for Ember.Templates.helpers
      @public
    */

    function outletHelper(vm, args) {
        var scope = vm.dynamicScope();
        var nameRef = void 0;
        if (args.positional.length === 0) {
            nameRef = new _reference.ConstReference('main');
        } else {
            nameRef = args.positional.at(0);
        }
        return new OutletComponentReference(new OutletReference(scope.outletState, nameRef));
    }
    function outletMacro(_name, params, hash, builder) {
        var expr = [_wireFormat.Ops.Helper, '-outlet', params || [], hash];
        builder.dynamicComponent(expr, null, [], null, false, null, null);
        return true;
    }

    var OutletComponentReference = function () {
        function OutletComponentReference(outletRef) {
            (0, _emberBabel.classCallCheck)(this, OutletComponentReference);

            this.outletRef = outletRef;
            this.definition = null;
            this.lastState = null;
            // The router always dirties the root state.
            this.tag = outletRef.tag;
        }

        OutletComponentReference.prototype.value = function value() {
            var state = stateFor(this.outletRef);
            if (validate(state, this.lastState)) {
                return this.definition;
            }
            this.lastState = state;
            var definition = null;
            if (state !== null) {
                definition = (0, _runtime.curry)(new OutletComponentDefinition(state));
            }
            return this.definition = definition;
        };

        OutletComponentReference.prototype.get = function get(_key) {
            return _runtime.UNDEFINED_REFERENCE;
        };

        return OutletComponentReference;
    }();

    function stateFor(ref) {
        var outlet = ref.value();
        if (outlet === undefined) return null;
        var render = outlet.render;
        if (render === undefined) return null;
        var template = render.template;
        if (template === undefined) return null;
        return {
            ref: ref,
            name: render.name,
            outlet: render.outlet,
            template: template,
            controller: render.controller
        };
    }
    function validate(state, lastState) {
        if (state === null) {
            return lastState === null;
        }
        if (lastState === null) {
            return false;
        }
        return state.template === lastState.template && state.controller === lastState.controller;
    }

    function refineInlineSyntax(name, params, hash, builder) {
        true && !!(builder.compiler['resolver']['resolver']['builtInHelpers'][name] && builder.referrer.owner.hasRegistration('helper:' + name)) && (0, _debug.assert)('You attempted to overwrite the built-in helper "' + name + '" which is not allowed. Please rename the helper.', !(builder.compiler['resolver']['resolver']['builtInHelpers'][name] && builder.referrer.owner.hasRegistration('helper:' + name)));

        if (name.indexOf('-') === -1) {
            return false;
        }
        var handle = builder.compiler['resolver'].lookupComponentDefinition(name, builder.referrer);
        if (handle !== null) {
            builder.component.static(handle, [params === null ? [] : params, hashToArgs(hash), null, null]);
            return true;
        }
        return false;
    }
    function refineBlockSyntax(name, params, hash, template, inverse, builder) {
        if (name.indexOf('-') === -1) {
            return false;
        }
        var handle = builder.compiler['resolver'].lookupComponentDefinition(name, builder.referrer);
        if (handle !== null) {
            wrapComponentClassAttribute(hash);
            builder.component.static(handle, [params, hashToArgs(hash), template, inverse]);
            return true;
        }
        true && !builder.referrer.owner.hasRegistration('helper:' + name) && (0, _debug.assert)('A component or helper named "' + name + '" could not be found', builder.referrer.owner.hasRegistration('helper:' + name));
        true && !!function () {
            var resolver = builder.compiler['resolver']['resolver'];
            var _builder$referrer = builder.referrer,
                owner = _builder$referrer.owner,
                moduleName = _builder$referrer.moduleName;

            if (name === 'component' || resolver['builtInHelpers'][name]) {
                return true;
            }
            var options = { source: 'template:' + moduleName };
            return owner.hasRegistration('helper:' + name, options) || owner.hasRegistration('helper:' + name);
        }() && (0, _debug.assert)('Helpers may not be used in the block form, for example {{#' + name + '}}{{/' + name + '}}. Please use a component, or alternatively use the helper in combination with a built-in Ember helper, for example {{#if (' + name + ')}}{{/if}}.', !function () {
            var resolver = builder.compiler['resolver']['resolver'];var _builder$referrer = builder.referrer,
                owner = _builder$referrer.owner,
                moduleName = _builder$referrer.moduleName;if (name === 'component' || resolver['builtInHelpers'][name]) {
                return true;
            }var options = { source: 'template:' + moduleName };return owner.hasRegistration('helper:' + name, options) || owner.hasRegistration('helper:' + name);
        }());

        return false;
    }
    var experimentalMacros = [];
    // This is a private API to allow for experimental macros
    // to be created in user space. Registering a macro should
    // should be done in an initializer.
    function registerMacros(macro) {
        experimentalMacros.push(macro);
    }
    function populateMacros(macros) {
        var inlines = macros.inlines,
            blocks = macros.blocks;

        inlines.add('outlet', outletMacro);
        inlines.add('mount', mountMacro);
        inlines.add('input', inputMacro);
        inlines.add('textarea', textAreaMacro);
        inlines.addMissing(refineInlineSyntax);
        blocks.add('let', blockLetMacro);
        blocks.addMissing(refineBlockSyntax);
        for (var i = 0; i < experimentalMacros.length; i++) {
            var macro = experimentalMacros[i];
            macro(blocks, inlines);
        }
        return { blocks: blocks, inlines: inlines };
    }

    function setComponentManager(stringOrFunction, obj) {
        var factory = void 0;
        if (typeof stringOrFunction === 'string') {
            factory = function (owner) {
                return owner.lookup('component-manager:' + stringOrFunction);
            };
        } else {
            factory = stringOrFunction;
        }
        return setManager(factory, obj);
    }
    function getComponentManager(obj) {
        if (!true /* GLIMMER_CUSTOM_COMPONENT_MANAGER */) {
                return;
            }
        return getManager(obj);
    }

    function setModifierManager(factory, obj) {
        return setManager(factory, obj);
    }
    function getModifierManager(obj) {
        if (!false /* GLIMMER_MODIFIER_MANAGER */) {
                return;
            }
        return getManager(obj);
    }

    function instrumentationPayload$1(name) {
        return { object: 'component:' + name };
    }
    function makeOptions(moduleName, namespace) {
        return {
            source: moduleName !== undefined ? 'template:' + moduleName : undefined,
            namespace: namespace
        };
    }
    var BUILTINS_HELPERS = {
        if: inlineIf,
        action: action,
        concat: concat$1,
        get: get$1,
        hash: hash,
        array: array,
        log: log$1,
        mut: mut,
        'query-params': queryParams$1,
        readonly: readonly,
        unbound: unbound,
        unless: inlineUnless,
        '-class': classHelper$1,
        '-each-in': eachIn,
        '-input-type': inputTypeHelper$1,
        '-normalize-class': normalizeClassHelper,
        '-html-safe': htmlSafeHelper,
        '-get-dynamic-var': _runtime.getDynamicVar,
        '-mount': mountHelper,
        '-outlet': outletHelper,
        '-assert-implicit-component-helper-argument': componentAssertionHelper
    };
    var BUILTIN_MODIFIERS = {
        action: { manager: new ActionModifierManager(), state: null }
    };

    var RuntimeResolver = function () {
        function RuntimeResolver() {
            (0, _emberBabel.classCallCheck)(this, RuntimeResolver);

            this.handles = [undefined];
            this.objToHandle = new WeakMap();
            this.builtInHelpers = BUILTINS_HELPERS;
            this.builtInModifiers = BUILTIN_MODIFIERS;
            // supports directly imported late bound layouts on component.prototype.layout
            this.templateCache = new Map();
            this.componentDefinitionCache = new Map();
            this.customManagerCache = new Map();
            this.templateCacheHits = 0;
            this.templateCacheMisses = 0;
            this.componentDefinitionCount = 0;
            this.helperDefinitionCount = 0;
            var macros = new _opcodeCompiler.Macros();
            populateMacros(macros);
            this.compiler = new _opcodeCompiler.LazyCompiler(new CompileTimeLookup(this), this, macros);
        }
        /***  IRuntimeResolver ***/
        /**
         * public componentDefHandleCount = 0;
         * Called while executing Append Op.PushDynamicComponentManager if string
         */

        RuntimeResolver.prototype.lookupComponentDefinition = function lookupComponentDefinition(name, meta) {
            true && !(name !== 'textarea') && (0, _debug.assert)('You cannot use `textarea` as a component name.', name !== 'textarea');
            true && !(name !== 'input') && (0, _debug.assert)('You cannot use `input` as a component name.', name !== 'input');

            var handle = this.lookupComponentHandle(name, meta);
            if (handle === null) {
                true && !false && (0, _debug.assert)('Could not find component named "' + name + '" (no component or template with that name was found)');

                return null;
            }
            return this.resolve(handle);
        };

        RuntimeResolver.prototype.lookupComponentHandle = function lookupComponentHandle(name, meta) {
            var nextHandle = this.handles.length;
            var handle = this.handle(this._lookupComponentDefinition(name, meta));
            if (nextHandle === handle) {
                this.componentDefinitionCount++;
            }
            return handle;
        };
        /**
         * Called by RuntimeConstants to lookup unresolved handles.
         */

        RuntimeResolver.prototype.resolve = function resolve(handle) {
            return this.handles[handle];
        };
        // End IRuntimeResolver
        /**
         * Called by CompileTimeLookup compiling Unknown or Helper OpCode
         */

        RuntimeResolver.prototype.lookupHelper = function lookupHelper(name, meta) {
            var nextHandle = this.handles.length;
            var helper$$1 = this._lookupHelper(name, meta);
            if (helper$$1 !== null) {
                var handle = this.handle(helper$$1);
                if (nextHandle === handle) {
                    this.helperDefinitionCount++;
                }
                return handle;
            }
            return null;
        };
        /**
         * Called by CompileTimeLookup compiling the
         */

        RuntimeResolver.prototype.lookupModifier = function lookupModifier(name, meta) {
            return this.handle(this._lookupModifier(name, meta));
        };
        /**
         * Called by CompileTimeLookup to lookup partial
         */

        RuntimeResolver.prototype.lookupPartial = function lookupPartial(name, meta) {
            var partial = this._lookupPartial(name, meta);
            return this.handle(partial);
        };
        // end CompileTimeLookup
        /**
         * Creates a template with injections from a directly imported template factory.
         * @param templateFactory the directly imported template factory.
         * @param owner the owner the template instance would belong to if resolved
         */

        RuntimeResolver.prototype.createTemplate = function createTemplate(factory, owner) {
            var cache = this.templateCache.get(owner);
            if (cache === undefined) {
                cache = new Map();
                this.templateCache.set(owner, cache);
            }
            var template = cache.get(factory);
            if (template === undefined) {
                var compiler = this.compiler;

                var injections = { compiler: compiler };
                (0, _owner.setOwner)(injections, owner);
                template = factory.create(injections);
                cache.set(factory, template);
                this.templateCacheMisses++;
            } else {
                this.templateCacheHits++;
            }
            return template;
        };
        // needed for lazy compile time lookup


        RuntimeResolver.prototype.handle = function handle(obj) {
            if (obj === undefined || obj === null) {
                return null;
            }
            var handle = this.objToHandle.get(obj);
            if (handle === undefined) {
                handle = this.handles.push(obj) - 1;
                this.objToHandle.set(obj, handle);
            }
            return handle;
        };

        RuntimeResolver.prototype._lookupHelper = function _lookupHelper(_name, meta) {
            var helper$$1 = this.builtInHelpers[_name];
            if (helper$$1 !== undefined) {
                return helper$$1;
            }
            var owner = meta.owner,
                moduleName = meta.moduleName;

            var name = _name;
            var namespace = undefined;
            if (false /* EMBER_MODULE_UNIFICATION */) {
                    var parsed = this._parseNameForNamespace(_name);
                    name = parsed.name;
                    namespace = parsed.namespace;
                }
            var options = makeOptions(moduleName, namespace);
            var factory = owner.factoryFor('helper:' + name, options) || owner.factoryFor('helper:' + name);
            if (!isHelperFactory(factory)) {
                return null;
            }
            return function (vm, args) {
                var helper$$1 = factory.create();
                if (isSimpleHelper(helper$$1)) {
                    return new SimpleHelperReference(helper$$1.compute, args.capture());
                }
                vm.newDestroyable(helper$$1);
                return ClassBasedHelperReference.create(helper$$1, args.capture());
            };
        };

        RuntimeResolver.prototype._lookupPartial = function _lookupPartial(name, meta) {
            var template = (0, _views.lookupPartial)(name, meta.owner);
            if (template) {
                return new _opcodeCompiler.PartialDefinition(name, template);
            } else {
                throw new Error(name + ' is not a partial');
            }
        };

        RuntimeResolver.prototype._lookupModifier = function _lookupModifier(name, meta) {
            var builtin = this.builtInModifiers[name];
            if (false /* GLIMMER_MODIFIER_MANAGER */ && builtin === undefined) {
                var owner = meta.owner;

                var modifier = owner.factoryFor('modifier:' + name);
                if (modifier !== undefined) {
                    var managerFactory = getModifierManager(modifier.class);
                    var manager = managerFactory(owner);
                    return new CustomModifierDefinition(name, modifier, manager);
                }
            }
            return builtin;
        };

        RuntimeResolver.prototype._parseNameForNamespace = function _parseNameForNamespace(_name) {
            var name = _name;
            var namespace = undefined;
            var namespaceDelimiterOffset = _name.indexOf('::');
            if (namespaceDelimiterOffset !== -1) {
                name = _name.slice(namespaceDelimiterOffset + 2);
                namespace = _name.slice(0, namespaceDelimiterOffset);
            }
            return { name: name, namespace: namespace };
        };

        RuntimeResolver.prototype._lookupComponentDefinition = function _lookupComponentDefinition(_name, meta) {
            var name = _name;
            var namespace = undefined;
            if (false /* EMBER_MODULE_UNIFICATION */) {
                    var parsed = this._parseNameForNamespace(_name);
                    name = parsed.name;
                    namespace = parsed.namespace;
                }

            var _lookupComponent2 = (0, _views.lookupComponent)(meta.owner, name, makeOptions(meta.moduleName, namespace)),
                layout = _lookupComponent2.layout,
                component = _lookupComponent2.component;

            var key = component === undefined ? layout : component;
            if (key === undefined) {
                return null;
            }
            var cachedComponentDefinition = this.componentDefinitionCache.get(key);
            if (cachedComponentDefinition !== undefined) {
                return cachedComponentDefinition;
            }
            var finalizer = (0, _instrumentation._instrumentStart)('render.getComponentDefinition', instrumentationPayload$1, name);
            if (layout && !component && _environment2.ENV._TEMPLATE_ONLY_GLIMMER_COMPONENTS) {
                var _definition = new TemplateOnlyComponentDefinition(layout);
                finalizer();
                this.componentDefinitionCache.set(key, _definition);
                return _definition;
            }
            if (true /* GLIMMER_CUSTOM_COMPONENT_MANAGER */ && component && component.class) {
                var managerFactory = getComponentManager(component.class);
                if (managerFactory) {
                    var delegate = managerFactory(meta.owner);
                    var _definition2 = new CustomManagerDefinition(name, component, delegate, layout || meta.owner.lookup((0, _container.privatize)(_templateObject)));
                    finalizer();
                    this.componentDefinitionCache.set(key, _definition2);
                    return _definition2;
                }
            }
            var definition = layout || component ? new CurlyComponentDefinition(name, component || meta.owner.factoryFor((0, _container.privatize)(_templateObject2)), null, layout // TODO fix type
            ) : null;
            finalizer();
            this.componentDefinitionCache.set(key, definition);
            return definition;
        };

        RuntimeResolver.prototype._lookupComponentManager = function _lookupComponentManager(owner, managerId) {
            if (this.customManagerCache.has(managerId)) {
                return this.customManagerCache.get(managerId);
            }
            var delegate = owner.lookup('component-manager:' + managerId);
            this.customManagerCache.set(managerId, delegate);
            return delegate;
        };

        return RuntimeResolver;
    }();

    // factory for DI


    var TemplateCompiler = {
        create: function () {
            return new RuntimeResolver().compiler;
        }
    };

    var ComponentTemplate = template({ "id": "chfQcH83", "block": "{\"symbols\":[\"&default\"],\"statements\":[[14,1]],\"hasEval\":false}", "meta": { "moduleName": "packages/@ember/-internals/glimmer/lib/templates/component.hbs" } });

    var OutletTemplate = template({ "id": "gK7R0/52", "block": "{\"symbols\":[],\"statements\":[[1,[21,\"outlet\"],false]],\"hasEval\":false}", "meta": { "moduleName": "packages/@ember/-internals/glimmer/lib/templates/outlet.hbs" } });

    var TOP_LEVEL_NAME = '-top-level';
    var TOP_LEVEL_OUTLET = 'main';

    var OutletView = function () {
        function OutletView(_environment, renderer, owner, template) {
            (0, _emberBabel.classCallCheck)(this, OutletView);

            this._environment = _environment;
            this.renderer = renderer;
            this.owner = owner;
            this.template = template;
            var ref = this.ref = new RootOutletReference({
                outlets: { main: undefined },
                render: {
                    owner: owner,
                    into: undefined,
                    outlet: TOP_LEVEL_OUTLET,
                    name: TOP_LEVEL_NAME,
                    controller: undefined,
                    template: template
                }
            });
            this.state = {
                ref: ref,
                name: TOP_LEVEL_NAME,
                outlet: TOP_LEVEL_OUTLET,
                template: template,
                controller: undefined
            };
        }

        OutletView.extend = function extend(injections) {
            return function (_OutletView) {
                (0, _emberBabel.inherits)(_class, _OutletView);

                function _class() {
                    (0, _emberBabel.classCallCheck)(this, _class);

                    return (0, _emberBabel.possibleConstructorReturn)(this, _OutletView.apply(this, arguments));
                }

                _class.create = function create(options) {
                    if (options) {
                        return _OutletView.create.call(this, (0, _polyfills.assign)({}, injections, options));
                    } else {
                        return _OutletView.create.call(this, injections);
                    }
                };

                return _class;
            }(OutletView);
        };

        OutletView.reopenClass = function reopenClass(injections) {
            (0, _polyfills.assign)(this, injections);
        };

        OutletView.create = function create(options) {
            var _environment = options._environment,
                renderer = options.renderer,
                template = options.template;

            var owner = options[_owner.OWNER];
            return new OutletView(_environment, renderer, owner, template);
        };

        OutletView.prototype.appendTo = function appendTo(selector) {
            var target = void 0;
            if (this._environment.hasDOM) {
                target = typeof selector === 'string' ? document.querySelector(selector) : selector;
            } else {
                target = selector;
            }
            (0, _runloop.schedule)('render', this.renderer, 'appendOutletView', this, target);
        };

        OutletView.prototype.rerender = function rerender() {
            /**/
        };

        OutletView.prototype.setOutletState = function setOutletState(state) {
            this.ref.update(state);
        };

        OutletView.prototype.destroy = function destroy() {
            /**/
        };

        return OutletView;
    }();

    function setupApplicationRegistry(registry) {
        registry.injection('service:-glimmer-environment', 'appendOperations', 'service:-dom-tree-construction');
        registry.injection('renderer', 'env', 'service:-glimmer-environment');
        // because we are using injections we can't use instantiate false
        // we need to use bind() to copy the function so factory for
        // association won't leak
        registry.register('service:-dom-builder', {
            create: function (_ref30) {
                var bootOptions = _ref30.bootOptions;
                var _renderMode = bootOptions._renderMode;

                switch (_renderMode) {
                    case 'serialize':
                        return _node.serializeBuilder.bind(null);
                    case 'rehydrate':
                        return _runtime.rehydrationBuilder.bind(null);
                    default:
                        return _runtime.clientBuilder.bind(null);
                }
            }
        });
        registry.injection('service:-dom-builder', 'bootOptions', '-environment:main');
        registry.injection('renderer', 'builder', 'service:-dom-builder');
        registry.register((0, _container.privatize)(_templateObject3), RootTemplate);
        registry.injection('renderer', 'rootTemplate', (0, _container.privatize)(_templateObject3));
        registry.register('renderer:-dom', InteractiveRenderer);
        registry.register('renderer:-inert', InertRenderer);
        if (_browserEnvironment.hasDOM) {
            registry.injection('service:-glimmer-environment', 'updateOperations', 'service:-dom-changes');
        }
        registry.register('service:-dom-changes', {
            create: function (_ref31) {
                var document = _ref31.document;

                return new _runtime.DOMChanges(document);
            }
        });
        registry.register('service:-dom-tree-construction', {
            create: function (_ref32) {
                var document = _ref32.document;

                var Implementation = _browserEnvironment.hasDOM ? _runtime.DOMTreeConstruction : _node.NodeDOMTreeConstruction;
                return new Implementation(document);
            }
        });
    }
    function setupEngineRegistry(registry) {
        registry.register('view:-outlet', OutletView);
        registry.register('template:-outlet', OutletTemplate);
        registry.injection('view:-outlet', 'template', 'template:-outlet');
        registry.injection('service:-dom-changes', 'document', 'service:-document');
        registry.injection('service:-dom-tree-construction', 'document', 'service:-document');
        registry.register((0, _container.privatize)(_templateObject), ComponentTemplate);
        registry.register('service:-glimmer-environment', Environment$1);
        registry.register((0, _container.privatize)(_templateObject4), TemplateCompiler);
        registry.injection('template', 'compiler', (0, _container.privatize)(_templateObject4));
        registry.optionsForType('helper', { instantiate: false });
        registry.register('helper:loc', loc$1);
        registry.register('component:-text-field', TextField);
        registry.register('component:-text-area', TextArea);
        registry.register('component:-checkbox', Checkbox);
        registry.register('component:link-to', LinkComponent);
        if (!_environment2.ENV._TEMPLATE_ONLY_GLIMMER_COMPONENTS) {
            registry.register((0, _container.privatize)(_templateObject2), Component);
        }
    }

    /**
      [Glimmer](https://github.com/tildeio/glimmer) is a templating engine used by Ember.js that is compatible with a subset of the [Handlebars](http://handlebarsjs.com/) syntax.
    
      ### Showing a property
    
      Templates manage the flow of an application's UI, and display state (through
      the DOM) to a user. For example, given a component with the property "name",
      that component's template can use the name in several ways:
    
      ```app/components/person-profile.js
      import Component from '@ember/component';
    
      export default Component.extend({
        name: 'Jill'
      });
      ```
    
      ```app/templates/components/person-profile.hbs
      {{name}}
      <div>{{name}}</div>
      <span data-name={{name}}></span>
      ```
    
      Any time the "name" property on the component changes, the DOM will be
      updated.
    
      Properties can be chained as well:
    
      ```handlebars
      {{aUserModel.name}}
      <div>{{listOfUsers.firstObject.name}}</div>
      ```
    
      ### Using Ember helpers
    
      When content is passed in mustaches `{{}}`, Ember will first try to find a helper
      or component with that name. For example, the `if` helper:
    
      ```handlebars
      {{if name "I have a name" "I have no name"}}
      <span data-has-name={{if name true}}></span>
      ```
    
      The returned value is placed where the `{{}}` is called. The above style is
      called "inline". A second style of helper usage is called "block". For example:
    
      ```handlebars
      {{#if name}}
      I have a name
      {{else}}
      I have no name
      {{/if}}
      ```
    
      The block form of helpers allows you to control how the UI is created based
      on the values of properties.
      A third form of helper is called "nested". For example here the concat
      helper will add " Doe" to a displayed name if the person has no last name:
    
      ```handlebars
      <span data-name={{concat firstName (
      if lastName (concat " " lastName) "Doe"
      )}}></span>
      ```
    
      Ember's built-in helpers are described under the [Ember.Templates.helpers](/api/ember/release/classes/Ember.Templates.helpers)
      namespace. Documentation on creating custom helpers can be found under
      [Helper](/api/classes/Ember.Helper.html).
    
      ### Invoking a Component
    
      Ember components represent state to the UI of an application. Further
      reading on components can be found under [Component](/api/ember/release/classes/Component).
    
      @module @ember/component
      @main @ember/component
      @public
     */

    exports.RootTemplate = RootTemplate;
    exports.template = template;
    exports.Checkbox = Checkbox;
    exports.TextField = TextField;
    exports.TextArea = TextArea;
    exports.LinkComponent = LinkComponent;
    exports.Component = Component;
    exports.ROOT_REF = ROOT_REF;
    exports.Helper = Helper;
    exports.helper = helper;
    exports.Environment = Environment$1;
    exports.SafeString = SafeString;
    exports.escapeExpression = escapeExpression;
    exports.htmlSafe = htmlSafe;
    exports.isHTMLSafe = isHTMLSafe;
    exports.Renderer = Renderer;
    exports.InertRenderer = InertRenderer;
    exports.InteractiveRenderer = InteractiveRenderer;
    exports._resetRenderers = _resetRenderers;
    exports.renderSettled = renderSettled;
    exports.getTemplate = getTemplate;
    exports.setTemplate = setTemplate;
    exports.hasTemplate = hasTemplate;
    exports.getTemplates = getTemplates;
    exports.setTemplates = setTemplates;
    exports.setupEngineRegistry = setupEngineRegistry;
    exports.setupApplicationRegistry = setupApplicationRegistry;
    exports._registerMacros = registerMacros;
    exports._experimentalMacros = experimentalMacros;
    exports.AbstractComponentManager = AbstractManager;
    exports.UpdatableReference = UpdatableReference;
    exports.INVOKE = INVOKE;
    exports.iterableFor = _iterableFor;
    exports.DebugStack = DebugStack$1;
    exports.OutletView = OutletView;
    exports.capabilities = capabilities;
    exports.setComponentManager = setComponentManager;
    exports.getComponentManager = getComponentManager;
    exports.setModifierManager = setModifierManager;
    exports.getModifierManager = getModifierManager;
    exports.modifierCapabilties = capabilities$1;
});
enifed('@ember/-internals/meta/index', ['exports', '@ember/-internals/meta/lib/meta'], function (exports, _meta) {
  'use strict';

  Object.defineProperty(exports, 'counters', {
    enumerable: true,
    get: function () {
      return _meta.counters;
    }
  });
  Object.defineProperty(exports, 'deleteMeta', {
    enumerable: true,
    get: function () {
      return _meta.deleteMeta;
    }
  });
  Object.defineProperty(exports, 'descriptorFor', {
    enumerable: true,
    get: function () {
      return _meta.descriptorFor;
    }
  });
  Object.defineProperty(exports, 'isDescriptor', {
    enumerable: true,
    get: function () {
      return _meta.isDescriptor;
    }
  });
  Object.defineProperty(exports, 'Meta', {
    enumerable: true,
    get: function () {
      return _meta.Meta;
    }
  });
  Object.defineProperty(exports, 'meta', {
    enumerable: true,
    get: function () {
      return _meta.meta;
    }
  });
  Object.defineProperty(exports, 'peekMeta', {
    enumerable: true,
    get: function () {
      return _meta.peekMeta;
    }
  });
  Object.defineProperty(exports, 'setMeta', {
    enumerable: true,
    get: function () {
      return _meta.setMeta;
    }
  });
  Object.defineProperty(exports, 'UNDEFINED', {
    enumerable: true,
    get: function () {
      return _meta.UNDEFINED;
    }
  });
});
enifed('@ember/-internals/meta/lib/meta', ['exports', 'ember-babel', '@ember/-internals/utils', '@ember/debug'], function (exports, _emberBabel, _utils, _debug) {
    'use strict';

    exports.counters = exports.meta = exports.Meta = exports.UNDEFINED = undefined;
    exports.setMeta = setMeta;
    exports.peekMeta = peekMeta;
    exports.deleteMeta = deleteMeta;
    exports.descriptorFor = descriptorFor;
    exports.isDescriptor = isDescriptor;


    var objectPrototype = Object.prototype;
    var counters = void 0;
    if (true /* DEBUG */) {
            exports.counters = counters = {
                peekCalls: 0,
                peekPrototypeWalks: 0,
                setCalls: 0,
                deleteCalls: 0,
                metaCalls: 0,
                metaInstantiated: 0,
                matchingListenersCalls: 0,
                addToListenersCalls: 0,
                removeFromListenersCalls: 0,
                removeAllListenersCalls: 0,
                listenersInherited: 0,
                listenersFlattened: 0,
                parentListenersUsed: 0,
                flattenedListenersCalls: 0,
                reopensAfterFlatten: 0
            };
        }
    /**
    @module ember
    */
    var UNDEFINED = exports.UNDEFINED = (0, _utils.symbol)('undefined');
    var currentListenerVersion = 1;
    var Meta = exports.Meta = function () {
        function Meta(obj) {
            (0, _emberBabel.classCallCheck)(this, Meta);

            this._listenersVersion = 1;
            this._inheritedEnd = -1;
            this._flattenedVersion = 0;
            if (true /* DEBUG */) {
                    counters.metaInstantiated++;
                    this._values = undefined;
                }
            this._parent = undefined;
            this._descriptors = undefined;
            this._watching = undefined;
            this._mixins = undefined;
            this._deps = undefined;
            this._chainWatchers = undefined;
            this._chains = undefined;
            this._tag = undefined;
            this._tags = undefined;
            // initial value for all flags right now is false
            // see FLAGS const for detailed list of flags used
            this._flags = 0 /* NONE */;
            // used only internally
            this.source = obj;
            this.proto = obj.constructor === undefined ? undefined : obj.constructor.prototype;
            this._listeners = undefined;
        }

        Meta.prototype.setInitializing = function setInitializing() {
            this._flags |= 8 /* INITIALIZING */;
        };

        Meta.prototype.unsetInitializing = function unsetInitializing() {
            this._flags ^= 8 /* INITIALIZING */;
        };

        Meta.prototype.isInitializing = function isInitializing() {
            return this._hasFlag(8 /* INITIALIZING */);
        };

        Meta.prototype.isPrototypeMeta = function isPrototypeMeta(obj) {
            return this.proto === this.source && this.source === obj;
        };

        Meta.prototype.destroy = function destroy() {
            if (this.isMetaDestroyed()) {
                return;
            }
            this.setMetaDestroyed();
            // remove chainWatchers to remove circular references that would prevent GC
            var chains = this.readableChains();
            if (chains !== undefined) {
                chains.destroy();
            }
        };

        Meta.prototype.isSourceDestroying = function isSourceDestroying() {
            return this._hasFlag(1 /* SOURCE_DESTROYING */);
        };

        Meta.prototype.setSourceDestroying = function setSourceDestroying() {
            this._flags |= 1 /* SOURCE_DESTROYING */;
        };

        Meta.prototype.isSourceDestroyed = function isSourceDestroyed() {
            return this._hasFlag(2 /* SOURCE_DESTROYED */);
        };

        Meta.prototype.setSourceDestroyed = function setSourceDestroyed() {
            this._flags |= 2 /* SOURCE_DESTROYED */;
        };

        Meta.prototype.isMetaDestroyed = function isMetaDestroyed() {
            return this._hasFlag(4 /* META_DESTROYED */);
        };

        Meta.prototype.setMetaDestroyed = function setMetaDestroyed() {
            this._flags |= 4 /* META_DESTROYED */;
        };

        Meta.prototype._hasFlag = function _hasFlag(flag) {
            return (this._flags & flag) === flag;
        };

        Meta.prototype._getOrCreateOwnMap = function _getOrCreateOwnMap(key) {
            return this[key] || (this[key] = Object.create(null));
        };

        Meta.prototype._getOrCreateOwnSet = function _getOrCreateOwnSet(key) {
            return this[key] || (this[key] = new Set());
        };

        Meta.prototype._findInherited1 = function _findInherited1(key) {
            var pointer = this;
            while (pointer !== null) {
                var map = pointer[key];
                if (map !== undefined) {
                    return map;
                }
                pointer = pointer.parent;
            }
        };

        Meta.prototype._findInherited2 = function _findInherited2(key, subkey) {
            var pointer = this;
            while (pointer !== null) {
                var map = pointer[key];
                if (map !== undefined) {
                    var value = map[subkey];
                    if (value !== undefined) {
                        return value;
                    }
                }
                pointer = pointer.parent;
            }
        };

        Meta.prototype._findInherited3 = function _findInherited3(key, subkey, subsubkey) {
            var pointer = this;
            while (pointer !== null) {
                var map = pointer[key];
                if (map !== undefined) {
                    var submap = map[subkey];
                    if (submap !== undefined) {
                        var value = submap[subsubkey];
                        if (value !== undefined) {
                            return value;
                        }
                    }
                }
                pointer = pointer.parent;
            }
        };

        Meta.prototype._hasInInheritedSet = function _hasInInheritedSet(key, value) {
            var pointer = this;
            while (pointer !== null) {
                var set = pointer[key];
                if (set !== undefined && set.has(value)) {
                    return true;
                }
                pointer = pointer.parent;
            }
            return false;
        };
        // Implements a member that provides a lazily created map of maps,
        // with inheritance at both levels.


        Meta.prototype.writeDeps = function writeDeps(subkey, itemkey, count) {
            true && !!this.isMetaDestroyed() && (0, _debug.assert)(this.isMetaDestroyed() ? 'Cannot modify dependent keys for `' + itemkey + '` on `' + (0, _utils.toString)(this.source) + '` after it has been destroyed.' : '', !this.isMetaDestroyed());

            var outerMap = this._getOrCreateOwnMap('_deps');
            var innerMap = outerMap[subkey];
            if (innerMap === undefined) {
                innerMap = outerMap[subkey] = Object.create(null);
            }
            innerMap[itemkey] = count;
        };

        Meta.prototype.peekDeps = function peekDeps(subkey, itemkey) {
            var val = this._findInherited3('_deps', subkey, itemkey);
            return val === undefined ? 0 : val;
        };

        Meta.prototype.hasDeps = function hasDeps(subkey) {
            var val = this._findInherited2('_deps', subkey);
            return val !== undefined;
        };

        Meta.prototype.forEachInDeps = function forEachInDeps(subkey, fn) {
            var pointer = this;
            var seen = void 0;
            var calls = void 0;
            while (pointer !== null) {
                var map = pointer._deps;
                if (map !== undefined) {
                    var innerMap = map[subkey];
                    if (innerMap !== undefined) {
                        for (var innerKey in innerMap) {
                            seen = seen === undefined ? new Set() : seen;
                            if (!seen.has(innerKey)) {
                                seen.add(innerKey);
                                if (innerMap[innerKey] > 0) {
                                    calls = calls || [];
                                    calls.push(innerKey);
                                }
                            }
                        }
                    }
                }
                pointer = pointer.parent;
            }
            if (calls !== undefined) {
                for (var i = 0; i < calls.length; i++) {
                    fn(calls[i]);
                }
            }
        };

        Meta.prototype.writableTags = function writableTags() {
            return this._getOrCreateOwnMap('_tags');
        };

        Meta.prototype.readableTags = function readableTags() {
            return this._tags;
        };

        Meta.prototype.writableTag = function writableTag(create) {
            true && !!this.isMetaDestroyed() && (0, _debug.assert)(this.isMetaDestroyed() ? 'Cannot create a new tag for `' + (0, _utils.toString)(this.source) + '` after it has been destroyed.' : '', !this.isMetaDestroyed());

            var ret = this._tag;
            if (ret === undefined) {
                ret = this._tag = create(this.source);
            }
            return ret;
        };

        Meta.prototype.readableTag = function readableTag() {
            return this._tag;
        };

        Meta.prototype.writableChainWatchers = function writableChainWatchers(create) {
            true && !!this.isMetaDestroyed() && (0, _debug.assert)(this.isMetaDestroyed() ? 'Cannot create a new chain watcher for `' + (0, _utils.toString)(this.source) + '` after it has been destroyed.' : '', !this.isMetaDestroyed());

            var ret = this._chainWatchers;
            if (ret === undefined) {
                ret = this._chainWatchers = create(this.source);
            }
            return ret;
        };

        Meta.prototype.readableChainWatchers = function readableChainWatchers() {
            return this._chainWatchers;
        };

        Meta.prototype.writableChains = function writableChains(create) {
            true && !!this.isMetaDestroyed() && (0, _debug.assert)(this.isMetaDestroyed() ? 'Cannot create a new chains for `' + (0, _utils.toString)(this.source) + '` after it has been destroyed.' : '', !this.isMetaDestroyed());

            var ret = this._chains;

            if (ret === undefined) {
                this._chains = ret = create(this.source);
                var parent = this.parent;

                if (parent !== null) {
                    var parentChains = parent.writableChains(create);
                    parentChains.copyTo(ret);
                }
            }
            return ret;
        };

        Meta.prototype.readableChains = function readableChains() {
            return this._findInherited1('_chains');
        };

        Meta.prototype.writeWatching = function writeWatching(subkey, value) {
            true && !!this.isMetaDestroyed() && (0, _debug.assert)(this.isMetaDestroyed() ? 'Cannot update watchers for `' + subkey + '` on `' + (0, _utils.toString)(this.source) + '` after it has been destroyed.' : '', !this.isMetaDestroyed());

            var map = this._getOrCreateOwnMap('_watching');
            map[subkey] = value;
        };

        Meta.prototype.peekWatching = function peekWatching(subkey) {
            var count = this._findInherited2('_watching', subkey);
            return count === undefined ? 0 : count;
        };

        Meta.prototype.addMixin = function addMixin(mixin) {
            true && !!this.isMetaDestroyed() && (0, _debug.assert)(this.isMetaDestroyed() ? 'Cannot add mixins of `' + (0, _utils.toString)(mixin) + '` on `' + (0, _utils.toString)(this.source) + '` call addMixin after it has been destroyed.' : '', !this.isMetaDestroyed());

            var set = this._getOrCreateOwnSet('_mixins');
            set.add(mixin);
        };

        Meta.prototype.hasMixin = function hasMixin(mixin) {
            return this._hasInInheritedSet('_mixins', mixin);
        };

        Meta.prototype.forEachMixins = function forEachMixins(fn) {
            var pointer = this;
            var seen = void 0;
            while (pointer !== null) {
                var set = pointer._mixins;
                if (set !== undefined) {
                    seen = seen === undefined ? new Set() : seen;
                    // TODO cleanup typing here
                    set.forEach(function (mixin) {
                        if (!seen.has(mixin)) {
                            seen.add(mixin);
                            fn(mixin);
                        }
                    });
                }
                pointer = pointer.parent;
            }
        };

        Meta.prototype.writeDescriptors = function writeDescriptors(subkey, value) {
            true && !!this.isMetaDestroyed() && (0, _debug.assert)(this.isMetaDestroyed() ? 'Cannot update descriptors for `' + subkey + '` on `' + (0, _utils.toString)(this.source) + '` after it has been destroyed.' : '', !this.isMetaDestroyed());

            var map = this._getOrCreateOwnMap('_descriptors');
            map[subkey] = value;
        };

        Meta.prototype.peekDescriptors = function peekDescriptors(subkey) {
            var possibleDesc = this._findInherited2('_descriptors', subkey);
            return possibleDesc === UNDEFINED ? undefined : possibleDesc;
        };

        Meta.prototype.removeDescriptors = function removeDescriptors(subkey) {
            this.writeDescriptors(subkey, UNDEFINED);
        };

        Meta.prototype.forEachDescriptors = function forEachDescriptors(fn) {
            var pointer = this;
            var seen = void 0;
            while (pointer !== null) {
                var map = pointer._descriptors;
                if (map !== undefined) {
                    for (var key in map) {
                        seen = seen === undefined ? new Set() : seen;
                        if (!seen.has(key)) {
                            seen.add(key);
                            var value = map[key];
                            if (value !== UNDEFINED) {
                                fn(key, value);
                            }
                        }
                    }
                }
                pointer = pointer.parent;
            }
        };

        Meta.prototype.addToListeners = function addToListeners(eventName, target, method, once) {
            if (true /* DEBUG */) {
                    counters.addToListenersCalls++;
                }
            this.pushListener(eventName, target, method, once ? 1 /* ONCE */ : 0 /* ADD */);
        };

        Meta.prototype.removeFromListeners = function removeFromListeners(eventName, target, method) {
            if (true /* DEBUG */) {
                    counters.removeFromListenersCalls++;
                }
            this.pushListener(eventName, target, method, 2 /* REMOVE */);
        };

        Meta.prototype.removeAllListeners = function removeAllListeners(event) {
            true && !false && (0, _debug.deprecate)('The remove all functionality of removeListener and removeObserver has been deprecated. Remove each listener/observer individually instead.', false, {
                id: 'events.remove-all-listeners',
                until: '3.9.0',
                url: 'https://emberjs.com/deprecations/v3.x#toc_events-remove-all-listeners'
            });

            if (true /* DEBUG */) {
                    counters.removeAllListenersCalls++;
                }
            var listeners = this.writableListeners();
            var inheritedEnd = this._inheritedEnd;
            // remove all listeners of event name
            // adjusting the inheritedEnd if listener is below it
            for (var i = listeners.length - 1; i >= 0; i--) {
                var listener = listeners[i];
                if (listener.event === event) {
                    listeners.splice(i, 1);
                    if (i < inheritedEnd) {
                        inheritedEnd--;
                    }
                }
            }
            this._inheritedEnd = inheritedEnd;
            // we put remove alls at start because rare and easy to check there
            listeners.splice(inheritedEnd, 0, {
                event: event,
                target: null,
                method: null,
                kind: 3 /* REMOVE_ALL */
            });
        };

        Meta.prototype.pushListener = function pushListener(event, target, method, kind) {
            var listeners = this.writableListeners();
            var i = indexOfListener(listeners, event, target, method);
            // remove if found listener was inherited
            if (i !== -1 && i < this._inheritedEnd) {
                listeners.splice(i, 1);
                this._inheritedEnd--;
                i = -1;
            }
            // if not found, push. Note that we must always push if a listener is not
            // found, even in the case of a function listener remove, because we may be
            // attempting to add or remove listeners _before_ flattening has occured.
            if (i === -1) {
                true && !!(this.isPrototypeMeta(this.source) && typeof method === 'function') && (0, _debug.deprecate)('Adding function listeners to prototypes has been deprecated. Convert the listener to a string listener, or add it to the instance instead.', !(this.isPrototypeMeta(this.source) && typeof method === 'function'), {
                    id: 'events.inherited-function-listeners',
                    until: '3.9.0',
                    url: 'https://emberjs.com/deprecations/v3.x#toc_events-inherited-function-listeners'
                });
                true && !!(!this.isPrototypeMeta(this.source) && typeof method === 'function' && kind === 2 /* REMOVE */) && (0, _debug.deprecate)('You attempted to remove a function listener which did not exist on the instance, which means it was an inherited prototype listener, or you attempted to remove it before it was added. Prototype function listeners have been deprecated, and attempting to remove a non-existent function listener this will error in the future.', !(!this.isPrototypeMeta(this.source) && typeof method === 'function' && kind === 2), {
                    id: 'events.inherited-function-listeners',
                    until: '3.9.0',
                    url: 'https://emberjs.com/deprecations/v3.x#toc_events-inherited-function-listeners'
                });

                listeners.push({
                    event: event,
                    target: target,
                    method: method,
                    kind: kind
                });
            } else {
                var listener = listeners[i];
                // If the listener is our own function listener and we are trying to
                // remove it, we want to splice it out entirely so we don't hold onto a
                // reference.
                if (kind === 2 /* REMOVE */ && listener.kind !== 2 /* REMOVE */ && typeof method === 'function') {
                    listeners.splice(i, 1);
                } else {
                    // update own listener
                    listener.kind = kind;
                    // TODO: Remove this when removing REMOVE_ALL, it won't be necessary
                    listener.target = target;
                    listener.method = method;
                }
            }
        };

        Meta.prototype.writableListeners = function writableListeners() {
            // Check if we need to invalidate and reflatten. We need to do this if we
            // have already flattened (flattened version is the current version) and
            // we are either writing to a prototype meta OR we have never inherited, and
            // may have cached the parent's listeners.
            if (this._flattenedVersion === currentListenerVersion && (this.source === this.proto || this._inheritedEnd === -1)) {
                if (true /* DEBUG */) {
                        counters.reopensAfterFlatten++;
                    }
                currentListenerVersion++;
            }
            // Inherited end has not been set, then we have never created our own
            // listeners, but may have cached the parent's
            if (this._inheritedEnd === -1) {
                this._inheritedEnd = 0;
                this._listeners = [];
            }
            return this._listeners;
        };
        /**
          Flattening is based on a global revision counter. If the revision has
          bumped it means that somewhere in a class inheritance chain something has
          changed, so we need to reflatten everything. This can only happen if:
             1. A meta has been flattened (listener has been called)
          2. The meta is a prototype meta with children who have inherited its
             listeners
          3. A new listener is subsequently added to the meta (e.g. via `.reopen()`)
             This is a very rare occurence, so while the counter is global it shouldn't
          be updated very often in practice.
        */

        Meta.prototype.flattenedListeners = function flattenedListeners() {
            if (true /* DEBUG */) {
                    counters.flattenedListenersCalls++;
                }
            if (this._flattenedVersion < currentListenerVersion) {
                if (true /* DEBUG */) {
                        counters.listenersFlattened++;
                    }
                var parent = this.parent;
                if (parent !== null) {
                    // compute
                    var parentListeners = parent.flattenedListeners();
                    if (parentListeners !== undefined) {
                        if (this._listeners === undefined) {
                            // If this instance doesn't have any of its own listeners (writableListeners
                            // has never been called) then we don't need to do any flattening, return
                            // the parent's listeners instead.
                            if (true /* DEBUG */) {
                                    counters.parentListenersUsed++;
                                }
                            this._listeners = parentListeners;
                        } else {
                            var listeners = this._listeners;
                            if (this._inheritedEnd > 0) {
                                listeners.splice(0, this._inheritedEnd);
                                this._inheritedEnd = 0;
                            }
                            for (var i = 0; i < parentListeners.length; i++) {
                                var listener = parentListeners[i];
                                var index = indexOfListener(listeners, listener.event, listener.target, listener.method);
                                if (index === -1) {
                                    if (true /* DEBUG */) {
                                            counters.listenersInherited++;
                                        }
                                    listeners.unshift(listener);
                                    this._inheritedEnd++;
                                }
                            }
                        }
                    }
                }
                this._flattenedVersion = currentListenerVersion;
            }
            return this._listeners;
        };

        Meta.prototype.matchingListeners = function matchingListeners(eventName) {
            var listeners = this.flattenedListeners();
            var result = void 0;
            if (true /* DEBUG */) {
                    counters.matchingListenersCalls++;
                }
            if (listeners !== undefined) {
                for (var index = 0; index < listeners.length; index++) {
                    var listener = listeners[index];
                    // REMOVE and REMOVE_ALL listeners are placeholders that tell us not to
                    // inherit, so they never match. Only ADD and ONCE can match.
                    if (listener.event === eventName && (listener.kind === 0 /* ADD */ || listener.kind === 1 /* ONCE */)) {
                        if (result === undefined) {
                            // we create this array only after we've found a listener that
                            // matches to avoid allocations when no matches are found.
                            result = [];
                        }
                        result.push(listener.target, listener.method, listener.kind === 1 /* ONCE */);
                    }
                }
            }
            return result;
        };

        (0, _emberBabel.createClass)(Meta, [{
            key: 'parent',
            get: function () {
                var parent = this._parent;
                if (parent === undefined) {
                    var proto = getPrototypeOf(this.source);
                    this._parent = parent = proto === null || proto === objectPrototype ? null : meta(proto);
                }
                return parent;
            }
        }]);

        return Meta;
    }();
    if (true /* DEBUG */) {
            Meta.prototype.writeValues = function (subkey, value) {
                true && !!this.isMetaDestroyed() && (0, _debug.assert)(this.isMetaDestroyed() ? 'Cannot set the value of `' + subkey + '` on `' + (0, _utils.toString)(this.source) + '` after it has been destroyed.' : '', !this.isMetaDestroyed());

                var map = this._getOrCreateOwnMap('_values');
                map[subkey] = value;
            };
            Meta.prototype.peekValues = function (subkey) {
                return this._findInherited2('_values', subkey);
            };
            Meta.prototype.deleteFromValues = function (subkey) {
                delete this._getOrCreateOwnMap('_values')[subkey];
            };
            Meta.prototype.readInheritedValue = function (key, subkey) {
                var internalKey = '_' + key;
                var pointer = this;
                while (pointer !== null) {
                    var map = pointer[internalKey];
                    if (map !== undefined) {
                        var value = map[subkey];
                        if (value !== undefined || subkey in map) {
                            return value;
                        }
                    }
                    pointer = pointer.parent;
                }
                return UNDEFINED;
            };
            Meta.prototype.writeValue = function (obj, key, value) {
                var descriptor = (0, _utils.lookupDescriptor)(obj, key);
                var isMandatorySetter = descriptor !== null && descriptor.set && descriptor.set.isMandatorySetter;
                if (isMandatorySetter) {
                    this.writeValues(key, value);
                } else {
                    obj[key] = value;
                }
            };
        }
    var getPrototypeOf = Object.getPrototypeOf;
    var metaStore = new WeakMap();
    function setMeta(obj, meta) {
        true && !(obj !== null) && (0, _debug.assert)('Cannot call `setMeta` on null', obj !== null);
        true && !(obj !== undefined) && (0, _debug.assert)('Cannot call `setMeta` on undefined', obj !== undefined);
        true && !(typeof obj === 'object' || typeof obj === 'function') && (0, _debug.assert)('Cannot call `setMeta` on ' + typeof obj, typeof obj === 'object' || typeof obj === 'function');

        if (true /* DEBUG */) {
                counters.setCalls++;
            }
        metaStore.set(obj, meta);
    }
    function peekMeta(obj) {
        true && !(obj !== null) && (0, _debug.assert)('Cannot call `peekMeta` on null', obj !== null);
        true && !(obj !== undefined) && (0, _debug.assert)('Cannot call `peekMeta` on undefined', obj !== undefined);
        true && !(typeof obj === 'object' || typeof obj === 'function') && (0, _debug.assert)('Cannot call `peekMeta` on ' + typeof obj, typeof obj === 'object' || typeof obj === 'function');

        if (true /* DEBUG */) {
                counters.peekCalls++;
            }
        var meta = metaStore.get(obj);
        if (meta !== undefined) {
            return meta;
        }
        var pointer = getPrototypeOf(obj);
        while (pointer !== undefined && pointer !== null) {
            if (true /* DEBUG */) {
                    counters.peekPrototypeWalks++;
                }
            meta = metaStore.get(pointer);
            if (meta !== undefined) {
                if (meta.proto !== pointer) {
                    // The meta was a prototype meta which was not marked as initializing.
                    // This can happen when a prototype chain was created manually via
                    // Object.create() and the source object does not have a constructor.
                    meta.proto = pointer;
                }
                return meta;
            }
            pointer = getPrototypeOf(pointer);
        }
    }
    /**
      Tears down the meta on an object so that it can be garbage collected.
      Multiple calls will have no effect.
    
      @method deleteMeta
      @for Ember
      @param {Object} obj  the object to destroy
      @return {void}
      @private
    */
    function deleteMeta(obj) {
        true && !(obj !== null) && (0, _debug.assert)('Cannot call `deleteMeta` on null', obj !== null);
        true && !(obj !== undefined) && (0, _debug.assert)('Cannot call `deleteMeta` on undefined', obj !== undefined);
        true && !(typeof obj === 'object' || typeof obj === 'function') && (0, _debug.assert)('Cannot call `deleteMeta` on ' + typeof obj, typeof obj === 'object' || typeof obj === 'function');

        if (true /* DEBUG */) {
                counters.deleteCalls++;
            }
        var meta = peekMeta(obj);
        if (meta !== undefined) {
            meta.destroy();
        }
    }
    /**
      Retrieves the meta hash for an object. If `writable` is true ensures the
      hash is writable for this object as well.
    
      The meta object contains information about computed property descriptors as
      well as any watched properties and other information. You generally will
      not access this information directly but instead work with higher level
      methods that manipulate this hash indirectly.
    
      @method meta
      @for Ember
      @private
    
      @param {Object} obj The object to retrieve meta for
      @param {Boolean} [writable=true] Pass `false` if you do not intend to modify
        the meta hash, allowing the method to avoid making an unnecessary copy.
      @return {Object} the meta hash for an object
    */
    var meta = exports.meta = function meta(obj) {
        true && !(obj !== null) && (0, _debug.assert)('Cannot call `meta` on null', obj !== null);
        true && !(obj !== undefined) && (0, _debug.assert)('Cannot call `meta` on undefined', obj !== undefined);
        true && !(typeof obj === 'object' || typeof obj === 'function') && (0, _debug.assert)('Cannot call `meta` on ' + typeof obj, typeof obj === 'object' || typeof obj === 'function');

        if (true /* DEBUG */) {
                counters.metaCalls++;
            }
        var maybeMeta = peekMeta(obj);
        // remove this code, in-favor of explicit parent
        if (maybeMeta !== undefined && maybeMeta.source === obj) {
            return maybeMeta;
        }
        var newMeta = new Meta(obj);
        setMeta(obj, newMeta);
        return newMeta;
    };
    if (true /* DEBUG */) {
            meta._counters = counters;
        }
    /**
      Returns the CP descriptor assocaited with `obj` and `keyName`, if any.
    
      @method descriptorFor
      @param {Object} obj the object to check
      @param {String} keyName the key to check
      @return {Descriptor}
      @private
    */
    function descriptorFor(obj, keyName, _meta) {
        true && !(obj !== null) && (0, _debug.assert)('Cannot call `descriptorFor` on null', obj !== null);
        true && !(obj !== undefined) && (0, _debug.assert)('Cannot call `descriptorFor` on undefined', obj !== undefined);
        true && !(typeof obj === 'object' || typeof obj === 'function') && (0, _debug.assert)('Cannot call `descriptorFor` on ' + typeof obj, typeof obj === 'object' || typeof obj === 'function');

        var meta = _meta === undefined ? peekMeta(obj) : _meta;
        if (meta !== undefined) {
            return meta.peekDescriptors(keyName);
        }
    }
    /**
      Check whether a value is a CP descriptor.
    
      @method descriptorFor
      @param {any} possibleDesc the value to check
      @return {boolean}
      @private
    */
    function isDescriptor(possibleDesc) {
        // TODO make this return `possibleDesc is Descriptor`
        return possibleDesc !== undefined && possibleDesc !== null && typeof possibleDesc === 'object' && possibleDesc.isDescriptor === true;
    }
    exports.counters = counters;

    function indexOfListener(listeners, event, target, method) {
        for (var i = listeners.length - 1; i >= 0; i--) {
            var listener = listeners[i];
            if (listener.event === event && (listener.target === target && listener.method === method || listener.kind === 3 /* REMOVE_ALL */)) {
                return i;
            }
        }
        return -1;
    }
});
enifed('@ember/-internals/metal', ['exports', 'ember-babel', '@ember/polyfills', '@ember/-internals/utils', '@ember/-internals/meta', '@ember/debug', '@ember/runloop', '@glimmer/reference', '@ember/error', 'ember/version', '@ember/-internals/environment', '@ember/-internals/owner'], function (exports, _emberBabel, _polyfills, _utils, _meta2, _debug, _runloop, _reference, _error, _version, _environment, _owner) {
    'use strict';

    exports.setNamespaceSearchDisabled = exports.isNamespaceSearchDisabled = exports.removeNamespace = exports.processAllNamespaces = exports.processNamespace = exports.findNamespaces = exports.findNamespace = exports.classToString = exports.addNamespace = exports.NAMESPACES_BY_ID = exports.NAMESPACES = exports.tracked = exports.descriptor = exports.assertNotRendered = exports.didRender = exports.runInTransaction = exports.markObjectAsDirty = exports.tagFor = exports.tagForProperty = exports.setHasViews = exports.InjectedProperty = exports.applyMixin = exports.observer = exports.mixin = exports.aliasMethod = exports.Mixin = exports.removeObserver = exports.addObserver = exports.expandProperties = exports.setProperties = exports.getProperties = exports.Libraries = exports.libraries = exports.watcherCount = exports.watch = exports.unwatch = exports.isWatching = exports.unwatchPath = exports.watchPath = exports.removeChainWatcher = exports.finishChains = exports.ChainNode = exports.unwatchKey = exports.watchKey = exports.Descriptor = exports.defineProperty = exports.PROPERTY_DID_CHANGE = exports.overrideChains = exports.notifyPropertyChange = exports.endPropertyChanges = exports.changeProperties = exports.beginPropertyChanges = exports.isPresent = exports.isBlank = exports.isEmpty = exports.isNone = exports.sendEvent = exports.removeListener = exports.on = exports.hasListeners = exports.addListener = exports.eachProxyArrayDidChange = exports.eachProxyArrayWillChange = exports.eachProxyFor = exports.arrayContentDidChange = exports.arrayContentWillChange = exports.removeArrayObserver = exports.addArrayObserver = exports.replaceInNativeArray = exports.replace = exports.objectAt = exports.trySet = exports.set = exports.getWithDefault = exports.get = exports._getPath = exports.PROXY_CONTENT = exports.deprecateProperty = exports.alias = exports.peekCacheFor = exports.getCachedValueFor = exports.getCacheFor = exports._globalsComputed = exports.ComputedProperty = exports.computed = undefined;


    var COMPUTED_PROPERTY_CACHED_VALUES = new WeakMap();
    var COMPUTED_PROPERTY_LAST_REVISION = false /* EMBER_METAL_TRACKED_PROPERTIES */ ? new WeakMap() : undefined;
    /**
      Returns the cached value for a property, if one exists.
      This can be useful for peeking at the value of a computed
      property that is generated lazily, without accidentally causing
      it to be created.
    
      @method cacheFor
      @static
      @for @ember/object/internals
      @param {Object} obj the object whose property you want to check
      @param {String} key the name of the property whose cached value you want
        to return
      @return {Object} the cached value
      @public
    */
    function getCacheFor(obj) {
        var cache = COMPUTED_PROPERTY_CACHED_VALUES.get(obj);
        if (cache === undefined) {
            cache = new Map();
            if (false /* EMBER_METAL_TRACKED_PROPERTIES */) {
                    COMPUTED_PROPERTY_LAST_REVISION.set(obj, new Map());
                }
            COMPUTED_PROPERTY_CACHED_VALUES.set(obj, cache);
        }
        return cache;
    }
    function getCachedValueFor(obj, key) {
        var cache = COMPUTED_PROPERTY_CACHED_VALUES.get(obj);
        if (cache !== undefined) {
            return cache.get(key);
        }
    }
    var setLastRevisionFor = void 0;
    var getLastRevisionFor = void 0;
    if (false /* EMBER_METAL_TRACKED_PROPERTIES */) {
            setLastRevisionFor = function (obj, key, revision) {
                var lastRevision = COMPUTED_PROPERTY_LAST_REVISION.get(obj);
                lastRevision.set(key, revision);
            };
            getLastRevisionFor = function (obj, key) {
                var cache = COMPUTED_PROPERTY_LAST_REVISION.get(obj);
                if (cache === undefined) {
                    return 0;
                } else {
                    var revision = cache.get(key);
                    return revision === undefined ? 0 : revision;
                }
            };
        }
    function peekCacheFor(obj) {
        return COMPUTED_PROPERTY_CACHED_VALUES.get(obj);
    }

    var firstDotIndexCache = new _utils.Cache(1000, function (key) {
        return key.indexOf('.');
    });
    function isPath(path) {
        return typeof path === 'string' && firstDotIndexCache.get(path) !== -1;
    }

    var AFTER_OBSERVERS = ':change';
    function changeEvent(keyName) {
        return keyName + AFTER_OBSERVERS;
    }

    /**
    @module @ember/object
    */
    /*
      The event system uses a series of nested hashes to store listeners on an
      object. When a listener is registered, or when an event arrives, these
      hashes are consulted to determine which target and action pair to invoke.
    
      The hashes are stored in the object's meta hash, and look like this:
    
          // Object's meta hash
          {
            listeners: {       // variable name: `listenerSet`
              "foo:change": [ // variable name: `actions`
                target, method, once
              ]
            }
          }
    
    */
    /**
      Add an event listener
    
      @method addListener
      @static
      @for @ember/object/events
      @param obj
      @param {String} eventName
      @param {Object|Function} target A target object or a function
      @param {Function|String} method A function or the name of a function to be called on `target`
      @param {Boolean} once A flag whether a function should only be called once
      @public
    */
    function addListener(obj, eventName, target, method, once) {
        true && !(!!obj && !!eventName) && (0, _debug.assert)('You must pass at least an object and event name to addListener', !!obj && !!eventName);

        if (!method && 'function' === typeof target) {
            method = target;
            target = null;
        }
        (0, _meta2.meta)(obj).addToListeners(eventName, target, method, once === true);
    }
    /**
      Remove an event listener
    
      Arguments should match those passed to `addListener`.
    
      @method removeListener
      @static
      @for @ember/object/events
      @param obj
      @param {String} eventName
      @param {Object|Function} target A target object or a function
      @param {Function|String} method A function or the name of a function to be called on `target`
      @public
    */
    function removeListener(obj, eventName, target, method) {
        true && !(!!obj && !!eventName) && (0, _debug.assert)('You must pass at least an object and event name to removeListener', !!obj && !!eventName);

        if (!method && 'function' === typeof target) {
            method = target;
            target = null;
        }
        var m = (0, _meta2.meta)(obj);
        if (method === undefined) {
            m.removeAllListeners(eventName);
        } else {
            m.removeFromListeners(eventName, target, method);
        }
    }
    /**
      Send an event. The execution of suspended listeners
      is skipped, and once listeners are removed. A listener without
      a target is executed on the passed object. If an array of actions
      is not passed, the actions stored on the passed object are invoked.
    
      @method sendEvent
      @static
      @for @ember/object/events
      @param obj
      @param {String} eventName
      @param {Array} params Optional parameters for each listener.
      @return true
      @public
    */
    function sendEvent(obj, eventName, params, actions, _meta) {
        if (actions === undefined) {
            var meta$$1 = _meta === undefined ? (0, _meta2.peekMeta)(obj) : _meta;
            actions = typeof meta$$1 === 'object' && meta$$1 !== null && meta$$1.matchingListeners(eventName);
        }
        if (actions === undefined || actions.length === 0) {
            return false;
        }
        for (var i = actions.length - 3; i >= 0; i -= 3) {
            // looping in reverse for once listeners
            var target = actions[i];
            var method = actions[i + 1];
            var once = actions[i + 2];
            if (!method) {
                continue;
            }
            if (once) {
                removeListener(obj, eventName, target, method);
            }
            if (!target) {
                target = obj;
            }
            if ('string' === typeof method) {
                method = target[method];
            }
            method.apply(target, params);
        }
        return true;
    }
    /**
      @private
      @method hasListeners
      @static
      @for @ember/object/events
      @param obj
      @param {String} eventName
    */
    function hasListeners(obj, eventName) {
        var meta$$1 = (0, _meta2.peekMeta)(obj);
        if (meta$$1 === undefined) {
            return false;
        }
        var matched = meta$$1.matchingListeners(eventName);
        return matched !== undefined && matched.length > 0;
    }
    /**
      Define a property as a function that should be executed when
      a specified event or events are triggered.
    
      ``` javascript
      import EmberObject from '@ember/object';
      import { on } from '@ember/object/evented';
      import { sendEvent } from '@ember/object/events';
    
      let Job = EmberObject.extend({
        logCompleted: on('completed', function() {
          console.log('Job completed!');
        })
      });
    
      let job = Job.create();
    
      sendEvent(job, 'completed'); // Logs 'Job completed!'
     ```
    
      @method on
      @static
      @for @ember/object/evented
      @param {String} eventNames*
      @param {Function} func
      @return func
      @public
    */
    function on() {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        var func = args.pop();
        var events = args;
        true && !(typeof func === 'function') && (0, _debug.assert)('on expects function as last argument', typeof func === 'function');
        true && !(events.length > 0 && events.every(function (p) {
            return typeof p === 'string' && p.length > 0;
        })) && (0, _debug.assert)('on called without valid event names', events.length > 0 && events.every(function (p) {
            return typeof p === 'string' && p.length > 0;
        }));

        (0, _utils.setListeners)(func, events);
        return func;
    }

    /**
      ObserverSet is a data structure used to keep track of observers
      that have been deferred.
    
      It ensures that observers are called in the same order that they
      were initially triggered.
    
      It also ensures that observers for any object-key pairs are called
      only once, even if they were triggered multiple times while
      deferred. In this case, the order that the observer is called in
      will depend on the first time the observer was triggered.
    
      @private
      @class ObserverSet
    */

    var ObserverSet = function () {
        function ObserverSet() {
            (0, _emberBabel.classCallCheck)(this, ObserverSet);

            this.added = new Map();
            this.queue = [];
        }

        ObserverSet.prototype.add = function add(object, key, event) {
            var keys = this.added.get(object);
            if (keys === undefined) {
                keys = new Set();
                this.added.set(object, keys);
            }
            if (!keys.has(key)) {
                this.queue.push(object, key, event);
                keys.add(key);
            }
        };

        ObserverSet.prototype.flush = function flush() {
            // The queue is saved off to support nested flushes.
            var queue = this.queue;
            this.added.clear();
            this.queue = [];
            for (var i = 0; i < queue.length; i += 3) {
                var object = queue[i];
                var key = queue[i + 1];
                var event = queue[i + 2];
                if (object.isDestroying || object.isDestroyed) {
                    continue;
                }
                sendEvent(object, event, [object, key]);
            }
        };

        return ObserverSet;
    }();

    var hasViews = function () {
        return false;
    };
    function setHasViews(fn) {
        hasViews = fn;
    }
    function makeTag() {
        return _reference.DirtyableTag.create();
    }
    function tagForProperty(object, propertyKey, _meta) {
        if (typeof object !== 'object' || object === null) {
            return _reference.CONSTANT_TAG;
        }
        var meta$$1 = _meta === undefined ? (0, _meta2.meta)(object) : _meta;
        if ((0, _utils.isProxy)(object)) {
            return tagFor(object, meta$$1);
        }
        var tags = meta$$1.writableTags();
        var tag = tags[propertyKey];
        if (tag) {
            return tag;
        }
        if (false /* EMBER_METAL_TRACKED_PROPERTIES */) {
                var pair = (0, _reference.combine)([makeTag(), _reference.UpdatableTag.create(_reference.CONSTANT_TAG)]);
                return tags[propertyKey] = pair;
            } else {
            return tags[propertyKey] = makeTag();
        }
    }
    function tagFor(object, _meta) {
        if (typeof object === 'object' && object !== null) {
            var meta$$1 = _meta === undefined ? (0, _meta2.meta)(object) : _meta;
            return meta$$1.writableTag(makeTag);
        } else {
            return _reference.CONSTANT_TAG;
        }
    }
    var dirty = void 0;
    var update = void 0;
    if (false /* EMBER_METAL_TRACKED_PROPERTIES */) {
            dirty = function (tag) {
                tag.inner.first.inner.dirty();
            };
            update = function (outer, inner) {
                outer.inner.second.inner.update(inner);
            };
        } else {
        dirty = function (tag) {
            tag.inner.dirty();
        };
    }
    function markObjectAsDirty(obj, propertyKey, meta$$1) {
        var objectTag = meta$$1.readableTag();
        if (objectTag !== undefined) {
            if ((0, _utils.isProxy)(obj)) {
                objectTag.inner.first.inner.dirty();
            } else {
                objectTag.inner.dirty();
            }
        }
        var tags = meta$$1.readableTags();
        var propertyTag = tags !== undefined ? tags[propertyKey] : undefined;
        if (propertyTag !== undefined) {
            dirty(propertyTag);
        }
        if (objectTag !== undefined || propertyTag !== undefined) {
            ensureRunloop();
        }
    }
    function ensureRunloop() {
        if (hasViews()) {
            _runloop.backburner.ensureInstance();
        }
    }

    var runInTransaction = void 0;
    var didRender = void 0;
    var assertNotRendered = void 0;
    // detect-backtracking-rerender by default is debug build only
    if (true /* DEBUG */) {
            // there are 2 states
            // DEBUG
            // tracks lastRef and lastRenderedIn per rendered object and key during a transaction
            // release everything via normal weakmap semantics by just derefencing the weakmap
            // RELEASE
            // tracks transactionId per rendered object and key during a transaction
            // release everything via normal weakmap semantics by just derefencing the weakmap
            var TransactionRunner = function () {
                function TransactionRunner() {
                    (0, _emberBabel.classCallCheck)(this, TransactionRunner);

                    this.transactionId = 0;
                    this.inTransaction = false;
                    this.shouldReflush = false;
                    this.weakMap = new WeakMap();
                    if (true /* DEBUG */) {
                            // track templates
                            this.debugStack = undefined;
                        }
                }

                TransactionRunner.prototype.runInTransaction = function runInTransaction(context$$1, methodName) {
                    this.before(context$$1);
                    try {
                        context$$1[methodName]();
                    } finally {
                        this.after();
                    }
                    return this.shouldReflush;
                };

                TransactionRunner.prototype.didRender = function didRender(object, key, reference) {
                    if (!this.inTransaction) {
                        return;
                    }
                    if (true /* DEBUG */) {
                            this.setKey(object, key, {
                                lastRef: reference,
                                lastRenderedIn: this.debugStack.peek()
                            });
                        } else {
                        this.setKey(object, key, this.transactionId);
                    }
                };

                TransactionRunner.prototype.assertNotRendered = function assertNotRendered(object, key) {
                    if (!this.inTransaction) {
                        return;
                    }
                    if (this.hasRendered(object, key)) {
                        if (true /* DEBUG */) {
                                var _getKey = this.getKey(object, key),
                                    lastRef = _getKey.lastRef,
                                    lastRenderedIn = _getKey.lastRenderedIn;

                                var currentlyIn = this.debugStack.peek();
                                var parts = [];
                                var label = void 0;
                                if (lastRef !== undefined) {
                                    while (lastRef && lastRef._propertyKey) {
                                        parts.unshift(lastRef._propertyKey);
                                        lastRef = lastRef._parentReference;
                                    }
                                    label = parts.join('.');
                                } else {
                                    label = 'the same value';
                                }
                                true && !false && (0, _debug.assert)('You modified "' + label + '" twice on ' + object + ' in a single render. It was rendered in ' + lastRenderedIn + ' and modified in ' + currentlyIn + '. This was unreliable and slow in Ember 1.x and is no longer supported. See https://github.com/emberjs/ember.js/issues/13948 for more details.', false);
                            }
                        this.shouldReflush = true;
                    }
                };

                TransactionRunner.prototype.hasRendered = function hasRendered(object, key) {
                    if (!this.inTransaction) {
                        return false;
                    }
                    if (true /* DEBUG */) {
                            return this.getKey(object, key) !== undefined;
                        }
                    return this.getKey(object, key) === this.transactionId;
                };

                TransactionRunner.prototype.before = function before(context$$1) {
                    this.inTransaction = true;
                    this.shouldReflush = false;
                    if (true /* DEBUG */) {
                            this.debugStack = context$$1.env.debugStack;
                        }
                };

                TransactionRunner.prototype.after = function after() {
                    this.transactionId++;
                    this.inTransaction = false;
                    if (true /* DEBUG */) {
                            this.debugStack = undefined;
                        }
                    this.clearObjectMap();
                };

                TransactionRunner.prototype.createMap = function createMap(object) {
                    var map = Object.create(null);
                    this.weakMap.set(object, map);
                    return map;
                };

                TransactionRunner.prototype.getOrCreateMap = function getOrCreateMap(object) {
                    var map = this.weakMap.get(object);
                    if (map === undefined) {
                        map = this.createMap(object);
                    }
                    return map;
                };

                TransactionRunner.prototype.setKey = function setKey(object, key, value) {
                    var map = this.getOrCreateMap(object);
                    map[key] = value;
                };

                TransactionRunner.prototype.getKey = function getKey(object, key) {
                    var map = this.weakMap.get(object);
                    if (map !== undefined) {
                        return map[key];
                    }
                };

                TransactionRunner.prototype.clearObjectMap = function clearObjectMap() {
                    this.weakMap = new WeakMap();
                };

                return TransactionRunner;
            }();

            var runner = new TransactionRunner();
            exports.runInTransaction = runInTransaction = runner.runInTransaction.bind(runner);
            exports.didRender = didRender = runner.didRender.bind(runner);
            exports.assertNotRendered = assertNotRendered = runner.assertNotRendered.bind(runner);
        } else {
        // in production do nothing to detect reflushes
        exports.runInTransaction = runInTransaction = function (context$$1, methodName) {
            context$$1[methodName]();
            return false;
        };
    }

    /**
     @module ember
     @private
     */
    var PROPERTY_DID_CHANGE = (0, _utils.symbol)('PROPERTY_DID_CHANGE');
    var observerSet = new ObserverSet();
    var deferred = 0;
    /**
      This function is called just after an object property has changed.
      It will notify any observers and clear caches among other things.
    
      Normally you will not need to call this method directly but if for some
      reason you can't directly watch a property you can invoke this method
      manually.
    
      @method notifyPropertyChange
      @for @ember/object
      @param {Object} obj The object with the property that will change
      @param {String} keyName The property key (or path) that will change.
      @param {Meta} meta The objects meta.
      @return {void}
      @since 3.1.0
      @public
    */
    function notifyPropertyChange(obj, keyName, _meta) {
        var meta$$1 = _meta === undefined ? (0, _meta2.peekMeta)(obj) : _meta;
        var hasMeta = meta$$1 !== undefined;
        if (hasMeta && (meta$$1.isInitializing() || meta$$1.isPrototypeMeta(obj))) {
            return;
        }
        var possibleDesc = (0, _meta2.descriptorFor)(obj, keyName, meta$$1);
        if (possibleDesc !== undefined && typeof possibleDesc.didChange === 'function') {
            possibleDesc.didChange(obj, keyName);
        }
        if (hasMeta && meta$$1.peekWatching(keyName) > 0) {
            dependentKeysDidChange(obj, keyName, meta$$1);
            chainsDidChange(obj, keyName, meta$$1);
            notifyObservers(obj, keyName, meta$$1);
        }
        if (PROPERTY_DID_CHANGE in obj) {
            obj[PROPERTY_DID_CHANGE](keyName);
        }
        if (hasMeta) {
            if (meta$$1.isSourceDestroying()) {
                return;
            }
            markObjectAsDirty(obj, keyName, meta$$1);
        }
        if (true /* DEBUG */) {
                assertNotRendered(obj, keyName);
            }
    }
    var SEEN_MAP = new Map();
    var IS_TOP_SEEN_MAP = true;
    // called whenever a property has just changed to update dependent keys
    function dependentKeysDidChange(obj, depKey, meta$$1) {
        if (meta$$1.isSourceDestroying() || !meta$$1.hasDeps(depKey)) {
            return;
        }
        var seen = SEEN_MAP;
        var isTop = IS_TOP_SEEN_MAP;
        if (isTop) {
            IS_TOP_SEEN_MAP = false;
        }
        iterDeps(notifyPropertyChange, obj, depKey, seen, meta$$1);
        if (isTop) {
            SEEN_MAP.clear();
            IS_TOP_SEEN_MAP = true;
        }
    }
    function iterDeps(method, obj, depKey, seen, meta$$1) {
        var current = seen.get(obj);
        if (current === undefined) {
            current = new Set();
            seen.set(obj, current);
        }
        if (current.has(depKey)) {
            return;
        }
        var possibleDesc = void 0;
        meta$$1.forEachInDeps(depKey, function (key) {
            possibleDesc = (0, _meta2.descriptorFor)(obj, key, meta$$1);
            if (possibleDesc !== undefined && possibleDesc._suspended === obj) {
                return;
            }
            method(obj, key, meta$$1);
        });
    }
    function chainsDidChange(_obj, keyName, meta$$1) {
        var chainWatchers = meta$$1.readableChainWatchers();
        if (chainWatchers !== undefined) {
            chainWatchers.notify(keyName, true, notifyPropertyChange);
        }
    }
    function overrideChains(_obj, keyName, meta$$1) {
        var chainWatchers = meta$$1.readableChainWatchers();
        if (chainWatchers !== undefined) {
            chainWatchers.revalidate(keyName);
        }
    }
    /**
      @method beginPropertyChanges
      @chainable
      @private
    */
    function beginPropertyChanges() {
        deferred++;
    }
    /**
      @method endPropertyChanges
      @private
    */
    function endPropertyChanges() {
        deferred--;
        if (deferred <= 0) {
            observerSet.flush();
        }
    }
    /**
      Make a series of property changes together in an
      exception-safe way.
    
      ```javascript
      Ember.changeProperties(function() {
        obj1.set('foo', mayBlowUpWhenSet);
        obj2.set('bar', baz);
      });
      ```
    
      @method changeProperties
      @param {Function} callback
      @private
    */
    function changeProperties(callback) {
        beginPropertyChanges();
        try {
            callback();
        } finally {
            endPropertyChanges();
        }
    }
    function notifyObservers(obj, keyName, meta$$1) {
        if (meta$$1.isSourceDestroying()) {
            return;
        }
        var eventName = changeEvent(keyName);
        if (deferred > 0) {
            observerSet.add(obj, keyName, eventName);
        } else {
            sendEvent(obj, eventName, [obj, keyName]);
        }
    }

    /**
    @module @ember/object
    */
    // ..........................................................
    // DESCRIPTOR
    //
    /**
      Objects of this type can implement an interface to respond to requests to
      get and set. The default implementation handles simple properties.
    
      @class Descriptor
      @private
    */

    var Descriptor = function () {
        function Descriptor() {
            (0, _emberBabel.classCallCheck)(this, Descriptor);

            this.isDescriptor = true;
            this.enumerable = true;
            this.configurable = true;
        }

        Descriptor.prototype.setup = function setup(obj, keyName, meta$$1) {
            Object.defineProperty(obj, keyName, {
                enumerable: this.enumerable,
                configurable: this.configurable,
                get: DESCRIPTOR_GETTER_FUNCTION(keyName, this)
            });
            meta$$1.writeDescriptors(keyName, this);
        };

        Descriptor.prototype.teardown = function teardown(_obj, keyName, meta$$1) {
            meta$$1.removeDescriptors(keyName);
        };

        return Descriptor;
    }();
    // ..........................................................
    // DEFINING PROPERTIES API
    //


    function MANDATORY_SETTER_FUNCTION(name) {
        function SETTER_FUNCTION(value) {
            var m = (0, _meta2.peekMeta)(this);
            if (m.isInitializing() || m.isPrototypeMeta(this)) {
                m.writeValues(name, value);
            } else {
                true && !false && (0, _debug.assert)('You must use set() to set the `' + name + '` property (of ' + this + ') to `' + value + '`.', false);
            }
        }
        return (0, _polyfills.assign)(SETTER_FUNCTION, { isMandatorySetter: true });
    }
    function DEFAULT_GETTER_FUNCTION(name) {
        return function GETTER_FUNCTION() {
            var meta$$1 = (0, _meta2.peekMeta)(this);
            if (meta$$1 !== undefined) {
                return meta$$1.peekValues(name);
            }
        };
    }
    function INHERITING_GETTER_FUNCTION(name) {
        function IGETTER_FUNCTION() {
            var meta$$1 = (0, _meta2.peekMeta)(this);
            var val = void 0;
            if (meta$$1 !== undefined) {
                val = meta$$1.readInheritedValue('values', name);
            }
            if (val === _meta2.UNDEFINED) {
                var proto = Object.getPrototypeOf(this);
                return proto && proto[name];
            } else {
                return val;
            }
        }
        return (0, _polyfills.assign)(IGETTER_FUNCTION, {
            isInheritingGetter: true
        });
    }
    function DESCRIPTOR_GETTER_FUNCTION(name, descriptor) {
        return function CPGETTER_FUNCTION() {
            return descriptor.get(this, name);
        };
    }
    /**
      NOTE: This is a low-level method used by other parts of the API. You almost
      never want to call this method directly. Instead you should use
      `mixin()` to define new properties.
    
      Defines a property on an object. This method works much like the ES5
      `Object.defineProperty()` method except that it can also accept computed
      properties and other special descriptors.
    
      Normally this method takes only three parameters. However if you pass an
      instance of `Descriptor` as the third param then you can pass an
      optional value as the fourth parameter. This is often more efficient than
      creating new descriptor hashes for each property.
    
      ## Examples
    
      ```javascript
      import { defineProperty, computed } from '@ember/object';
    
      // ES5 compatible mode
      defineProperty(contact, 'firstName', {
        writable: true,
        configurable: false,
        enumerable: true,
        value: 'Charles'
      });
    
      // define a simple property
      defineProperty(contact, 'lastName', undefined, 'Jolley');
    
      // define a computed property
      defineProperty(contact, 'fullName', computed('firstName', 'lastName', function() {
        return this.firstName+' '+this.lastName;
      }));
      ```
    
      @public
      @method defineProperty
      @static
      @for @ember/object
      @param {Object} obj the object to define this property on. This may be a prototype.
      @param {String} keyName the name of the property
      @param {Descriptor} [desc] an instance of `Descriptor` (typically a
        computed property) or an ES5 descriptor.
        You must provide this or `data` but not both.
      @param {*} [data] something other than a descriptor, that will
        become the explicit value of this property.
    */
    function defineProperty(obj, keyName, desc, data, meta$$1) {
        if (meta$$1 === undefined) {
            meta$$1 = (0, _meta2.meta)(obj);
        }
        var watching = meta$$1.peekWatching(keyName) > 0;
        var previousDesc = (0, _meta2.descriptorFor)(obj, keyName, meta$$1);
        var wasDescriptor = previousDesc !== undefined;
        if (wasDescriptor) {
            previousDesc.teardown(obj, keyName, meta$$1);
        }
        // used to track if the the property being defined be enumerable
        var enumerable = true;
        // Ember.NativeArray is a normal Ember.Mixin that we mix into `Array.prototype` when prototype extensions are enabled
        // mutating a native object prototype like this should _not_ result in enumerable properties being added (or we have significant
        // issues with things like deep equality checks from test frameworks, or things like jQuery.extend(true, [], [])).
        //
        // this is a hack, and we should stop mutating the array prototype by default 😫
        if (obj === Array.prototype) {
            enumerable = false;
        }
        var value = void 0;
        if (desc instanceof Descriptor) {
            value = desc;
            desc.setup(obj, keyName, meta$$1);
        } else if (desc === undefined || desc === null) {
            value = data;
            if (true /* DEBUG */ && watching) {
                meta$$1.writeValues(keyName, data);
                var defaultDescriptor = {
                    configurable: true,
                    enumerable: enumerable,
                    set: MANDATORY_SETTER_FUNCTION(keyName),
                    get: DEFAULT_GETTER_FUNCTION(keyName)
                };
                Object.defineProperty(obj, keyName, defaultDescriptor);
            } else if (wasDescriptor || enumerable === false) {
                Object.defineProperty(obj, keyName, {
                    configurable: true,
                    enumerable: enumerable,
                    writable: true,
                    value: value
                });
            } else {
                obj[keyName] = data;
            }
        } else {
            value = desc;
            // fallback to ES5
            Object.defineProperty(obj, keyName, desc);
        }
        // if key is being watched, override chains that
        // were initialized with the prototype
        if (watching) {
            overrideChains(obj, keyName, meta$$1);
        }
        // The `value` passed to the `didDefineProperty` hook is
        // either the descriptor or data, whichever was passed.
        if (typeof obj.didDefineProperty === 'function') {
            obj.didDefineProperty(obj, keyName, value);
        }
    }

    var handleMandatorySetter = void 0;
    function watchKey(obj, keyName, _meta) {
        var meta$$1 = _meta === undefined ? (0, _meta2.meta)(obj) : _meta;
        var count = meta$$1.peekWatching(keyName);
        meta$$1.writeWatching(keyName, count + 1);
        if (count === 0) {
            // activate watching first time
            var possibleDesc = (0, _meta2.descriptorFor)(obj, keyName, meta$$1);
            if (possibleDesc !== undefined && possibleDesc.willWatch !== undefined) {
                possibleDesc.willWatch(obj, keyName, meta$$1);
            }
            if (typeof obj.willWatchProperty === 'function') {
                obj.willWatchProperty(keyName);
            }
            if (true /* DEBUG */) {
                    // NOTE: this is dropped for prod + minified builds
                    handleMandatorySetter(meta$$1, obj, keyName);
                }
        }
    }
    if (true /* DEBUG */) {
            var _hasOwnProperty = function (obj, key) {
                return Object.prototype.hasOwnProperty.call(obj, key);
            };
            var _propertyIsEnumerable = function (obj, key) {
                return Object.prototype.propertyIsEnumerable.call(obj, key);
            };
            // Future traveler, although this code looks scary. It merely exists in
            // development to aid in development asertions. Production builds of
            // ember strip this entire block out
            handleMandatorySetter = function handleMandatorySetter(m, obj, keyName) {
                var descriptor = (0, _utils.lookupDescriptor)(obj, keyName);
                var hasDescriptor = descriptor !== null;
                var possibleDesc = hasDescriptor && descriptor.value;
                if ((0, _meta2.isDescriptor)(possibleDesc)) {
                    return;
                }
                var configurable = hasDescriptor ? descriptor.configurable : true;
                var isWritable = hasDescriptor ? descriptor.writable : true;
                var hasValue = hasDescriptor ? 'value' in descriptor : true;
                // this x in Y deopts, so keeping it in this function is better;
                if (configurable && isWritable && hasValue && keyName in obj) {
                    var desc = {
                        configurable: true,
                        set: MANDATORY_SETTER_FUNCTION(keyName),
                        enumerable: _propertyIsEnumerable(obj, keyName),
                        get: undefined
                    };
                    if (_hasOwnProperty(obj, keyName)) {
                        m.writeValues(keyName, obj[keyName]);
                        desc.get = DEFAULT_GETTER_FUNCTION(keyName);
                    } else {
                        desc.get = INHERITING_GETTER_FUNCTION(keyName);
                    }
                    Object.defineProperty(obj, keyName, desc);
                }
            };
        }
    function unwatchKey(obj, keyName, _meta) {
        var meta$$1 = _meta === undefined ? (0, _meta2.peekMeta)(obj) : _meta;
        // do nothing of this object has already been destroyed
        if (meta$$1 === undefined || meta$$1.isSourceDestroyed()) {
            return;
        }
        var count = meta$$1.peekWatching(keyName);
        if (count === 1) {
            meta$$1.writeWatching(keyName, 0);
            var possibleDesc = (0, _meta2.descriptorFor)(obj, keyName, meta$$1);
            var isDescriptor$$1 = possibleDesc !== undefined;
            if (isDescriptor$$1 && possibleDesc.didUnwatch !== undefined) {
                possibleDesc.didUnwatch(obj, keyName, meta$$1);
            }
            if (typeof obj.didUnwatchProperty === 'function') {
                obj.didUnwatchProperty(keyName);
            }
            if (true /* DEBUG */) {
                    // It is true, the following code looks quite WAT. But have no fear, It
                    // exists purely to improve development ergonomics and is removed from
                    // ember.min.js and ember.prod.js builds.
                    //
                    // Some further context: Once a property is watched by ember, bypassing `set`
                    // for mutation, will bypass observation. This code exists to assert when
                    // that occurs, and attempt to provide more helpful feedback. The alternative
                    // is tricky to debug partially observable properties.
                    if (!isDescriptor$$1 && keyName in obj) {
                        var maybeMandatoryDescriptor = (0, _utils.lookupDescriptor)(obj, keyName);
                        if (maybeMandatoryDescriptor && maybeMandatoryDescriptor.set && maybeMandatoryDescriptor.set.isMandatorySetter) {
                            if (maybeMandatoryDescriptor.get && maybeMandatoryDescriptor.get.isInheritingGetter) {
                                var possibleValue = meta$$1.readInheritedValue('values', keyName);
                                if (possibleValue === _meta2.UNDEFINED) {
                                    delete obj[keyName];
                                    return;
                                }
                            }
                            Object.defineProperty(obj, keyName, {
                                configurable: true,
                                enumerable: Object.prototype.propertyIsEnumerable.call(obj, keyName),
                                writable: true,
                                value: meta$$1.peekValues(keyName)
                            });
                            meta$$1.deleteFromValues(keyName);
                        }
                    }
                }
        } else if (count > 1) {
            meta$$1.writeWatching(keyName, count - 1);
        }
    }

    var EACH_PROXIES = new WeakMap();
    function eachProxyArrayWillChange(array, idx, removedCnt, addedCnt) {
        var eachProxy = EACH_PROXIES.get(array);
        if (eachProxy !== undefined) {
            eachProxy.arrayWillChange(array, idx, removedCnt, addedCnt);
        }
    }
    function eachProxyArrayDidChange(array, idx, removedCnt, addedCnt) {
        var eachProxy = EACH_PROXIES.get(array);
        if (eachProxy !== undefined) {
            eachProxy.arrayDidChange(array, idx, removedCnt, addedCnt);
        }
    }

    function arrayContentWillChange(array, startIdx, removeAmt, addAmt) {
        // if no args are passed assume everything changes
        if (startIdx === undefined) {
            startIdx = 0;
            removeAmt = addAmt = -1;
        } else {
            if (removeAmt === undefined) {
                removeAmt = -1;
            }
            if (addAmt === undefined) {
                addAmt = -1;
            }
        }
        eachProxyArrayWillChange(array, startIdx, removeAmt, addAmt);
        sendEvent(array, '@array:before', [array, startIdx, removeAmt, addAmt]);
        return array;
    }
    function arrayContentDidChange(array, startIdx, removeAmt, addAmt) {
        // if no args are passed assume everything changes
        if (startIdx === undefined) {
            startIdx = 0;
            removeAmt = addAmt = -1;
        } else {
            if (removeAmt === undefined) {
                removeAmt = -1;
            }
            if (addAmt === undefined) {
                addAmt = -1;
            }
        }
        var meta$$1 = (0, _meta2.peekMeta)(array);
        if (addAmt < 0 || removeAmt < 0 || addAmt - removeAmt !== 0) {
            notifyPropertyChange(array, 'length', meta$$1);
        }
        notifyPropertyChange(array, '[]', meta$$1);
        eachProxyArrayDidChange(array, startIdx, removeAmt, addAmt);
        sendEvent(array, '@array:change', [array, startIdx, removeAmt, addAmt]);
        var cache = peekCacheFor(array);
        if (cache !== undefined) {
            var length = array.length;
            var addedAmount = addAmt === -1 ? 0 : addAmt;
            var removedAmount = removeAmt === -1 ? 0 : removeAmt;
            var delta = addedAmount - removedAmount;
            var previousLength = length - delta;
            var normalStartIdx = startIdx < 0 ? previousLength + startIdx : startIdx;
            if (cache.has('firstObject') && normalStartIdx === 0) {
                notifyPropertyChange(array, 'firstObject', meta$$1);
            }
            if (cache.has('lastObject')) {
                var previousLastIndex = previousLength - 1;
                var lastAffectedIndex = normalStartIdx + removedAmount;
                if (previousLastIndex < lastAffectedIndex) {
                    notifyPropertyChange(array, 'lastObject', meta$$1);
                }
            }
        }
        return array;
    }

    /**
      An object that that tracks @tracked properties that were consumed.
    
      @private
     */

    var Tracker = function () {
        function Tracker() {
            (0, _emberBabel.classCallCheck)(this, Tracker);

            this.tags = new Set();
            this.last = null;
        }

        Tracker.prototype.add = function add(tag) {
            this.tags.add(tag);
            this.last = tag;
        };

        Tracker.prototype.combine = function combine() {
            if (this.tags.size === 0) {
                return _reference.CONSTANT_TAG;
            } else if (this.tags.size === 1) {
                return this.last;
            } else {
                var tags = [];
                this.tags.forEach(function (tag) {
                    return tags.push(tag);
                });
                return (0, _reference.combine)(tags);
            }
        };

        (0, _emberBabel.createClass)(Tracker, [{
            key: 'size',
            get: function () {
                return this.tags.size;
            }
        }]);

        return Tracker;
    }();

    function tracked() {
        for (var _len2 = arguments.length, dependencies = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            dependencies[_key2] = arguments[_key2];
        }

        var key = dependencies[1],
            descriptor = dependencies[2];

        if (descriptor === undefined || 'initializer' in descriptor) {
            return descriptorForDataProperty(key, descriptor);
        } else {
            return descriptorForAccessor(key, descriptor);
        }
    }
    /**
      @private
    
      Whenever a tracked computed property is entered, the current tracker is
      saved off and a new tracker is replaced.
    
      Any tracked properties consumed are added to the current tracker.
    
      When a tracked computed property is exited, the tracker's tags are
      combined and added to the parent tracker.
    
      The consequence is that each tracked computed property has a tag
      that corresponds to the tracked properties consumed inside of
      itself, including child tracked computed properties.
     */
    var CURRENT_TRACKER = null;
    function getCurrentTracker() {
        return CURRENT_TRACKER;
    }
    function setCurrentTracker() {
        var tracker = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Tracker();

        return CURRENT_TRACKER = tracker;
    }
    function descriptorForAccessor(key, descriptor) {
        var get = descriptor.get;
        var set = descriptor.set;
        function getter() {
            // Swap the parent tracker for a new tracker
            var old = CURRENT_TRACKER;
            var tracker = CURRENT_TRACKER = new Tracker();
            // Call the getter
            var ret = get.call(this);
            // Swap back the parent tracker
            CURRENT_TRACKER = old;
            // Combine the tags in the new tracker and add them to the parent tracker
            var tag = tracker.combine();
            if (CURRENT_TRACKER) CURRENT_TRACKER.add(tag);
            // Update the UpdatableTag for this property with the tag for all of the
            // consumed dependencies.
            update(tagForProperty(this, key), tag);
            return ret;
        }
        function setter() {
            dirty(tagForProperty(this, key));
            set.apply(this, arguments);
        }
        return {
            enumerable: true,
            configurable: false,
            get: get && getter,
            set: set && setter
        };
    }
    /**
      @private
    
      A getter/setter for change tracking for a particular key. The accessor
      acts just like a normal property, but it triggers the `propertyDidChange`
      hook when written to.
    
      Values are saved on the object using a "shadow key," or a symbol based on the
      tracked property name. Sets write the value to the shadow key, and gets read
      from it.
     */
    function descriptorForDataProperty(key, descriptor) {
        var shadowKey = Symbol(key);
        return {
            enumerable: true,
            configurable: true,
            get: function () {
                if (CURRENT_TRACKER) CURRENT_TRACKER.add(tagForProperty(this, key));
                if (!(shadowKey in this)) {
                    this[shadowKey] = descriptor.value;
                }
                return this[shadowKey];
            },
            set: function (newValue) {
                tagFor(this).inner['dirty']();
                dirty(tagForProperty(this, key));
                this[shadowKey] = newValue;
                propertyDidChange();
            }
        };
    }
    var propertyDidChange = function () {};

    /**
    @module @ember/object
    */
    var PROXY_CONTENT = (0, _utils.symbol)('PROXY_CONTENT');
    var getPossibleMandatoryProxyValue = void 0;
    if (true /* DEBUG */ && _utils.HAS_NATIVE_PROXY) {
        getPossibleMandatoryProxyValue = function getPossibleMandatoryProxyValue(obj, keyName) {
            var content = obj[PROXY_CONTENT];
            if (content === undefined) {
                return obj[keyName];
            } else {
                /* global Reflect */
                return Reflect.get(content, keyName, obj);
            }
        };
    }
    // ..........................................................
    // GET AND SET
    //
    // If we are on a platform that supports accessors we can use those.
    // Otherwise simulate accessors by looking up the property directly on the
    // object.
    /**
      Gets the value of a property on an object. If the property is computed,
      the function will be invoked. If the property is not defined but the
      object implements the `unknownProperty` method then that will be invoked.
    
      ```javascript
      import { get } from '@ember/object';
      get(obj, "name");
      ```
    
      If you plan to run on IE8 and older browsers then you should use this
      method anytime you want to retrieve a property on an object that you don't
      know for sure is private. (Properties beginning with an underscore '_'
      are considered private.)
    
      On all newer browsers, you only need to use this method to retrieve
      properties if the property might not be defined on the object and you want
      to respect the `unknownProperty` handler. Otherwise you can ignore this
      method.
    
      Note that if the object itself is `undefined`, this method will throw
      an error.
    
      @method get
      @for @ember/object
      @static
      @param {Object} obj The object to retrieve from.
      @param {String} keyName The property key to retrieve
      @return {Object} the property value or `null`.
      @public
    */
    function _get(obj, keyName) {
        true && !(arguments.length === 2) && (0, _debug.assert)('Get must be called with two arguments; an object and a property key', arguments.length === 2);
        true && !(obj !== undefined && obj !== null) && (0, _debug.assert)('Cannot call get with \'' + keyName + '\' on an undefined object.', obj !== undefined && obj !== null);
        true && !(typeof keyName === 'string' || typeof keyName === 'number' && !isNaN(keyName)) && (0, _debug.assert)('The key provided to get must be a string or number, you passed ' + keyName, typeof keyName === 'string' || typeof keyName === 'number' && !isNaN(keyName));
        true && !(typeof keyName !== 'string' || keyName.lastIndexOf('this.', 0) !== 0) && (0, _debug.assert)('\'this\' in paths is not supported', typeof keyName !== 'string' || keyName.lastIndexOf('this.', 0) !== 0);

        var type = typeof obj;
        var isObject = type === 'object';
        var isFunction = type === 'function';
        var isObjectLike = isObject || isFunction;
        var descriptor = void 0;
        var value = void 0;
        if (isObjectLike) {
            if (false /* EMBER_METAL_TRACKED_PROPERTIES */) {
                    var tracker = getCurrentTracker();
                    if (tracker) tracker.add(tagForProperty(obj, keyName));
                }
            descriptor = (0, _meta2.descriptorFor)(obj, keyName);
            if (descriptor !== undefined) {
                return descriptor.get(obj, keyName);
            }
            if (true /* DEBUG */ && _utils.HAS_NATIVE_PROXY) {
                value = getPossibleMandatoryProxyValue(obj, keyName);
            } else {
                value = obj[keyName];
            }
        } else {
            value = obj[keyName];
        }
        if (value === undefined) {
            if (isPath(keyName)) {
                return _getPath(obj, keyName);
            }
            if (isObject && !(keyName in obj) && typeof obj.unknownProperty === 'function') {
                return obj.unknownProperty(keyName);
            }
        }
        return value;
    }
    function _getPath(root, path) {
        var obj = root;
        var parts = path.split('.');
        for (var i = 0; i < parts.length; i++) {
            if (obj === undefined || obj === null || obj.isDestroyed) {
                return undefined;
            }
            obj = _get(obj, parts[i]);
        }
        return obj;
    }
    /**
      Retrieves the value of a property from an Object, or a default value in the
      case that the property returns `undefined`.
    
      ```javascript
      import { getWithDefault } from '@ember/object';
      getWithDefault(person, 'lastName', 'Doe');
      ```
    
      @method getWithDefault
      @for @ember/object
      @static
      @param {Object} obj The object to retrieve from.
      @param {String} keyName The name of the property to retrieve
      @param {Object} defaultValue The value to return if the property value is undefined
      @return {Object} The property value or the defaultValue.
      @public
    */
    function getWithDefault(root, key, defaultValue) {
        var value = _get(root, key);
        if (value === undefined) {
            return defaultValue;
        }
        return value;
    }

    var EMPTY_ARRAY = Object.freeze([]);
    function objectAt(array, index) {
        if (Array.isArray(array)) {
            return array[index];
        } else {
            return array.objectAt(index);
        }
    }
    function replace(array, start, deleteCount) {
        var items = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : EMPTY_ARRAY;

        if (Array.isArray(array)) {
            replaceInNativeArray(array, start, deleteCount, items);
        } else {
            array.replace(start, deleteCount, items);
        }
    }
    var CHUNK_SIZE = 60000;
    // To avoid overflowing the stack, we splice up to CHUNK_SIZE items at a time.
    // See https://code.google.com/p/chromium/issues/detail?id=56588 for more details.
    function replaceInNativeArray(array, start, deleteCount, items) {
        arrayContentWillChange(array, start, deleteCount, items.length);
        if (items.length <= CHUNK_SIZE) {
            array.splice.apply(array, [start, deleteCount].concat(items));
        } else {
            array.splice(start, deleteCount);
            for (var i = 0; i < items.length; i += CHUNK_SIZE) {
                var chunk = items.slice(i, i + CHUNK_SIZE);
                array.splice.apply(array, [start + i, 0].concat(chunk));
            }
        }
        arrayContentDidChange(array, start, deleteCount, items.length);
    }
    function arrayObserversHelper(obj, target, opts, operation, notify) {
        var willChange = opts && opts.willChange || 'arrayWillChange';
        var didChange = opts && opts.didChange || 'arrayDidChange';
        var hasObservers = _get(obj, 'hasArrayObservers');
        operation(obj, '@array:before', target, willChange);
        operation(obj, '@array:change', target, didChange);
        if (hasObservers === notify) {
            notifyPropertyChange(obj, 'hasArrayObservers');
        }
        return obj;
    }
    function addArrayObserver(array, target, opts) {
        return arrayObserversHelper(array, target, opts, addListener, false);
    }
    function removeArrayObserver(array, target, opts) {
        return arrayObserversHelper(array, target, opts, removeListener, true);
    }

    /**
    @module @ember/object
    */
    /**
      @method addObserver
      @static
      @for @ember/object/observers
      @param obj
      @param {String} path
      @param {Object|Function} target
      @param {Function|String} [method]
      @public
    */
    function addObserver(obj, path, target, method) {
        addListener(obj, changeEvent(path), target, method);
        watch(obj, path);
    }
    /**
      @method removeObserver
      @static
      @for @ember/object/observers
      @param obj
      @param {String} path
      @param {Object|Function} target
      @param {Function|String} [method]
      @public
    */
    function removeObserver(obj, path, target, method) {
        unwatch(obj, path);
        removeListener(obj, changeEvent(path), target, method);
    }

    function eachProxyFor(array) {
        var eachProxy = EACH_PROXIES.get(array);
        if (eachProxy === undefined) {
            eachProxy = new EachProxy(array);
            EACH_PROXIES.set(array, eachProxy);
        }
        return eachProxy;
    }

    var EachProxy = function () {
        function EachProxy(content) {
            (0, _emberBabel.classCallCheck)(this, EachProxy);

            this._content = content;
            this._keys = undefined;
            (0, _meta2.meta)(this);
        }
        // ..........................................................
        // ARRAY CHANGES
        // Invokes whenever the content array itself changes.


        EachProxy.prototype.arrayWillChange = function arrayWillChange(content, idx, removedCnt /*, addedCnt */) {
            // eslint-disable-line no-unused-vars
            var keys = this._keys;
            if (!keys) {
                return;
            }
            var lim = removedCnt > 0 ? idx + removedCnt : -1;
            if (lim > 0) {
                for (var key in keys) {
                    removeObserverForContentKey(content, key, this, idx, lim);
                }
            }
        };

        EachProxy.prototype.arrayDidChange = function arrayDidChange(content, idx, _removedCnt, addedCnt) {
            var keys = this._keys;
            if (!keys) {
                return;
            }
            var lim = addedCnt > 0 ? idx + addedCnt : -1;
            var meta$$1 = (0, _meta2.peekMeta)(this);
            for (var key in keys) {
                if (lim > 0) {
                    addObserverForContentKey(content, key, this, idx, lim);
                }
                notifyPropertyChange(this, key, meta$$1);
            }
        };
        // ..........................................................
        // LISTEN FOR NEW OBSERVERS AND OTHER EVENT LISTENERS
        // Start monitoring keys based on who is listening...


        EachProxy.prototype.willWatchProperty = function willWatchProperty(property) {
            this.beginObservingContentKey(property);
        };

        EachProxy.prototype.didUnwatchProperty = function didUnwatchProperty(property) {
            this.stopObservingContentKey(property);
        };
        // ..........................................................
        // CONTENT KEY OBSERVING
        // Actual watch keys on the source content.


        EachProxy.prototype.beginObservingContentKey = function beginObservingContentKey(keyName) {
            var keys = this._keys;
            if (keys === undefined) {
                keys = this._keys = Object.create(null);
            }
            if (!keys[keyName]) {
                keys[keyName] = 1;
                var content = this._content;
                var len = content.length;
                addObserverForContentKey(content, keyName, this, 0, len);
            } else {
                keys[keyName]++;
            }
        };

        EachProxy.prototype.stopObservingContentKey = function stopObservingContentKey(keyName) {
            var keys = this._keys;
            if (keys !== undefined && keys[keyName] > 0 && --keys[keyName] <= 0) {
                var content = this._content;
                var len = content.length;
                removeObserverForContentKey(content, keyName, this, 0, len);
            }
        };

        EachProxy.prototype.contentKeyDidChange = function contentKeyDidChange(_obj, keyName) {
            notifyPropertyChange(this, keyName);
        };

        return EachProxy;
    }();

    function addObserverForContentKey(content, keyName, proxy, idx, loc) {
        while (--loc >= idx) {
            var item = objectAt(content, loc);
            if (item) {
                true && !(typeof item === 'object') && (0, _debug.assert)('When using @each to observe the array `' + content.toString() + '`, the array must return an object', typeof item === 'object');

                addObserver(item, keyName, proxy, 'contentKeyDidChange');
            }
        }
    }
    function removeObserverForContentKey(content, keyName, proxy, idx, loc) {
        while (--loc >= idx) {
            var item = objectAt(content, loc);
            if (item) {
                removeObserver(item, keyName, proxy, 'contentKeyDidChange');
            }
        }
    }

    function isObject(obj) {
        return typeof obj === 'object' && obj !== null;
    }
    function isVolatile(obj, keyName, meta$$1) {
        var desc = (0, _meta2.descriptorFor)(obj, keyName, meta$$1);
        return !(desc !== undefined && desc._volatile === false);
    }

    var ChainWatchers = function () {
        function ChainWatchers() {
            (0, _emberBabel.classCallCheck)(this, ChainWatchers);

            // chain nodes that reference a key in this obj by key
            // we only create ChainWatchers when we are going to add them
            // so create this upfront
            this.chains = Object.create(null);
        }

        ChainWatchers.prototype.add = function add(key, node) {
            var nodes = this.chains[key];
            if (nodes === undefined) {
                this.chains[key] = [node];
            } else {
                nodes.push(node);
            }
        };

        ChainWatchers.prototype.remove = function remove(key, node) {
            var nodes = this.chains[key];
            if (nodes !== undefined) {
                for (var i = 0; i < nodes.length; i++) {
                    if (nodes[i] === node) {
                        nodes.splice(i, 1);
                        break;
                    }
                }
            }
        };

        ChainWatchers.prototype.has = function has(key, node) {
            var nodes = this.chains[key];
            if (nodes !== undefined) {
                for (var i = 0; i < nodes.length; i++) {
                    if (nodes[i] === node) {
                        return true;
                    }
                }
            }
            return false;
        };

        ChainWatchers.prototype.revalidateAll = function revalidateAll() {
            for (var key in this.chains) {
                this.notify(key, true, undefined);
            }
        };

        ChainWatchers.prototype.revalidate = function revalidate(key) {
            this.notify(key, true, undefined);
        };
        // key: the string key that is part of a path changed
        // revalidate: boolean; the chains that are watching this value should revalidate
        // callback: function that will be called with the object and path that
        //           will be/are invalidated by this key change, depending on
        //           whether the revalidate flag is passed


        ChainWatchers.prototype.notify = function notify(key, revalidate, callback) {
            var nodes = this.chains[key];
            if (nodes === undefined || nodes.length === 0) {
                return;
            }
            var affected = undefined;
            if (callback !== undefined) {
                affected = [];
            }
            for (var i = 0; i < nodes.length; i++) {
                nodes[i].notify(revalidate, affected);
            }
            if (callback === undefined) {
                return;
            }
            // we gather callbacks so we don't notify them during revalidation
            for (var _i = 0; _i < affected.length; _i += 2) {
                var obj = affected[_i];
                var path = affected[_i + 1];
                callback(obj, path);
            }
        };

        return ChainWatchers;
    }();

    function makeChainWatcher() {
        return new ChainWatchers();
    }
    function makeChainNode(obj) {
        return new ChainNode(null, null, obj);
    }
    function addChainWatcher(obj, keyName, node) {
        var m = (0, _meta2.meta)(obj);
        m.writableChainWatchers(makeChainWatcher).add(keyName, node);
        watchKey(obj, keyName, m);
    }
    function removeChainWatcher(obj, keyName, node, _meta) {
        if (!isObject(obj)) {
            return;
        }
        var meta$$1 = _meta === undefined ? (0, _meta2.peekMeta)(obj) : _meta;
        if (meta$$1 === undefined || meta$$1.isSourceDestroying() || meta$$1.isMetaDestroyed() || meta$$1.readableChainWatchers() === undefined) {
            return;
        }
        // make meta writable
        meta$$1 = (0, _meta2.meta)(obj);
        meta$$1.readableChainWatchers().remove(keyName, node);
        unwatchKey(obj, keyName, meta$$1);
    }
    var NODE_STACK = [];
    function destroyRoot(root) {
        pushChildren(root);
        while (NODE_STACK.length > 0) {
            var node = NODE_STACK.pop();
            pushChildren(node);
            destroyOne(node);
        }
    }
    function destroyOne(node) {
        if (node.isWatching) {
            removeChainWatcher(node.object, node.key, node);
            node.isWatching = false;
        }
    }
    function pushChildren(node) {
        var nodes = node.chains;
        if (nodes !== undefined) {
            for (var key in nodes) {
                if (nodes[key] !== undefined) {
                    NODE_STACK.push(nodes[key]);
                }
            }
        }
    }
    // A ChainNode watches a single key on an object. If you provide a starting
    // value for the key then the node won't actually watch it. For a root node
    // pass null for parent and key and object for value.

    var ChainNode = function () {
        function ChainNode(parent, key, value) {
            (0, _emberBabel.classCallCheck)(this, ChainNode);

            this.paths = undefined;
            this.isWatching = false;
            this.chains = undefined;
            this.object = undefined;
            this.count = 0;
            this.parent = parent;
            this.key = key;
            this.content = value;
            // It is false for the root of a chain (because we have no parent)
            var isWatching = this.isWatching = parent !== null;
            if (isWatching) {
                var parentValue = parent.value();
                if (isObject(parentValue)) {
                    this.object = parentValue;
                    addChainWatcher(parentValue, key, this);
                }
            }
        }

        ChainNode.prototype.value = function value() {
            if (this.content === undefined && this.isWatching) {
                var obj = this.parent.value();
                this.content = lazyGet(obj, this.key);
            }
            return this.content;
        };

        ChainNode.prototype.destroy = function destroy() {
            // check if root
            if (this.parent === null) {
                destroyRoot(this);
            } else {
                destroyOne(this);
            }
        };
        // copies a top level object only


        ChainNode.prototype.copyTo = function copyTo(target) {
            var paths = this.paths;
            if (paths !== undefined) {
                var path = void 0;
                for (path in paths) {
                    if (paths[path] > 0) {
                        target.add(path);
                    }
                }
            }
        };
        // called on the root node of a chain to setup watchers on the specified
        // path.


        ChainNode.prototype.add = function add(path) {
            var paths = this.paths || (this.paths = {});
            paths[path] = (paths[path] || 0) + 1;
            var tails = path.split('.');
            this.chain(tails.shift(), tails);
        };
        // called on the root node of a chain to teardown watcher on the specified
        // path


        ChainNode.prototype.remove = function remove(path) {
            var paths = this.paths;
            if (paths === undefined) {
                return;
            }
            if (paths[path] > 0) {
                paths[path]--;
            }
            var tails = path.split('.');
            this.unchain(tails.shift(), tails);
        };

        ChainNode.prototype.chain = function chain(key, tails) {
            var chains = this.chains;
            if (chains === undefined) {
                chains = this.chains = Object.create(null);
            }
            var node = chains[key];
            if (node === undefined) {
                node = chains[key] = new ChainNode(this, key, undefined);
            }
            node.count++; // count chains...
            // chain rest of path if there is one
            if (tails.length > 0) {
                node.chain(tails.shift(), tails);
            }
        };

        ChainNode.prototype.unchain = function unchain(key, tails) {
            var chains = this.chains;
            var node = chains[key];
            // unchain rest of path first...
            if (tails.length > 0) {
                node.unchain(tails.shift(), tails);
            }
            // delete node if needed.
            node.count--;
            if (node.count <= 0) {
                chains[node.key] = undefined;
                node.destroy();
            }
        };

        ChainNode.prototype.notify = function notify(revalidate, affected) {
            if (revalidate && this.isWatching) {
                var parentValue = this.parent.value();
                if (parentValue !== this.object) {
                    removeChainWatcher(this.object, this.key, this);
                    if (isObject(parentValue)) {
                        this.object = parentValue;
                        addChainWatcher(parentValue, this.key, this);
                    } else {
                        this.object = undefined;
                    }
                }
                this.content = undefined;
            }
            // then notify chains...
            var chains = this.chains;
            if (chains !== undefined) {
                var node = void 0;
                for (var key in chains) {
                    node = chains[key];
                    if (node !== undefined) {
                        node.notify(revalidate, affected);
                    }
                }
            }
            if (affected !== undefined && this.parent !== null) {
                this.parent.populateAffected(this.key, 1, affected);
            }
        };

        ChainNode.prototype.populateAffected = function populateAffected(path, depth, affected) {
            if (this.key) {
                path = this.key + '.' + path;
            }
            if (this.parent !== null) {
                this.parent.populateAffected(path, depth + 1, affected);
            } else if (depth > 1) {
                affected.push(this.value(), path);
            }
        };

        return ChainNode;
    }();

    function lazyGet(obj, key) {
        if (!isObject(obj)) {
            return;
        }
        var meta$$1 = (0, _meta2.peekMeta)(obj);
        // check if object meant only to be a prototype
        if (meta$$1 !== undefined && meta$$1.proto === obj) {
            return;
        }
        // Use `get` if the return value is an EachProxy or an uncacheable value.
        if (key === '@each') {
            return eachProxyFor(obj);
        } else if (isVolatile(obj, key, meta$$1)) {
            return _get(obj, key);
            // Otherwise attempt to get the cached value of the computed property
        } else {
            return getCachedValueFor(obj, key);
        }
    }
    function finishChains(meta$$1) {
        // finish any current chains node watchers that reference obj
        var chainWatchers = meta$$1.readableChainWatchers();
        if (chainWatchers !== undefined) {
            chainWatchers.revalidateAll();
        }
        // ensure that if we have inherited any chains they have been
        // copied onto our own meta.
        if (meta$$1.readableChains() !== undefined) {
            meta$$1.writableChains(makeChainNode);
        }
    }

    function watchPath(obj, keyPath, meta$$1) {
        var m = meta$$1 === undefined ? (0, _meta2.meta)(obj) : meta$$1;
        var counter = m.peekWatching(keyPath);
        m.writeWatching(keyPath, counter + 1);
        if (counter === 0) {
            // activate watching first time
            m.writableChains(makeChainNode).add(keyPath);
        }
    }
    function unwatchPath(obj, keyPath, meta$$1) {
        var m = meta$$1 === undefined ? (0, _meta2.peekMeta)(obj) : meta$$1;
        if (m === undefined) {
            return;
        }
        var counter = m.peekWatching(keyPath);
        if (counter > 0) {
            m.writeWatching(keyPath, counter - 1);
            if (counter === 1) {
                m.writableChains(makeChainNode).remove(keyPath);
            }
        }
    }

    /**
    @module ember
    */
    /**
      Starts watching a property on an object. Whenever the property changes,
      invokes `Ember.notifyPropertyChange`. This is the primitive used by observers
      and dependent keys; usually you will never call this method directly but instead
      use higher level methods like `addObserver()`.
    
      @private
      @method watch
      @for Ember
      @param obj
      @param {String} keyPath
      @param {Object} meta
    */
    function watch(obj, keyPath, meta$$1) {
        if (isPath(keyPath)) {
            watchPath(obj, keyPath, meta$$1);
        } else {
            watchKey(obj, keyPath, meta$$1);
        }
    }
    function isWatching(obj, key) {
        return watcherCount(obj, key) > 0;
    }
    function watcherCount(obj, key) {
        var meta$$1 = (0, _meta2.peekMeta)(obj);
        return meta$$1 !== undefined && meta$$1.peekWatching(key) || 0;
    }
    /**
      Stops watching a property on an object. Usually you will never call this method directly but instead
      use higher level methods like `removeObserver()`.
    
      @private
      @method unwatch
      @for Ember
      @param obj
      @param {String} keyPath
      @param {Object} meta
    */
    function unwatch(obj, keyPath, meta$$1) {
        if (isPath(keyPath)) {
            unwatchPath(obj, keyPath, meta$$1);
        } else {
            unwatchKey(obj, keyPath, meta$$1);
        }
    }

    // ..........................................................
    // DEPENDENT KEYS
    //
    function addDependentKeys(desc, obj, keyName, meta$$1) {
        // the descriptor has a list of dependent keys, so
        // add all of its dependent keys.
        var depKeys = desc._dependentKeys;
        if (depKeys === null || depKeys === undefined) {
            return;
        }
        for (var idx = 0; idx < depKeys.length; idx++) {
            var depKey = depKeys[idx];
            // Increment the number of times depKey depends on keyName.
            meta$$1.writeDeps(depKey, keyName, meta$$1.peekDeps(depKey, keyName) + 1);
            // Watch the depKey
            watch(obj, depKey, meta$$1);
        }
    }
    function removeDependentKeys(desc, obj, keyName, meta$$1) {
        // the descriptor has a list of dependent keys, so
        // remove all of its dependent keys.
        var depKeys = desc._dependentKeys;
        if (depKeys === null || depKeys === undefined) {
            return;
        }
        for (var idx = 0; idx < depKeys.length; idx++) {
            var depKey = depKeys[idx];
            // Decrement the number of times depKey depends on keyName.
            meta$$1.writeDeps(depKey, keyName, meta$$1.peekDeps(depKey, keyName) - 1);
            // Unwatch the depKey
            unwatch(obj, depKey, meta$$1);
        }
    }

    /**
    @module @ember/object
    */
    var END_WITH_EACH_REGEX = /\.@each$/;
    /**
      Expands `pattern`, invoking `callback` for each expansion.
    
      The only pattern supported is brace-expansion, anything else will be passed
      once to `callback` directly.
    
      Example
    
      ```js
      import { expandProperties } from '@ember/object/computed';
    
      function echo(arg){ console.log(arg); }
    
      expandProperties('foo.bar', echo);              //=> 'foo.bar'
      expandProperties('{foo,bar}', echo);            //=> 'foo', 'bar'
      expandProperties('foo.{bar,baz}', echo);        //=> 'foo.bar', 'foo.baz'
      expandProperties('{foo,bar}.baz', echo);        //=> 'foo.baz', 'bar.baz'
      expandProperties('foo.{bar,baz}.[]', echo)      //=> 'foo.bar.[]', 'foo.baz.[]'
      expandProperties('{foo,bar}.{spam,eggs}', echo) //=> 'foo.spam', 'foo.eggs', 'bar.spam', 'bar.eggs'
      expandProperties('{foo}.bar.{baz}')             //=> 'foo.bar.baz'
      ```
    
      @method expandProperties
      @static
      @for @ember/object/computed
      @public
      @param {String} pattern The property pattern to expand.
      @param {Function} callback The callback to invoke.  It is invoked once per
      expansion, and is passed the expansion.
    */
    function expandProperties(pattern, callback) {
        true && !(typeof pattern === 'string') && (0, _debug.assert)('A computed property key must be a string, you passed ' + typeof pattern + ' ' + pattern, typeof pattern === 'string');
        true && !(pattern.indexOf(' ') === -1) && (0, _debug.assert)('Brace expanded properties cannot contain spaces, e.g. "user.{firstName, lastName}" should be "user.{firstName,lastName}"', pattern.indexOf(' ') === -1);
        // regex to look for double open, double close, or unclosed braces

        true && !(pattern.match(/\{[^}{]*\{|\}[^}{]*\}|\{[^}]*$/g) === null) && (0, _debug.assert)('Brace expanded properties have to be balanced and cannot be nested, pattern: ' + pattern, pattern.match(/\{[^}{]*\{|\}[^}{]*\}|\{[^}]*$/g) === null);

        var start = pattern.indexOf('{');
        if (start < 0) {
            callback(pattern.replace(END_WITH_EACH_REGEX, '.[]'));
        } else {
            dive('', pattern, start, callback);
        }
    }
    function dive(prefix, pattern, start, callback) {
        var end = pattern.indexOf('}'),
            i = 0,
            newStart = void 0,
            arrayLength = void 0;
        var tempArr = pattern.substring(start + 1, end).split(',');
        var after = pattern.substring(end + 1);
        prefix = prefix + pattern.substring(0, start);
        arrayLength = tempArr.length;
        while (i < arrayLength) {
            newStart = after.indexOf('{');
            if (newStart < 0) {
                callback((prefix + tempArr[i++] + after).replace(END_WITH_EACH_REGEX, '.[]'));
            } else {
                dive(prefix + tempArr[i++], after, newStart, callback);
            }
        }
    }

    var setWithMandatorySetter = void 0;
    var makeEnumerable = void 0;
    /**
     @module @ember/object
    */
    /**
      Sets the value of a property on an object, respecting computed properties
      and notifying observers and other listeners of the change.
      If the specified property is not defined on the object and the object
      implements the `setUnknownProperty` method, then instead of setting the
      value of the property on the object, its `setUnknownProperty` handler
      will be invoked with the two parameters `keyName` and `value`.
    
      ```javascript
      import { set } from '@ember/object';
      set(obj, "name", value);
      ```
    
      @method set
      @static
      @for @ember/object
      @param {Object} obj The object to modify.
      @param {String} keyName The property key to set
      @param {Object} value The value to set
      @return {Object} the passed value.
      @public
    */
    function _set2(obj, keyName, value, tolerant) {
        true && !(arguments.length === 3 || arguments.length === 4) && (0, _debug.assert)('Set must be called with three or four arguments; an object, a property key, a value and tolerant true/false', arguments.length === 3 || arguments.length === 4);
        true && !(obj && typeof obj === 'object' || typeof obj === 'function') && (0, _debug.assert)('Cannot call set with \'' + keyName + '\' on an undefined object.', obj && typeof obj === 'object' || typeof obj === 'function');
        true && !(typeof keyName === 'string' || typeof keyName === 'number' && !isNaN(keyName)) && (0, _debug.assert)('The key provided to set must be a string or number, you passed ' + keyName, typeof keyName === 'string' || typeof keyName === 'number' && !isNaN(keyName));
        true && !(typeof keyName !== 'string' || keyName.lastIndexOf('this.', 0) !== 0) && (0, _debug.assert)('\'this\' in paths is not supported', typeof keyName !== 'string' || keyName.lastIndexOf('this.', 0) !== 0);

        if (obj.isDestroyed) {
            true && !tolerant && (0, _debug.assert)('calling set on destroyed object: ' + (0, _utils.toString)(obj) + '.' + keyName + ' = ' + (0, _utils.toString)(value), tolerant);

            return;
        }
        if (isPath(keyName)) {
            return setPath(obj, keyName, value, tolerant);
        }
        var possibleDesc = (0, _meta2.descriptorFor)(obj, keyName);
        if (possibleDesc !== undefined) {
            /* computed property */
            possibleDesc.set(obj, keyName, value);
            return value;
        }
        var currentValue = void 0;
        if (true /* DEBUG */ && _utils.HAS_NATIVE_PROXY) {
            currentValue = getPossibleMandatoryProxyValue(obj, keyName);
        } else {
            currentValue = obj[keyName];
        }
        if (currentValue === undefined && 'object' === typeof obj && !(keyName in obj) && typeof obj.setUnknownProperty === 'function') {
            /* unknown property */
            obj.setUnknownProperty(keyName, value);
        } else {
            var meta$$1 = (0, _meta2.peekMeta)(obj);
            if (true /* DEBUG */) {
                    setWithMandatorySetter(meta$$1, obj, keyName, value);
                } else {
                obj[keyName] = value;
            }
            if (currentValue !== value) {
                notifyPropertyChange(obj, keyName, meta$$1);
            }
        }
        return value;
    }
    if (true /* DEBUG */) {
            setWithMandatorySetter = function (meta$$1, obj, keyName, value) {
                if (meta$$1 !== undefined && meta$$1.peekWatching(keyName) > 0) {
                    makeEnumerable(obj, keyName);
                    meta$$1.writeValue(obj, keyName, value);
                } else {
                    obj[keyName] = value;
                }
            };
            makeEnumerable = function (obj, key) {
                var desc = Object.getOwnPropertyDescriptor(obj, key);
                if (desc && desc.set && desc.set.isMandatorySetter) {
                    desc.enumerable = true;
                    Object.defineProperty(obj, key, desc);
                }
            };
        }
    function setPath(root, path, value, tolerant) {
        var parts = path.split('.');
        var keyName = parts.pop();
        true && !(keyName.trim().length > 0) && (0, _debug.assert)('Property set failed: You passed an empty path', keyName.trim().length > 0);

        var newPath = parts.join('.');
        var newRoot = _getPath(root, newPath);
        if (newRoot !== null && newRoot !== undefined) {
            return _set2(newRoot, keyName, value);
        } else if (!tolerant) {
            throw new _error.default('Property set failed: object in path "' + newPath + '" could not be found.');
        }
    }
    /**
      Error-tolerant form of `set`. Will not blow up if any part of the
      chain is `undefined`, `null`, or destroyed.
    
      This is primarily used when syncing bindings, which may try to update after
      an object has been destroyed.
    
      ```javascript
      import { trySet } from '@ember/object';
    
      let obj = { name: "Zoey" };
      trySet(obj, "contacts.twitter", "@emberjs");
      ```
    
      @method trySet
      @static
      @for @ember/object
      @param {Object} root The object to modify.
      @param {String} path The property path to set
      @param {Object} value The value to set
      @public
    */
    function trySet(root, path, value) {
        return _set2(root, path, value, true);
    }

    /**
    @module @ember/object
    */
    var DEEP_EACH_REGEX = /\.@each\.[^.]+\./;
    function noop() {}
    /**
      A computed property transforms an object literal with object's accessor function(s) into a property.
    
      By default the function backing the computed property will only be called
      once and the result will be cached. You can specify various properties
      that your computed property depends on. This will force the cached
      result to be recomputed if the dependencies are modified.
    
      In the following example we declare a computed property - `fullName` - by calling
      `computed` with property dependencies (`firstName` and `lastName`) as leading arguments and getter accessor function. The `fullName` getter function
      will be called once (regardless of how many times it is accessed) as long
      as its dependencies have not changed. Once `firstName` or `lastName` are updated
      any future calls (or anything bound) to `fullName` will incorporate the new
      values.
    
      ```javascript
      import EmberObject, { computed } from '@ember/object';
    
      let Person = EmberObject.extend({
        // these will be supplied by `create`
        firstName: null,
        lastName: null,
    
        fullName: computed('firstName', 'lastName', function() {
          let firstName = this.get('firstName'),
              lastName  = this.get('lastName');
    
          return `${firstName} ${lastName}`;
        })
      });
    
      let tom = Person.create({
        firstName: 'Tom',
        lastName: 'Dale'
      });
    
      tom.get('fullName') // 'Tom Dale'
      ```
    
      You can also define what Ember should do when setting a computed property by providing additional function (`set`) in hash argument.
      If you try to set a computed property, it will try to invoke setter accessor function with the key and
      value you want to set it to as arguments.
    
      ```javascript
      import EmberObject, { computed } from '@ember/object';
    
      let Person = EmberObject.extend({
        // these will be supplied by `create`
        firstName: null,
        lastName: null,
    
        fullName: computed('firstName', 'lastName', {
          get(key) {
            let firstName = this.get('firstName'),
                lastName  = this.get('lastName');
    
            return firstName + ' ' + lastName;
          },
          set(key, value) {
            let [firstName, lastName] = value.split(' ');
    
            this.set('firstName', firstName);
            this.set('lastName', lastName);
    
            return value;
          }
        })
      });
    
      let person = Person.create();
    
      person.set('fullName', 'Peter Wagenet');
      person.get('firstName'); // 'Peter'
      person.get('lastName');  // 'Wagenet'
      ```
    
      You can overwrite computed property with normal property (no longer computed), that won't change if dependencies change, if you set computed property and it won't have setter accessor function defined.
    
      You can also mark computed property as `.readOnly()` and block all attempts to set it.
    
      ```javascript
      import EmberObject, { computed } from '@ember/object';
    
      let Person = EmberObject.extend({
        // these will be supplied by `create`
        firstName: null,
        lastName: null,
    
        fullName: computed('firstName', 'lastName', {
          get(key) {
            let firstName = this.get('firstName');
            let lastName  = this.get('lastName');
    
            return firstName + ' ' + lastName;
          }
        }).readOnly()
      });
    
      let person = Person.create();
      person.set('fullName', 'Peter Wagenet'); // Uncaught Error: Cannot set read-only property "fullName" on object: <(...):emberXXX>
      ```
    
      Additional resources:
      - [New CP syntax RFC](https://github.com/emberjs/rfcs/blob/master/text/0011-improved-cp-syntax.md)
      - [New computed syntax explained in "Ember 1.12 released" ](https://emberjs.com/blog/2015/05/13/ember-1-12-released.html#toc_new-computed-syntax)
    
      @class ComputedProperty
      @public
    */

    var ComputedProperty = function (_Descriptor) {
        (0, _emberBabel.inherits)(ComputedProperty, _Descriptor);

        function ComputedProperty(config, opts) {
            (0, _emberBabel.classCallCheck)(this, ComputedProperty);

            var _this = (0, _emberBabel.possibleConstructorReturn)(this, _Descriptor.call(this));

            var hasGetterOnly = typeof config === 'function';
            if (hasGetterOnly) {
                _this._getter = config;
            } else {
                var objectConfig = config;
                true && !(typeof objectConfig === 'object' && !Array.isArray(objectConfig)) && (0, _debug.assert)('computed expects a function or an object as last argument.', typeof objectConfig === 'object' && !Array.isArray(objectConfig));
                true && !Object.keys(objectConfig).every(function (key) {
                    return key === 'get' || key === 'set';
                }) && (0, _debug.assert)('Config object passed to computed can only contain `get` and `set` keys.', Object.keys(objectConfig).every(function (key) {
                    return key === 'get' || key === 'set';
                }));
                true && !(!!objectConfig.get || !!objectConfig.set) && (0, _debug.assert)('Computed properties must receive a getter or a setter, you passed none.', !!objectConfig.get || !!objectConfig.set);

                _this._getter = objectConfig.get || noop;
                _this._setter = objectConfig.set;
            }
            _this._suspended = undefined;
            _this._meta = undefined;
            _this._volatile = false;
            if (false /* EMBER_METAL_TRACKED_PROPERTIES */) {
                    _this._auto = false;
                }
            _this._dependentKeys = opts && opts.dependentKeys;
            _this._readOnly = !!opts && hasGetterOnly && opts.readOnly === true;
            return _this;
        }
        /**
          Call on a computed property to set it into non-cached mode. When in this
          mode the computed property will not automatically cache the return value.
             It also does not automatically fire any change events. You must manually notify
          any changes if you want to observe this property.
             Dependency keys have no effect on volatile properties as they are for cache
          invalidation and notification when cached value is invalidated.
             ```javascript
          import EmberObject, { computed } from '@ember/object';
             let outsideService = EmberObject.extend({
            value: computed(function() {
              return OutsideService.getValue();
            }).volatile()
          }).create();
          ```
             @method volatile
          @return {ComputedProperty} this
          @chainable
          @public
        */

        ComputedProperty.prototype.volatile = function volatile() {
            this._volatile = true;
            return this;
        };
        /**
          Call on a computed property to set it into read-only mode. When in this
          mode the computed property will throw an error when set.
             ```javascript
          import EmberObject, { computed } from '@ember/object';
             let Person = EmberObject.extend({
            guid: computed(function() {
              return 'guid-guid-guid';
            }).readOnly()
          });
             let person = Person.create();
             person.set('guid', 'new-guid'); // will throw an exception
          ```
             @method readOnly
          @return {ComputedProperty} this
          @chainable
          @public
        */

        ComputedProperty.prototype.readOnly = function readOnly() {
            this._readOnly = true;
            true && !!(this._readOnly && this._setter && this._setter !== this._getter) && (0, _debug.assert)('Computed properties that define a setter using the new syntax cannot be read-only', !(this._readOnly && this._setter && this._setter !== this._getter));

            return this;
        };
        /**
          Sets the dependent keys on this computed property. Pass any number of
          arguments containing key paths that this computed property depends on.
             ```javascript
          import EmberObject, { computed } from '@ember/object';
             let President = EmberObject.extend({
            fullName: computed('firstName', 'lastName', function() {
              return this.get('firstName') + ' ' + this.get('lastName');
                 // Tell Ember that this computed property depends on firstName
              // and lastName
            })
          });
             let president = President.create({
            firstName: 'Barack',
            lastName: 'Obama'
          });
             president.get('fullName'); // 'Barack Obama'
          ```
             @method property
          @param {String} path* zero or more property paths
          @return {ComputedProperty} this
          @chainable
          @public
        */

        ComputedProperty.prototype.property = function property() {
            var args = [];
            function addArg(property) {
                true && (0, _debug.warn)('Dependent keys containing @each only work one level deep. ' + ('You used the key "' + property + '" which is invalid. ') + 'Please create an intermediary computed property.', DEEP_EACH_REGEX.test(property) === false, { id: 'ember-metal.computed-deep-each' });

                args.push(property);
            }

            for (var _len3 = arguments.length, passedArgs = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                passedArgs[_key3] = arguments[_key3];
            }

            for (var i = 0; i < passedArgs.length; i++) {
                expandProperties(passedArgs[i], addArg);
            }
            this._dependentKeys = args;
            return this;
        };
        /**
          In some cases, you may want to annotate computed properties with additional
          metadata about how they function or what values they operate on. For example,
          computed property functions may close over variables that are then no longer
          available for introspection.
             You can pass a hash of these values to a computed property like this:
             ```
          import { computed } from '@ember/object';
          import Person from 'my-app/utils/person';
             person: computed(function() {
            let personId = this.get('personId');
            return Person.create({ id: personId });
          }).meta({ type: Person })
          ```
             The hash that you pass to the `meta()` function will be saved on the
          computed property descriptor under the `_meta` key. Ember runtime
          exposes a public API for retrieving these values from classes,
          via the `metaForProperty()` function.
             @method meta
          @param {Object} meta
          @chainable
          @public
        */

        ComputedProperty.prototype.meta = function meta(meta$$1) {
            if (arguments.length === 0) {
                return this._meta || {};
            } else {
                this._meta = meta$$1;
                return this;
            }
        };
        // invalidate cache when CP key changes


        ComputedProperty.prototype.didChange = function didChange(obj, keyName) {
            // _suspended is set via a CP.set to ensure we don't clear
            // the cached value set by the setter
            if (this._volatile || this._suspended === obj) {
                return;
            }
            // don't create objects just to invalidate
            var meta$$1 = (0, _meta2.peekMeta)(obj);
            if (meta$$1 === undefined || meta$$1.source !== obj) {
                return;
            }
            var cache = peekCacheFor(obj);
            if (cache !== undefined && cache.delete(keyName)) {
                removeDependentKeys(this, obj, keyName, meta$$1);
            }
        };

        ComputedProperty.prototype.get = function get(obj, keyName) {
            if (this._volatile) {
                return this._getter.call(obj, keyName);
            }
            var cache = getCacheFor(obj);
            var propertyTag = void 0;
            if (false /* EMBER_METAL_TRACKED_PROPERTIES */) {
                    propertyTag = tagForProperty(obj, keyName);
                    if (cache.has(keyName)) {
                        // special-case for computed with no dependent keys used to
                        // trigger cacheable behavior.
                        if (!this._auto && (!this._dependentKeys || this._dependentKeys.length === 0)) {
                            return cache.get(keyName);
                        }
                        var lastRevision = getLastRevisionFor(obj, keyName);
                        if (propertyTag.validate(lastRevision)) {
                            return cache.get(keyName);
                        }
                    }
                } else {
                if (cache.has(keyName)) {
                    return cache.get(keyName);
                }
            }
            var parent = void 0;
            var tracker = void 0;
            if (false /* EMBER_METAL_TRACKED_PROPERTIES */) {
                    parent = getCurrentTracker();
                    tracker = setCurrentTracker();
                }
            var ret = this._getter.call(obj, keyName);
            if (false /* EMBER_METAL_TRACKED_PROPERTIES */) {
                    setCurrentTracker(parent);
                    var tag = tracker.combine();
                    if (parent) parent.add(tag);
                    update(propertyTag, tag);
                    setLastRevisionFor(obj, keyName, propertyTag.value());
                }
            cache.set(keyName, ret);
            var meta$$1 = (0, _meta2.meta)(obj);
            var chainWatchers = meta$$1.readableChainWatchers();
            if (chainWatchers !== undefined) {
                chainWatchers.revalidate(keyName);
            }
            addDependentKeys(this, obj, keyName, meta$$1);
            return ret;
        };

        ComputedProperty.prototype.set = function set(obj, keyName, value) {
            if (this._readOnly) {
                this._throwReadOnlyError(obj, keyName);
            }
            if (!this._setter) {
                return this.clobberSet(obj, keyName, value);
            }
            if (this._volatile) {
                return this.volatileSet(obj, keyName, value);
            }
            return this.setWithSuspend(obj, keyName, value);
        };

        ComputedProperty.prototype._throwReadOnlyError = function _throwReadOnlyError(obj, keyName) {
            throw new _error.default('Cannot set read-only property "' + keyName + '" on object: ' + (0, _utils.inspect)(obj));
        };

        ComputedProperty.prototype.clobberSet = function clobberSet(obj, keyName, value) {
            var cachedValue = getCachedValueFor(obj, keyName);
            defineProperty(obj, keyName, null, cachedValue);
            _set2(obj, keyName, value);
            return value;
        };

        ComputedProperty.prototype.volatileSet = function volatileSet(obj, keyName, value) {
            return this._setter.call(obj, keyName, value);
        };

        ComputedProperty.prototype.setWithSuspend = function setWithSuspend(obj, keyName, value) {
            var oldSuspended = this._suspended;
            this._suspended = obj;
            try {
                return this._set(obj, keyName, value);
            } finally {
                this._suspended = oldSuspended;
            }
        };

        ComputedProperty.prototype._set = function _set(obj, keyName, value) {
            var cache = getCacheFor(obj);
            var hadCachedValue = cache.has(keyName);
            var cachedValue = cache.get(keyName);
            var ret = this._setter.call(obj, keyName, value, cachedValue);
            // allows setter to return the same value that is cached already
            if (hadCachedValue && cachedValue === ret) {
                return ret;
            }
            var meta$$1 = (0, _meta2.meta)(obj);
            if (!hadCachedValue) {
                addDependentKeys(this, obj, keyName, meta$$1);
            }
            cache.set(keyName, ret);
            notifyPropertyChange(obj, keyName, meta$$1);
            if (false /* EMBER_METAL_TRACKED_PROPERTIES */) {
                    var propertyTag = tagForProperty(obj, keyName);
                    setLastRevisionFor(obj, keyName, propertyTag.value());
                }
            return ret;
        };
        /* called before property is overridden */

        ComputedProperty.prototype.teardown = function teardown(obj, keyName, meta$$1) {
            if (!this._volatile) {
                var cache = peekCacheFor(obj);
                if (cache !== undefined && cache.delete(keyName)) {
                    removeDependentKeys(this, obj, keyName, meta$$1);
                }
            }
            _Descriptor.prototype.teardown.call(this, obj, keyName, meta$$1);
        };

        return ComputedProperty;
    }(Descriptor);

    if (false /* EMBER_METAL_TRACKED_PROPERTIES */) {
            ComputedProperty.prototype.auto = function () {
                this._auto = true;
                return this;
            };
        }
    /**
      This helper returns a new property descriptor that wraps the passed
      computed property function. You can use this helper to define properties
      with mixins or via `defineProperty()`.
    
      If you pass a function as an argument, it will be used as a getter. A computed
      property defined in this way might look like this:
    
      ```js
      import EmberObject, { computed } from '@ember/object';
    
      let Person = EmberObject.extend({
        init() {
          this._super(...arguments);
    
          this.firstName = 'Betty';
          this.lastName = 'Jones';
        },
    
        fullName: computed('firstName', 'lastName', function() {
          return `${this.get('firstName')} ${this.get('lastName')}`;
        })
      });
    
      let client = Person.create();
    
      client.get('fullName'); // 'Betty Jones'
    
      client.set('lastName', 'Fuller');
      client.get('fullName'); // 'Betty Fuller'
      ```
    
      You can pass a hash with two functions, `get` and `set`, as an
      argument to provide both a getter and setter:
    
      ```js
      import EmberObject, { computed } from '@ember/object';
    
      let Person = EmberObject.extend({
        init() {
          this._super(...arguments);
    
          this.firstName = 'Betty';
          this.lastName = 'Jones';
        },
    
        fullName: computed('firstName', 'lastName', {
          get(key) {
            return `${this.get('firstName')} ${this.get('lastName')}`;
          },
          set(key, value) {
            let [firstName, lastName] = value.split(/\s+/);
            this.setProperties({ firstName, lastName });
            return value;
          }
        })
      });
    
      let client = Person.create();
      client.get('firstName'); // 'Betty'
    
      client.set('fullName', 'Carroll Fuller');
      client.get('firstName'); // 'Carroll'
      ```
    
      The `set` function should accept two parameters, `key` and `value`. The value
      returned from `set` will be the new value of the property.
    
      _Note: This is the preferred way to define computed properties when writing third-party
      libraries that depend on or use Ember, since there is no guarantee that the user
      will have [prototype Extensions](https://guides.emberjs.com/release/configuring-ember/disabling-prototype-extensions/) enabled._
    
      The alternative syntax, with prototype extensions, might look like:
    
      ```js
      fullName: function() {
        return this.get('firstName') + ' ' + this.get('lastName');
      }.property('firstName', 'lastName')
      ```
    
      @method computed
      @for @ember/object
      @static
      @param {String} [dependentKeys*] Optional dependent keys that trigger this computed property.
      @param {Function} func The computed property function.
      @return {ComputedProperty} property descriptor instance
      @public
    */
    function computed() {
        for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
            args[_key4] = arguments[_key4];
        }

        var func = args.pop();
        var cp = new ComputedProperty(func);
        if (args.length > 0) {
            cp.property.apply(cp, args);
        }
        return cp;
    }
    // used for the Ember.computed global only
    var _globalsComputed = computed.bind(null);

    var CONSUMED = Object.freeze({});
    function alias(altKey) {
        return new AliasedProperty(altKey);
    }

    var AliasedProperty = function (_Descriptor2) {
        (0, _emberBabel.inherits)(AliasedProperty, _Descriptor2);

        function AliasedProperty(altKey) {
            (0, _emberBabel.classCallCheck)(this, AliasedProperty);

            var _this2 = (0, _emberBabel.possibleConstructorReturn)(this, _Descriptor2.call(this));

            _this2.altKey = altKey;
            _this2._dependentKeys = [altKey];
            return _this2;
        }

        AliasedProperty.prototype.setup = function setup(obj, keyName, meta$$1) {
            true && !(this.altKey !== keyName) && (0, _debug.assert)('Setting alias \'' + keyName + '\' on self', this.altKey !== keyName);

            _Descriptor2.prototype.setup.call(this, obj, keyName, meta$$1);
            if (meta$$1.peekWatching(keyName) > 0) {
                this.consume(obj, keyName, meta$$1);
            }
        };

        AliasedProperty.prototype.teardown = function teardown(obj, keyName, meta$$1) {
            this.unconsume(obj, keyName, meta$$1);
            _Descriptor2.prototype.teardown.call(this, obj, keyName, meta$$1);
        };

        AliasedProperty.prototype.willWatch = function willWatch(obj, keyName, meta$$1) {
            this.consume(obj, keyName, meta$$1);
        };

        AliasedProperty.prototype.didUnwatch = function didUnwatch(obj, keyName, meta$$1) {
            this.unconsume(obj, keyName, meta$$1);
        };

        AliasedProperty.prototype.get = function get(obj, keyName) {
            var ret = _get(obj, this.altKey);
            this.consume(obj, keyName, (0, _meta2.meta)(obj));
            return ret;
        };

        AliasedProperty.prototype.unconsume = function unconsume(obj, keyName, meta$$1) {
            var wasConsumed = getCachedValueFor(obj, keyName) === CONSUMED;
            if (wasConsumed || meta$$1.peekWatching(keyName) > 0) {
                removeDependentKeys(this, obj, keyName, meta$$1);
            }
            if (wasConsumed) {
                getCacheFor(obj).delete(keyName);
            }
        };

        AliasedProperty.prototype.consume = function consume(obj, keyName, meta$$1) {
            var cache = getCacheFor(obj);
            if (cache.get(keyName) !== CONSUMED) {
                cache.set(keyName, CONSUMED);
                addDependentKeys(this, obj, keyName, meta$$1);
            }
        };

        AliasedProperty.prototype.set = function set(obj, _keyName, value) {
            return _set2(obj, this.altKey, value);
        };

        AliasedProperty.prototype.readOnly = function readOnly() {
            this.set = AliasedProperty_readOnlySet;
            return this;
        };

        AliasedProperty.prototype.oneWay = function oneWay() {
            this.set = AliasedProperty_oneWaySet;
            return this;
        };

        return AliasedProperty;
    }(Descriptor);

    function AliasedProperty_readOnlySet(obj, keyName) {
        // eslint-disable-line no-unused-vars
        throw new _error.default('Cannot set read-only property \'' + keyName + '\' on object: ' + (0, _utils.inspect)(obj));
    }
    function AliasedProperty_oneWaySet(obj, keyName, value) {
        defineProperty(obj, keyName, null);
        return _set2(obj, keyName, value);
    }
    // Backwards compatibility with Ember Data.
    AliasedProperty.prototype._meta = undefined;
    AliasedProperty.prototype.meta = ComputedProperty.prototype.meta;

    /**
    @module ember
    */
    /**
      Used internally to allow changing properties in a backwards compatible way, and print a helpful
      deprecation warning.
    
      @method deprecateProperty
      @param {Object} object The object to add the deprecated property to.
      @param {String} deprecatedKey The property to add (and print deprecation warnings upon accessing).
      @param {String} newKey The property that will be aliased.
      @private
      @since 1.7.0
    */
    function deprecateProperty(object, deprecatedKey, newKey, options) {
        function _deprecate() {
            true && !false && (0, _debug.deprecate)('Usage of `' + deprecatedKey + '` is deprecated, use `' + newKey + '` instead.', false, options);
        }
        Object.defineProperty(object, deprecatedKey, {
            configurable: true,
            enumerable: false,
            set: function (value) {
                _deprecate();
                _set2(this, newKey, value);
            },
            get: function () {
                _deprecate();
                return _get(this, newKey);
            }
        });
    }

    /**
     @module @ember/utils
    */
    /**
      Returns true if the passed value is null or undefined. This avoids errors
      from JSLint complaining about use of ==, which can be technically
      confusing.
    
      ```javascript
      isNone();              // true
      isNone(null);          // true
      isNone(undefined);     // true
      isNone('');            // false
      isNone([]);            // false
      isNone(function() {}); // false
      ```
    
      @method isNone
      @static
      @for @ember/utils
      @param {Object} obj Value to test
      @return {Boolean}
      @public
    */
    function isNone(obj) {
        return obj === null || obj === undefined;
    }

    /**
     @module @ember/utils
    */
    /**
      Verifies that a value is `null` or `undefined`, an empty string, or an empty
      array.
    
      Constrains the rules on `isNone` by returning true for empty strings and
      empty arrays.
    
      If the value is an object with a `size` property of type number, it is used
      to check emptiness.
    
      ```javascript
      isEmpty();                 // true
      isEmpty(null);             // true
      isEmpty(undefined);        // true
      isEmpty('');               // true
      isEmpty([]);               // true
      isEmpty({ size: 0});       // true
      isEmpty({});               // false
      isEmpty('Adam Hawkins');   // false
      isEmpty([0,1,2]);          // false
      isEmpty('\n\t');           // false
      isEmpty('  ');             // false
      isEmpty({ size: 1 })       // false
      isEmpty({ size: () => 0 }) // false
      ```
    
      @method isEmpty
      @static
      @for @ember/utils
      @param {Object} obj Value to test
      @return {Boolean}
      @public
    */
    function isEmpty(obj) {
        var none = obj === null || obj === undefined;
        if (none) {
            return none;
        }
        if (typeof obj.size === 'number') {
            return !obj.size;
        }
        var objectType = typeof obj;
        if (objectType === 'object') {
            var size = _get(obj, 'size');
            if (typeof size === 'number') {
                return !size;
            }
        }
        if (typeof obj.length === 'number' && objectType !== 'function') {
            return !obj.length;
        }
        if (objectType === 'object') {
            var length = _get(obj, 'length');
            if (typeof length === 'number') {
                return !length;
            }
        }
        return false;
    }

    /**
     @module @ember/utils
    */
    /**
      A value is blank if it is empty or a whitespace string.
    
      ```javascript
      import { isBlank } from '@ember/utils';
    
      isBlank();                // true
      isBlank(null);            // true
      isBlank(undefined);       // true
      isBlank('');              // true
      isBlank([]);              // true
      isBlank('\n\t');          // true
      isBlank('  ');            // true
      isBlank({});              // false
      isBlank('\n\t Hello');    // false
      isBlank('Hello world');   // false
      isBlank([1,2,3]);         // false
      ```
    
      @method isBlank
      @static
      @for @ember/utils
      @param {Object} obj Value to test
      @return {Boolean}
      @since 1.5.0
      @public
    */
    function isBlank(obj) {
        return isEmpty(obj) || typeof obj === 'string' && /\S/.test(obj) === false;
    }

    /**
     @module @ember/utils
    */
    /**
      A value is present if it not `isBlank`.
    
      ```javascript
      isPresent();                // false
      isPresent(null);            // false
      isPresent(undefined);       // false
      isPresent('');              // false
      isPresent('  ');            // false
      isPresent('\n\t');          // false
      isPresent([]);              // false
      isPresent({ length: 0 });   // false
      isPresent(false);           // true
      isPresent(true);            // true
      isPresent('string');        // true
      isPresent(0);               // true
      isPresent(function() {});   // true
      isPresent({});              // true
      isPresent('\n\t Hello');    // true
      isPresent([1, 2, 3]);       // true
      ```
    
      @method isPresent
      @static
      @for @ember/utils
      @param {Object} obj Value to test
      @return {Boolean}
      @since 1.8.0
      @public
    */
    function isPresent(obj) {
        return !isBlank(obj);
    }

    /**
     @module ember
    */
    /**
      Helper class that allows you to register your library with Ember.
    
      Singleton created at `Ember.libraries`.
    
      @class Libraries
      @constructor
      @private
    */

    var Libraries = function () {
        function Libraries() {
            (0, _emberBabel.classCallCheck)(this, Libraries);

            this._registry = [];
            this._coreLibIndex = 0;
        }

        Libraries.prototype._getLibraryByName = function _getLibraryByName(name) {
            var libs = this._registry;
            var count = libs.length;
            for (var i = 0; i < count; i++) {
                if (libs[i].name === name) {
                    return libs[i];
                }
            }
            return undefined;
        };

        Libraries.prototype.register = function register(name, version, isCoreLibrary) {
            var index = this._registry.length;
            if (!this._getLibraryByName(name)) {
                if (isCoreLibrary) {
                    index = this._coreLibIndex++;
                }
                this._registry.splice(index, 0, { name: name, version: version });
            } else {
                true && (0, _debug.warn)('Library "' + name + '" is already registered with Ember.', false, {
                    id: 'ember-metal.libraries-register'
                });
            }
        };

        Libraries.prototype.registerCoreLibrary = function registerCoreLibrary(name, version) {
            this.register(name, version, true);
        };

        Libraries.prototype.deRegister = function deRegister(name) {
            var lib = this._getLibraryByName(name);
            var index = void 0;
            if (lib) {
                index = this._registry.indexOf(lib);
                this._registry.splice(index, 1);
            }
        };

        return Libraries;
    }();

    if (false /* EMBER_LIBRARIES_ISREGISTERED */) {
            Libraries.prototype.isRegistered = function (name) {
                return !!this._getLibraryByName(name);
            };
        }
    if (true /* DEBUG */) {
            Libraries.prototype.logVersions = function () {
                var libs = this._registry;
                var nameLengths = libs.map(function (item) {
                    return _get(item, 'name.length');
                });
                var maxNameLength = Math.max.apply(null, nameLengths);
                (0, _debug.debug)('-------------------------------');
                for (var i = 0; i < libs.length; i++) {
                    var lib = libs[i];
                    var spaces = new Array(maxNameLength - lib.name.length + 1).join(' ');
                    (0, _debug.debug)([lib.name, spaces, ' : ', lib.version].join(''));
                }
                (0, _debug.debug)('-------------------------------');
            };
        }
    var LIBRARIES = new Libraries();
    LIBRARIES.registerCoreLibrary('Ember', _version.default);

    /**
     @module @ember/object
    */
    /**
      To get multiple properties at once, call `getProperties`
      with an object followed by a list of strings or an array:
    
      ```javascript
      import { getProperties } from '@ember/object';
    
      getProperties(record, 'firstName', 'lastName', 'zipCode');
      // { firstName: 'John', lastName: 'Doe', zipCode: '10011' }
      ```
    
      is equivalent to:
    
      ```javascript
      import { getProperties } from '@ember/object';
    
      getProperties(record, ['firstName', 'lastName', 'zipCode']);
      // { firstName: 'John', lastName: 'Doe', zipCode: '10011' }
      ```
    
      @method getProperties
      @static
      @for @ember/object
      @param {Object} obj
      @param {String...|Array} list of keys to get
      @return {Object}
      @public
    */
    function getProperties(obj, keys) {
        var ret = {};
        var propertyNames = arguments;
        var i = 1;
        if (arguments.length === 2 && Array.isArray(keys)) {
            i = 0;
            propertyNames = arguments[1];
        }
        for (; i < propertyNames.length; i++) {
            ret[propertyNames[i]] = _get(obj, propertyNames[i]);
        }
        return ret;
    }

    /**
     @module @ember/object
    */
    /**
      Set a list of properties on an object. These properties are set inside
      a single `beginPropertyChanges` and `endPropertyChanges` batch, so
      observers will be buffered.
    
      ```javascript
      import EmberObject from '@ember/object';
      let anObject = EmberObject.create();
    
      anObject.setProperties({
        firstName: 'Stanley',
        lastName: 'Stuart',
        age: 21
      });
      ```
    
      @method setProperties
      @static
      @for @ember/object
      @param obj
      @param {Object} properties
      @return properties
      @public
    */
    function setProperties(obj, properties) {
        if (properties === null || typeof properties !== 'object') {
            return properties;
        }
        changeProperties(function () {
            var props = Object.keys(properties);
            var propertyName = void 0;
            for (var i = 0; i < props.length; i++) {
                propertyName = props[i];
                _set2(obj, propertyName, properties[propertyName]);
            }
        });
        return properties;
    }

    // TODO, this only depends on context, otherwise it could be in utils
    // move into its own package
    // it is needed by Mixin for classToString
    // maybe move it into environment
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var searchDisabled = false;
    var flags = {
        _set: 0,
        _unprocessedNamespaces: false,
        get unprocessedNamespaces() {
            return this._unprocessedNamespaces;
        },
        set unprocessedNamespaces(v) {
            this._set++;
            this._unprocessedNamespaces = v;
        }
    };
    var unprocessedMixins = false;
    var NAMESPACES = [];
    var NAMESPACES_BY_ID = Object.create(null);
    function addNamespace(namespace) {
        flags.unprocessedNamespaces = true;
        NAMESPACES.push(namespace);
    }
    function removeNamespace(namespace) {
        var name = (0, _utils.getName)(namespace);
        delete NAMESPACES_BY_ID[name];
        NAMESPACES.splice(NAMESPACES.indexOf(namespace), 1);
        if (name in _environment.context.lookup && namespace === _environment.context.lookup[name]) {
            _environment.context.lookup[name] = undefined;
        }
    }
    function findNamespaces() {
        if (!flags.unprocessedNamespaces) {
            return;
        }
        var lookup = _environment.context.lookup;
        var keys = Object.keys(lookup);
        for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            // Only process entities that start with uppercase A-Z
            if (!isUppercase(key.charCodeAt(0))) {
                continue;
            }
            var obj = tryIsNamespace(lookup, key);
            if (obj) {
                (0, _utils.setName)(obj, key);
            }
        }
    }
    function findNamespace(name) {
        if (!searchDisabled) {
            processAllNamespaces();
        }
        return NAMESPACES_BY_ID[name];
    }
    function processNamespace(namespace) {
        _processNamespace([namespace.toString()], namespace, new Set());
    }
    function processAllNamespaces() {
        var unprocessedNamespaces = flags.unprocessedNamespaces;
        if (unprocessedNamespaces) {
            findNamespaces();
            flags.unprocessedNamespaces = false;
        }
        if (unprocessedNamespaces || unprocessedMixins) {
            var namespaces = NAMESPACES;
            for (var i = 0; i < namespaces.length; i++) {
                processNamespace(namespaces[i]);
            }
            unprocessedMixins = false;
        }
    }
    function classToString() {
        var name = (0, _utils.getName)(this);
        if (name !== void 0) {
            return name;
        }
        name = calculateToString(this);
        (0, _utils.setName)(this, name);
        return name;
    }
    function isSearchDisabled() {
        return searchDisabled;
    }
    function setSearchDisabled(flag) {
        searchDisabled = !!flag;
    }
    function setUnprocessedMixins() {
        unprocessedMixins = true;
    }
    function _processNamespace(paths, root, seen) {
        var idx = paths.length;
        var id = paths.join('.');
        NAMESPACES_BY_ID[id] = root;
        (0, _utils.setName)(root, id);
        // Loop over all of the keys in the namespace, looking for classes
        for (var key in root) {
            if (!hasOwnProperty.call(root, key)) {
                continue;
            }
            var obj = root[key];
            // If we are processing the `Ember` namespace, for example, the
            // `paths` will start with `["Ember"]`. Every iteration through
            // the loop will update the **second** element of this list with
            // the key, so processing `Ember.View` will make the Array
            // `['Ember', 'View']`.
            paths[idx] = key;
            // If we have found an unprocessed class
            if (obj && obj.toString === classToString && (0, _utils.getName)(obj) === void 0) {
                // Replace the class' `toString` with the dot-separated path
                (0, _utils.setName)(obj, paths.join('.'));
                // Support nested namespaces
            } else if (obj && obj.isNamespace) {
                // Skip aliased namespaces
                if (seen.has(obj)) {
                    continue;
                }
                seen.add(obj);
                // Process the child namespace
                _processNamespace(paths, obj, seen);
            }
        }
        paths.length = idx; // cut out last item
    }
    function isUppercase(code) {
        return code >= 65 && code <= 90 // A
        ; // Z
    }
    function tryIsNamespace(lookup, prop) {
        try {
            var obj = lookup[prop];
            return (obj !== null && typeof obj === 'object' || typeof obj === 'function') && obj.isNamespace && obj;
        } catch (e) {
            // continue
        }
    }
    function calculateToString(target) {
        var str = void 0;
        if (!searchDisabled) {
            processAllNamespaces();
            str = (0, _utils.getName)(target);
            if (str !== void 0) {
                return str;
            }
            var superclass = target;
            do {
                superclass = Object.getPrototypeOf(superclass);
                if (superclass === Function.prototype || superclass === Object.prototype) {
                    break;
                }
                str = (0, _utils.getName)(target);
                if (str !== void 0) {
                    str = '(subclass of ' + str + ')';
                    break;
                }
            } while (str === void 0);
        }
        return str || '(unknown)';
    }

    /**
    @module @ember/object
    */
    var a_concat = Array.prototype.concat;
    var isArray = Array.isArray;

    function isMethod(obj) {
        return 'function' === typeof obj && obj.isMethod !== false && obj !== Boolean && obj !== Object && obj !== Number && obj !== Array && obj !== Date && obj !== String;
    }
    var CONTINUE = {};
    function mixinProperties(mixinsMeta, mixin) {
        if (mixin instanceof Mixin) {
            if (mixinsMeta.hasMixin(mixin)) {
                return CONTINUE;
            }
            mixinsMeta.addMixin(mixin);
            return mixin.properties;
        } else {
            return mixin; // apply anonymous mixin properties
        }
    }
    function concatenatedMixinProperties(concatProp, props, values, base) {
        // reset before adding each new mixin to pickup concats from previous
        var concats = values[concatProp] || base[concatProp];
        if (props[concatProp]) {
            concats = concats ? a_concat.call(concats, props[concatProp]) : props[concatProp];
        }
        return concats;
    }
    function giveDescriptorSuper(meta$$1, key, property, values, descs, base) {
        var superProperty = void 0;
        // Computed properties override methods, and do not call super to them
        if (values[key] === undefined) {
            // Find the original descriptor in a parent mixin
            superProperty = descs[key];
        }
        // If we didn't find the original descriptor in a parent mixin, find
        // it on the original object.
        if (!superProperty) {
            superProperty = (0, _meta2.descriptorFor)(base, key, meta$$1);
        }
        if (superProperty === undefined || !(superProperty instanceof ComputedProperty)) {
            return property;
        }
        // Since multiple mixins may inherit from the same parent, we need
        // to clone the computed property so that other mixins do not receive
        // the wrapped version.
        property = Object.create(property);
        property._getter = (0, _utils.wrap)(property._getter, superProperty._getter);
        if (superProperty._setter) {
            if (property._setter) {
                property._setter = (0, _utils.wrap)(property._setter, superProperty._setter);
            } else {
                property._setter = superProperty._setter;
            }
        }
        return property;
    }
    function giveMethodSuper(obj, key, method, values, descs) {
        // Methods overwrite computed properties, and do not call super to them.
        if (descs[key] !== undefined) {
            return method;
        }
        // Find the original method in a parent mixin
        var superMethod = values[key];
        // If we didn't find the original value in a parent mixin, find it in
        // the original object
        if (superMethod === undefined && (0, _meta2.descriptorFor)(obj, key) === undefined) {
            superMethod = obj[key];
        }
        // Only wrap the new method if the original method was a function
        if (typeof superMethod === 'function') {
            return (0, _utils.wrap)(method, superMethod);
        }
        return method;
    }
    function applyConcatenatedProperties(obj, key, value, values) {
        var baseValue = values[key] || obj[key];
        var ret = (0, _utils.makeArray)(baseValue).concat((0, _utils.makeArray)(value));
        if (true /* DEBUG */) {
                // it is possible to use concatenatedProperties with strings (which cannot be frozen)
                // only freeze objects...
                if (typeof ret === 'object' && ret !== null) {
                    // prevent mutating `concatenatedProperties` array after it is applied
                    Object.freeze(ret);
                }
            }
        return ret;
    }
    function applyMergedProperties(obj, key, value, values) {
        var baseValue = values[key] || obj[key];
        true && !!isArray(value) && (0, _debug.assert)('You passed in `' + JSON.stringify(value) + '` as the value for `' + key + '` but `' + key + '` cannot be an Array', !isArray(value));

        if (!baseValue) {
            return value;
        }
        var newBase = (0, _polyfills.assign)({}, baseValue);
        var hasFunction = false;
        for (var prop in value) {
            if (!value.hasOwnProperty(prop)) {
                continue;
            }
            var propValue = value[prop];
            if (isMethod(propValue)) {
                // TODO: support for Computed Properties, etc?
                hasFunction = true;
                newBase[prop] = giveMethodSuper(obj, prop, propValue, baseValue, {});
            } else {
                newBase[prop] = propValue;
            }
        }
        if (hasFunction) {
            newBase._super = _utils.ROOT;
        }
        return newBase;
    }
    function addNormalizedProperty(base, key, value, meta$$1, descs, values, concats, mergings) {
        if (value instanceof Descriptor) {
            // Wrap descriptor function to implement
            // _super() if needed
            if (value._getter) {
                value = giveDescriptorSuper(meta$$1, key, value, values, descs, base);
            }
            descs[key] = value;
            values[key] = undefined;
        } else {
            if (concats && concats.indexOf(key) >= 0 || key === 'concatenatedProperties' || key === 'mergedProperties') {
                value = applyConcatenatedProperties(base, key, value, values);
            } else if (mergings && mergings.indexOf(key) > -1) {
                value = applyMergedProperties(base, key, value, values);
            } else if (isMethod(value)) {
                value = giveMethodSuper(base, key, value, values, descs);
            }
            descs[key] = undefined;
            values[key] = value;
        }
    }
    function mergeMixins(mixins, meta$$1, descs, values, base, keys) {
        var currentMixin = void 0,
            props = void 0,
            key = void 0,
            concats = void 0,
            mergings = void 0;
        function removeKeys(keyName) {
            delete descs[keyName];
            delete values[keyName];
        }
        for (var i = 0; i < mixins.length; i++) {
            currentMixin = mixins[i];
            true && !(typeof currentMixin === 'object' && currentMixin !== null && Object.prototype.toString.call(currentMixin) !== '[object Array]') && (0, _debug.assert)('Expected hash or Mixin instance, got ' + Object.prototype.toString.call(currentMixin), typeof currentMixin === 'object' && currentMixin !== null && Object.prototype.toString.call(currentMixin) !== '[object Array]');

            props = mixinProperties(meta$$1, currentMixin);
            if (props === CONTINUE) {
                continue;
            }
            if (props) {
                // remove willMergeMixin after 3.4 as it was used for _actions
                if (base.willMergeMixin) {
                    base.willMergeMixin(props);
                }
                concats = concatenatedMixinProperties('concatenatedProperties', props, values, base);
                mergings = concatenatedMixinProperties('mergedProperties', props, values, base);
                for (key in props) {
                    if (!props.hasOwnProperty(key)) {
                        continue;
                    }
                    keys.push(key);
                    addNormalizedProperty(base, key, props[key], meta$$1, descs, values, concats, mergings);
                }
                // manually copy toString() because some JS engines do not enumerate it
                if (props.hasOwnProperty('toString')) {
                    base.toString = props.toString;
                }
            } else if (currentMixin.mixins) {
                mergeMixins(currentMixin.mixins, meta$$1, descs, values, base, keys);
                if (currentMixin._without) {
                    currentMixin._without.forEach(removeKeys);
                }
            }
        }
    }
    function followAlias(obj, desc, descs, values) {
        var altKey = desc.methodName;
        var value = void 0;
        var possibleDesc = void 0;
        if (descs[altKey] || values[altKey]) {
            value = values[altKey];
            desc = descs[altKey];
        } else if ((possibleDesc = (0, _meta2.descriptorFor)(obj, altKey)) !== undefined) {
            desc = possibleDesc;
            value = undefined;
        } else {
            desc = undefined;
            value = obj[altKey];
        }
        return { desc: desc, value: value };
    }
    function updateObserversAndListeners(obj, key, paths, updateMethod) {
        if (paths) {
            for (var i = 0; i < paths.length; i++) {
                updateMethod(obj, paths[i], null, key);
            }
        }
    }
    function replaceObserversAndListeners(obj, key, prev, next) {
        if (typeof prev === 'function') {
            updateObserversAndListeners(obj, key, (0, _utils.getObservers)(prev), removeObserver);
            updateObserversAndListeners(obj, key, (0, _utils.getListeners)(prev), removeListener);
        }
        if (typeof next === 'function') {
            updateObserversAndListeners(obj, key, (0, _utils.getObservers)(next), addObserver);
            updateObserversAndListeners(obj, key, (0, _utils.getListeners)(next), addListener);
        }
    }
    function applyMixin(obj, mixins) {
        var descs = {};
        var values = {};
        var meta$$1 = (0, _meta2.meta)(obj);
        var keys = [];
        var key = void 0,
            value = void 0,
            desc = void 0;
        obj._super = _utils.ROOT;
        // Go through all mixins and hashes passed in, and:
        //
        // * Handle concatenated properties
        // * Handle merged properties
        // * Set up _super wrapping if necessary
        // * Set up computed property descriptors
        // * Copying `toString` in broken browsers
        mergeMixins(mixins, meta$$1, descs, values, obj, keys);
        for (var i = 0; i < keys.length; i++) {
            key = keys[i];
            if (key === 'constructor' || !values.hasOwnProperty(key)) {
                continue;
            }
            desc = descs[key];
            value = values[key];
            while (desc && desc instanceof Alias) {
                var followed = followAlias(obj, desc, descs, values);
                desc = followed.desc;
                value = followed.value;
            }
            if (desc === undefined && value === undefined) {
                continue;
            }
            if ((0, _meta2.descriptorFor)(obj, key) !== undefined) {
                replaceObserversAndListeners(obj, key, null, value);
            } else {
                replaceObserversAndListeners(obj, key, obj[key], value);
            }
            defineProperty(obj, key, desc, value, meta$$1);
        }
        return obj;
    }
    /**
      @method mixin
      @param obj
      @param mixins*
      @return obj
      @private
    */
    function mixin(obj) {
        for (var _len5 = arguments.length, args = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
            args[_key5 - 1] = arguments[_key5];
        }

        applyMixin(obj, args);
        return obj;
    }
    /**
      The `Mixin` class allows you to create mixins, whose properties can be
      added to other classes. For instance,
    
      ```javascript
      import Mixin from '@ember/object/mixin';
    
      const EditableMixin = Mixin.create({
        edit() {
          console.log('starting to edit');
          this.set('isEditing', true);
        },
        isEditing: false
      });
      ```
    
      ```javascript
      import EmberObject from '@ember/object';
      import EditableMixin from '../mixins/editable';
    
      // Mix mixins into classes by passing them as the first arguments to
      // `.extend.`
      const Comment = EmberObject.extend(EditableMixin, {
        post: null
      });
    
      let comment = Comment.create({
        post: somePost
      });
    
      comment.edit(); // outputs 'starting to edit'
      ```
    
      Note that Mixins are created with `Mixin.create`, not
      `Mixin.extend`.
    
      Note that mixins extend a constructor's prototype so arrays and object literals
      defined as properties will be shared amongst objects that implement the mixin.
      If you want to define a property in a mixin that is not shared, you can define
      it either as a computed property or have it be created on initialization of the object.
    
      ```javascript
      // filters array will be shared amongst any object implementing mixin
      import Mixin from '@ember/object/mixin';
      import { A } from '@ember/array';
    
      const FilterableMixin = Mixin.create({
        filters: A()
      });
      ```
    
      ```javascript
      import Mixin from '@ember/object/mixin';
      import { A } from '@ember/array';
      import { computed } from '@ember/object';
    
      // filters will be a separate array for every object implementing the mixin
      const FilterableMixin = Mixin.create({
        filters: computed(function() {
          return A();
        })
      });
      ```
    
      ```javascript
      import Mixin from '@ember/object/mixin';
      import { A } from '@ember/array';
    
      // filters will be created as a separate array during the object's initialization
      const Filterable = Mixin.create({
        filters: null,
    
        init() {
          this._super(...arguments);
          this.set("filters", A());
        }
      });
      ```
    
      @class Mixin
      @public
    */

    var Mixin = function () {
        function Mixin(mixins, properties) {
            (0, _emberBabel.classCallCheck)(this, Mixin);

            this.properties = properties;
            this.mixins = buildMixinsArray(mixins);
            this.ownerConstructor = undefined;
            this._without = undefined;
            if (true /* DEBUG */) {
                    this[_utils.NAME_KEY] = undefined;
                    /*
                      In debug builds, we seal mixins to help avoid performance pitfalls.
                             In IE11 there is a quirk that prevents sealed objects from being added
                      to a WeakMap. Unfortunately, the mixin system currently relies on
                      weak maps in `guidFor`, so we need to prime the guid cache weak map.
                    */
                    (0, _utils.guidFor)(this);
                    Object.seal(this);
                }
        }
        /**
          @method create
          @for @ember/object/mixin
          @static
          @param arguments*
          @public
        */

        Mixin.create = function create() {
            // ES6TODO: this relies on a global state?
            setUnprocessedMixins();
            var M = this;

            for (var _len6 = arguments.length, args = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
                args[_key6] = arguments[_key6];
            }

            return new M(args, undefined);
        };
        // returns the mixins currently applied to the specified object
        // TODO: Make `mixin`


        Mixin.mixins = function mixins(obj) {
            var meta$$1 = (0, _meta2.peekMeta)(obj);
            var ret = [];
            if (meta$$1 === undefined) {
                return ret;
            }
            meta$$1.forEachMixins(function (currentMixin) {
                // skip primitive mixins since these are always anonymous
                if (!currentMixin.properties) {
                    ret.push(currentMixin);
                }
            });
            return ret;
        };
        /**
          @method reopen
          @param arguments*
          @private
        */

        Mixin.prototype.reopen = function reopen() {
            for (var _len7 = arguments.length, args = Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
                args[_key7] = arguments[_key7];
            }

            if (args.length === 0) {
                return;
            }
            if (this.properties) {
                var currentMixin = new Mixin(undefined, this.properties);
                this.properties = undefined;
                this.mixins = [currentMixin];
            } else if (!this.mixins) {
                this.mixins = [];
            }
            this.mixins = this.mixins.concat(buildMixinsArray(args));
            return this;
        };
        /**
          @method apply
          @param obj
          @return applied object
          @private
        */

        Mixin.prototype.apply = function apply(obj) {
            return applyMixin(obj, [this]);
        };

        Mixin.prototype.applyPartial = function applyPartial(obj) {
            return applyMixin(obj, [this]);
        };
        /**
          @method detect
          @param obj
          @return {Boolean}
          @private
        */

        Mixin.prototype.detect = function detect(obj) {
            if (typeof obj !== 'object' || obj === null) {
                return false;
            }
            if (obj instanceof Mixin) {
                return _detect(obj, this);
            }
            var meta$$1 = (0, _meta2.peekMeta)(obj);
            if (meta$$1 === undefined) {
                return false;
            }
            return meta$$1.hasMixin(this);
        };

        Mixin.prototype.without = function without() {
            var ret = new Mixin([this]);

            for (var _len8 = arguments.length, args = Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
                args[_key8] = arguments[_key8];
            }

            ret._without = args;
            return ret;
        };

        Mixin.prototype.keys = function keys() {
            return _keys(this);
        };

        Mixin.prototype.toString = function toString() {
            return '(unknown mixin)';
        };

        return Mixin;
    }();

    function buildMixinsArray(mixins) {
        var length = mixins && mixins.length || 0;
        var m = undefined;
        if (length > 0) {
            m = new Array(length);
            for (var i = 0; i < length; i++) {
                var x = mixins[i];
                true && !(typeof x === 'object' && x !== null && Object.prototype.toString.call(x) !== '[object Array]') && (0, _debug.assert)('Expected hash or Mixin instance, got ' + Object.prototype.toString.call(x), typeof x === 'object' && x !== null && Object.prototype.toString.call(x) !== '[object Array]');

                if (x instanceof Mixin) {
                    m[i] = x;
                } else {
                    m[i] = new Mixin(undefined, x);
                }
            }
        }
        return m;
    }
    Mixin.prototype.toString = classToString;
    if (true /* DEBUG */) {
            Mixin.prototype[_utils.NAME_KEY] = undefined;
            Object.seal(Mixin.prototype);
        }
    function _detect(curMixin, targetMixin) {
        var seen = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Set();

        if (seen.has(curMixin)) {
            return false;
        }
        seen.add(curMixin);
        if (curMixin === targetMixin) {
            return true;
        }
        var mixins = curMixin.mixins;
        if (mixins) {
            return mixins.some(function (mixin) {
                return _detect(mixin, targetMixin, seen);
            });
        }
        return false;
    }
    function _keys(mixin) {
        var ret = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Set();
        var seen = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Set();

        if (seen.has(mixin)) {
            return;
        }
        seen.add(mixin);
        if (mixin.properties) {
            var props = Object.keys(mixin.properties);
            for (var i = 0; i < props.length; i++) {
                ret.add(props[i]);
            }
        } else if (mixin.mixins) {
            mixin.mixins.forEach(function (x) {
                return _keys(x, ret, seen);
            });
        }
        return ret;
    }

    var Alias = function (_Descriptor3) {
        (0, _emberBabel.inherits)(Alias, _Descriptor3);

        function Alias(methodName) {
            (0, _emberBabel.classCallCheck)(this, Alias);

            var _this3 = (0, _emberBabel.possibleConstructorReturn)(this, _Descriptor3.call(this));

            _this3.methodName = methodName;
            return _this3;
        }

        Alias.prototype.teardown = function teardown(_obj, _keyName, _meta) {
            throw new Error('Method not implemented.');
        };

        Alias.prototype.get = function get(_obj, _keyName) {
            throw new Error('Method not implemented.');
        };

        Alias.prototype.set = function set(_obj, _keyName, _value) {
            throw new Error('Method not implemented.');
        };

        return Alias;
    }(Descriptor);
    /**
      Makes a method available via an additional name.
    
      ```app/utils/person.js
      import EmberObject, {
        aliasMethod
      } from '@ember/object';
    
      export default EmberObject.extend({
        name() {
          return 'Tomhuda Katzdale';
        },
        moniker: aliasMethod('name')
      });
      ```
    
      ```javascript
      let goodGuy = Person.create();
    
      goodGuy.name();    // 'Tomhuda Katzdale'
      goodGuy.moniker(); // 'Tomhuda Katzdale'
      ```
    
      @method aliasMethod
      @static
      @for @ember/object
      @param {String} methodName name of the method to alias
      @public
    */

    function aliasMethod(methodName) {
        return new Alias(methodName);
    }
    // ..........................................................
    // OBSERVER HELPER
    //
    /**
      Specify a method that observes property changes.
    
      ```javascript
      import EmberObject from '@ember/object';
      import { observer } from '@ember/object';
    
      export default EmberObject.extend({
        valueObserver: observer('value', function() {
          // Executes whenever the "value" property changes
        })
      });
      ```
    
      Also available as `Function.prototype.observes` if prototype extensions are
      enabled.
    
      @method observer
      @for @ember/object
      @param {String} propertyNames*
      @param {Function} func
      @return func
      @public
      @static
    */
    function observer() {
        for (var _len9 = arguments.length, args = Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
            args[_key9] = arguments[_key9];
        }

        var func = args.pop();
        var _paths = args;
        true && !(typeof func === 'function') && (0, _debug.assert)('observer called without a function', typeof func === 'function');
        true && !(_paths.length > 0 && _paths.every(function (p) {
            return typeof p === 'string' && !!p.length;
        })) && (0, _debug.assert)('observer called without valid path', _paths.length > 0 && _paths.every(function (p) {
            return typeof p === 'string' && !!p.length;
        }));

        var paths = [];
        var addWatchedProperty = function (path) {
            return paths.push(path);
        };
        for (var i = 0; i < _paths.length; ++i) {
            expandProperties(_paths[i], addWatchedProperty);
        }
        (0, _utils.setObservers)(func, paths);
        return func;
    }

    /**
     @module ember
     @private
     */
    /**
      Read-only property that returns the result of a container lookup.
    
      @class InjectedProperty
      @namespace Ember
      @constructor
      @param {String} type The container type the property will lookup
      @param {String} name (optional) The name the property will lookup, defaults
             to the property's name
      @private
    */

    var InjectedProperty = function (_ComputedProperty) {
        (0, _emberBabel.inherits)(InjectedProperty, _ComputedProperty);

        function InjectedProperty(type, name, options) {
            (0, _emberBabel.classCallCheck)(this, InjectedProperty);

            var _this4 = (0, _emberBabel.possibleConstructorReturn)(this, _ComputedProperty.call(this, injectedPropertyGet));

            _this4.type = type;
            _this4.name = name;
            if (false /* EMBER_MODULE_UNIFICATION */) {
                    _this4.source = options ? options.source : undefined;
                    _this4.namespace = undefined;
                    if (name) {
                        var namespaceDelimiterOffset = name.indexOf('::');
                        if (namespaceDelimiterOffset === -1) {
                            _this4.name = name;
                            _this4.namespace = undefined;
                        } else {
                            _this4.name = name.slice(namespaceDelimiterOffset + 2);
                            _this4.namespace = name.slice(0, namespaceDelimiterOffset);
                        }
                    }
                }
            return _this4;
        }

        return InjectedProperty;
    }(ComputedProperty);

    function injectedPropertyGet(keyName) {
        var desc = (0, _meta2.descriptorFor)(this, keyName);
        var owner = (0, _owner.getOwner)(this) || this.container; // fallback to `container` for backwards compat
        true && !(desc && desc.type) && (0, _debug.assert)('InjectedProperties should be defined with the inject computed property macros.', desc && desc.type);
        true && !!!owner && (0, _debug.assert)('Attempting to lookup an injected property on an object without a container, ensure that the object was instantiated via a container.', !!owner);

        var specifier = desc.type + ':' + (desc.name || keyName);
        return owner.lookup(specifier, {
            source: desc.source,
            namespace: desc.namespace
        });
    }

    function descriptor(desc) {
        return new NativeDescriptor(desc);
    }
    /**
      A wrapper for a native ES5 descriptor. In an ideal world, we wouldn't need
      this at all, however, the way we currently flatten/merge our mixins require
      a special value to denote a descriptor.
    
      @class NativeDescriptor
      @private
    */

    var NativeDescriptor = function (_Descriptor4) {
        (0, _emberBabel.inherits)(NativeDescriptor, _Descriptor4);

        function NativeDescriptor(desc) {
            (0, _emberBabel.classCallCheck)(this, NativeDescriptor);

            var _this5 = (0, _emberBabel.possibleConstructorReturn)(this, _Descriptor4.call(this));

            _this5.desc = desc;
            _this5.enumerable = desc.enumerable !== false;
            _this5.configurable = desc.configurable !== false;
            return _this5;
        }

        NativeDescriptor.prototype.setup = function setup(obj, key, meta$$1) {
            Object.defineProperty(obj, key, this.desc);
            meta$$1.writeDescriptors(key, this);
        };

        NativeDescriptor.prototype.get = function get(obj, key) {
            return obj[key];
        };

        NativeDescriptor.prototype.set = function set(obj, key, value) {
            return obj[key] = value;
        };

        return NativeDescriptor;
    }(Descriptor);

    exports.computed = computed;
    exports.ComputedProperty = ComputedProperty;
    exports._globalsComputed = _globalsComputed;
    exports.getCacheFor = getCacheFor;
    exports.getCachedValueFor = getCachedValueFor;
    exports.peekCacheFor = peekCacheFor;
    exports.alias = alias;
    exports.deprecateProperty = deprecateProperty;
    exports.PROXY_CONTENT = PROXY_CONTENT;
    exports._getPath = _getPath;
    exports.get = _get;
    exports.getWithDefault = getWithDefault;
    exports.set = _set2;
    exports.trySet = trySet;
    exports.objectAt = objectAt;
    exports.replace = replace;
    exports.replaceInNativeArray = replaceInNativeArray;
    exports.addArrayObserver = addArrayObserver;
    exports.removeArrayObserver = removeArrayObserver;
    exports.arrayContentWillChange = arrayContentWillChange;
    exports.arrayContentDidChange = arrayContentDidChange;
    exports.eachProxyFor = eachProxyFor;
    exports.eachProxyArrayWillChange = eachProxyArrayWillChange;
    exports.eachProxyArrayDidChange = eachProxyArrayDidChange;
    exports.addListener = addListener;
    exports.hasListeners = hasListeners;
    exports.on = on;
    exports.removeListener = removeListener;
    exports.sendEvent = sendEvent;
    exports.isNone = isNone;
    exports.isEmpty = isEmpty;
    exports.isBlank = isBlank;
    exports.isPresent = isPresent;
    exports.beginPropertyChanges = beginPropertyChanges;
    exports.changeProperties = changeProperties;
    exports.endPropertyChanges = endPropertyChanges;
    exports.notifyPropertyChange = notifyPropertyChange;
    exports.overrideChains = overrideChains;
    exports.PROPERTY_DID_CHANGE = PROPERTY_DID_CHANGE;
    exports.defineProperty = defineProperty;
    exports.Descriptor = Descriptor;
    exports.watchKey = watchKey;
    exports.unwatchKey = unwatchKey;
    exports.ChainNode = ChainNode;
    exports.finishChains = finishChains;
    exports.removeChainWatcher = removeChainWatcher;
    exports.watchPath = watchPath;
    exports.unwatchPath = unwatchPath;
    exports.isWatching = isWatching;
    exports.unwatch = unwatch;
    exports.watch = watch;
    exports.watcherCount = watcherCount;
    exports.libraries = LIBRARIES;
    exports.Libraries = Libraries;
    exports.getProperties = getProperties;
    exports.setProperties = setProperties;
    exports.expandProperties = expandProperties;
    exports.addObserver = addObserver;
    exports.removeObserver = removeObserver;
    exports.Mixin = Mixin;
    exports.aliasMethod = aliasMethod;
    exports.mixin = mixin;
    exports.observer = observer;
    exports.applyMixin = applyMixin;
    exports.InjectedProperty = InjectedProperty;
    exports.setHasViews = setHasViews;
    exports.tagForProperty = tagForProperty;
    exports.tagFor = tagFor;
    exports.markObjectAsDirty = markObjectAsDirty;
    exports.runInTransaction = runInTransaction;
    exports.didRender = didRender;
    exports.assertNotRendered = assertNotRendered;
    exports.descriptor = descriptor;
    exports.tracked = tracked;
    exports.NAMESPACES = NAMESPACES;
    exports.NAMESPACES_BY_ID = NAMESPACES_BY_ID;
    exports.addNamespace = addNamespace;
    exports.classToString = classToString;
    exports.findNamespace = findNamespace;
    exports.findNamespaces = findNamespaces;
    exports.processNamespace = processNamespace;
    exports.processAllNamespaces = processAllNamespaces;
    exports.removeNamespace = removeNamespace;
    exports.isNamespaceSearchDisabled = isSearchDisabled;
    exports.setNamespaceSearchDisabled = setSearchDisabled;
});
enifed('@ember/-internals/owner/index', ['exports', '@ember/-internals/utils'], function (exports, _utils) {
  'use strict';

  exports.OWNER = undefined;
  exports.getOwner = getOwner;
  exports.setOwner = setOwner;
  var OWNER = exports.OWNER = (0, _utils.symbol)('OWNER');
  /**
    Framework objects in an Ember application (components, services, routes, etc.)
    are created via a factory and dependency injection system. Each of these
    objects is the responsibility of an "owner", which handled its
    instantiation and manages its lifetime.
  
    `getOwner` fetches the owner object responsible for an instance. This can
    be used to lookup or resolve other class instances, or register new factories
    into the owner.
  
    For example, this component dynamically looks up a service based on the
    `audioType` passed as an attribute:
  
    ```app/components/play-audio.js
    import Component from '@ember/component';
    import { computed } from '@ember/object';
    import { getOwner } from '@ember/application';
  
    // Usage:
    //
    //   {{play-audio audioType=model.audioType audioFile=model.file}}
    //
    export default Component.extend({
      audioService: computed('audioType', function() {
        let owner = getOwner(this);
        return owner.lookup(`service:${this.get('audioType')}`);
      }),
  
      click() {
        let player = this.get('audioService');
        player.play(this.get('audioFile'));
      }
    });
    ```
  
    @method getOwner
    @static
    @for @ember/application
    @param {Object} object An object with an owner.
    @return {Object} An owner object.
    @since 2.3.0
    @public
  */
  /**
  @module @ember/application
  */
  function getOwner(object) {
    return object[OWNER];
  }
  /**
    `setOwner` forces a new owner on a given object instance. This is primarily
    useful in some testing cases.
  
    @method setOwner
    @static
    @for @ember/application
    @param {Object} object An object instance.
    @param {Object} object The new owner object of the object instance.
    @since 2.3.0
    @public
  */
  function setOwner(object, owner) {
    object[OWNER] = owner;
  }
});
enifed('@ember/-internals/routing/index', ['exports', '@ember/-internals/routing/lib/location/api', '@ember/-internals/routing/lib/location/none_location', '@ember/-internals/routing/lib/location/hash_location', '@ember/-internals/routing/lib/location/history_location', '@ember/-internals/routing/lib/location/auto_location', '@ember/-internals/routing/lib/system/generate_controller', '@ember/-internals/routing/lib/system/controller_for', '@ember/-internals/routing/lib/system/dsl', '@ember/-internals/routing/lib/system/router', '@ember/-internals/routing/lib/system/route', '@ember/-internals/routing/lib/system/query_params', '@ember/-internals/routing/lib/services/routing', '@ember/-internals/routing/lib/services/router', '@ember/-internals/routing/lib/system/cache', '@ember/-internals/routing/lib/ext/controller'], function (exports, _api, _none_location, _hash_location, _history_location, _auto_location, _generate_controller, _controller_for, _dsl, _router, _route, _query_params, _routing, _router2, _cache) {
  'use strict';

  exports.BucketCache = exports.RouterService = exports.RoutingService = exports.QueryParams = exports.Route = exports.Router = exports.RouterDSL = exports.controllerFor = exports.generateControllerFactory = exports.generateController = exports.AutoLocation = exports.HistoryLocation = exports.HashLocation = exports.NoneLocation = exports.Location = undefined;
  Object.defineProperty(exports, 'Location', {
    enumerable: true,
    get: function () {
      return _api.default;
    }
  });
  Object.defineProperty(exports, 'NoneLocation', {
    enumerable: true,
    get: function () {
      return _none_location.default;
    }
  });
  Object.defineProperty(exports, 'HashLocation', {
    enumerable: true,
    get: function () {
      return _hash_location.default;
    }
  });
  Object.defineProperty(exports, 'HistoryLocation', {
    enumerable: true,
    get: function () {
      return _history_location.default;
    }
  });
  Object.defineProperty(exports, 'AutoLocation', {
    enumerable: true,
    get: function () {
      return _auto_location.default;
    }
  });
  Object.defineProperty(exports, 'generateController', {
    enumerable: true,
    get: function () {
      return _generate_controller.default;
    }
  });
  Object.defineProperty(exports, 'generateControllerFactory', {
    enumerable: true,
    get: function () {
      return _generate_controller.generateControllerFactory;
    }
  });
  Object.defineProperty(exports, 'controllerFor', {
    enumerable: true,
    get: function () {
      return _controller_for.default;
    }
  });
  Object.defineProperty(exports, 'RouterDSL', {
    enumerable: true,
    get: function () {
      return _dsl.default;
    }
  });
  Object.defineProperty(exports, 'Router', {
    enumerable: true,
    get: function () {
      return _router.default;
    }
  });
  Object.defineProperty(exports, 'Route', {
    enumerable: true,
    get: function () {
      return _route.default;
    }
  });
  Object.defineProperty(exports, 'QueryParams', {
    enumerable: true,
    get: function () {
      return _query_params.default;
    }
  });
  Object.defineProperty(exports, 'RoutingService', {
    enumerable: true,
    get: function () {
      return _routing.default;
    }
  });
  Object.defineProperty(exports, 'RouterService', {
    enumerable: true,
    get: function () {
      return _router2.default;
    }
  });
  Object.defineProperty(exports, 'BucketCache', {
    enumerable: true,
    get: function () {
      return _cache.default;
    }
  });
});
enifed('@ember/-internals/routing/lib/ext/controller', ['exports', '@ember/-internals/metal', '@ember/controller/lib/controller_mixin', '@ember/-internals/routing/lib/utils'], function (exports, _metal, _controller_mixin, _utils) {
   'use strict';

   /**
   @module ember
   */
   _controller_mixin.default.reopen({
      concatenatedProperties: ['queryParams'],
      /**
        Defines which query parameters the controller accepts.
        If you give the names `['category','page']` it will bind
        the values of these query parameters to the variables
        `this.category` and `this.page`.
        By default, Ember coerces query parameter values using `toggleProperty`.
        This behavior may lead to unexpected results.
        To explicitly configure a query parameter property so it coerces as expected, you must define a type property:
        ```javascript
          queryParams: [{
            category: {
              type: 'boolean'
            }
          }]
        ```
        @for Ember.ControllerMixin
        @property queryParams
        @public
      */
      queryParams: null,
      /**
       This property is updated to various different callback functions depending on
       the current "state" of the backing route. It is used by
       `Controller.prototype._qpChanged`.
          The methods backing each state can be found in the `Route.prototype._qp` computed
       property return value (the `.states` property). The current values are listed here for
       the sanity of future travelers:
          * `inactive` - This state is used when this controller instance is not part of the active
         route hierarchy. Set in `Route.prototype._reset` (a `router.js` microlib hook) and
         `Route.prototype.actions.finalizeQueryParamChange`.
       * `active` - This state is used when this controller instance is part of the active
         route hierarchy. Set in `Route.prototype.actions.finalizeQueryParamChange`.
       * `allowOverrides` - This state is used in `Route.prototype.setup` (`route.js` microlib hook).
           @method _qpDelegate
        @private
      */
      _qpDelegate: null,
      /**
       During `Route#setup` observers are created to invoke this method
       when any of the query params declared in `Controller#queryParams` property
       are changed.
          When invoked this method uses the currently active query param update delegate
       (see `Controller.prototype._qpDelegate` for details) and invokes it with
       the QP key/value being changed.
           @method _qpChanged
        @private
      */
      _qpChanged: function (controller, _prop) {
         var prop = _prop.substr(0, _prop.length - 3);
         var delegate = controller._qpDelegate;
         var value = (0, _metal.get)(controller, prop);
         delegate(prop, value);
      },

      /**
        Transition the application into another route. The route may
        be either a single route or route path:
           ```javascript
        aController.transitionToRoute('blogPosts');
        aController.transitionToRoute('blogPosts.recentEntries');
        ```
           Optionally supply a model for the route in question. The model
        will be serialized into the URL using the `serialize` hook of
        the route:
           ```javascript
        aController.transitionToRoute('blogPost', aPost);
        ```
           If a literal is passed (such as a number or a string), it will
        be treated as an identifier instead. In this case, the `model`
        hook of the route will be triggered:
           ```javascript
        aController.transitionToRoute('blogPost', 1);
        ```
           Multiple models will be applied last to first recursively up the
        route tree.
           ```app/router.js
        Router.map(function() {
          this.route('blogPost', { path: ':blogPostId' }, function() {
            this.route('blogComment', { path: ':blogCommentId', resetNamespace: true });
          });
        });
        ```
           ```javascript
        aController.transitionToRoute('blogComment', aPost, aComment);
        aController.transitionToRoute('blogComment', 1, 13);
        ```
           It is also possible to pass a URL (a string that starts with a
        `/`).
           ```javascript
        aController.transitionToRoute('/');
        aController.transitionToRoute('/blog/post/1/comment/13');
        aController.transitionToRoute('/blog/posts?sort=title');
        ```
           An options hash with a `queryParams` property may be provided as
        the final argument to add query parameters to the destination URL.
           ```javascript
        aController.transitionToRoute('blogPost', 1, {
          queryParams: { showComments: 'true' }
        });
           // if you just want to transition the query parameters without changing the route
        aController.transitionToRoute({ queryParams: { sort: 'date' } });
        ```
           See also [replaceRoute](/api/ember/release/classes/Ember.ControllerMixin/methods/replaceRoute?anchor=replaceRoute).
           @param {String} name the name of the route or a URL
        @param {...Object} models the model(s) or identifier(s) to be used
          while transitioning to the route.
        @param {Object} [options] optional hash with a queryParams property
          containing a mapping of query parameters
        @for Ember.ControllerMixin
        @method transitionToRoute
        @public
      */
      transitionToRoute: function () {
         // target may be either another controller or a router
         var target = (0, _metal.get)(this, 'target');
         var method = target.transitionToRoute || target.transitionTo;

         for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
         }

         return method.apply(target, (0, _utils.prefixRouteNameArg)(this, args));
      },

      /**
        Transition into another route while replacing the current URL, if possible.
        This will replace the current history entry instead of adding a new one.
        Beside that, it is identical to `transitionToRoute` in all other respects.
           ```javascript
        aController.replaceRoute('blogPosts');
        aController.replaceRoute('blogPosts.recentEntries');
        ```
           Optionally supply a model for the route in question. The model
        will be serialized into the URL using the `serialize` hook of
        the route:
           ```javascript
        aController.replaceRoute('blogPost', aPost);
        ```
           If a literal is passed (such as a number or a string), it will
        be treated as an identifier instead. In this case, the `model`
        hook of the route will be triggered:
           ```javascript
        aController.replaceRoute('blogPost', 1);
        ```
           Multiple models will be applied last to first recursively up the
        route tree.
           ```app/router.js
        Router.map(function() {
          this.route('blogPost', { path: ':blogPostId' }, function() {
            this.route('blogComment', { path: ':blogCommentId', resetNamespace: true });
          });
        });
        ```
           ```
        aController.replaceRoute('blogComment', aPost, aComment);
        aController.replaceRoute('blogComment', 1, 13);
        ```
           It is also possible to pass a URL (a string that starts with a
        `/`).
           ```javascript
        aController.replaceRoute('/');
        aController.replaceRoute('/blog/post/1/comment/13');
        ```
           @param {String} name the name of the route or a URL
        @param {...Object} models the model(s) or identifier(s) to be used
        while transitioning to the route.
        @for Ember.ControllerMixin
        @method replaceRoute
        @public
      */
      replaceRoute: function () {
         // target may be either another controller or a router
         var target = (0, _metal.get)(this, 'target');
         var method = target.replaceRoute || target.replaceWith;

         for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
         }

         return method.apply(target, (0, _utils.prefixRouteNameArg)(this, args));
      }
   });
   exports.default = _controller_mixin.default;
});
enifed('@ember/-internals/routing/lib/location/api', ['exports', '@ember/-internals/browser-environment', '@ember/debug'], function (exports, _browserEnvironment, _debug) {
  'use strict';

  exports.default = {
    /**
     This is deprecated in favor of using the container to lookup the location
     implementation as desired.
        For example:
        ```javascript
     // Given a location registered as follows:
     container.register('location:history-test', HistoryTestLocation);
        // You could create a new instance via:
     container.lookup('location:history-test');
     ```
         @method create
      @param {Object} options
      @return {Object} an instance of an implementation of the `location` API
      @deprecated Use the container to lookup the location implementation that you
      need.
      @private
    */
    create: function (options) {
      var implementation = options && options.implementation;
      true && !!!implementation && (0, _debug.assert)("Location.create: you must specify a 'implementation' option", !!implementation);

      var implementationClass = this.implementations[implementation];
      true && !!!implementationClass && (0, _debug.assert)('Location.create: ' + implementation + ' is not a valid implementation', !!implementationClass);

      return implementationClass.create.apply(implementationClass, arguments);
    },

    implementations: {},
    _location: _browserEnvironment.location
  };
});
enifed('@ember/-internals/routing/lib/location/auto_location', ['exports', 'ember-babel', '@ember/-internals/browser-environment', '@ember/-internals/metal', '@ember/-internals/owner', '@ember/-internals/runtime', '@ember/-internals/utils', '@ember/debug', '@ember/-internals/routing/lib/location/util'], function (exports, _emberBabel, _browserEnvironment, _metal, _owner, _runtime, _utils, _debug, _util) {
    'use strict';

    exports.getHistoryPath = getHistoryPath;
    exports.getHashPath = getHashPath;

    /**
    @module @ember/routing
    */
    /**
      AutoLocation will select the best location option based off browser
      support with the priority order: history, hash, none.
    
      Clean pushState paths accessed by hashchange-only browsers will be redirected
      to the hash-equivalent and vice versa so future transitions are consistent.
    
      Keep in mind that since some of your users will use `HistoryLocation`, your
      server must serve the Ember app at all the routes you define.
    
      Browsers that support the `history` API will use `HistoryLocation`, those that
      do not, but still support the `hashchange` event will use `HashLocation`, and
      in the rare case neither is supported will use `NoneLocation`.
    
      Example:
    
      ```app/router.js
      Router.map(function() {
        this.route('posts', function() {
          this.route('new');
        });
      });
    
      Router.reopen({
        location: 'auto'
      });
      ```
    
      This will result in a posts.new url of `/posts/new` for modern browsers that
      support the `history` api or `/#/posts/new` for older ones, like Internet
      Explorer 9 and below.
    
      When a user visits a link to your application, they will be automatically
      upgraded or downgraded to the appropriate `Location` class, with the URL
      transformed accordingly, if needed.
    
      Keep in mind that since some of your users will use `HistoryLocation`, your
      server must serve the Ember app at all the routes you define.
    
      @class AutoLocation
      @static
      @protected
    */

    var AutoLocation = function (_EmberObject) {
        (0, _emberBabel.inherits)(AutoLocation, _EmberObject);

        function AutoLocation() {
            (0, _emberBabel.classCallCheck)(this, AutoLocation);

            var _this = (0, _emberBabel.possibleConstructorReturn)(this, _EmberObject.apply(this, arguments));

            _this.implementation = 'auto';
            return _this;
        }
        /**
         Called by the router to instruct the location to do any feature detection
         necessary. In the case of AutoLocation, we detect whether to use history
         or hash concrete implementations.
            @private
        */

        AutoLocation.prototype.detect = function detect() {
            var rootURL = this.rootURL;
            true && !(rootURL.charAt(rootURL.length - 1) === '/') && (0, _debug.assert)('rootURL must end with a trailing forward slash e.g. "/app/"', rootURL.charAt(rootURL.length - 1) === '/');

            var implementation = detectImplementation({
                location: this.location,
                history: this.history,
                userAgent: this.userAgent,
                rootURL: rootURL,
                documentMode: this.documentMode,
                global: this.global
            });
            if (implementation === false) {
                (0, _metal.set)(this, 'cancelRouterSetup', true);
                implementation = 'none';
            }
            var concrete = (0, _owner.getOwner)(this).lookup('location:' + implementation);
            (0, _metal.set)(concrete, 'rootURL', rootURL);
            true && !!!concrete && (0, _debug.assert)('Could not find location \'' + implementation + '\'.', !!concrete);

            (0, _metal.set)(this, 'concreteImplementation', concrete);
        };

        AutoLocation.prototype.willDestroy = function willDestroy() {
            var concreteImplementation = (0, _metal.get)(this, 'concreteImplementation');
            if (concreteImplementation) {
                concreteImplementation.destroy();
            }
        };

        return AutoLocation;
    }(_runtime.Object);

    exports.default = AutoLocation;


    AutoLocation.reopen({
        /**
          @private
             Will be pre-pended to path upon state change.
             @since 1.5.1
          @property rootURL
          @default '/'
        */
        rootURL: '/',
        initState: delegateToConcreteImplementation('initState'),
        getURL: delegateToConcreteImplementation('getURL'),
        setURL: delegateToConcreteImplementation('setURL'),
        replaceURL: delegateToConcreteImplementation('replaceURL'),
        onUpdateURL: delegateToConcreteImplementation('onUpdateURL'),
        formatURL: delegateToConcreteImplementation('formatURL'),
        /**
          @private
             The browser's `location` object. This is typically equivalent to
          `window.location`, but may be overridden for testing.
             @property location
          @default environment.location
        */
        location: _browserEnvironment.location,
        /**
          @private
             The browser's `history` object. This is typically equivalent to
          `window.history`, but may be overridden for testing.
             @since 1.5.1
          @property history
          @default environment.history
        */
        history: _browserEnvironment.history,
        /**
         @private
            The user agent's global variable. In browsers, this will be `window`.
            @since 1.11
         @property global
         @default window
        */
        global: _browserEnvironment.window,
        /**
          @private
             The browser's `userAgent`. This is typically equivalent to
          `navigator.userAgent`, but may be overridden for testing.
             @since 1.5.1
          @property userAgent
          @default environment.history
        */
        userAgent: _browserEnvironment.userAgent,
        /**
          @private
             This property is used by the router to know whether to cancel the routing
          setup process, which is needed while we redirect the browser.
             @since 1.5.1
          @property cancelRouterSetup
          @default false
        */
        cancelRouterSetup: false
    });
    function delegateToConcreteImplementation(methodName) {
        return function () {
            var concreteImplementation = (0, _metal.get)(this, 'concreteImplementation');
            true && !!!concreteImplementation && (0, _debug.assert)("AutoLocation's detect() method should be called before calling any other hooks.", !!concreteImplementation);

            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            return (0, _utils.tryInvoke)(concreteImplementation, methodName, args);
        };
    }
    function detectImplementation(options) {
        var location = options.location,
            userAgent = options.userAgent,
            history = options.history,
            documentMode = options.documentMode,
            global = options.global,
            rootURL = options.rootURL;

        var implementation = 'none';
        var cancelRouterSetup = false;
        var currentPath = (0, _util.getFullPath)(location);
        if ((0, _util.supportsHistory)(userAgent, history)) {
            var historyPath = getHistoryPath(rootURL, location);
            // If the browser supports history and we have a history path, we can use
            // the history location with no redirects.
            if (currentPath === historyPath) {
                implementation = 'history';
            } else if (currentPath.substr(0, 2) === '/#') {
                history.replaceState({ path: historyPath }, undefined, historyPath);
                implementation = 'history';
            } else {
                cancelRouterSetup = true;
                (0, _util.replacePath)(location, historyPath);
            }
        } else if ((0, _util.supportsHashChange)(documentMode, global)) {
            var hashPath = getHashPath(rootURL, location);
            // Be sure we're using a hashed path, otherwise let's switch over it to so
            // we start off clean and consistent. We'll count an index path with no
            // hash as "good enough" as well.
            if (currentPath === hashPath || currentPath === '/' && hashPath === '/#/') {
                implementation = 'hash';
            } else {
                // Our URL isn't in the expected hash-supported format, so we want to
                // cancel the router setup and replace the URL to start off clean
                cancelRouterSetup = true;
                (0, _util.replacePath)(location, hashPath);
            }
        }
        if (cancelRouterSetup) {
            return false;
        }
        return implementation;
    }
    /**
      @private
    
      Returns the current path as it should appear for HistoryLocation supported
      browsers. This may very well differ from the real current path (e.g. if it
      starts off as a hashed URL)
    */
    function getHistoryPath(rootURL, location) {
        var path = (0, _util.getPath)(location);
        var hash = (0, _util.getHash)(location);
        var query = (0, _util.getQuery)(location);
        var rootURLIndex = path.indexOf(rootURL);
        var routeHash = void 0,
            hashParts = void 0;
        true && !(rootURLIndex === 0) && (0, _debug.assert)('Path ' + path + ' does not start with the provided rootURL ' + rootURL, rootURLIndex === 0);
        // By convention, Ember.js routes using HashLocation are required to start
        // with `#/`. Anything else should NOT be considered a route and should
        // be passed straight through, without transformation.

        if (hash.substr(0, 2) === '#/') {
            // There could be extra hash segments after the route
            hashParts = hash.substr(1).split('#');
            // The first one is always the route url
            routeHash = hashParts.shift();
            // If the path already has a trailing slash, remove the one
            // from the hashed route so we don't double up.
            if (path.charAt(path.length - 1) === '/') {
                routeHash = routeHash.substr(1);
            }
            // This is the "expected" final order
            path += routeHash + query;
            if (hashParts.length) {
                path += '#' + hashParts.join('#');
            }
        } else {
            path += query + hash;
        }
        return path;
    }
    /**
      @private
    
      Returns the current path as it should appear for HashLocation supported
      browsers. This may very well differ from the real current path.
    
      @method _getHashPath
    */
    function getHashPath(rootURL, location) {
        var path = rootURL;
        var historyPath = getHistoryPath(rootURL, location);
        var routePath = historyPath.substr(rootURL.length);
        if (routePath !== '') {
            if (routePath[0] !== '/') {
                routePath = '/' + routePath;
            }
            path += '#' + routePath;
        }
        return path;
    }
});
enifed('@ember/-internals/routing/lib/location/hash_location', ['exports', 'ember-babel', '@ember/-internals/metal', '@ember/runloop', '@ember/-internals/runtime', '@ember/-internals/routing/lib/location/util'], function (exports, _emberBabel, _metal, _runloop, _runtime, _util) {
    'use strict';

    /**
    @module @ember/routing
    */
    /**
      `HashLocation` implements the location API using the browser's
      hash. At present, it relies on a `hashchange` event existing in the
      browser.
    
      Using `HashLocation` results in URLs with a `#` (hash sign) separating the
      server side URL portion of the URL from the portion that is used by Ember.
    
      Example:
    
      ```app/router.js
      Router.map(function() {
        this.route('posts', function() {
          this.route('new');
        });
      });
    
      Router.reopen({
        location: 'hash'
      });
      ```
    
      This will result in a posts.new url of `/#/posts/new`.
    
      @class HashLocation
      @extends EmberObject
      @protected
    */

    var HashLocation = function (_EmberObject) {
        (0, _emberBabel.inherits)(HashLocation, _EmberObject);

        function HashLocation() {
            (0, _emberBabel.classCallCheck)(this, HashLocation);

            var _this = (0, _emberBabel.possibleConstructorReturn)(this, _EmberObject.apply(this, arguments));

            _this.implementation = 'hash';
            return _this;
        }

        HashLocation.prototype.init = function init() {
            (0, _metal.set)(this, 'location', (0, _metal.get)(this, '_location') || window.location);
            this._hashchangeHandler = undefined;
        };
        /**
          @private
             Returns normalized location.hash
             @since 1.5.1
          @method getHash
        */

        HashLocation.prototype.getHash = function getHash() {
            return (0, _util.getHash)((0, _metal.get)(this, 'location'));
        };
        /**
          Returns the normalized URL, constructed from `location.hash`.
             e.g. `#/foo` => `/foo` as well as `#/foo#bar` => `/foo#bar`.
             By convention, hashed paths must begin with a forward slash, otherwise they
          are not treated as a path so we can distinguish intent.
             @private
          @method getURL
        */

        HashLocation.prototype.getURL = function getURL() {
            var originalPath = this.getHash().substr(1);
            var outPath = originalPath;
            if (outPath[0] !== '/') {
                outPath = '/';
                // Only add the # if the path isn't empty.
                // We do NOT want `/#` since the ampersand
                // is only included (conventionally) when
                // the location.hash has a value
                if (originalPath) {
                    outPath += '#' + originalPath;
                }
            }
            return outPath;
        };
        /**
          Set the `location.hash` and remembers what was set. This prevents
          `onUpdateURL` callbacks from triggering when the hash was set by
          `HashLocation`.
             @private
          @method setURL
          @param path {String}
        */

        HashLocation.prototype.setURL = function setURL(path) {
            (0, _metal.get)(this, 'location').hash = path;
            (0, _metal.set)(this, 'lastSetURL', path);
        };
        /**
          Uses location.replace to update the url without a page reload
          or history modification.
             @private
          @method replaceURL
          @param path {String}
        */

        HashLocation.prototype.replaceURL = function replaceURL(path) {
            (0, _metal.get)(this, 'location').replace('#' + path);
            (0, _metal.set)(this, 'lastSetURL', path);
        };
        /**
          Register a callback to be invoked when the hash changes. These
          callbacks will execute when the user presses the back or forward
          button, but not after `setURL` is invoked.
             @private
          @method onUpdateURL
          @param callback {Function}
        */

        HashLocation.prototype.onUpdateURL = function onUpdateURL(callback) {
            this._removeEventListener();
            this._hashchangeHandler = (0, _runloop.bind)(this, function () {
                var path = this.getURL();
                if ((0, _metal.get)(this, 'lastSetURL') === path) {
                    return;
                }
                (0, _metal.set)(this, 'lastSetURL', null);
                callback(path);
            });
            window.addEventListener('hashchange', this._hashchangeHandler);
        };
        /**
          Given a URL, formats it to be placed into the page as part
          of an element's `href` attribute.
             This is used, for example, when using the {{action}} helper
          to generate a URL based on an event.
             @private
          @method formatURL
          @param url {String}
        */

        HashLocation.prototype.formatURL = function formatURL(url) {
            return '#' + url;
        };
        /**
          Cleans up the HashLocation event listener.
             @private
          @method willDestroy
        */

        HashLocation.prototype.willDestroy = function willDestroy() {
            this._removeEventListener();
        };

        HashLocation.prototype._removeEventListener = function _removeEventListener() {
            if (this._hashchangeHandler) {
                window.removeEventListener('hashchange', this._hashchangeHandler);
            }
        };

        return HashLocation;
    }(_runtime.Object);

    exports.default = HashLocation;
});
enifed('@ember/-internals/routing/lib/location/history_location', ['exports', 'ember-babel', '@ember/-internals/metal', '@ember/-internals/runtime', '@ember/-internals/routing/lib/location/util'], function (exports, _emberBabel, _metal, _runtime, _util) {
    'use strict';

    /**
    @module @ember/routing
    */
    var popstateFired = false;
    function _uuid() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = void 0,
                v = void 0;
            r = Math.random() * 16 | 0;
            v = c === 'x' ? r : r & 3 | 8;
            return v.toString(16);
        });
    }
    /**
      HistoryLocation implements the location API using the browser's
      history.pushState API.
    
      Using `HistoryLocation` results in URLs that are indistinguishable from a
      standard URL. This relies upon the browser's `history` API.
    
      Example:
    
      ```app/router.js
      Router.map(function() {
        this.route('posts', function() {
          this.route('new');
        });
      });
    
      Router.reopen({
        location: 'history'
      });
      ```
    
      This will result in a posts.new url of `/posts/new`.
    
      Keep in mind that your server must serve the Ember app at all the routes you
      define.
    
      @class HistoryLocation
      @extends EmberObject
      @protected
    */

    var HistoryLocation = function (_EmberObject) {
        (0, _emberBabel.inherits)(HistoryLocation, _EmberObject);

        function HistoryLocation() {
            (0, _emberBabel.classCallCheck)(this, HistoryLocation);

            var _this = (0, _emberBabel.possibleConstructorReturn)(this, _EmberObject.apply(this, arguments));

            _this.implementation = 'history';
            /**
              Will be pre-pended to path upon state change
                     @property rootURL
              @default '/'
              @private
            */
            _this.rootURL = '/';
            return _this;
        }
        /**
          @private
             Returns normalized location.hash
             @method getHash
        */

        HistoryLocation.prototype.getHash = function getHash() {
            return (0, _util.getHash)((0, _metal.get)(this, 'location'));
        };

        HistoryLocation.prototype.init = function init() {
            this._super.apply(this, arguments);
            var base = document.querySelector('base');
            var baseURL = '';
            if (base) {
                baseURL = base.getAttribute('href');
            }
            (0, _metal.set)(this, 'baseURL', baseURL);
            (0, _metal.set)(this, 'location', (0, _metal.get)(this, 'location') || window.location);
            this._popstateHandler = undefined;
        };
        /**
          Used to set state on first call to setURL
             @private
          @method initState
        */

        HistoryLocation.prototype.initState = function initState() {
            var history = (0, _metal.get)(this, 'history') || window.history;
            (0, _metal.set)(this, 'history', history);
            if (history && 'state' in history) {
                this.supportsHistory = true;
            }
            var state = this.getState();
            var path = this.formatURL(this.getURL());
            if (state && state.path === path) {
                // preserve existing state
                // used for webkit workaround, since there will be no initial popstate event
                this._previousURL = this.getURL();
            } else {
                this.replaceState(path);
            }
        };
        /**
          Returns the current `location.pathname` without `rootURL` or `baseURL`
             @private
          @method getURL
          @return url {String}
        */

        HistoryLocation.prototype.getURL = function getURL() {
            var location = (0, _metal.get)(this, 'location');
            var path = location.pathname;
            var rootURL = (0, _metal.get)(this, 'rootURL');
            var baseURL = (0, _metal.get)(this, 'baseURL');
            // remove trailing slashes if they exists
            rootURL = rootURL.replace(/\/$/, '');
            baseURL = baseURL.replace(/\/$/, '');
            // remove baseURL and rootURL from start of path
            var url = path.replace(new RegExp('^' + baseURL + '(?=/|$)'), '').replace(new RegExp('^' + rootURL + '(?=/|$)'), '').replace(/\/\/$/g, '/'); // remove extra slashes
            var search = location.search || '';
            url += search + this.getHash();
            return url;
        };
        /**
          Uses `history.pushState` to update the url without a page reload.
             @private
          @method setURL
          @param path {String}
        */

        HistoryLocation.prototype.setURL = function setURL(path) {
            var state = this.getState();
            path = this.formatURL(path);
            if (!state || state.path !== path) {
                this.pushState(path);
            }
        };
        /**
          Uses `history.replaceState` to update the url without a page reload
          or history modification.
             @private
          @method replaceURL
          @param path {String}
        */

        HistoryLocation.prototype.replaceURL = function replaceURL(path) {
            var state = this.getState();
            path = this.formatURL(path);
            if (!state || state.path !== path) {
                this.replaceState(path);
            }
        };
        /**
          Get the current `history.state`. Checks for if a polyfill is
          required and if so fetches this._historyState. The state returned
          from getState may be null if an iframe has changed a window's
          history.
             The object returned will contain a `path` for the given state as well
          as a unique state `id`. The state index will allow the app to distinguish
          between two states with similar paths but should be unique from one another.
             @private
          @method getState
          @return state {Object}
        */

        HistoryLocation.prototype.getState = function getState() {
            if (this.supportsHistory) {
                return (0, _metal.get)(this, 'history').state;
            }
            return this._historyState;
        };
        /**
         Pushes a new state.
            @private
         @method pushState
         @param path {String}
        */

        HistoryLocation.prototype.pushState = function pushState(path) {
            var state = { path: path, uuid: _uuid() };
            (0, _metal.get)(this, 'history').pushState(state, null, path);
            this._historyState = state;
            // used for webkit workaround
            this._previousURL = this.getURL();
        };
        /**
         Replaces the current state.
            @private
         @method replaceState
         @param path {String}
        */

        HistoryLocation.prototype.replaceState = function replaceState(path) {
            var state = { path: path, uuid: _uuid() };
            (0, _metal.get)(this, 'history').replaceState(state, null, path);
            this._historyState = state;
            // used for webkit workaround
            this._previousURL = this.getURL();
        };
        /**
          Register a callback to be invoked whenever the browser
          history changes, including using forward and back buttons.
             @private
          @method onUpdateURL
          @param callback {Function}
        */

        HistoryLocation.prototype.onUpdateURL = function onUpdateURL(callback) {
            var _this2 = this;

            this._removeEventListener();
            this._popstateHandler = function () {
                // Ignore initial page load popstate event in Chrome
                if (!popstateFired) {
                    popstateFired = true;
                    if (_this2.getURL() === _this2._previousURL) {
                        return;
                    }
                }
                callback(_this2.getURL());
            };
            window.addEventListener('popstate', this._popstateHandler);
        };
        /**
          Used when using `{{action}}` helper.  The url is always appended to the rootURL.
             @private
          @method formatURL
          @param url {String}
          @return formatted url {String}
        */

        HistoryLocation.prototype.formatURL = function formatURL(url) {
            var rootURL = (0, _metal.get)(this, 'rootURL');
            var baseURL = (0, _metal.get)(this, 'baseURL');
            if (url !== '') {
                // remove trailing slashes if they exists
                rootURL = rootURL.replace(/\/$/, '');
                baseURL = baseURL.replace(/\/$/, '');
            } else if (baseURL[0] === '/' && rootURL[0] === '/') {
                // if baseURL and rootURL both start with a slash
                // ... remove trailing slash from baseURL if it exists
                baseURL = baseURL.replace(/\/$/, '');
            }
            return baseURL + rootURL + url;
        };
        /**
          Cleans up the HistoryLocation event listener.
             @private
          @method willDestroy
        */

        HistoryLocation.prototype.willDestroy = function willDestroy() {
            this._removeEventListener();
        };

        HistoryLocation.prototype._removeEventListener = function _removeEventListener() {
            if (this._popstateHandler) {
                window.removeEventListener('popstate', this._popstateHandler);
            }
        };

        return HistoryLocation;
    }(_runtime.Object);

    exports.default = HistoryLocation;
});
enifed('@ember/-internals/routing/lib/location/none_location', ['exports', 'ember-babel', '@ember/-internals/metal', '@ember/-internals/runtime', '@ember/debug'], function (exports, _emberBabel, _metal, _runtime, _debug) {
    'use strict';

    /**
    @module @ember/routing
    */
    /**
      NoneLocation does not interact with the browser. It is useful for
      testing, or when you need to manage state with your Router, but temporarily
      don't want it to muck with the URL (for example when you embed your
      application in a larger page).
    
      Using `NoneLocation` causes Ember to not store the applications URL state
      in the actual URL. This is generally used for testing purposes, and is one
      of the changes made when calling `App.setupForTesting()`.
    
      @class NoneLocation
      @extends EmberObject
      @protected
    */

    var NoneLocation = function (_EmberObject) {
        (0, _emberBabel.inherits)(NoneLocation, _EmberObject);

        function NoneLocation() {
            (0, _emberBabel.classCallCheck)(this, NoneLocation);

            var _this = (0, _emberBabel.possibleConstructorReturn)(this, _EmberObject.apply(this, arguments));

            _this.implementation = 'none';
            return _this;
        }

        NoneLocation.prototype.detect = function detect() {
            var rootURL = this.rootURL;
            true && !(rootURL.charAt(rootURL.length - 1) === '/') && (0, _debug.assert)('rootURL must end with a trailing forward slash e.g. "/app/"', rootURL.charAt(rootURL.length - 1) === '/');
        };
        /**
          Returns the current path without `rootURL`.
             @private
          @method getURL
          @return {String} path
        */

        NoneLocation.prototype.getURL = function getURL() {
            var path = (0, _metal.get)(this, 'path');
            var rootURL = (0, _metal.get)(this, 'rootURL');
            // remove trailing slashes if they exists
            rootURL = rootURL.replace(/\/$/, '');
            // remove rootURL from url
            return path.replace(new RegExp('^' + rootURL + '(?=/|$)'), '');
        };
        /**
          Set the path and remembers what was set. Using this method
          to change the path will not invoke the `updateURL` callback.
             @private
          @method setURL
          @param path {String}
        */

        NoneLocation.prototype.setURL = function setURL(path) {
            (0, _metal.set)(this, 'path', path);
        };
        /**
          Register a callback to be invoked when the path changes. These
          callbacks will execute when the user presses the back or forward
          button, but not after `setURL` is invoked.
             @private
          @method onUpdateURL
          @param callback {Function}
        */

        NoneLocation.prototype.onUpdateURL = function onUpdateURL(callback) {
            this.updateCallback = callback;
        };
        /**
          Sets the path and calls the `updateURL` callback.
             @private
          @method handleURL
          @param url {String}
        */

        NoneLocation.prototype.handleURL = function handleURL(url) {
            (0, _metal.set)(this, 'path', url);
            this.updateCallback(url);
        };
        /**
          Given a URL, formats it to be placed into the page as part
          of an element's `href` attribute.
             This is used, for example, when using the {{action}} helper
          to generate a URL based on an event.
             @private
          @method formatURL
          @param url {String}
          @return {String} url
        */

        NoneLocation.prototype.formatURL = function formatURL(url) {
            var rootURL = (0, _metal.get)(this, 'rootURL');
            if (url !== '') {
                // remove trailing slashes if they exists
                rootURL = rootURL.replace(/\/$/, '');
            }
            return rootURL + url;
        };

        return NoneLocation;
    }(_runtime.Object);

    exports.default = NoneLocation;


    NoneLocation.reopen({
        path: '',
        /**
          Will be pre-pended to path.
             @private
          @property rootURL
          @default '/'
        */
        rootURL: '/'
    });
});
enifed('@ember/-internals/routing/lib/location/util', ['exports'], function (exports) {
    'use strict';

    exports.getPath = getPath;
    exports.getQuery = getQuery;
    exports.getHash = getHash;
    exports.getFullPath = getFullPath;
    exports.getOrigin = getOrigin;
    exports.supportsHashChange = supportsHashChange;
    exports.supportsHistory = supportsHistory;
    exports.replacePath = replacePath;
    /**
      @private
    
      Returns the current `location.pathname`, normalized for IE inconsistencies.
    */
    function getPath(location) {
        var pathname = location.pathname;
        // Various versions of IE/Opera don't always return a leading slash
        if (pathname[0] !== '/') {
            pathname = '/' + pathname;
        }
        return pathname;
    }
    /**
      @private
    
      Returns the current `location.search`.
    */
    function getQuery(location) {
        return location.search;
    }
    /**
      @private
    
      Returns the hash or empty string
    */
    function getHash(location) {
        if (location.hash !== undefined) {
            return location.hash.substr(0);
        }
        return '';
    }
    function getFullPath(location) {
        return getPath(location) + getQuery(location) + getHash(location);
    }
    function getOrigin(location) {
        var origin = location.origin;
        // Older browsers, especially IE, don't have origin
        if (!origin) {
            origin = location.protocol + '//' + location.hostname;
            if (location.port) {
                origin += ':' + location.port;
            }
        }
        return origin;
    }
    /*
      `documentMode` only exist in Internet Explorer, and it's tested because IE8 running in
      IE7 compatibility mode claims to support `onhashchange` but actually does not.
    
      `global` is an object that may have an `onhashchange` property.
    
      @private
      @function supportsHashChange
    */
    function supportsHashChange(documentMode, global) {
        return global && 'onhashchange' in global && (documentMode === undefined || documentMode > 7);
    }
    /*
      `userAgent` is a user agent string. We use user agent testing here, because
      the stock Android browser is known to have buggy versions of the History API,
      in some Android versions.
    
      @private
      @function supportsHistory
    */
    function supportsHistory(userAgent, history) {
        // Boosted from Modernizr: https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
        // The stock browser on Android 2.2 & 2.3, and 4.0.x returns positive on history support
        // Unfortunately support is really buggy and there is no clean way to detect
        // these bugs, so we fall back to a user agent sniff :(
        // We only want Android 2 and 4.0, stock browser, and not Chrome which identifies
        // itself as 'Mobile Safari' as well, nor Windows Phone.
        if ((userAgent.indexOf('Android 2.') !== -1 || userAgent.indexOf('Android 4.0') !== -1) && userAgent.indexOf('Mobile Safari') !== -1 && userAgent.indexOf('Chrome') === -1 && userAgent.indexOf('Windows Phone') === -1) {
            return false;
        }
        return !!(history && 'pushState' in history);
    }
    /**
      Replaces the current location, making sure we explicitly include the origin
      to prevent redirecting to a different origin.
    
      @private
    */
    function replacePath(location, path) {
        location.replace(getOrigin(location) + path);
    }
});
enifed('@ember/-internals/routing/lib/services/router', ['exports', 'ember-babel', '@ember/-internals/runtime', '@ember/debug', '@ember/object/computed', '@ember/service', '@ember/-internals/routing/lib/utils'], function (exports, _emberBabel, _runtime, _debug, _computed, _service, _utils) {
    'use strict';

    var freezeRouteInfo = void 0;
    if (true /* DEBUG */) {
            freezeRouteInfo = function (transition) {
                if (transition.from !== null && !Object.isFrozen(transition.from)) {
                    Object.freeze(transition.from);
                }
                if (transition.to !== null && !Object.isFrozen(transition.to)) {
                    Object.freeze(transition.to);
                }
            };
        }
    /**
       The Router service is the public API that provides access to the router.
    
       The immediate benefit of the Router service is that you can inject it into components,
       giving them a friendly way to initiate transitions and ask questions about the current
       global router state.
    
       In this example, the Router service is injected into a component to initiate a transition
       to a dedicated route:
       ```javascript
       import Component from '@ember/component';
       import { inject as service } from '@ember/service';
    
       export default Component.extend({
         router: service(),
    
         actions: {
           next() {
             this.get('router').transitionTo('other.route');
           }
         }
       });
       ```
    
       Like any service, it can also be injected into helpers, routes, etc.
    
       @public
       @class RouterService
     */

    var RouterService = function (_Service) {
        (0, _emberBabel.inherits)(RouterService, _Service);

        function RouterService() {
            (0, _emberBabel.classCallCheck)(this, RouterService);

            return (0, _emberBabel.possibleConstructorReturn)(this, _Service.apply(this, arguments));
        }

        /**
           Transition the application into another route. The route may
           be either a single route or route path:
              See [transitionTo](/api/ember/release/classes/Route/methods/transitionTo?anchor=transitionTo) for more info.
              Calling `transitionTo` from the Router service will cause default query parameter values to be included in the URL.
           This behavior is different from calling `transitionTo` on a route or `transitionToRoute` on a controller.
           See the [Router Service RFC](https://github.com/emberjs/rfcs/blob/master/text/0095-router-service.md#query-parameter-semantics) for more info.
              @method transitionTo
           @param {String} routeNameOrUrl the name of the route or a URL
           @param {...Object} models the model(s) or identifier(s) to be used while
             transitioning to the route.
           @param {Object} [options] optional hash with a queryParams property
             containing a mapping of query parameters
           @return {Transition} the transition object associated with this
             attempted transition
           @public
         */
        RouterService.prototype.transitionTo = function transitionTo() {
            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            if ((0, _utils.resemblesURL)(args[0])) {
                return this._router._doURLTransition('transitionTo', args[0]);
            }

            var _extractRouteArgs = (0, _utils.extractRouteArgs)(args),
                routeName = _extractRouteArgs.routeName,
                models = _extractRouteArgs.models,
                queryParams = _extractRouteArgs.queryParams;

            var transition = this._router._doTransition(routeName, models, queryParams, true);
            transition['_keepDefaultQueryParamValues'] = true;
            return transition;
        };
        /**
           Transition into another route while replacing the current URL, if possible.
           The route may be either a single route or route path:
              See [replaceWith](/api/ember/release/classes/Route/methods/replaceWith?anchor=replaceWith) for more info.
              Calling `replaceWith` from the Router service will cause default query parameter values to be included in the URL.
           This behavior is different from calling `replaceWith` on a route.
           See the [Router Service RFC](https://github.com/emberjs/rfcs/blob/master/text/0095-router-service.md#query-parameter-semantics) for more info.
              @method replaceWith
           @param {String} routeNameOrUrl the name of the route or a URL
           @param {...Object} models the model(s) or identifier(s) to be used while
             transitioning to the route.
           @param {Object} [options] optional hash with a queryParams property
             containing a mapping of query parameters
           @return {Transition} the transition object associated with this
             attempted transition
           @public
         */

        RouterService.prototype.replaceWith = function replaceWith() /* routeNameOrUrl, ...models, options */{
            return this.transitionTo.apply(this, arguments).method('replace');
        };
        /**
           Generate a URL based on the supplied route name.
              @method urlFor
           @param {String} routeName the name of the route
           @param {...Object} models the model(s) or identifier(s) to be used while
             transitioning to the route.
           @param {Object} [options] optional hash with a queryParams property
             containing a mapping of query parameters
           @return {String} the string representing the generated URL
           @public
         */

        RouterService.prototype.urlFor = function urlFor(routeName) {
            var _router;

            for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
            }

            return (_router = this._router).generate.apply(_router, [routeName].concat(args));
        };
        /**
           Determines whether a route is active.
              @method isActive
           @param {String} routeName the name of the route
           @param {...Object} models the model(s) or identifier(s) to be used while
             transitioning to the route.
           @param {Object} [options] optional hash with a queryParams property
             containing a mapping of query parameters
           @return {boolean} true if the provided routeName/models/queryParams are active
           @public
         */

        RouterService.prototype.isActive = function isActive() {
            for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                args[_key3] = arguments[_key3];
            }

            var _extractRouteArgs2 = (0, _utils.extractRouteArgs)(args),
                routeName = _extractRouteArgs2.routeName,
                models = _extractRouteArgs2.models,
                queryParams = _extractRouteArgs2.queryParams;

            var routerMicrolib = this._router._routerMicrolib;
            if (!routerMicrolib.isActiveIntent(routeName, models)) {
                return false;
            }
            var hasQueryParams = Object.keys(queryParams).length > 0;
            if (hasQueryParams) {
                this._router._prepareQueryParams(routeName, models, queryParams, true /* fromRouterService */);
                return (0, _utils.shallowEqual)(queryParams, routerMicrolib.state.queryParams);
            }
            return true;
        };

        return RouterService;
    }(_service.default);

    exports.default = RouterService;


    RouterService.reopen({
        /**
           Name of the current route.
              This property represents the logical name of the route,
           which is comma separated.
           For the following router:
              ```app/router.js
           Router.map(function() {
             this.route('about');
             this.route('blog', function () {
               this.route('post', { path: ':post_id' });
             });
           });
           ```
              It will return:
              * `index` when you visit `/`
           * `about` when you visit `/about`
           * `blog.index` when you visit `/blog`
           * `blog.post` when you visit `/blog/some-post-id`
              @property currentRouteName
           @type String
           @public
         */
        currentRouteName: (0, _computed.readOnly)('_router.currentRouteName'),
        /**
           Current URL for the application.
             This property represents the URL path for this route.
          For the following router:
              ```app/router.js
           Router.map(function() {
             this.route('about');
             this.route('blog', function () {
               this.route('post', { path: ':post_id' });
             });
           });
           ```
              It will return:
              * `/` when you visit `/`
           * `/about` when you visit `/about`
           * `/blog` when you visit `/blog`
           * `/blog/some-post-id` when you visit `/blog/some-post-id`
              @property currentURL
           @type String
           @public
         */
        currentURL: (0, _computed.readOnly)('_router.currentURL'),
        /**
          The `location` property determines the type of URL's that your
          application will use.
          The following location types are currently available:
          * `auto`
          * `hash`
          * `history`
          * `none`
             @property location
          @default 'hash'
          @see {Location}
          @public
        */
        location: (0, _computed.readOnly)('_router.location'),
        /**
          The `rootURL` property represents the URL of the root of
          the application, '/' by default.
          This prefix is assumed on all routes defined on this app.
             IF you change the `rootURL` in your environment configuration
          like so:
             ```config/environment.js
          'use strict';
             module.exports = function(environment) {
            let ENV = {
              modulePrefix: 'router-service',
              environment,
              rootURL: '/my-root',
            …
            }
          ]
          ```
             This property will return `/my-root`.
             @property rootURL
          @default '/'
          @public
        */
        rootURL: (0, _computed.readOnly)('_router.rootURL')
    });
    if (true /* EMBER_ROUTING_ROUTER_SERVICE */) {
            var cleanURL = function (url, rootURL) {
                if (rootURL === '/') {
                    return url;
                }
                return url.substr(rootURL.length, url.length);
            };
            RouterService.reopen(_runtime.Evented, {
                init: function () {
                    var _this2 = this;

                    this._super.apply(this, arguments);
                    this._router.on('routeWillChange', function (transition) {
                        if (true /* DEBUG */) {
                                freezeRouteInfo(transition);
                            }
                        _this2.trigger('routeWillChange', transition);
                    });
                    this._router.on('routeDidChange', function (transition) {
                        if (true /* DEBUG */) {
                                freezeRouteInfo(transition);
                            }
                        _this2.trigger('routeDidChange', transition);
                    });
                },

                /**
                 A RouteInfo that represents the current leaf route.
                 It is guaranteed to change whenever a route transition
                 happens (even when that transition only changes parameters
                 and doesn't change the active route)
                      @property currentRoute
                 @type RouteInfo
                 @category ember-routing-router-service
                 @public
                */
                currentRoute: (0, _computed.readOnly)('_router.currentRoute'),
                /**
                 Takes a string URL and returns a `RouteInfo` for the leafmost route represented
                 by the URL. Returns `null` if the URL is not recognized. This method expects to
                 receive the actual URL as seen by the browser including the app's `rootURL`.
                       @method recognize
                  @param {String} url
                  @category ember-routing-router-service
                  @public
                */
                recognize: function (url) {
                    true && !(url.indexOf(this.rootURL) === 0) && (0, _debug.assert)('You must pass a url that begins with the application\'s rootURL "' + this.rootURL + '"', url.indexOf(this.rootURL) === 0);

                    var internalURL = cleanURL(url, this.rootURL);
                    return this._router._routerMicrolib.recognize(internalURL);
                },

                /**
                  Takes a string URL and returns a promise that resolves to a
                  `RouteInfoWithAttributes` for the leafmost route represented by the URL.
                  The promise rejects if the URL is not recognized or an unhandled exception
                  is encountered. This method expects to receive the actual URL as seen by
                  the browser including the app's `rootURL`.
                         @method recognizeAndLoad
                    @param {String} url
                    @category ember-routing-router-service
                    @public
                 */
                recognizeAndLoad: function (url) {
                    true && !(url.indexOf(this.rootURL) === 0) && (0, _debug.assert)('You must pass a url that begins with the application\'s rootURL "' + this.rootURL + '"', url.indexOf(this.rootURL) === 0);

                    var internalURL = cleanURL(url, this.rootURL);
                    return this._router._routerMicrolib.recognizeAndLoad(internalURL);
                }
            });
        }
});
enifed('@ember/-internals/routing/lib/services/routing', ['exports', 'ember-babel', '@ember/-internals/metal', '@ember/object/computed', '@ember/polyfills', '@ember/service'], function (exports, _emberBabel, _metal, _computed, _polyfills, _service) {
    'use strict';

    /**
      The Routing service is used by LinkComponent, and provides facilities for
      the component/view layer to interact with the router.
    
      This is a private service for internal usage only. For public usage,
      refer to the `Router` service.
    
      @private
      @class RoutingService
    */

    /**
    @module ember
    */
    var RoutingService = function (_Service) {
        (0, _emberBabel.inherits)(RoutingService, _Service);

        function RoutingService() {
            (0, _emberBabel.classCallCheck)(this, RoutingService);

            return (0, _emberBabel.possibleConstructorReturn)(this, _Service.apply(this, arguments));
        }

        RoutingService.prototype.hasRoute = function hasRoute(routeName) {
            return (0, _metal.get)(this, 'router').hasRoute(routeName);
        };

        RoutingService.prototype.transitionTo = function transitionTo(routeName, models, queryParams, shouldReplace) {
            var router = (0, _metal.get)(this, 'router');
            var transition = router._doTransition(routeName, models, queryParams);
            if (shouldReplace) {
                transition.method('replace');
            }
            return transition;
        };

        RoutingService.prototype.normalizeQueryParams = function normalizeQueryParams(routeName, models, queryParams) {
            (0, _metal.get)(this, 'router')._prepareQueryParams(routeName, models, queryParams);
        };

        RoutingService.prototype.generateURL = function generateURL(routeName, models, queryParams) {
            var router = (0, _metal.get)(this, 'router');
            // return early when the router microlib is not present, which is the case for {{link-to}} in integration tests
            if (!router._routerMicrolib) {
                return;
            }
            var visibleQueryParams = {};
            if (queryParams) {
                (0, _polyfills.assign)(visibleQueryParams, queryParams);
                this.normalizeQueryParams(routeName, models, visibleQueryParams);
            }
            return router.generate.apply(router, [routeName].concat(models, [{
                queryParams: visibleQueryParams
            }]));
        };

        RoutingService.prototype.isActiveForRoute = function isActiveForRoute(contexts, queryParams, routeName, routerState, isCurrentWhenSpecified) {
            var router = (0, _metal.get)(this, 'router');
            var handlers = router._routerMicrolib.recognizer.handlersFor(routeName);
            var leafName = handlers[handlers.length - 1].handler;
            var maximumContexts = numberOfContextsAcceptedByHandler(routeName, handlers);
            // NOTE: any ugliness in the calculation of activeness is largely
            // due to the fact that we support automatic normalizing of
            // `resource` -> `resource.index`, even though there might be
            // dynamic segments / query params defined on `resource.index`
            // which complicates (and makes somewhat ambiguous) the calculation
            // of activeness for links that link to `resource` instead of
            // directly to `resource.index`.
            // if we don't have enough contexts revert back to full route name
            // this is because the leaf route will use one of the contexts
            if (contexts.length > maximumContexts) {
                routeName = leafName;
            }
            return routerState.isActiveIntent(routeName, contexts, queryParams, !isCurrentWhenSpecified);
        };

        return RoutingService;
    }(_service.default);

    exports.default = RoutingService;


    RoutingService.reopen({
        targetState: (0, _computed.readOnly)('router.targetState'),
        currentState: (0, _computed.readOnly)('router.currentState'),
        currentRouteName: (0, _computed.readOnly)('router.currentRouteName'),
        currentPath: (0, _computed.readOnly)('router.currentPath')
    });
    function numberOfContextsAcceptedByHandler(handlerName, handlerInfos) {
        var req = 0;
        for (var i = 0; i < handlerInfos.length; i++) {
            req += handlerInfos[i].names.length;
            if (handlerInfos[i].handler === handlerName) {
                break;
            }
        }
        return req;
    }
});
enifed("@ember/-internals/routing/lib/system/cache", ["exports", "ember-babel"], function (exports, _emberBabel) {
    "use strict";

    /**
      A two-tiered cache with support for fallback values when doing lookups.
      Uses "buckets" and then "keys" to cache values.
    
      @private
      @class BucketCache
    */
    var BucketCache = function () {
        function BucketCache() {
            (0, _emberBabel.classCallCheck)(this, BucketCache);

            this.cache = new Map();
        }

        BucketCache.prototype.has = function has(bucketKey) {
            return this.cache.has(bucketKey);
        };

        BucketCache.prototype.stash = function stash(bucketKey, key, value) {
            var bucket = this.cache.get(bucketKey);
            if (bucket === undefined) {
                bucket = new Map();
                this.cache.set(bucketKey, bucket);
            }
            bucket.set(key, value);
        };

        BucketCache.prototype.lookup = function lookup(bucketKey, prop, defaultValue) {
            if (!this.has(bucketKey)) {
                return defaultValue;
            }
            var bucket = this.cache.get(bucketKey);
            if (bucket.has(prop)) {
                return bucket.get(prop);
            } else {
                return defaultValue;
            }
        };

        return BucketCache;
    }();

    exports.default = BucketCache;
});
enifed("@ember/-internals/routing/lib/system/controller_for", ["exports"], function (exports) {
  "use strict";

  exports.default = controllerFor;
  /**
  @module ember
  */
  /**
    Finds a controller instance.
  
    @for Ember
    @method controllerFor
    @private
  */
  function controllerFor(container, controllerName, lookupOptions) {
    return container.lookup("controller:" + controllerName, lookupOptions);
  }
});
enifed('@ember/-internals/routing/lib/system/dsl', ['exports', 'ember-babel', '@ember/debug', '@ember/polyfills'], function (exports, _emberBabel, _debug, _polyfills) {
    'use strict';

    var uuid = 0;

    var DSL = function () {
        function DSL() {
            var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
            var options = arguments[1];

            (0, _emberBabel.classCallCheck)(this, DSL);

            this.explicitIndex = false;
            this.parent = name;
            this.enableLoadingSubstates = !!(options && options.enableLoadingSubstates);
            this.matches = [];
            this.options = options;
        }

        DSL.prototype.route = function route(name) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            var callback = arguments[2];

            var dummyErrorRoute = '/_unused_dummy_error_path_route_' + name + '/:error';
            if (arguments.length === 2 && typeof options === 'function') {
                callback = options;
                options = {};
            }
            true && !function () {
                if (options.overrideNameAssertion === true) {
                    return true;
                }
                return ['basic', 'application'].indexOf(name) === -1;
            }() && (0, _debug.assert)('\'' + name + '\' cannot be used as a route name.', function () {
                if (options.overrideNameAssertion === true) {
                    return true;
                }return ['basic', 'application'].indexOf(name) === -1;
            }());
            true && !(name.indexOf(':') === -1) && (0, _debug.assert)('\'' + name + '\' is not a valid route name. It cannot contain a \':\'. You may want to use the \'path\' option instead.', name.indexOf(':') === -1);

            if (this.enableLoadingSubstates) {
                createRoute(this, name + '_loading', {
                    resetNamespace: options.resetNamespace
                });
                createRoute(this, name + '_error', {
                    resetNamespace: options.resetNamespace,
                    path: dummyErrorRoute
                });
            }
            if (callback) {
                var fullName = getFullName(this, name, options.resetNamespace);
                var dsl = new DSL(fullName, this.options);
                createRoute(dsl, 'loading');
                createRoute(dsl, 'error', { path: dummyErrorRoute });
                callback.call(dsl);
                createRoute(this, name, options, dsl.generate());
            } else {
                createRoute(this, name, options);
            }
        };

        DSL.prototype.push = function push(url, name, callback, serialize) {
            var parts = name.split('.');
            if (this.options.engineInfo) {
                var localFullName = name.slice(this.options.engineInfo.fullName.length + 1);
                var routeInfo = (0, _polyfills.assign)({ localFullName: localFullName }, this.options.engineInfo);
                if (serialize) {
                    routeInfo.serializeMethod = serialize;
                }
                this.options.addRouteForEngine(name, routeInfo);
            } else if (serialize) {
                throw new Error('Defining a route serializer on route \'' + name + '\' outside an Engine is not allowed.');
            }
            if (url === '' || url === '/' || parts[parts.length - 1] === 'index') {
                this.explicitIndex = true;
            }
            this.matches.push(url, name, callback);
        };

        DSL.prototype.generate = function generate() {
            var dslMatches = this.matches;
            if (!this.explicitIndex) {
                this.route('index', { path: '/' });
            }
            return function (match) {
                for (var i = 0; i < dslMatches.length; i += 3) {
                    match(dslMatches[i]).to(dslMatches[i + 1], dslMatches[i + 2]);
                }
            };
        };

        DSL.prototype.mount = function mount(_name) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            var engineRouteMap = this.options.resolveRouteMap(_name);
            var name = _name;
            if (options.as) {
                name = options.as;
            }
            var fullName = getFullName(this, name, options.resetNamespace);
            var engineInfo = {
                name: _name,
                instanceId: uuid++,
                mountPoint: fullName,
                fullName: fullName
            };
            var path = options.path;
            if (typeof path !== 'string') {
                path = '/' + name;
            }
            var callback = void 0;
            var dummyErrorRoute = '/_unused_dummy_error_path_route_' + name + '/:error';
            if (engineRouteMap) {
                var shouldResetEngineInfo = false;
                var oldEngineInfo = this.options.engineInfo;
                if (oldEngineInfo) {
                    shouldResetEngineInfo = true;
                    this.options.engineInfo = engineInfo;
                }
                var optionsForChild = (0, _polyfills.assign)({ engineInfo: engineInfo }, this.options);
                var childDSL = new DSL(fullName, optionsForChild);
                createRoute(childDSL, 'loading');
                createRoute(childDSL, 'error', { path: dummyErrorRoute });
                engineRouteMap.class.call(childDSL);
                callback = childDSL.generate();
                if (shouldResetEngineInfo) {
                    this.options.engineInfo = oldEngineInfo;
                }
            }
            var localFullName = 'application';
            var routeInfo = (0, _polyfills.assign)({ localFullName: localFullName }, engineInfo);
            if (this.enableLoadingSubstates) {
                // These values are important to register the loading routes under their
                // proper names for the Router and within the Engine's registry.
                var substateName = name + '_loading';
                var _localFullName = 'application_loading';
                var _routeInfo = (0, _polyfills.assign)({ localFullName: _localFullName }, engineInfo);
                createRoute(this, substateName, {
                    resetNamespace: options.resetNamespace
                });
                this.options.addRouteForEngine(substateName, _routeInfo);
                substateName = name + '_error';
                _localFullName = 'application_error';
                _routeInfo = (0, _polyfills.assign)({ localFullName: _localFullName }, engineInfo);
                createRoute(this, substateName, {
                    resetNamespace: options.resetNamespace,
                    path: dummyErrorRoute
                });
                this.options.addRouteForEngine(substateName, _routeInfo);
            }
            this.options.addRouteForEngine(fullName, routeInfo);
            this.push(path, fullName, callback);
        };

        return DSL;
    }();

    exports.default = DSL;

    function canNest(dsl) {
        return dsl.parent !== 'application';
    }
    function getFullName(dsl, name, resetNamespace) {
        if (canNest(dsl) && resetNamespace !== true) {
            return dsl.parent + '.' + name;
        } else {
            return name;
        }
    }
    function createRoute(dsl, name) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var callback = arguments[3];

        var fullName = getFullName(dsl, name, options.resetNamespace);
        if (typeof options.path !== 'string') {
            options.path = '/' + name;
        }
        dsl.push(options.path, fullName, callback, options.serialize);
    }
});
enifed("@ember/-internals/routing/lib/system/engines", [], function () {
  "use strict";
});
enifed('@ember/-internals/routing/lib/system/generate_controller', ['exports', '@ember/-internals/metal', '@ember/debug'], function (exports, _metal, _debug) {
    'use strict';

    exports.generateControllerFactory = generateControllerFactory;
    exports.default = generateController;


    /**
    @module ember
    */
    /**
      Generates a controller factory
    
      @for Ember
      @method generateControllerFactory
      @private
    */
    function generateControllerFactory(owner, controllerName) {
        var Factory = owner.factoryFor('controller:basic').class;
        Factory = Factory.extend({
            toString: function () {
                return '(generated ' + controllerName + ' controller)';
            }
        });
        var fullName = 'controller:' + controllerName;
        owner.register(fullName, Factory);
        return Factory;
    }
    /**
      Generates and instantiates a controller extending from `controller:basic`
      if present, or `Controller` if not.
    
      @for Ember
      @method generateController
      @private
      @since 1.3.0
    */
    function generateController(owner, controllerName) {
        generateControllerFactory(owner, controllerName);
        var fullName = 'controller:' + controllerName;
        var instance = owner.lookup(fullName);
        if (true /* DEBUG */) {
                if ((0, _metal.get)(instance, 'namespace.LOG_ACTIVE_GENERATION')) {
                    (0, _debug.info)('generated -> ' + fullName, { fullName: fullName });
                }
            }
        return instance;
    }
});
enifed("@ember/-internals/routing/lib/system/query_params", ["exports", "ember-babel"], function (exports, _emberBabel) {
    "use strict";

    var QueryParams = function QueryParams() {
        var values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

        (0, _emberBabel.classCallCheck)(this, QueryParams);

        this.isQueryParams = true;
        this.values = values;
    };

    exports.default = QueryParams;
});
enifed("@ember/-internals/routing/lib/system/route-info", [], function () {
  "use strict";
  /**
    A `RouteInfoWithAttributes` is an object that contains
    metadata, including the resolved value from the routes
    `model` hook. Like `RouteInfo`, a `RouteInfoWithAttributes`
    represents a specific route within a Transition.
    It is read-only and internally immutable. It is also not
    observable, because a Transition instance is never
    changed after creation.
  
    @class RouteInfoWithAttributes
    @category ember-routing-router-service
    @public
  */
  /**
    The dot-separated, fully-qualified name of the
    route, like "people.index".
    @property {String} name
    @category ember-routing-router-service
    @public
  */
  /**
    The final segment of the fully-qualified name of
    the route, like "index"
    @property {String} localName
    @category ember-routing-router-service
    @public
  */
  /**
    The values of the route's parameters. These are the
    same params that are received as arguments to the
    route's model hook. Contains only the parameters
    valid for this route, if any (params for parent or
    child routes are not merged).
    @property {Object} params
    @category ember-routing-router-service
    @public
  */
  /**
    The ordered list of the names of the params
    required for this route. It will contain the same
    strings as Object.keys(params), but here the order
    is significant. This allows users to correctly pass
    params into routes programmatically.
    @property {Array} paramNames
    @category ember-routing-router-service
    @public
  */
  /**
    The values of any queryParams on this route.
    @property {Object} queryParams
    @category ember-routing-router-service
    @public
  */
  /**
    This is the resolved return value from the
    route's model hook.
    @property {Object|Array|String} attributes
    @category ember-routing-router-service
    @public
  */
  /**
    A reference to the parent route's RouteInfo.
    This can be used to traverse upward to the topmost
    `RouteInfo`.
    @property {RouteInfo|null} parent
    @category ember-routing-router-service
    @public
  */
  /**
    A reference to the child route's RouteInfo.
    This can be used to traverse downward to the
    leafmost `RouteInfo`.
    @property {RouteInfo|null} child
    @category ember-routing-router-service
    @public
  
    Allows you to traverse through the linked list
    of `RouteInfo`s from the topmost to leafmost.
    Returns the first `RouteInfo` in the linked list
    for which the callback returns true.
  
      This method is similar to the `find()` method
      defined in ECMAScript 2015.
  
      The callback method you provide should have the
      following signature (all parameters are optional):
  
      ```javascript
      function(item, index, array);
      ```
  
      - `item` is the current item in the iteration.
      - `index` is the current index in the iteration.
      - `array` is the array itself.
  
      It should return the `true` to include the item in
      the results, `false` otherwise.
  
      Note that in addition to a callback, you can also
      pass an optional target object that will be set as
      `this` on the context.
  
    @method find
    @param {Function} callback the callback to execute
    @param {Object} [target*] optional target to use
    @returns {Object} Found item or undefined
    @category ember-routing-router-service
    @public
  */
  /**
    A RouteInfo is an object that contains metadata
    about a specific route within a Transition. It is
    read-only and internally immutable. It is also not
    observable, because a Transition instance is never
    changed after creation.
  
    @class RouteInfo
    @category ember-routing-router-service
    @public
  */
  /**
    The dot-separated, fully-qualified name of the
    route, like "people.index".
    @property {String} name
    @category ember-routing-router-service
    @public
  */
  /**
    The final segment of the fully-qualified name of
    the route, like "index"
    @property {String} localName
    @category ember-routing-router-service
    @public
  */
  /**
    The values of the route's parametes. These are the
    same params that are received as arguments to the
    route's model hook. Contains only the parameters
    valid for this route, if any (params for parent or
    child routes are not merged).
    @property {Object} params
    @category ember-routing-router-service
    @public
  */
  /**
    The ordered list of the names of the params
    required for this route. It will contain the same
    strings as Object.keys(params), but here the order
    is significant. This allows users to correctly pass
    params into routes programmatically.
    @property {Array} paramNames
    @category ember-routing-router-service
    @public
  */
  /**
    The values of any queryParams on this route.
    @property {Object} queryParams
    @category ember-routing-router-service
    @public
  */
  /**
    A reference to the parent route's RouteInfo.
    This can be used to traverse upward to the topmost
    `RouteInfo`.
    @property {RouteInfo|null} parent
    @category ember-routing-router-service
    @public
  */
  /**
    A reference to the child route's RouteInfo.
    This can be used to traverse downward to the
    leafmost `RouteInfo`.
    @property {RouteInfo|null} child
    @category ember-routing-router-service
    @public
  
    Allows you to traverse through the linked list
    of `RouteInfo`s from the topmost to leafmost.
    Returns the first `RouteInfo` in the linked list
    for which the callback returns true.
  
      This method is similar to the `find()` method
      defined in ECMAScript 2015.
  
      The callback method you provide should have the
      following signature (all parameters are optional):
  
      ```javascript
      function(item, index, array);
      ```
  
      - `item` is the current item in the iteration.
      - `index` is the current index in the iteration.
      - `array` is the array itself.
  
      It should return the `true` to include the item in
      the results, `false` otherwise.
  
      Note that in addition to a callback, you can also
      pass an optional target object that will be set as
      `this` on the context.
  
    @method find
    @param {Function} callback the callback to execute
    @param {Object} [target*] optional target to use
    @returns {Object} Found item or undefined
    @category ember-routing-router-service
    @public
  */
});
enifed('@ember/-internals/routing/lib/system/route', ['exports', '@ember/polyfills', 'ember-babel', '@ember/-internals/metal', '@ember/-internals/owner', '@ember/-internals/runtime', '@ember/debug', '@ember/deprecated-features', '@ember/runloop', '@ember/string', 'router_js', '@ember/-internals/routing/lib/utils', '@ember/-internals/routing/lib/system/generate_controller'], function (exports, _polyfills, _emberBabel, _metal, _owner, _runtime, _debug, _deprecatedFeatures, _runloop, _string, _router_js, _utils, _generate_controller) {
   'use strict';

   exports.ROUTER_EVENT_DEPRECATIONS = undefined;
   exports.defaultSerialize = defaultSerialize;
   exports.hasDefaultSerialize = hasDefaultSerialize;
   function defaultSerialize(model, params) {
      if (params.length < 1 || !model) {
         return;
      }
      var object = {};
      if (params.length === 1) {
         var name = params[0];

         if (name in model) {
            object[name] = (0, _metal.get)(model, name);
         } else if (/_id$/.test(name)) {
            object[name] = (0, _metal.get)(model, 'id');
         }
      } else {
         object = (0, _metal.getProperties)(model, params);
      }
      return object;
   }
   function hasDefaultSerialize(route) {
      return route.serialize === defaultSerialize;
   }
   /**
   @module @ember/routing
   */
   /**
     The `Route` class is used to define individual routes. Refer to
     the [routing guide](https://guides.emberjs.com/release/routing/) for documentation.
   
     @class Route
     @extends EmberObject
     @uses ActionHandler
     @uses Evented
     @since 1.0.0
     @public
   */

   var Route = function (_EmberObject) {
      (0, _emberBabel.inherits)(Route, _EmberObject);

      function Route() {
         (0, _emberBabel.classCallCheck)(this, Route);

         var _this = (0, _emberBabel.possibleConstructorReturn)(this, _EmberObject.apply(this, arguments));

         _this.context = {};
         return _this;
      }
      /**
        The name of the route, dot-delimited.
           For example, a route found at `app/routes/posts/post.js` will have
        a `routeName` of `posts.post`.
           @property routeName
        @for Route
        @type String
        @since 1.0.0
        @public
      */
      /**
        The name of the route, dot-delimited, including the engine prefix
        if applicable.
           For example, a route found at `addon/routes/posts/post.js` within an
        engine named `admin` will have a `fullRouteName` of `admin.posts.post`.
           @property fullRouteName
        @for Route
        @type String
        @since 2.10.0
        @public
      */
      /**
        Sets the name for this route, including a fully resolved name for routes
        inside engines.
           @private
        @method _setRouteName
        @param {String} name
      */

      Route.prototype._setRouteName = function _setRouteName(name) {
         this.routeName = name;
         this.fullRouteName = getEngineRouteName((0, _owner.getOwner)(this), name);
      };
      /**
        @private
           @method _stashNames
      */

      Route.prototype._stashNames = function _stashNames(routeInfo, dynamicParent) {
         if (this._names) {
            return;
         }
         var names = this._names = routeInfo['_names'];
         if (!names.length) {
            routeInfo = dynamicParent;
            names = routeInfo && routeInfo['_names'] || [];
         }
         var qps = (0, _metal.get)(this, '_qp.qps');
         var namePaths = new Array(names.length);
         for (var a = 0; a < names.length; ++a) {
            namePaths[a] = routeInfo.name + '.' + names[a];
         }
         for (var i = 0; i < qps.length; ++i) {
            var qp = qps[i];
            if (qp.scope === 'model') {
               qp.parts = namePaths;
            }
         }
      };
      /**
        @private
           @property _activeQPChanged
      */

      Route.prototype._activeQPChanged = function _activeQPChanged(qp, value) {
         this._router._activeQPChanged(qp.scopedPropertyName, value);
      };
      /**
        @private
        @method _updatingQPChanged
      */

      Route.prototype._updatingQPChanged = function _updatingQPChanged(qp) {
         this._router._updatingQPChanged(qp.urlKey);
      };
      /**
        Returns a hash containing the parameters of an ancestor route.
           Example
           ```app/router.js
        // ...
           Router.map(function() {
          this.route('member', { path: ':name' }, function() {
            this.route('interest', { path: ':interest' });
          });
        });
        ```
           ```app/routes/member.js
        import Route from '@ember/routing/route';
           export default Route.extend({
          queryParams: {
            memberQp: { refreshModel: true }
          }
        });
        ```
           ```app/routes/member/interest.js
        import Route from '@ember/routing/route';
           export default Route.extend({
          queryParams: {
            interestQp: { refreshModel: true }
          },
             model() {
            return this.paramsFor('member');
          }
        });
        ```
           If we visit `/turing/maths?memberQp=member&interestQp=interest` the model for
        the `member.interest` route is a hash with:
           * `name`: `turing`
        * `memberQp`: `member`
           @method paramsFor
        @param {String} name
        @return {Object} hash containing the parameters of the route `name`
        @since 1.4.0
        @public
      */

      Route.prototype.paramsFor = function paramsFor(name) {
         var _this2 = this;

         var route = (0, _owner.getOwner)(this).lookup('route:' + name);
         if (!route) {
            return {};
         }
         var transition = this._router._routerMicrolib.activeTransition;
         var state = transition ? transition[_router_js.STATE_SYMBOL] : this._router._routerMicrolib.state;
         var fullName = route.fullRouteName;
         var params = (0, _polyfills.assign)({}, state.params[fullName]);
         var queryParams = getQueryParamsFor(route, state);
         return Object.keys(queryParams).reduce(function (params, key) {
            true && !!params[key] && (0, _debug.assert)('The route \'' + _this2.routeName + '\' has both a dynamic segment and query param with name \'' + key + '\'. Please rename one to avoid collisions.', !params[key]);

            params[key] = queryParams[key];
            return params;
         }, params);
      };
      /**
        Serializes the query parameter key
           @method serializeQueryParamKey
        @param {String} controllerPropertyName
        @private
      */

      Route.prototype.serializeQueryParamKey = function serializeQueryParamKey(controllerPropertyName) {
         return controllerPropertyName;
      };
      /**
        Serializes value of the query parameter based on defaultValueType
           @method serializeQueryParam
        @param {Object} value
        @param {String} urlKey
        @param {String} defaultValueType
        @private
      */

      Route.prototype.serializeQueryParam = function serializeQueryParam(value, _urlKey, defaultValueType) {
         // urlKey isn't used here, but anyone overriding
         // can use it to provide serialization specific
         // to a certain query param.
         return this._router._serializeQueryParam(value, defaultValueType);
      };
      /**
        Deserializes value of the query parameter based on defaultValueType
           @method deserializeQueryParam
        @param {Object} value
        @param {String} urlKey
        @param {String} defaultValueType
        @private
      */

      Route.prototype.deserializeQueryParam = function deserializeQueryParam(value, _urlKey, defaultValueType) {
         // urlKey isn't used here, but anyone overriding
         // can use it to provide deserialization specific
         // to a certain query param.
         return this._router._deserializeQueryParam(value, defaultValueType);
      };
      /**
        @private
           @property _optionsForQueryParam
      */

      Route.prototype._optionsForQueryParam = function _optionsForQueryParam(qp) {
         return (0, _metal.get)(this, 'queryParams.' + qp.urlKey) || (0, _metal.get)(this, 'queryParams.' + qp.prop) || {};
      };
      /**
        A hook you can use to reset controller values either when the model
        changes or the route is exiting.
           ```app/routes/articles.js
        import Route from '@ember/routing/route';
           export default Route.extend({
          resetController(controller, isExiting, transition) {
            if (isExiting && transition.targetName !== 'error') {
              controller.set('page', 1);
            }
          }
        });
        ```
           @method resetController
        @param {Controller} controller instance
        @param {Boolean} isExiting
        @param {Object} transition
        @since 1.7.0
        @public
      */

      Route.prototype.resetController = function resetController(_controller, _isExiting, _transition) {
         return this;
      };
      /**
        @private
           @method exit
      */

      Route.prototype.exit = function exit() {
         this.deactivate();
         this.trigger('deactivate');
         this.teardownViews();
      };
      /**
        @private
           @method _internalReset
        @since 3.6.0
      */

      Route.prototype._internalReset = function _internalReset(isExiting, transition) {
         var controller = this.controller;
         controller._qpDelegate = (0, _metal.get)(this, '_qp.states.inactive');
         this.resetController(controller, isExiting, transition);
      };
      /**
        @private
           @method enter
      */

      Route.prototype.enter = function enter() {
         this.connections = [];
         this.activate();
         this.trigger('activate');
      };
      /**
        The `willTransition` action is fired at the beginning of any
        attempted transition with a `Transition` object as the sole
        argument. This action can be used for aborting, redirecting,
        or decorating the transition from the currently active routes.
           A good example is preventing navigation when a form is
        half-filled out:
           ```app/routes/contact-form.js
        import Route from '@ember/routing/route';
           export default Route.extend({
          actions: {
            willTransition(transition) {
              if (this.controller.get('userHasEnteredData')) {
                this.controller.displayNavigationConfirm();
                transition.abort();
              }
            }
          }
        });
        ```
           You can also redirect elsewhere by calling
        `this.transitionTo('elsewhere')` from within `willTransition`.
        Note that `willTransition` will not be fired for the
        redirecting `transitionTo`, since `willTransition` doesn't
        fire when there is already a transition underway. If you want
        subsequent `willTransition` actions to fire for the redirecting
        transition, you must first explicitly call
        `transition.abort()`.
           To allow the `willTransition` event to continue bubbling to the parent
        route, use `return true;`. When the `willTransition` method has a
        return value of `true` then the parent route's `willTransition` method
        will be fired, enabling "bubbling" behavior for the event.
           @event willTransition
        @param {Transition} transition
        @since 1.0.0
        @public
      */
      /**
        The `didTransition` action is fired after a transition has
        successfully been completed. This occurs after the normal model
        hooks (`beforeModel`, `model`, `afterModel`, `setupController`)
        have resolved. The `didTransition` action has no arguments,
        however, it can be useful for tracking page views or resetting
        state on the controller.
           ```app/routes/login.js
        import Route from '@ember/routing/route';
           export default Route.extend({
          actions: {
            didTransition() {
              this.controller.get('errors.base').clear();
              return true; // Bubble the didTransition event
            }
          }
        });
        ```
           @event didTransition
        @since 1.2.0
        @public
      */
      /**
        The `loading` action is fired on the route when a route's `model`
        hook returns a promise that is not already resolved. The current
        `Transition` object is the first parameter and the route that
        triggered the loading event is the second parameter.
           ```app/routes/application.js
        import Route from '@ember/routing/route';
           export default Route.extend({
          actions: {
            loading(transition, route) {
              let controller = this.controllerFor('foo');
              controller.set('currentlyLoading', true);
                 transition.finally(function() {
                controller.set('currentlyLoading', false);
              });
            }
          }
        });
        ```
           @event loading
        @param {Transition} transition
        @param {Route} route The route that triggered the loading event
        @since 1.2.0
        @public
      */
      /**
        When attempting to transition into a route, any of the hooks
        may return a promise that rejects, at which point an `error`
        action will be fired on the partially-entered routes, allowing
        for per-route error handling logic, or shared error handling
        logic defined on a parent route.
           Here is an example of an error handler that will be invoked
        for rejected promises from the various hooks on the route,
        as well as any unhandled errors from child routes:
           ```app/routes/admin.js
        import { reject } from 'rsvp';
        import Route from '@ember/routing/route';
           export default Route.extend({
          beforeModel() {
            return reject('bad things!');
          },
             actions: {
            error(error, transition) {
              // Assuming we got here due to the error in `beforeModel`,
              // we can expect that error === "bad things!",
              // but a promise model rejecting would also
              // call this hook, as would any errors encountered
              // in `afterModel`.
                 // The `error` hook is also provided the failed
              // `transition`, which can be stored and later
              // `.retry()`d if desired.
                 this.transitionTo('login');
            }
          }
        });
        ```
           `error` actions that bubble up all the way to `ApplicationRoute`
        will fire a default error handler that logs the error. You can
        specify your own global default error handler by overriding the
        `error` handler on `ApplicationRoute`:
           ```app/routes/application.js
        import Route from '@ember/routing/route';
           export default Route.extend({
          actions: {
            error(error, transition) {
              this.controllerFor('banner').displayError(error.message);
            }
          }
        });
        ```
        @event error
        @param {Error} error
        @param {Transition} transition
        @since 1.0.0
        @public
      */
      /**
        This event is triggered when the router enters the route. It is
        not executed when the model for the route changes.
           ```app/routes/application.js
        import { on } from '@ember/object/evented';
        import Route from '@ember/routing/route';
           export default Route.extend({
          collectAnalytics: on('activate', function(){
            collectAnalytics();
          })
        });
        ```
           @event activate
        @since 1.9.0
        @public
      */
      /**
        This event is triggered when the router completely exits this
        route. It is not executed when the model for the route changes.
           ```app/routes/index.js
        import { on } from '@ember/object/evented';
        import Route from '@ember/routing/route';
           export default Route.extend({
          trackPageLeaveAnalytics: on('deactivate', function(){
            trackPageLeaveAnalytics();
          })
        });
        ```
           @event deactivate
        @since 1.9.0
        @public
      */
      /**
        This hook is executed when the router completely exits this route. It is
        not executed when the model for the route changes.
           @method deactivate
        @since 1.0.0
        @public
      */

      Route.prototype.deactivate = function deactivate() {};
      /**
        This hook is executed when the router enters the route. It is not executed
        when the model for the route changes.
           @method activate
        @since 1.0.0
        @public
      */

      Route.prototype.activate = function activate() {};
      /**
        Transition the application into another route. The route may
        be either a single route or route path:
           ```javascript
        this.transitionTo('blogPosts');
        this.transitionTo('blogPosts.recentEntries');
        ```
           Optionally supply a model for the route in question. The model
        will be serialized into the URL using the `serialize` hook of
        the route:
           ```javascript
        this.transitionTo('blogPost', aPost);
        ```
           If a literal is passed (such as a number or a string), it will
        be treated as an identifier instead. In this case, the `model`
        hook of the route will be triggered:
           ```javascript
        this.transitionTo('blogPost', 1);
        ```
           Multiple models will be applied last to first recursively up the
        route tree.
           ```app/routes.js
        // ...
           Router.map(function() {
          this.route('blogPost', { path:':blogPostId' }, function() {
            this.route('blogComment', { path: ':blogCommentId' });
          });
        });
           export default Router;
        ```
           ```javascript
        this.transitionTo('blogComment', aPost, aComment);
        this.transitionTo('blogComment', 1, 13);
        ```
           It is also possible to pass a URL (a string that starts with a
        `/`).
           ```javascript
        this.transitionTo('/');
        this.transitionTo('/blog/post/1/comment/13');
        this.transitionTo('/blog/posts?sort=title');
        ```
           An options hash with a `queryParams` property may be provided as
        the final argument to add query parameters to the destination URL.
           ```javascript
        this.transitionTo('blogPost', 1, {
          queryParams: { showComments: 'true' }
        });
           // if you just want to transition the query parameters without changing the route
        this.transitionTo({ queryParams: { sort: 'date' } });
        ```
           See also [replaceWith](#method_replaceWith).
           Simple Transition Example
           ```app/routes.js
        // ...
           Router.map(function() {
          this.route('index');
          this.route('secret');
          this.route('fourOhFour', { path: '*:' });
        });
           export default Router;
        ```
           ```app/routes/index.js
        import Route from '@ember/routing/route';
           export Route.extend({
          actions: {
            moveToSecret(context) {
              if (authorized()) {
                this.transitionTo('secret', context);
              } else {
                this.transitionTo('fourOhFour');
              }
            }
          }
        });
        ```
           Transition to a nested route
           ```app/router.js
        // ...
           Router.map(function() {
          this.route('articles', { path: '/articles' }, function() {
            this.route('new');
          });
        });
           export default Router;
        ```
           ```app/routes/index.js
        import Route from '@ember/routing/route';
           export default Route.extend({
          actions: {
            transitionToNewArticle() {
              this.transitionTo('articles.new');
            }
          }
        });
        ```
           Multiple Models Example
           ```app/router.js
        // ...
           Router.map(function() {
          this.route('index');
             this.route('breakfast', { path: ':breakfastId' }, function() {
            this.route('cereal', { path: ':cerealId' });
          });
        });
           export default Router;
        ```
           ```app/routes/index.js
        import Route from '@ember/routing/route';
           export default Route.extend({
          actions: {
            moveToChocolateCereal() {
              let cereal = { cerealId: 'ChocolateYumminess' };
              let breakfast = { breakfastId: 'CerealAndMilk' };
                 this.transitionTo('breakfast.cereal', breakfast, cereal);
            }
          }
        });
        ```
           Nested Route with Query String Example
           ```app/routes.js
        // ...
           Router.map(function() {
          this.route('fruits', function() {
            this.route('apples');
          });
        });
           export default Router;
        ```
           ```app/routes/index.js
        import Route from '@ember/routing/route';
           export default Route.extend({
          actions: {
            transitionToApples() {
              this.transitionTo('fruits.apples', { queryParams: { color: 'red' } });
            }
          }
        });
        ```
           @method transitionTo
        @param {String} name the name of the route or a URL
        @param {...Object} models the model(s) or identifier(s) to be used while
          transitioning to the route.
        @param {Object} [options] optional hash with a queryParams property
          containing a mapping of query parameters
        @return {Transition} the transition object associated with this
          attempted transition
        @since 1.0.0
        @public
      */

      Route.prototype.transitionTo = function transitionTo() {
         var _router;

         for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
         }

         // eslint-disable-line no-unused-vars
         return (_router = this._router).transitionTo.apply(_router, (0, _utils.prefixRouteNameArg)(this, args));
      };
      /**
        Perform a synchronous transition into another route without attempting
        to resolve promises, update the URL, or abort any currently active
        asynchronous transitions (i.e. regular transitions caused by
        `transitionTo` or URL changes).
           This method is handy for performing intermediate transitions on the
        way to a final destination route, and is called internally by the
        default implementations of the `error` and `loading` handlers.
           @method intermediateTransitionTo
        @param {String} name the name of the route
        @param {...Object} models the model(s) to be used while transitioning
        to the route.
        @since 1.2.0
        @public
       */

      Route.prototype.intermediateTransitionTo = function intermediateTransitionTo() {
         var _router2;

         for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
         }

         var _prefixRouteNameArg = (0, _utils.prefixRouteNameArg)(this, args),
             name = _prefixRouteNameArg[0],
             preparedArgs = _prefixRouteNameArg.slice(1);

         (_router2 = this._router).intermediateTransitionTo.apply(_router2, [name].concat(preparedArgs));
      };
      /**
        Refresh the model on this route and any child routes, firing the
        `beforeModel`, `model`, and `afterModel` hooks in a similar fashion
        to how routes are entered when transitioning in from other route.
        The current route params (e.g. `article_id`) will be passed in
        to the respective model hooks, and if a different model is returned,
        `setupController` and associated route hooks will re-fire as well.
           An example usage of this method is re-querying the server for the
        latest information using the same parameters as when the route
        was first entered.
           Note that this will cause `model` hooks to fire even on routes
        that were provided a model object when the route was initially
        entered.
           @method refresh
        @return {Transition} the transition object associated with this
          attempted transition
        @since 1.4.0
        @public
       */

      Route.prototype.refresh = function refresh() {
         return this._router._routerMicrolib.refresh(this);
      };
      /**
        Transition into another route while replacing the current URL, if possible.
        This will replace the current history entry instead of adding a new one.
        Beside that, it is identical to `transitionTo` in all other respects. See
        'transitionTo' for additional information regarding multiple models.
           Example
           ```app/router.js
        // ...
           Router.map(function() {
          this.route('index');
          this.route('secret');
        });
           export default Router;
        ```
           ```app/routes/secret.js
        import Route from '@ember/routing/route';
           export default Route.extend({
          afterModel() {
            if (!authorized()){
              this.replaceWith('index');
            }
          }
        });
        ```
           @method replaceWith
        @param {String} name the name of the route or a URL
        @param {...Object} models the model(s) or identifier(s) to be used while
          transitioning to the route.
        @param {Object} [options] optional hash with a queryParams property
          containing a mapping of query parameters
        @return {Transition} the transition object associated with this
          attempted transition
        @since 1.0.0
        @public
      */

      Route.prototype.replaceWith = function replaceWith() {
         var _router3;

         for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
         }

         return (_router3 = this._router).replaceWith.apply(_router3, (0, _utils.prefixRouteNameArg)(this, args));
      };
      /**
        This hook is the entry point for router.js
           @private
        @method setup
      */

      Route.prototype.setup = function setup(context, transition) {
         var controller = void 0;
         var controllerName = this.controllerName || this.routeName;
         var definedController = this.controllerFor(controllerName, true);
         if (definedController) {
            controller = definedController;
         } else {
            controller = this.generateController(controllerName);
         }
         // Assign the route's controller so that it can more easily be
         // referenced in action handlers. Side effects. Side effects everywhere.
         if (!this.controller) {
            var qp = (0, _metal.get)(this, '_qp');
            var propNames = qp !== undefined ? (0, _metal.get)(qp, 'propertyNames') : [];
            addQueryParamsObservers(controller, propNames);
            this.controller = controller;
         }
         var queryParams = (0, _metal.get)(this, '_qp');
         var states = queryParams.states;
         controller._qpDelegate = states.allowOverrides;
         if (transition) {
            // Update the model dep values used to calculate cache keys.
            (0, _utils.stashParamNames)(this._router, transition[_router_js.STATE_SYMBOL].routeInfos);
            var cache = this._bucketCache;
            var params = transition[_router_js.PARAMS_SYMBOL];
            var allParams = queryParams.propertyNames;
            allParams.forEach(function (prop) {
               var aQp = queryParams.map[prop];
               aQp.values = params;
               var cacheKey = (0, _utils.calculateCacheKey)(aQp.route.fullRouteName, aQp.parts, aQp.values);
               var value = cache.lookup(cacheKey, prop, aQp.undecoratedDefaultValue);
               (0, _metal.set)(controller, prop, value);
            });
            var qpValues = getQueryParamsFor(this, transition[_router_js.STATE_SYMBOL]);
            (0, _metal.setProperties)(controller, qpValues);
         }
         this.setupController(controller, context, transition);
         if (this._environment.options.shouldRender) {
            this.renderTemplate(controller, context);
         }
      };
      /*
        Called when a query parameter for this route changes, regardless of whether the route
        is currently part of the active route hierarchy. This will update the query parameter's
        value in the cache so if this route becomes active, the cache value has been updated.
      */

      Route.prototype._qpChanged = function _qpChanged(prop, value, qp) {
         if (!qp) {
            return;
         }
         // Update model-dep cache
         var cache = this._bucketCache;
         var cacheKey = (0, _utils.calculateCacheKey)(qp.route.fullRouteName, qp.parts, qp.values);
         cache.stash(cacheKey, prop, value);
      };
      /**
        This hook is the first of the route entry validation hooks
        called when an attempt is made to transition into a route
        or one of its children. It is called before `model` and
        `afterModel`, and is appropriate for cases when:
           1) A decision can be made to redirect elsewhere without
           needing to resolve the model first.
        2) Any async operations need to occur first before the
           model is attempted to be resolved.
           This hook is provided the current `transition` attempt
        as a parameter, which can be used to `.abort()` the transition,
        save it for a later `.retry()`, or retrieve values set
        on it from a previous hook. You can also just call
        `this.transitionTo` to another route to implicitly
        abort the `transition`.
           You can return a promise from this hook to pause the
        transition until the promise resolves (or rejects). This could
        be useful, for instance, for retrieving async code from
        the server that is required to enter a route.
           @method beforeModel
        @param {Transition} transition
        @return {any | Promise<any>} if the value returned from this hook is
          a promise, the transition will pause until the transition
          resolves. Otherwise, non-promise return values are not
          utilized in any way.
        @since 1.0.0
        @public
      */

      Route.prototype.beforeModel = function beforeModel() {};
      /**
        This hook is called after this route's model has resolved.
        It follows identical async/promise semantics to `beforeModel`
        but is provided the route's resolved model in addition to
        the `transition`, and is therefore suited to performing
        logic that can only take place after the model has already
        resolved.
           ```app/routes/posts.js
        import Route from '@ember/routing/route';
           export default Route.extend({
          afterModel(posts, transition) {
            if (posts.get('length') === 1) {
              this.transitionTo('post.show', posts.get('firstObject'));
            }
          }
        });
        ```
           Refer to documentation for `beforeModel` for a description
        of transition-pausing semantics when a promise is returned
        from this hook.
           @method afterModel
        @param {Object} resolvedModel the value returned from `model`,
          or its resolved value if it was a promise
        @param {Transition} transition
        @return {any | Promise<any>} if the value returned from this hook is
          a promise, the transition will pause until the transition
          resolves. Otherwise, non-promise return values are not
          utilized in any way.
        @since 1.0.0
        @public
       */

      Route.prototype.afterModel = function afterModel() {};
      /**
        A hook you can implement to optionally redirect to another route.
           If you call `this.transitionTo` from inside of this hook, this route
        will not be entered in favor of the other hook.
           `redirect` and `afterModel` behave very similarly and are
        called almost at the same time, but they have an important
        distinction in the case that, from one of these hooks, a
        redirect into a child route of this route occurs: redirects
        from `afterModel` essentially invalidate the current attempt
        to enter this route, and will result in this route's `beforeModel`,
        `model`, and `afterModel` hooks being fired again within
        the new, redirecting transition. Redirects that occur within
        the `redirect` hook, on the other hand, will _not_ cause
        these hooks to be fired again the second time around; in
        other words, by the time the `redirect` hook has been called,
        both the resolved model and attempted entry into this route
        are considered to be fully validated.
           @method redirect
        @param {Object} model the model for this route
        @param {Transition} transition the transition object associated with the current transition
        @since 1.0.0
        @public
      */

      Route.prototype.redirect = function redirect() {};
      /**
        Called when the context is changed by router.js.
           @private
        @method contextDidChange
      */

      Route.prototype.contextDidChange = function contextDidChange() {
         this.currentModel = this.context;
      };
      /**
        A hook you can implement to convert the URL into the model for
        this route.
           ```app/router.js
        // ...
           Router.map(function() {
          this.route('post', { path: '/posts/:post_id' });
        });
           export default Router;
        ```
           The model for the `post` route is `store.findRecord('post', params.post_id)`.
           By default, if your route has a dynamic segment ending in `_id`:
           * The model class is determined from the segment (`post_id`'s
          class is `App.Post`)
        * The find method is called on the model class with the value of
          the dynamic segment.
           Note that for routes with dynamic segments, this hook is not always
        executed. If the route is entered through a transition (e.g. when
        using the `link-to` Handlebars helper or the `transitionTo` method
        of routes), and a model context is already provided this hook
        is not called.
           A model context does not include a primitive string or number,
        which does cause the model hook to be called.
           Routes without dynamic segments will always execute the model hook.
           ```javascript
        // no dynamic segment, model hook always called
        this.transitionTo('posts');
           // model passed in, so model hook not called
        thePost = store.findRecord('post', 1);
        this.transitionTo('post', thePost);
           // integer passed in, model hook is called
        this.transitionTo('post', 1);
           // model id passed in, model hook is called
        // useful for forcing the hook to execute
        thePost = store.findRecord('post', 1);
        this.transitionTo('post', thePost.id);
        ```
           This hook follows the asynchronous/promise semantics
        described in the documentation for `beforeModel`. In particular,
        if a promise returned from `model` fails, the error will be
        handled by the `error` hook on `Route`.
           Example
           ```app/routes/post.js
        import Route from '@ember/routing/route';
           export default Route.extend({
          model(params) {
            return this.store.findRecord('post', params.post_id);
          }
        });
        ```
           @method model
        @param {Object} params the parameters extracted from the URL
        @param {Transition} transition
        @return {any | Promise<any>} the model for this route. If
          a promise is returned, the transition will pause until
          the promise resolves, and the resolved value of the promise
          will be used as the model for this route.
        @since 1.0.0
        @public
      */

      Route.prototype.model = function model(params, transition) {
         var name = void 0,
             sawParams = void 0,
             value = void 0;
         var queryParams = (0, _metal.get)(this, '_qp.map');
         for (var prop in params) {
            if (prop === 'queryParams' || queryParams && prop in queryParams) {
               continue;
            }
            var match = prop.match(/^(.*)_id$/);
            if (match !== null) {
               name = match[1];
               value = params[prop];
            }
            sawParams = true;
         }
         if (!name) {
            if (sawParams) {
               return (0, _polyfills.assign)({}, params);
            } else {
               if (transition.resolveIndex < 1) {
                  return;
               }
               return transition[_router_js.STATE_SYMBOL].routeInfos[transition.resolveIndex - 1].context;
            }
         }
         return this.findModel(name, value);
      };
      /**
        @private
        @method deserialize
        @param {Object} params the parameters extracted from the URL
        @param {Transition} transition
        @return {any | Promise<any>} the model for this route.
           Router.js hook.
       */

      Route.prototype.deserialize = function deserialize(_params, transition) {
         if (true /* EMBER_ROUTING_ROUTER_SERVICE */) {
               return this.model(this._paramsFor(this.routeName, _params), transition);
            }
         return this.model(this.paramsFor(this.routeName), transition);
      };
      /**
           @method findModel
        @param {String} type the model type
        @param {Object} value the value passed to find
        @private
      */

      Route.prototype.findModel = function findModel() {
         var _get;

         return (_get = (0, _metal.get)(this, 'store')).find.apply(_get, arguments);
      };
      /**
        A hook you can use to setup the controller for the current route.
           This method is called with the controller for the current route and the
        model supplied by the `model` hook.
           By default, the `setupController` hook sets the `model` property of
        the controller to the specified `model` when it is not `undefined`.
           If you implement the `setupController` hook in your Route, it will
        prevent this default behavior. If you want to preserve that behavior
        when implementing your `setupController` function, make sure to call
        `_super`:
           ```app/routes/photos.js
        import Route from '@ember/routing/route';
           export default Route.extend({
          model() {
            return this.store.findAll('photo');
          },
             setupController(controller, model) {
            // Call _super for default behavior
            this._super(controller, model);
            // Implement your custom setup after
            this.controllerFor('application').set('showingPhotos', true);
          }
        });
        ```
           The provided controller will be one resolved based on the name
        of this route.
           If no explicit controller is defined, Ember will automatically create one.
           As an example, consider the router:
           ```app/router.js
        // ...
           Router.map(function() {
          this.route('post', { path: '/posts/:post_id' });
        });
           export default Router;
        ```
           For the `post` route, a controller named `App.PostController` would
        be used if it is defined. If it is not defined, a basic `Controller`
        instance would be used.
           Example
           ```app/routes/post.js
        import Route from '@ember/routing/route';
           export default Route.extend({
          setupController(controller, model) {
            controller.set('model', model);
          }
        });
        ```
           @method setupController
        @param {Controller} controller instance
        @param {Object} model
        @since 1.0.0
        @public
      */

      Route.prototype.setupController = function setupController(controller, context, _transition) {
         // eslint-disable-line no-unused-vars
         if (controller && context !== undefined) {
            (0, _metal.set)(controller, 'model', context);
         }
      };
      /**
        Returns the controller of the current route, or a parent (or any ancestor)
        route in a route hierarchy.
           The controller instance must already have been created, either through entering the
        associated route or using `generateController`.
           ```app/routes/post.js
        import Route from '@ember/routing/route';
           export default Route.extend({
          setupController(controller, post) {
            this._super(controller, post);
            this.controllerFor('posts').set('currentPost', post);
          }
        });
        ```
           @method controllerFor
        @param {String} name the name of the route or controller
        @return {Controller}
        @since 1.0.0
        @public
      */

      Route.prototype.controllerFor = function controllerFor(name, _skipAssert) {
         var owner = (0, _owner.getOwner)(this);
         var route = owner.lookup('route:' + name);
         var controller = void 0;
         if (route && route.controllerName) {
            name = route.controllerName;
         }
         controller = owner.lookup('controller:' + name);
         // NOTE: We're specifically checking that skipAssert is true, because according
         //   to the old API the second parameter was model. We do not want people who
         //   passed a model to skip the assertion.
         true && !(!!controller || _skipAssert === true) && (0, _debug.assert)('The controller named \'' + name + '\' could not be found. Make sure that this route exists and has already been entered at least once. If you are accessing a controller not associated with a route, make sure the controller class is explicitly defined.', !!controller || _skipAssert === true);

         return controller;
      };
      /**
        Generates a controller for a route.
           Example
           ```app/routes/post.js
        import Route from '@ember/routing/route';
           export default Route.extend({
          setupController(controller, post) {
            this._super(controller, post);
            this.generateController('posts');
          }
        });
        ```
           @method generateController
        @param {String} name the name of the controller
        @private
      */

      Route.prototype.generateController = function generateController(name) {
         var owner = (0, _owner.getOwner)(this);
         return (0, _generate_controller.default)(owner, name);
      };
      /**
        Returns the resolved model of a parent (or any ancestor) route
        in a route hierarchy.  During a transition, all routes
        must resolve a model object, and if a route
        needs access to a parent route's model in order to
        resolve a model (or just reuse the model from a parent),
        it can call `this.modelFor(theNameOfParentRoute)` to
        retrieve it. If the ancestor route's model was a promise,
        its resolved result is returned.
           Example
           ```app/router.js
        // ...
           Router.map(function() {
          this.route('post', { path: '/posts/:post_id' }, function() {
            this.route('comments');
          });
        });
           export default Router;
        ```
           ```app/routes/post/comments.js
        import Route from '@ember/routing/route';
           export default Route.extend({
          model() {
            let post = this.modelFor('post');
            return post.get('comments');
          }
        });
        ```
           @method modelFor
        @param {String} name the name of the route
        @return {Object} the model object
        @since 1.0.0
        @public
      */

      Route.prototype.modelFor = function modelFor(_name) {
         var name = void 0;
         var owner = (0, _owner.getOwner)(this);
         var transition = this._router && this._router._routerMicrolib ? this._router._routerMicrolib.activeTransition : undefined;
         // Only change the route name when there is an active transition.
         // Otherwise, use the passed in route name.
         if (owner.routable && transition !== undefined) {
            name = getEngineRouteName(owner, _name);
         } else {
            name = _name;
         }
         var route = owner.lookup('route:' + name);
         // If we are mid-transition, we want to try and look up
         // resolved parent contexts on the current transitionEvent.
         if (transition !== undefined && transition !== null) {
            var modelLookupName = route && route.routeName || name;
            if (transition.resolvedModels.hasOwnProperty(modelLookupName)) {
               return transition.resolvedModels[modelLookupName];
            }
         }
         return route && route.currentModel;
      };
      /**
        A hook you can use to render the template for the current route.
           This method is called with the controller for the current route and the
        model supplied by the `model` hook. By default, it renders the route's
        template, configured with the controller for the route.
           This method can be overridden to set up and render additional or
        alternative templates.
           ```app/routes/posts.js
        import Route from '@ember/routing/route';
           export default Route.extend({
          renderTemplate(controller, model) {
            let favController = this.controllerFor('favoritePost');
               // Render the `favoritePost` template into
            // the outlet `posts`, and display the `favoritePost`
            // controller.
            this.render('favoritePost', {
              outlet: 'posts',
              controller: favController
            });
          }
        });
        ```
           @method renderTemplate
        @param {Object} controller the route's controller
        @param {Object} model the route's model
        @since 1.0.0
        @public
      */

      Route.prototype.renderTemplate = function renderTemplate(_controller, _model) {
         // eslint-disable-line no-unused-vars
         this.render();
      };
      /**
        `render` is used to render a template into a region of another template
        (indicated by an `{{outlet}}`). `render` is used both during the entry
        phase of routing (via the `renderTemplate` hook) and later in response to
        user interaction.
           For example, given the following minimal router and templates:
           ```app/router.js
        // ...
           Router.map(function() {
          this.route('photos');
        });
           export default Router;
        ```
           ```handlebars
        <!-- application.hbs -->
        <div class='something-in-the-app-hbs'>
          {{outlet "anOutletName"}}
        </div>
        ```
           ```handlebars
        <!-- photos.hbs -->
        <h1>Photos</h1>
        ```
           You can render `photos.hbs` into the `"anOutletName"` outlet of
        `application.hbs` by calling `render`:
           ```app/routes/post.js
        import Route from '@ember/routing/route';
           export default Route.extend({
          renderTemplate() {
            this.render('photos', {
              into: 'application',
              outlet: 'anOutletName'
            })
          }
        });
        ```
           `render` additionally allows you to supply which `controller` and
        `model` objects should be loaded and associated with the rendered template.
           ```app/routes/posts.js
        import Route from '@ember/routing/route';
           export default Route.extend({
          renderTemplate(controller, model){
            this.render('posts', {    // the template to render, referenced by name
              into: 'application',    // the template to render into, referenced by name
              outlet: 'anOutletName', // the outlet inside `options.into` to render into.
              controller: 'someControllerName', // the controller to use for this template, referenced by name
              model: model            // the model to set on `options.controller`.
            })
          }
        });
        ```
           The string values provided for the template name, and controller
        will eventually pass through to the resolver for lookup. See
        Resolver for how these are mapped to JavaScript objects in your
        application. The template to render into needs to be related to  either the
        current route or one of its ancestors.
           Not all options need to be passed to `render`. Default values will be used
        based on the name of the route specified in the router or the Route's
        `controllerName` and `templateName` properties.
           For example:
           ```app/router.js
        // ...
           Router.map(function() {
          this.route('index');
          this.route('post', { path: '/posts/:post_id' });
        });
           export default Router;
        ```
           ```app/routes/post.js
        import Route from '@ember/routing/route';
           export default Route.extend({
          renderTemplate() {
            this.render(); // all defaults apply
          }
        });
        ```
           The name of the route, defined by the router, is `post`.
           The following equivalent default options will be applied when
        the Route calls `render`:
           ```javascript
        this.render('post', {  // the template name associated with 'post' Route
          into: 'application', // the parent route to 'post' Route
          outlet: 'main',      // {{outlet}} and {{outlet 'main'}} are synonymous,
          controller: 'post',  // the controller associated with the 'post' Route
        })
        ```
           By default the controller's `model` will be the route's model, so it does not
        need to be passed unless you wish to change which model is being used.
           @method render
        @param {String} name the name of the template to render
        @param {Object} [options] the options
        @param {String} [options.into] the template to render into,
                        referenced by name. Defaults to the parent template
        @param {String} [options.outlet] the outlet inside `options.into` to render into.
                        Defaults to 'main'
        @param {String|Object} [options.controller] the controller to use for this template,
                        referenced by name or as a controller instance. Defaults to the Route's paired controller
        @param {Object} [options.model] the model object to set on `options.controller`.
                        Defaults to the return value of the Route's model hook
        @since 1.0.0
        @public
      */

      Route.prototype.render = function render(_name, options) {
         var name = void 0;
         var isDefaultRender = arguments.length === 0;
         if (!isDefaultRender) {
            if (typeof _name === 'object' && !options) {
               name = this.templateName || this.routeName;
               options = _name;
            } else {
               true && !!(0, _metal.isEmpty)(_name) && (0, _debug.assert)('The name in the given arguments is undefined or empty string', !(0, _metal.isEmpty)(_name));

               name = _name;
            }
         }
         var renderOptions = buildRenderOptions(this, isDefaultRender, name, options);
         this.connections.push(renderOptions);
         (0, _runloop.once)(this._router, '_setOutlets');
      };
      /**
        Disconnects a view that has been rendered into an outlet.
           You may pass any or all of the following options to `disconnectOutlet`:
           * `outlet`: the name of the outlet to clear (default: 'main')
        * `parentView`: the name of the view containing the outlet to clear
           (default: the view rendered by the parent route)
           Example:
           ```app/routes/application.js
        import Route from '@ember/routing/route';
           export default Route.extend({
          actions: {
            showModal(evt) {
              this.render(evt.modalName, {
                outlet: 'modal',
                into: 'application'
              });
            },
               hideModal(evt) {
              this.disconnectOutlet({
                outlet: 'modal',
                parentView: 'application'
              });
            }
          }
        });
        ```
           Alternatively, you can pass the `outlet` name directly as a string.
           Example:
           ```app/routes/application.js
        import Route from '@ember/routing/route';
           export default Route.extend({
          actions: {
            showModal(evt) {
              // ...
            },
            hideModal(evt) {
              this.disconnectOutlet('modal');
            }
          }
        });
            ```
           @method disconnectOutlet
        @param {Object|String} options the options hash or outlet name
        @since 1.0.0
        @public
      */

      Route.prototype.disconnectOutlet = function disconnectOutlet(options) {
         var outletName = void 0;
         var parentView = void 0;
         if (options) {
            if (typeof options === 'string') {
               outletName = options;
            } else {
               outletName = options.outlet;
               parentView = options.parentView ? options.parentView.replace(/\//g, '.') : undefined;
               true && !!('outlet' in options && options.outlet === undefined) && (0, _debug.assert)('You passed undefined as the outlet name.', !('outlet' in options && options.outlet === undefined));
            }
         }
         outletName = outletName || 'main';
         this._disconnectOutlet(outletName, parentView);
         var routeInfos = this._router._routerMicrolib.currentRouteInfos;
         for (var i = 0; i < routeInfos.length; i++) {
            // This non-local state munging is sadly necessary to maintain
            // backward compatibility with our existing semantics, which allow
            // any route to disconnectOutlet things originally rendered by any
            // other route. This should all get cut in 2.0.
            routeInfos[i].route._disconnectOutlet(outletName, parentView);
         }
      };

      Route.prototype._disconnectOutlet = function _disconnectOutlet(outletName, parentView) {
         var parent = parentRoute(this);
         if (parent && parentView === parent.routeName) {
            parentView = undefined;
         }
         for (var i = 0; i < this.connections.length; i++) {
            var connection = this.connections[i];
            if (connection.outlet === outletName && connection.into === parentView) {
               // This neuters the disconnected outlet such that it doesn't
               // render anything, but it leaves an entry in the outlet
               // hierarchy so that any existing other renders that target it
               // don't suddenly blow up. They will still stick themselves
               // into its outlets, which won't render anywhere. All of this
               // statefulness should get the machete in 2.0.
               this.connections[i] = {
                  owner: connection.owner,
                  into: connection.into,
                  outlet: connection.outlet,
                  name: connection.name,
                  controller: undefined,
                  template: undefined
               };
               (0, _runloop.once)(this._router, '_setOutlets');
            }
         }
      };

      Route.prototype.willDestroy = function willDestroy() {
         this.teardownViews();
      };
      /**
        @private
           @method teardownViews
      */

      Route.prototype.teardownViews = function teardownViews() {
         if (this.connections && this.connections.length > 0) {
            this.connections = [];
            (0, _runloop.once)(this._router, '_setOutlets');
         }
      };

      return Route;
   }(_runtime.Object);

   Route.reopenClass({
      isRouteFactory: true
   });
   function parentRoute(route) {
      var routeInfo = routeInfoFor(route, route._router._routerMicrolib.state.routeInfos, -1);
      return routeInfo && routeInfo.route;
   }
   function routeInfoFor(route, routeInfos) {
      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

      if (!routeInfos) {
         return;
      }
      var current = void 0;
      for (var i = 0; i < routeInfos.length; i++) {
         current = routeInfos[i].route;
         if (current === route) {
            return routeInfos[i + offset];
         }
      }
      return;
   }
   function buildRenderOptions(route, isDefaultRender, _name, options) {
      true && !(isDefaultRender || !(options && 'outlet' in options && options.outlet === undefined)) && (0, _debug.assert)('You passed undefined as the outlet name.', isDefaultRender || !(options && 'outlet' in options && options.outlet === undefined));

      var owner = (0, _owner.getOwner)(route);
      var name = void 0,
          templateName = void 0,
          into = void 0,
          outlet = void 0,
          controller = void 0,
          model = void 0;
      if (options) {
         into = options.into && options.into.replace(/\//g, '.');
         outlet = options.outlet;
         controller = options.controller;
         model = options.model;
      }
      outlet = outlet || 'main';
      if (isDefaultRender) {
         name = route.routeName;
         templateName = route.templateName || name;
      } else {
         name = _name.replace(/\//g, '.');
         templateName = name;
      }
      if (!controller) {
         if (isDefaultRender) {
            controller = route.controllerName || owner.lookup('controller:' + name);
         } else {
            controller = owner.lookup('controller:' + name) || route.controllerName || route.routeName;
         }
      }
      if (typeof controller === 'string') {
         var controllerName = controller;
         controller = owner.lookup('controller:' + controllerName);
         true && !(isDefaultRender || !!controller) && (0, _debug.assert)('You passed `controller: \'' + controllerName + '\'` into the `render` method, but no such controller could be found.', isDefaultRender || !!controller);
      }
      if (model) {
         controller.set('model', model);
      }
      var template = owner.lookup('template:' + templateName);
      true && !(isDefaultRender || !!template) && (0, _debug.assert)('Could not find "' + templateName + '" template, view, or component.', isDefaultRender || !!template);

      var parent = void 0;
      if (into && (parent = parentRoute(route)) && into === parent.routeName) {
         into = undefined;
      }
      var renderOptions = {
         owner: owner,
         into: into,
         outlet: outlet,
         name: name,
         controller: controller,
         template: template || route._topLevelViewTemplate
      };
      if (true /* DEBUG */) {
            var LOG_VIEW_LOOKUPS = (0, _metal.get)(route._router, 'namespace.LOG_VIEW_LOOKUPS');
            if (LOG_VIEW_LOOKUPS && !template) {
               (0, _debug.info)('Could not find "' + name + '" template. Nothing will be rendered', {
                  fullName: 'template:' + name
               });
            }
         }
      return renderOptions;
   }
   function getFullQueryParams(router, state) {
      if (state['fullQueryParams']) {
         return state['fullQueryParams'];
      }
      state['fullQueryParams'] = {};
      (0, _polyfills.assign)(state['fullQueryParams'], state.queryParams);
      router._deserializeQueryParams(state.routeInfos, state['fullQueryParams']);
      return state['fullQueryParams'];
   }
   function getQueryParamsFor(route, state) {
      state['queryParamsFor'] = state['queryParamsFor'] || {};
      var name = route.fullRouteName;
      if (state['queryParamsFor'][name]) {
         return state['queryParamsFor'][name];
      }
      var fullQueryParams = getFullQueryParams(route._router, state);
      var params = state['queryParamsFor'][name] = {};
      // Copy over all the query params for this route/controller into params hash.
      var qpMeta = (0, _metal.get)(route, '_qp');
      var qps = qpMeta.qps;
      for (var i = 0; i < qps.length; ++i) {
         // Put deserialized qp on params hash.
         var qp = qps[i];
         var qpValueWasPassedIn = qp.prop in fullQueryParams;
         params[qp.prop] = qpValueWasPassedIn ? fullQueryParams[qp.prop] : copyDefaultValue(qp.defaultValue);
      }
      return params;
   }
   function copyDefaultValue(value) {
      if (Array.isArray(value)) {
         return (0, _runtime.A)(value.slice());
      }
      return value;
   }
   /*
     Merges all query parameters from a controller with those from
     a route, returning a new object and avoiding any mutations to
     the existing objects.
   */
   function mergeEachQueryParams(controllerQP, routeQP) {
      var qps = {};
      var keysAlreadyMergedOrSkippable = {
         defaultValue: true,
         type: true,
         scope: true,
         as: true
      };
      // first loop over all controller qps, merging them with any matching route qps
      // into a new empty object to avoid mutating.
      for (var cqpName in controllerQP) {
         if (!controllerQP.hasOwnProperty(cqpName)) {
            continue;
         }
         var newControllerParameterConfiguration = {};
         (0, _polyfills.assign)(newControllerParameterConfiguration, controllerQP[cqpName], routeQP[cqpName]);
         qps[cqpName] = newControllerParameterConfiguration;
         // allows us to skip this QP when we check route QPs.
         keysAlreadyMergedOrSkippable[cqpName] = true;
      }
      // loop over all route qps, skipping those that were merged in the first pass
      // because they also appear in controller qps
      for (var rqpName in routeQP) {
         if (!routeQP.hasOwnProperty(rqpName) || keysAlreadyMergedOrSkippable[rqpName]) {
            continue;
         }
         var newRouteParameterConfiguration = {};
         (0, _polyfills.assign)(newRouteParameterConfiguration, routeQP[rqpName], controllerQP[rqpName]);
         qps[rqpName] = newRouteParameterConfiguration;
      }
      return qps;
   }
   function addQueryParamsObservers(controller, propNames) {
      propNames.forEach(function (prop) {
         controller.addObserver(prop + '.[]', controller, controller._qpChanged);
      });
   }
   function getEngineRouteName(engine, routeName) {
      if (engine.routable) {
         var prefix = engine.mountPoint;
         if (routeName === 'application') {
            return prefix;
         } else {
            return prefix + '.' + routeName;
         }
      }
      return routeName;
   }
   /**
       A hook you can implement to convert the route's model into parameters
       for the URL.
   
       ```app/router.js
       // ...
   
       Router.map(function() {
         this.route('post', { path: '/posts/:post_id' });
       });
   
       ```
   
       ```app/routes/post.js
       import $ from 'jquery';
       import Route from '@ember/routing/route';
   
       export default Route.extend({
         model(params) {
           // the server returns `{ id: 12 }`
           return $.getJSON('/posts/' + params.post_id);
         },
   
         serialize(model) {
           // this will make the URL `/posts/12`
           return { post_id: model.id };
         }
       });
       ```
   
       The default `serialize` method will insert the model's `id` into the
       route's dynamic segment (in this case, `:post_id`) if the segment contains '_id'.
       If the route has multiple dynamic segments or does not contain '_id', `serialize`
       will return `getProperties(model, params)`
   
       This method is called when `transitionTo` is called with a context
       in order to populate the URL.
   
       @method serialize
       @param {Object} model the routes model
       @param {Array} params an Array of parameter names for the current
         route (in the example, `['post_id']`.
       @return {Object} the serialized parameters
       @since 1.0.0
       @public
     */
   Route.prototype.serialize = defaultSerialize;
   Route.reopen(_runtime.ActionHandler, _runtime.Evented, {
      mergedProperties: ['queryParams'],
      /**
        Configuration hash for this route's queryParams. The possible
        configuration options and their defaults are as follows
        (assuming a query param whose controller property is `page`):
           ```javascript
        queryParams: {
          page: {
            // By default, controller query param properties don't
            // cause a full transition when they are changed, but
            // rather only cause the URL to update. Setting
            // `refreshModel` to true will cause an "in-place"
            // transition to occur, whereby the model hooks for
            // this route (and any child routes) will re-fire, allowing
            // you to reload models (e.g., from the server) using the
            // updated query param values.
            refreshModel: false,
               // By default, changes to controller query param properties
            // cause the URL to update via `pushState`, which means an
            // item will be added to the browser's history, allowing
            // you to use the back button to restore the app to the
            // previous state before the query param property was changed.
            // Setting `replace` to true will use `replaceState` (or its
            // hash location equivalent), which causes no browser history
            // item to be added. This options name and default value are
            // the same as the `link-to` helper's `replace` option.
            replace: false,
               // By default, the query param URL key is the same name as
            // the controller property name. Use `as` to specify a
            // different URL key.
            as: 'page'
          }
        }
        ```
           @property queryParams
        @for Route
        @type Object
        @since 1.6.0
        @public
      */
      queryParams: {},
      /**
        The name of the template to use by default when rendering this routes
        template.
           ```app/routes/posts/list.js
        import Route from '@ember/routing/route';
           export default Route.extend({
          templateName: 'posts/list'
        });
        ```
           ```app/routes/posts/index.js
        import PostsList from '../posts/list';
           export default PostsList.extend();
        ```
           ```app/routes/posts/archived.js
        import PostsList from '../posts/list';
           export default PostsList.extend();
        ```
           @property templateName
        @type String
        @default null
        @since 1.4.0
        @public
      */
      templateName: null,
      /**
        @private
           @property _names
      */
      _names: null,
      /**
        The name of the controller to associate with this route.
           By default, Ember will lookup a route's controller that matches the name
        of the route (i.e. `posts.new`). However,
        if you would like to define a specific controller to use, you can do so
        using this property.
           This is useful in many ways, as the controller specified will be:
           * passed to the `setupController` method.
        * used as the controller for the template being rendered by the route.
        * returned from a call to `controllerFor` for the route.
           @property controllerName
        @type String
        @default null
        @since 1.4.0
        @public
      */
      controllerName: null,
      /**
        Store property provides a hook for data persistence libraries to inject themselves.
           By default, this store property provides the exact same functionality previously
        in the model hook.
           Currently, the required interface is:
           `store.find(modelName, findArguments)`
           @property store
        @type {Object}
        @private
      */
      store: (0, _metal.computed)(function () {
         var owner = (0, _owner.getOwner)(this);
         var routeName = this.routeName;
         var namespace = (0, _metal.get)(this, '_router.namespace');
         return {
            find: function (name, value) {
               var modelClass = owner.factoryFor('model:' + name);
               true && !!!modelClass && (0, _debug.assert)('You used the dynamic segment ' + name + '_id in your route ' + routeName + ', but ' + namespace + '.' + (0, _string.classify)(name) + ' did not exist and you did not override your route\'s `model` hook.', !!modelClass);

               if (!modelClass) {
                  return;
               }
               modelClass = modelClass.class;
               true && !(typeof modelClass.find === 'function') && (0, _debug.assert)((0, _string.classify)(name) + ' has no method `find`.', typeof modelClass.find === 'function');

               return modelClass.find(value);
            }
         };
      }),
      /**
          @private
             @property _qp
        */
      _qp: (0, _metal.computed)(function () {
         var _this3 = this;

         var combinedQueryParameterConfiguration = void 0;
         var controllerName = this.controllerName || this.routeName;
         var owner = (0, _owner.getOwner)(this);
         var controller = owner.lookup('controller:' + controllerName);
         var queryParameterConfiguraton = (0, _metal.get)(this, 'queryParams');
         var hasRouterDefinedQueryParams = Object.keys(queryParameterConfiguraton).length > 0;
         if (controller) {
            // the developer has authored a controller class in their application for
            // this route find its query params and normalize their object shape them
            // merge in the query params for the route. As a mergedProperty,
            // Route#queryParams is always at least `{}`
            var controllerDefinedQueryParameterConfiguration = (0, _metal.get)(controller, 'queryParams') || {};
            var normalizedControllerQueryParameterConfiguration = (0, _utils.normalizeControllerQueryParams)(controllerDefinedQueryParameterConfiguration);
            combinedQueryParameterConfiguration = mergeEachQueryParams(normalizedControllerQueryParameterConfiguration, queryParameterConfiguraton);
         } else if (hasRouterDefinedQueryParams) {
            // the developer has not defined a controller but *has* supplied route query params.
            // Generate a class for them so we can later insert default values
            controller = (0, _generate_controller.default)(owner, controllerName);
            combinedQueryParameterConfiguration = queryParameterConfiguraton;
         }
         var qps = [];
         var map = {};
         var propertyNames = [];
         for (var propName in combinedQueryParameterConfiguration) {
            if (!combinedQueryParameterConfiguration.hasOwnProperty(propName)) {
               continue;
            }
            // to support the dubious feature of using unknownProperty
            // on queryParams configuration
            if (propName === 'unknownProperty' || propName === '_super') {
               // possible todo: issue deprecation warning?
               continue;
            }
            var desc = combinedQueryParameterConfiguration[propName];
            var scope = desc.scope || 'model';
            var parts = void 0;
            if (scope === 'controller') {
               parts = [];
            }
            var urlKey = desc.as || this.serializeQueryParamKey(propName);
            var defaultValue = (0, _metal.get)(controller, propName);
            if (Array.isArray(defaultValue)) {
               defaultValue = (0, _runtime.A)(defaultValue.slice());
            }
            var type = desc.type || (0, _runtime.typeOf)(defaultValue);
            var defaultValueSerialized = this.serializeQueryParam(defaultValue, urlKey, type);
            var scopedPropertyName = controllerName + ':' + propName;
            var qp = {
               undecoratedDefaultValue: (0, _metal.get)(controller, propName),
               defaultValue: defaultValue,
               serializedDefaultValue: defaultValueSerialized,
               serializedValue: defaultValueSerialized,
               type: type,
               urlKey: urlKey,
               prop: propName,
               scopedPropertyName: scopedPropertyName,
               controllerName: controllerName,
               route: this,
               parts: parts,
               values: null,
               scope: scope
            };
            map[propName] = map[urlKey] = map[scopedPropertyName] = qp;
            qps.push(qp);
            propertyNames.push(propName);
         }
         return {
            qps: qps,
            map: map,
            propertyNames: propertyNames,
            states: {
               /*
                 Called when a query parameter changes in the URL, this route cares
                 about that query parameter, but the route is not currently
                 in the active route hierarchy.
               */
               inactive: function (prop, value) {
                  var qp = map[prop];
                  _this3._qpChanged(prop, value, qp);
               },
               /*
                 Called when a query parameter changes in the URL, this route cares
                 about that query parameter, and the route is currently
                 in the active route hierarchy.
               */
               active: function (prop, value) {
                  var qp = map[prop];
                  _this3._qpChanged(prop, value, qp);
                  return _this3._activeQPChanged(qp, value);
               },
               /*
                 Called when a value of a query parameter this route handles changes in a controller
                 and the route is currently in the active route hierarchy.
               */
               allowOverrides: function (prop, value) {
                  var qp = map[prop];
                  _this3._qpChanged(prop, value, qp);
                  return _this3._updatingQPChanged(qp);
               }
            }
         };
      }),
      /**
        Sends an action to the router, which will delegate it to the currently
        active route hierarchy per the bubbling rules explained under `actions`.
           Example
           ```app/router.js
        // ...
           Router.map(function() {
          this.route('index');
        });
           export default Router;
        ```
           ```app/routes/application.js
        import Route from '@ember/routing/route';
           export default Route.extend({
          actions: {
            track(arg) {
              console.log(arg, 'was clicked');
            }
          }
        });
        ```
           ```app/routes/index.js
        import Route from '@ember/routing/route';
           export default Route.extend({
          actions: {
            trackIfDebug(arg) {
              if (debug) {
                this.send('track', arg);
              }
            }
          }
        });
        ```
           @method send
        @param {String} name the name of the action to trigger
        @param {...*} args
        @since 1.0.0
        @public
      */
      send: function () {
         for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
            args[_key4] = arguments[_key4];
         }

         true && !(!this.isDestroying && !this.isDestroyed) && (0, _debug.assert)('Attempted to call .send() with the action \'' + args[0] + '\' on the destroyed route \'' + this.routeName + '\'.', !this.isDestroying && !this.isDestroyed);

         if (this._router && this._router._routerMicrolib || !(0, _debug.isTesting)()) {
            var _router4;

            (_router4 = this._router).send.apply(_router4, args);
         } else {
            var name = args.shift();
            var action = this.actions[name];
            if (action) {
               return action.apply(this, args);
            }
         }
      },

      /**
        The controller associated with this route.
           Example
           ```app/routes/form.js
        import Route from '@ember/routing/route';
           export default Route.extend({
          actions: {
            willTransition(transition) {
              if (this.controller.get('userHasEnteredData') &&
                  !confirm('Are you sure you want to abandon progress?')) {
                transition.abort();
              } else {
                // Bubble the `willTransition` action so that
                // parent routes can decide whether or not to abort.
                return true;
              }
            }
          }
        });
        ```
           @property controller
        @type Controller
        @since 1.6.0
        @public
      */
      actions: {
         /**
         This action is called when one or more query params have changed. Bubbles.
              @method queryParamsDidChange
         @param changed {Object} Keys are names of query params that have changed.
         @param totalPresent {Object} Keys are names of query params that are currently set.
         @param removed {Object} Keys are names of query params that have been removed.
         @returns {boolean}
         @private
         */
         queryParamsDidChange: function (changed, _totalPresent, removed) {
            var qpMap = (0, _metal.get)(this, '_qp').map;
            var totalChanged = Object.keys(changed).concat(Object.keys(removed));
            for (var i = 0; i < totalChanged.length; ++i) {
               var qp = qpMap[totalChanged[i]];
               if (qp && (0, _metal.get)(this._optionsForQueryParam(qp), 'refreshModel') && this._router.currentState) {
                  this.refresh();
                  break;
               }
            }
            return true;
         },
         finalizeQueryParamChange: function (params, finalParams, transition) {
            if (this.fullRouteName !== 'application') {
               return true;
            }
            // Transition object is absent for intermediate transitions.
            if (!transition) {
               return;
            }
            var routeInfos = transition[_router_js.STATE_SYMBOL].routeInfos;
            var router = this._router;
            var qpMeta = router._queryParamsFor(routeInfos);
            var changes = router._qpUpdates;
            var replaceUrl = void 0;
            (0, _utils.stashParamNames)(router, routeInfos);
            for (var i = 0; i < qpMeta.qps.length; ++i) {
               var qp = qpMeta.qps[i];
               var route = qp.route;
               var controller = route.controller;
               var presentKey = qp.urlKey in params && qp.urlKey;
               // Do a reverse lookup to see if the changed query
               // param URL key corresponds to a QP property on
               // this controller.
               var value = void 0,
                   svalue = void 0;
               if (changes.has(qp.urlKey)) {
                  // Value updated in/before setupController
                  value = (0, _metal.get)(controller, qp.prop);
                  svalue = route.serializeQueryParam(value, qp.urlKey, qp.type);
               } else {
                  if (presentKey) {
                     svalue = params[presentKey];
                     if (svalue !== undefined) {
                        value = route.deserializeQueryParam(svalue, qp.urlKey, qp.type);
                     }
                  } else {
                     // No QP provided; use default value.
                     svalue = qp.serializedDefaultValue;
                     value = copyDefaultValue(qp.defaultValue);
                  }
               }
               controller._qpDelegate = (0, _metal.get)(route, '_qp.states.inactive');
               var thisQueryParamChanged = svalue !== qp.serializedValue;
               if (thisQueryParamChanged) {
                  if (transition.queryParamsOnly && replaceUrl !== false) {
                     var options = route._optionsForQueryParam(qp);
                     var replaceConfigValue = (0, _metal.get)(options, 'replace');
                     if (replaceConfigValue) {
                        replaceUrl = true;
                     } else if (replaceConfigValue === false) {
                        // Explicit pushState wins over any other replaceStates.
                        replaceUrl = false;
                     }
                  }
                  (0, _metal.set)(controller, qp.prop, value);
               }
               // Stash current serialized value of controller.
               qp.serializedValue = svalue;
               var thisQueryParamHasDefaultValue = qp.serializedDefaultValue === svalue;
               if (!thisQueryParamHasDefaultValue || transition._keepDefaultQueryParamValues) {
                  finalParams.push({
                     value: svalue,
                     visible: true,
                     key: presentKey || qp.urlKey
                  });
               }
            }
            if (replaceUrl) {
               transition.method('replace');
            }
            qpMeta.qps.forEach(function (qp) {
               var routeQpMeta = (0, _metal.get)(qp.route, '_qp');
               var finalizedController = qp.route.controller;
               finalizedController._qpDelegate = (0, _metal.get)(routeQpMeta, 'states.active');
            });
            router._qpUpdates.clear();
            return;
         }
      }
   });
   var ROUTER_EVENT_DEPRECATIONS = exports.ROUTER_EVENT_DEPRECATIONS = void 0;
   if (true /* EMBER_ROUTING_ROUTER_SERVICE */ && _deprecatedFeatures.ROUTER_EVENTS) {
      exports.ROUTER_EVENT_DEPRECATIONS = ROUTER_EVENT_DEPRECATIONS = {
         on: function (name) {
            this._super.apply(this, arguments);
            var hasDidTransition = name === 'didTransition';
            var hasWillTransition = name === 'willTransition';
            if (hasDidTransition) {
               true && !false && (0, _debug.deprecate)('You attempted to listen to the "didTransition" event which is deprecated. Please inject the router service and listen to the "routeDidChange" event.', false, {
                  id: 'deprecate-router-events',
                  until: '4.0.0',
                  url: 'https://emberjs.com/deprecations/v3.x#toc_deprecate-router-events'
               });
            }
            if (hasWillTransition) {
               true && !false && (0, _debug.deprecate)('You attempted to listen to the "willTransition" event which is deprecated. Please inject the router service and listen to the "routeWillChange" event.', false, {
                  id: 'deprecate-router-events',
                  until: '4.0.0',
                  url: 'https://emberjs.com/deprecations/v3.x#toc_deprecate-router-events'
               });
            }
         }
      };
      Route.reopen(ROUTER_EVENT_DEPRECATIONS, {
         _paramsFor: function (routeName, params) {
            var transition = this._router._routerMicrolib.activeTransition;
            if (transition !== undefined) {
               return this.paramsFor(routeName);
            }
            return params;
         }
      });
   }
   exports.default = Route;
});
enifed('@ember/-internals/routing/lib/system/router', ['exports', 'ember-babel', '@ember/-internals/metal', '@ember/-internals/owner', '@ember/-internals/runtime', '@ember/debug', '@ember/deprecated-features', '@ember/error', '@ember/polyfills', '@ember/runloop', '@ember/-internals/routing/lib/location/api', '@ember/-internals/routing/lib/utils', '@ember/-internals/routing/lib/system/dsl', '@ember/-internals/routing/lib/system/route', '@ember/-internals/routing/lib/system/router_state', 'router_js'], function (exports, _emberBabel, _metal, _owner, _runtime, _debug, _deprecatedFeatures, _error2, _polyfills, _runloop, _api, _utils, _dsl, _route, _router_state, _router_js) {
    'use strict';

    exports.triggerEvent = undefined;
    exports.triggerEvent = _triggerEvent;

    function defaultDidTransition(infos) {
        updatePaths(this);
        this._cancelSlowTransitionTimer();
        this.notifyPropertyChange('url');
        this.set('currentState', this.targetState);
        // Put this in the runloop so url will be accurate. Seems
        // less surprising than didTransition being out of sync.
        (0, _runloop.once)(this, this.trigger, 'didTransition');
        if (true /* DEBUG */) {
                if ((0, _metal.get)(this, 'namespace').LOG_TRANSITIONS) {
                    // eslint-disable-next-line no-console
                    console.log('Transitioned into \'' + EmberRouter._routePath(infos) + '\'');
                }
            }
    }
    function defaultWillTransition(oldInfos, newInfos, transition) {
        (0, _runloop.once)(this, this.trigger, 'willTransition', transition);
        if (true /* DEBUG */) {
                if ((0, _metal.get)(this, 'namespace').LOG_TRANSITIONS) {
                    // eslint-disable-next-line no-console
                    console.log('Preparing to transition from \'' + EmberRouter._routePath(oldInfos) + '\' to \'' + EmberRouter._routePath(newInfos) + '\'');
                }
            }
    }
    if (_deprecatedFeatures.TRANSITION_STATE) {
        Object.defineProperty(_router_js.InternalTransition.prototype, 'state', {
            get: function () {
                if (true /* EMBER_ROUTING_ROUTER_SERVICE */) {
                        true && !false && (0, _debug.deprecate)('You attempted to read "transition.state" which is a private API. You should read the `RouteInfo` object on "transition.to" or "transition.from" which has the public state on it.', false, {
                            id: 'transition-state',
                            until: '3.9.0',
                            url: 'https://emberjs.com/deprecations/v3.x#toc_transition-state'
                        });
                    }
                return this[_router_js.STATE_SYMBOL];
            }
        });
        Object.defineProperty(_router_js.InternalTransition.prototype, 'queryParams', {
            get: function () {
                if (true /* EMBER_ROUTING_ROUTER_SERVICE */) {
                        true && !false && (0, _debug.deprecate)('You attempted to read "transition.queryParams" which is a private API. You should read the `RouteInfo` object on "transition.to" or "transition.from" which has the queryParams on it.', false, {
                            id: 'transition-state',
                            until: '3.9.0',
                            url: 'https://emberjs.com/deprecations/v3.x#toc_transition-state'
                        });
                    }
                return this[_router_js.QUERY_PARAMS_SYMBOL];
            }
        });
        Object.defineProperty(_router_js.InternalTransition.prototype, 'params', {
            get: function () {
                if (true /* EMBER_ROUTING_ROUTER_SERVICE */) {
                        true && !false && (0, _debug.deprecate)('You attempted to read "transition.params" which is a private API. You should read the `RouteInfo` object on "transition.to" or "transition.from" which has the params on it.', false, {
                            id: 'transition-state',
                            until: '3.9.0',
                            url: 'https://emberjs.com/deprecations/v3.x#toc_transition-state'
                        });
                    }
                return this[_router_js.PARAMS_SYMBOL];
            }
        });
    }
    if (_deprecatedFeatures.HANDLER_INFOS) {
        Object.defineProperty(_router_js.InternalRouteInfo.prototype, 'handler', {
            get: function () {
                if (true /* EMBER_ROUTING_ROUTER_SERVICE */) {
                        true && !false && (0, _debug.deprecate)('You attempted to read "handlerInfo.handler" which is a private API that will be removed.', false, {
                            id: 'remove-handler-infos',
                            until: '3.9.0',
                            url: 'https://emberjs.com/deprecations/v3.x#toc_remove-handler-infos'
                        });
                    }
                return this.route;
            },
            set: function (value) {
                if (true /* EMBER_ROUTING_ROUTER_SERVICE */) {
                        true && !false && (0, _debug.deprecate)('You attempted to set "handlerInfo.handler" which is a private API that will be removed.', false, {
                            id: 'remove-handler-infos',
                            until: '3.9.0',
                            url: 'https://emberjs.com/deprecations/v3.x#toc_remove-handler-infos'
                        });
                    }
                this.route = value;
            }
        });
        Object.defineProperty(_router_js.InternalTransition.prototype, 'handlerInfos', {
            get: function () {
                if (true /* EMBER_ROUTING_ROUTER_SERVICE */) {
                        true && !false && (0, _debug.deprecate)('You attempted to use "transition.handlerInfos" which is a private API that will be removed.', false, {
                            id: 'remove-handler-infos',
                            until: '3.9.0',
                            url: 'https://emberjs.com/deprecations/v3.x#toc_remove-handler-infos'
                        });
                    }
                return this.routeInfos;
            }
        });
        Object.defineProperty(_router_js.TransitionState.prototype, 'handlerInfos', {
            get: function () {
                if (true /* EMBER_ROUTING_ROUTER_SERVICE */) {
                        true && !false && (0, _debug.deprecate)('You attempted to use "transition.state.handlerInfos" which is a private API that will be removed.', false, {
                            id: 'remove-handler-infos',
                            until: '3.9.0',
                            url: 'https://emberjs.com/deprecations/v3.x#toc_remove-handler-infos'
                        });
                    }
                return this.routeInfos;
            }
        });
        Object.defineProperty(_router_js.default.prototype, 'currentHandlerInfos', {
            get: function () {
                if (true /* EMBER_ROUTING_ROUTER_SERVICE */) {
                        true && !false && (0, _debug.deprecate)('You attempted to use "_routerMicrolib.currentHandlerInfos" which is a private API that will be removed.', false, {
                            id: 'remove-handler-infos',
                            until: '3.9.0',
                            url: 'https://emberjs.com/deprecations/v3.x#toc_remove-handler-infos'
                        });
                    }
                return this.currentRouteInfos;
            }
        });
        _router_js.default.prototype['getHandler'] = function (name) {
            if (true /* EMBER_ROUTING_ROUTER_SERVICE */) {
                    true && !false && (0, _debug.deprecate)('You attempted to use "_routerMicrolib.getHandler" which is a private API that will be removed.', false, {
                        id: 'remove-handler-infos',
                        until: '3.9.0',
                        url: 'https://emberjs.com/deprecations/v3.x#toc_remove-handler-infos'
                    });
                }
            return this.getRoute(name);
        };
    }
    function K() {
        return this;
    }
    var slice = Array.prototype.slice;
    /**
      The `EmberRouter` class manages the application state and URLs. Refer to
      the [routing guide](https://guides.emberjs.com/release/routing/) for documentation.
    
      @class EmberRouter
      @extends EmberObject
      @uses Evented
      @public
    */

    var EmberRouter = function (_EmberObject) {
        (0, _emberBabel.inherits)(EmberRouter, _EmberObject);

        function EmberRouter() {
            (0, _emberBabel.classCallCheck)(this, EmberRouter);

            var _this = (0, _emberBabel.possibleConstructorReturn)(this, _EmberObject.apply(this, arguments));

            _this.currentState = null;
            _this.targetState = null;
            return _this;
        }

        EmberRouter.prototype._initRouterJs = function _initRouterJs() {
            var location = (0, _metal.get)(this, 'location');
            var router = this;
            var owner = (0, _owner.getOwner)(this);
            var seen = Object.create(null);

            var PrivateRouter = function (_Router) {
                (0, _emberBabel.inherits)(PrivateRouter, _Router);

                function PrivateRouter() {
                    (0, _emberBabel.classCallCheck)(this, PrivateRouter);

                    return (0, _emberBabel.possibleConstructorReturn)(this, _Router.apply(this, arguments));
                }

                PrivateRouter.prototype.getRoute = function getRoute(name) {
                    var routeName = name;
                    var routeOwner = owner;
                    var engineInfo = router._engineInfoByRoute[routeName];
                    if (engineInfo) {
                        var engineInstance = router._getEngineInstance(engineInfo);
                        routeOwner = engineInstance;
                        routeName = engineInfo.localFullName;
                    }
                    var fullRouteName = 'route:' + routeName;
                    var route = routeOwner.lookup(fullRouteName);
                    if (seen[name]) {
                        return route;
                    }
                    seen[name] = true;
                    if (!route) {
                        var DefaultRoute = routeOwner.factoryFor('route:basic').class;
                        routeOwner.register(fullRouteName, DefaultRoute.extend());
                        route = routeOwner.lookup(fullRouteName);
                        if (true /* DEBUG */) {
                                if ((0, _metal.get)(router, 'namespace.LOG_ACTIVE_GENERATION')) {
                                    (0, _debug.info)('generated -> ' + fullRouteName, { fullName: fullRouteName });
                                }
                            }
                    }
                    route._setRouteName(routeName);
                    if (engineInfo && !(0, _route.hasDefaultSerialize)(route)) {
                        throw new Error('Defining a custom serialize method on an Engine route is not supported.');
                    }
                    return route;
                };

                PrivateRouter.prototype.getSerializer = function getSerializer(name) {
                    var engineInfo = router._engineInfoByRoute[name];
                    // If this is not an Engine route, we fall back to the handler for serialization
                    if (!engineInfo) {
                        return;
                    }
                    return engineInfo.serializeMethod || _route.defaultSerialize;
                };

                PrivateRouter.prototype.updateURL = function updateURL(path) {
                    (0, _runloop.once)(function () {
                        location.setURL(path);
                        (0, _metal.set)(router, 'currentURL', path);
                    });
                };

                PrivateRouter.prototype.didTransition = function didTransition(infos) {
                    if (true /* EMBER_ROUTING_ROUTER_SERVICE */ && _deprecatedFeatures.ROUTER_EVENTS) {
                        if (router.didTransition !== defaultDidTransition) {
                            true && !false && (0, _debug.deprecate)('You attempted to override the "didTransition" method which is deprecated. Please inject the router service and listen to the "routeDidChange" event.', false, {
                                id: 'deprecate-router-events',
                                until: '4.0.0',
                                url: 'https://emberjs.com/deprecations/v3.x#toc_deprecate-router-events'
                            });
                        }
                    }
                    router.didTransition(infos);
                };

                PrivateRouter.prototype.willTransition = function willTransition(oldInfos, newInfos, transition) {
                    if (true /* EMBER_ROUTING_ROUTER_SERVICE */ && _deprecatedFeatures.ROUTER_EVENTS) {
                        if (router.willTransition !== defaultWillTransition) {
                            true && !false && (0, _debug.deprecate)('You attempted to override the "willTransition" method which is deprecated. Please inject the router service and listen to the "routeWillChange" event.', false, {
                                id: 'deprecate-router-events',
                                until: '4.0.0',
                                url: 'https://emberjs.com/deprecations/v3.x#toc_deprecate-router-events'
                            });
                        }
                    }
                    router.willTransition(oldInfos, newInfos, transition);
                };

                PrivateRouter.prototype.triggerEvent = function triggerEvent(routeInfos, ignoreFailure, name, args) {
                    return _triggerEvent.bind(router)(routeInfos, ignoreFailure, name, args);
                };

                PrivateRouter.prototype.routeWillChange = function routeWillChange(transition) {
                    if (true /* EMBER_ROUTING_ROUTER_SERVICE */) {
                            router.trigger('routeWillChange', transition);
                        }
                };

                PrivateRouter.prototype.routeDidChange = function routeDidChange(transition) {
                    if (true /* EMBER_ROUTING_ROUTER_SERVICE */) {
                            router.set('currentRoute', transition.to);
                            (0, _runloop.once)(function () {
                                router.trigger('routeDidChange', transition);
                            });
                        }
                };

                PrivateRouter.prototype.transitionDidError = function transitionDidError(error, transition) {
                    if (error.wasAborted || transition.isAborted) {
                        // If the error was a transition erorr or the transition aborted
                        // log the abort.
                        return (0, _router_js.logAbort)(transition);
                    } else {
                        // Otherwise trigger the "error" event to attempt an intermediate
                        // transition into an error substate
                        transition.trigger(false, 'error', error.error, transition, error.route);
                        if (router._isErrorHandled(error.error)) {
                            // If we handled the error with a substate just roll the state back on
                            // the transition and send the "routeDidChange" event for landing on
                            // the error substate and return the error.
                            transition.rollback();
                            this.routeDidChange(transition);
                            return error.error;
                        } else {
                            // If it was not handled, abort the transition completely and return
                            // the error.
                            transition.abort();
                            return error.error;
                        }
                    }
                };

                PrivateRouter.prototype._triggerWillChangeContext = function _triggerWillChangeContext() {
                    return router;
                };

                PrivateRouter.prototype._triggerWillLeave = function _triggerWillLeave() {
                    return router;
                };

                PrivateRouter.prototype.replaceURL = function replaceURL(url) {
                    if (location.replaceURL) {
                        var doReplaceURL = function () {
                            location.replaceURL(url);
                            (0, _metal.set)(router, 'currentURL', url);
                        };
                        (0, _runloop.once)(doReplaceURL);
                    } else {
                        this.updateURL(url);
                    }
                };

                return PrivateRouter;
            }(_router_js.default);

            var routerMicrolib = this._routerMicrolib = new PrivateRouter();
            var dslCallbacks = this.constructor.dslCallbacks || [K];
            var dsl = this._buildDSL();
            dsl.route('application', { path: '/', resetNamespace: true, overrideNameAssertion: true }, function () {
                for (var i = 0; i < dslCallbacks.length; i++) {
                    dslCallbacks[i].call(this);
                }
            });
            if (true /* DEBUG */) {
                    if ((0, _metal.get)(this, 'namespace.LOG_TRANSITIONS_INTERNAL')) {
                        routerMicrolib.log = console.log.bind(console); // eslint-disable-line no-console
                    }
                }
            routerMicrolib.map(dsl.generate());
        };

        EmberRouter.prototype._buildDSL = function _buildDSL() {
            var enableLoadingSubstates = this._hasModuleBasedResolver();
            var router = this;
            var owner = (0, _owner.getOwner)(this);
            var options = {
                enableLoadingSubstates: enableLoadingSubstates,
                resolveRouteMap: function (name) {
                    return owner.factoryFor('route-map:' + name);
                },
                addRouteForEngine: function (name, engineInfo) {
                    if (!router._engineInfoByRoute[name]) {
                        router._engineInfoByRoute[name] = engineInfo;
                    }
                }
            };
            return new _dsl.default(null, options);
        };

        EmberRouter.prototype.init = function init() {
            this._super.apply(this, arguments);
            this.currentURL = null;
            this.currentRouteName = null;
            this.currentPath = null;
            if (true /* EMBER_ROUTING_ROUTER_SERVICE */) {
                    this.currentRoute = null;
                }
            this._qpCache = Object.create(null);
            this._qpUpdates = new Set();
            this._resetQueuedQueryParameterChanges();
            this._handledErrors = new Set();
            this._engineInstances = Object.create(null);
            this._engineInfoByRoute = Object.create(null);
        };
        /*
          Resets all pending query parameter changes.
          Called after transitioning to a new route
          based on query parameter changes.
        */

        EmberRouter.prototype._resetQueuedQueryParameterChanges = function _resetQueuedQueryParameterChanges() {
            this._queuedQPChanges = {};
        };

        EmberRouter.prototype._hasModuleBasedResolver = function _hasModuleBasedResolver() {
            var owner = (0, _owner.getOwner)(this);
            if (!owner) {
                return false;
            }
            var resolver = (0, _metal.get)(owner, 'application.__registry__.resolver.moduleBasedResolver');
            return !!resolver;
        };
        /**
          Initializes the current router instance and sets up the change handling
          event listeners used by the instances `location` implementation.
             A property named `initialURL` will be used to determine the initial URL.
          If no value is found `/` will be used.
             @method startRouting
          @private
        */

        EmberRouter.prototype.startRouting = function startRouting() {
            var initialURL = (0, _metal.get)(this, 'initialURL');
            if (this.setupRouter()) {
                if (initialURL === undefined) {
                    initialURL = (0, _metal.get)(this, 'location').getURL();
                }
                var initialTransition = this.handleURL(initialURL);
                if (initialTransition && initialTransition.error) {
                    throw initialTransition.error;
                }
            }
        };

        EmberRouter.prototype.setupRouter = function setupRouter() {
            var _this3 = this;

            this._setupLocation();
            var location = (0, _metal.get)(this, 'location');
            // Allow the Location class to cancel the router setup while it refreshes
            // the page
            if ((0, _metal.get)(location, 'cancelRouterSetup')) {
                return false;
            }
            this._initRouterJs();
            location.onUpdateURL(function (url) {
                _this3.handleURL(url);
            });
            return true;
        };

        EmberRouter.prototype._setOutlets = function _setOutlets() {
            // This is triggered async during Route#willDestroy.
            // If the router is also being destroyed we do not want to
            // to create another this._toplevelView (and leak the renderer)
            if (this.isDestroying || this.isDestroyed) {
                return;
            }
            var routeInfos = this._routerMicrolib.currentRouteInfos;
            var route = void 0;
            var defaultParentState = void 0;
            var liveRoutes = null;
            if (!routeInfos) {
                return;
            }
            for (var i = 0; i < routeInfos.length; i++) {
                route = routeInfos[i].route;
                var connections = route.connections;
                var ownState = void 0;
                for (var j = 0; j < connections.length; j++) {
                    var appended = appendLiveRoute(liveRoutes, defaultParentState, connections[j]);
                    liveRoutes = appended.liveRoutes;
                    if (appended.ownState.render.name === route.routeName || appended.ownState.render.outlet === 'main') {
                        ownState = appended.ownState;
                    }
                }
                if (connections.length === 0) {
                    ownState = representEmptyRoute(liveRoutes, defaultParentState, route);
                }
                defaultParentState = ownState;
            }
            // when a transitionTo happens after the validation phase
            // during the initial transition _setOutlets is called
            // when no routes are active. However, it will get called
            // again with the correct values during the next turn of
            // the runloop
            if (!liveRoutes) {
                return;
            }
            if (!this._toplevelView) {
                var owner = (0, _owner.getOwner)(this);
                var OutletView = owner.factoryFor('view:-outlet');
                this._toplevelView = OutletView.create();
                this._toplevelView.setOutletState(liveRoutes);
                var instance = owner.lookup('-application-instance:main');
                instance.didCreateRootView(this._toplevelView);
            } else {
                this._toplevelView.setOutletState(liveRoutes);
            }
        };

        EmberRouter.prototype.handleURL = function handleURL(url) {
            // Until we have an ember-idiomatic way of accessing #hashes, we need to
            // remove it because router.js doesn't know how to handle it.
            var _url = url.split(/#(.+)?/)[0];
            return this._doURLTransition('handleURL', _url);
        };

        EmberRouter.prototype._doURLTransition = function _doURLTransition(routerJsMethod, url) {
            var transition = this._routerMicrolib[routerJsMethod](url || '/');
            didBeginTransition(transition, this);
            return transition;
        };
        /**
          Transition the application into another route. The route may
          be either a single route or route path:
             See [transitionTo](/api/ember/release/classes/Route/methods/transitionTo?anchor=transitionTo) for more info.
             @method transitionTo
          @param {String} name the name of the route or a URL
          @param {...Object} models the model(s) or identifier(s) to be used while
            transitioning to the route.
          @param {Object} [options] optional hash with a queryParams property
            containing a mapping of query parameters
          @return {Transition} the transition object associated with this
            attempted transition
          @public
        */

        EmberRouter.prototype.transitionTo = function transitionTo() {
            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            if ((0, _utils.resemblesURL)(args[0])) {
                true && !(!this.isDestroying && !this.isDestroyed) && (0, _debug.assert)('A transition was attempted from \'' + this.currentRouteName + '\' to \'' + args[0] + '\' but the application instance has already been destroyed.', !this.isDestroying && !this.isDestroyed);

                return this._doURLTransition('transitionTo', args[0]);
            }

            var _extractRouteArgs = (0, _utils.extractRouteArgs)(args),
                routeName = _extractRouteArgs.routeName,
                models = _extractRouteArgs.models,
                queryParams = _extractRouteArgs.queryParams;

            true && !(!this.isDestroying && !this.isDestroyed) && (0, _debug.assert)('A transition was attempted from \'' + this.currentRouteName + '\' to \'' + routeName + '\' but the application instance has already been destroyed.', !this.isDestroying && !this.isDestroyed);

            return this._doTransition(routeName, models, queryParams);
        };

        EmberRouter.prototype.intermediateTransitionTo = function intermediateTransitionTo(name) {
            var _routerMicrolib;

            for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
            }

            (_routerMicrolib = this._routerMicrolib).intermediateTransitionTo.apply(_routerMicrolib, [name].concat(args));
            updatePaths(this);
            if (true /* DEBUG */) {
                    var infos = this._routerMicrolib.currentRouteInfos;
                    if ((0, _metal.get)(this, 'namespace').LOG_TRANSITIONS) {
                        // eslint-disable-next-line no-console
                        console.log('Intermediate-transitioned into \'' + EmberRouter._routePath(infos) + '\'');
                    }
                }
        };

        EmberRouter.prototype.replaceWith = function replaceWith() {
            return this.transitionTo.apply(this, arguments).method('replace');
        };

        EmberRouter.prototype.generate = function generate(name) {
            var _routerMicrolib2;

            for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
                args[_key3 - 1] = arguments[_key3];
            }

            var url = (_routerMicrolib2 = this._routerMicrolib).generate.apply(_routerMicrolib2, [name].concat(args));
            return this.location.formatURL(url);
        };
        /**
          Determines if the supplied route is currently active.
             @method isActive
          @param routeName
          @return {Boolean}
          @private
        */

        EmberRouter.prototype.isActive = function isActive(routeName) {
            return this._routerMicrolib.isActive(routeName);
        };
        /**
          An alternative form of `isActive` that doesn't require
          manual concatenation of the arguments into a single
          array.
             @method isActiveIntent
          @param routeName
          @param models
          @param queryParams
          @return {Boolean}
          @private
          @since 1.7.0
        */

        EmberRouter.prototype.isActiveIntent = function isActiveIntent(routeName, models, queryParams) {
            return this.currentState.isActiveIntent(routeName, models, queryParams);
        };

        EmberRouter.prototype.send = function send(name) {
            var _routerMicrolib3;

            for (var _len4 = arguments.length, args = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
                args[_key4 - 1] = arguments[_key4];
            }

            /*name, context*/
            (_routerMicrolib3 = this._routerMicrolib).trigger.apply(_routerMicrolib3, [name].concat(args));
        };
        /**
          Does this router instance have the given route.
             @method hasRoute
          @return {Boolean}
          @private
        */

        EmberRouter.prototype.hasRoute = function hasRoute(route) {
            return this._routerMicrolib.hasRoute(route);
        };
        /**
          Resets the state of the router by clearing the current route
          handlers and deactivating them.
             @private
          @method reset
         */

        EmberRouter.prototype.reset = function reset() {
            if (this._routerMicrolib) {
                this._routerMicrolib.reset();
            }
        };

        EmberRouter.prototype.willDestroy = function willDestroy() {
            if (this._toplevelView) {
                this._toplevelView.destroy();
                this._toplevelView = null;
            }
            this._super.apply(this, arguments);
            this.reset();
            var instances = this._engineInstances;
            for (var name in instances) {
                for (var id in instances[name]) {
                    (0, _runloop.run)(instances[name][id], 'destroy');
                }
            }
        };
        /*
          Called when an active route's query parameter has changed.
          These changes are batched into a runloop run and trigger
          a single transition.
        */

        EmberRouter.prototype._activeQPChanged = function _activeQPChanged(queryParameterName, newValue) {
            this._queuedQPChanges[queryParameterName] = newValue;
            (0, _runloop.once)(this, this._fireQueryParamTransition);
        };

        EmberRouter.prototype._updatingQPChanged = function _updatingQPChanged(queryParameterName) {
            this._qpUpdates.add(queryParameterName);
        };
        /*
          Triggers a transition to a route based on query parameter changes.
          This is called once per runloop, to batch changes.
             e.g.
             if these methods are called in succession:
          this._activeQPChanged('foo', '10');
            // results in _queuedQPChanges = { foo: '10' }
          this._activeQPChanged('bar', false);
            // results in _queuedQPChanges = { foo: '10', bar: false }
             _queuedQPChanges will represent both of these changes
          and the transition using `transitionTo` will be triggered
          once.
        */

        EmberRouter.prototype._fireQueryParamTransition = function _fireQueryParamTransition() {
            this.transitionTo({ queryParams: this._queuedQPChanges });
            this._resetQueuedQueryParameterChanges();
        };

        EmberRouter.prototype._setupLocation = function _setupLocation() {
            var location = (0, _metal.get)(this, 'location');
            var rootURL = (0, _metal.get)(this, 'rootURL');
            var owner = (0, _owner.getOwner)(this);
            if ('string' === typeof location && owner) {
                var resolvedLocation = owner.lookup('location:' + location);
                if (resolvedLocation !== undefined) {
                    location = (0, _metal.set)(this, 'location', resolvedLocation);
                } else {
                    // Allow for deprecated registration of custom location API's
                    var options = {
                        implementation: location
                    };
                    location = (0, _metal.set)(this, 'location', _api.default.create(options));
                }
            }
            if (location !== null && typeof location === 'object') {
                if (rootURL) {
                    (0, _metal.set)(location, 'rootURL', rootURL);
                }
                // Allow the location to do any feature detection, such as AutoLocation
                // detecting history support. This gives it a chance to set its
                // `cancelRouterSetup` property which aborts routing.
                if (typeof location.detect === 'function') {
                    location.detect();
                }
                // ensure that initState is called AFTER the rootURL is set on
                // the location instance
                if (typeof location.initState === 'function') {
                    location.initState();
                }
            }
        };
        /**
          Serializes the given query params according to their QP meta information.
             @private
          @method _serializeQueryParams
          @param {Arrray<RouteInfo>} routeInfos
          @param {Object} queryParams
          @return {Void}
        */

        EmberRouter.prototype._serializeQueryParams = function _serializeQueryParams(routeInfos, queryParams) {
            var _this4 = this;

            forEachQueryParam(this, routeInfos, queryParams, function (key, value, qp) {
                if (qp) {
                    delete queryParams[key];
                    queryParams[qp.urlKey] = qp.route.serializeQueryParam(value, qp.urlKey, qp.type);
                } else if (value === undefined) {
                    return; // We don't serialize undefined values
                } else {
                    queryParams[key] = _this4._serializeQueryParam(value, (0, _runtime.typeOf)(value));
                }
            });
        };
        /**
          Serializes the value of a query parameter based on a type
             @private
          @method _serializeQueryParam
          @param {Object} value
          @param {String} type
        */

        EmberRouter.prototype._serializeQueryParam = function _serializeQueryParam(value, type) {
            if (value === null || value === undefined) {
                return value;
            } else if (type === 'array') {
                return JSON.stringify(value);
            }
            return '' + value;
        };
        /**
          Deserializes the given query params according to their QP meta information.
             @private
          @method _deserializeQueryParams
          @param {Array<RouteInfo>} routeInfos
          @param {Object} queryParams
          @return {Void}
        */

        EmberRouter.prototype._deserializeQueryParams = function _deserializeQueryParams(routeInfos, queryParams) {
            forEachQueryParam(this, routeInfos, queryParams, function (key, value, qp) {
                // If we don't have QP meta info for a given key, then we do nothing
                // because all values will be treated as strings
                if (qp) {
                    delete queryParams[key];
                    queryParams[qp.prop] = qp.route.deserializeQueryParam(value, qp.urlKey, qp.type);
                }
            });
        };
        /**
          Deserializes the value of a query parameter based on a default type
             @private
          @method _deserializeQueryParam
          @param {Object} value
          @param {String} defaultType
        */

        EmberRouter.prototype._deserializeQueryParam = function _deserializeQueryParam(value, defaultType) {
            if (value === null || value === undefined) {
                return value;
            } else if (defaultType === 'boolean') {
                return value === 'true';
            } else if (defaultType === 'number') {
                return Number(value).valueOf();
            } else if (defaultType === 'array') {
                return (0, _runtime.A)(JSON.parse(value));
            }
            return value;
        };
        /**
          Removes (prunes) any query params with default values from the given QP
          object. Default values are determined from the QP meta information per key.
             @private
          @method _pruneDefaultQueryParamValues
          @param {Array<RouteInfo>} routeInfos
          @param {Object} queryParams
          @return {Void}
        */

        EmberRouter.prototype._pruneDefaultQueryParamValues = function _pruneDefaultQueryParamValues(routeInfos, queryParams) {
            var qps = this._queryParamsFor(routeInfos);
            for (var key in queryParams) {
                var qp = qps.map[key];
                if (qp && qp.serializedDefaultValue === queryParams[key]) {
                    delete queryParams[key];
                }
            }
        };

        EmberRouter.prototype._doTransition = function _doTransition(_targetRouteName, models, _queryParams, _keepDefaultQueryParamValues) {
            var _routerMicrolib4;

            var targetRouteName = _targetRouteName || (0, _utils.getActiveTargetName)(this._routerMicrolib);
            true && !(!!targetRouteName && this._routerMicrolib.hasRoute(targetRouteName)) && (0, _debug.assert)('The route ' + targetRouteName + ' was not found', !!targetRouteName && this._routerMicrolib.hasRoute(targetRouteName));

            var queryParams = {};
            this._processActiveTransitionQueryParams(targetRouteName, models, queryParams, _queryParams);
            (0, _polyfills.assign)(queryParams, _queryParams);
            this._prepareQueryParams(targetRouteName, models, queryParams, !!_keepDefaultQueryParamValues);
            var transition = (_routerMicrolib4 = this._routerMicrolib).transitionTo.apply(_routerMicrolib4, [targetRouteName].concat(models, [{ queryParams: queryParams }]));
            didBeginTransition(transition, this);
            return transition;
        };

        EmberRouter.prototype._processActiveTransitionQueryParams = function _processActiveTransitionQueryParams(targetRouteName, models, queryParams, _queryParams) {
            // merge in any queryParams from the active transition which could include
            // queryParams from the url on initial load.
            if (!this._routerMicrolib.activeTransition) {
                return;
            }
            var unchangedQPs = {};
            var qpUpdates = this._qpUpdates;
            var params = this._routerMicrolib.activeTransition[_router_js.QUERY_PARAMS_SYMBOL];
            for (var key in params) {
                if (!qpUpdates.has(key)) {
                    unchangedQPs[key] = params[key];
                }
            }
            // We need to fully scope queryParams so that we can create one object
            // that represents both passed-in queryParams and ones that aren't changed
            // from the active transition.
            this._fullyScopeQueryParams(targetRouteName, models, _queryParams);
            this._fullyScopeQueryParams(targetRouteName, models, unchangedQPs);
            (0, _polyfills.assign)(queryParams, unchangedQPs);
        };
        /**
          Prepares the query params for a URL or Transition. Restores any undefined QP
          keys/values, serializes all values, and then prunes any default values.
             @private
          @method _prepareQueryParams
          @param {String} targetRouteName
          @param {Array<Object>} models
          @param {Object} queryParams
          @param {boolean} keepDefaultQueryParamValues
          @return {Void}
        */

        EmberRouter.prototype._prepareQueryParams = function _prepareQueryParams(targetRouteName, models, queryParams, _fromRouterService) {
            var state = calculatePostTransitionState(this, targetRouteName, models);
            this._hydrateUnsuppliedQueryParams(state, queryParams, !!_fromRouterService);
            this._serializeQueryParams(state.routeInfos, queryParams);
            if (!_fromRouterService) {
                this._pruneDefaultQueryParamValues(state.routeInfos, queryParams);
            }
        };
        /**
          Returns the meta information for the query params of a given route. This
          will be overridden to allow support for lazy routes.
             @private
          @method _getQPMeta
          @param {RouteInfo} routeInfo
          @return {Object}
        */

        EmberRouter.prototype._getQPMeta = function _getQPMeta(routeInfo) {
            var route = routeInfo.route;
            return route && (0, _metal.get)(route, '_qp');
        };
        /**
          Returns a merged query params meta object for a given set of routeInfos.
          Useful for knowing what query params are available for a given route hierarchy.
             @private
          @method _queryParamsFor
          @param {Array<RouteInfo>} routeInfos
          @return {Object}
         */

        EmberRouter.prototype._queryParamsFor = function _queryParamsFor(routeInfos) {
            var routeInfoLength = routeInfos.length;
            var leafRouteName = routeInfos[routeInfoLength - 1].name;
            var cached = this._qpCache[leafRouteName];
            if (cached !== undefined) {
                return cached;
            }
            var shouldCache = true;
            var map = {};
            var qps = [];
            var qpsByUrlKey = true /* DEBUG */ ? {} : null;
            var qpMeta = void 0;
            var qp = void 0;
            var urlKey = void 0;
            var qpOther = void 0;
            for (var i = 0; i < routeInfoLength; ++i) {
                qpMeta = this._getQPMeta(routeInfos[i]);
                if (!qpMeta) {
                    shouldCache = false;
                    continue;
                }
                // Loop over each QP to make sure we don't have any collisions by urlKey
                for (var _i = 0; _i < qpMeta.qps.length; _i++) {
                    qp = qpMeta.qps[_i];
                    if (true /* DEBUG */) {
                            urlKey = qp.urlKey;
                            qpOther = qpsByUrlKey[urlKey];
                            if (qpOther && qpOther.controllerName !== qp.controllerName) {
                                true && !false && (0, _debug.assert)('You\'re not allowed to have more than one controller property map to the same query param key, but both `' + qpOther.scopedPropertyName + '` and `' + qp.scopedPropertyName + '` map to `' + urlKey + '`. You can fix this by mapping one of the controller properties to a different query param key via the `as` config option, e.g. `' + qpOther.prop + ': { as: \'other-' + qpOther.prop + '\' }`', false);
                            }
                            qpsByUrlKey[urlKey] = qp;
                        }
                    qps.push(qp);
                }
                (0, _polyfills.assign)(map, qpMeta.map);
            }
            var finalQPMeta = { qps: qps, map: map };
            if (shouldCache) {
                this._qpCache[leafRouteName] = finalQPMeta;
            }
            return finalQPMeta;
        };
        /**
          Maps all query param keys to their fully scoped property name of the form
          `controllerName:propName`.
             @private
          @method _fullyScopeQueryParams
          @param {String} leafRouteName
          @param {Array<Object>} contexts
          @param {Object} queryParams
          @return {Void}
        */

        EmberRouter.prototype._fullyScopeQueryParams = function _fullyScopeQueryParams(leafRouteName, contexts, queryParams) {
            var state = calculatePostTransitionState(this, leafRouteName, contexts);
            var routeInfos = state.routeInfos;
            var qpMeta = void 0;
            for (var i = 0, len = routeInfos.length; i < len; ++i) {
                qpMeta = this._getQPMeta(routeInfos[i]);
                if (!qpMeta) {
                    continue;
                }
                var qp = void 0;
                var presentProp = void 0;
                for (var j = 0, qpLen = qpMeta.qps.length; j < qpLen; ++j) {
                    qp = qpMeta.qps[j];
                    presentProp = qp.prop in queryParams && qp.prop || qp.scopedPropertyName in queryParams && qp.scopedPropertyName || qp.urlKey in queryParams && qp.urlKey;
                    if (presentProp) {
                        if (presentProp !== qp.scopedPropertyName) {
                            queryParams[qp.scopedPropertyName] = queryParams[presentProp];
                            delete queryParams[presentProp];
                        }
                    }
                }
            }
        };
        /**
          Hydrates (adds/restores) any query params that have pre-existing values into
          the given queryParams hash. This is what allows query params to be "sticky"
          and restore their last known values for their scope.
             @private
          @method _hydrateUnsuppliedQueryParams
          @param {TransitionState} state
          @param {Object} queryParams
          @return {Void}
        */

        EmberRouter.prototype._hydrateUnsuppliedQueryParams = function _hydrateUnsuppliedQueryParams(state, queryParams, _fromRouterService) {
            var routeInfos = state.routeInfos;
            var appCache = this._bucketCache;
            var qpMeta = void 0;
            var qp = void 0;
            var presentProp = void 0;
            for (var i = 0; i < routeInfos.length; ++i) {
                qpMeta = this._getQPMeta(routeInfos[i]);
                if (!qpMeta) {
                    continue;
                }
                for (var j = 0, qpLen = qpMeta.qps.length; j < qpLen; ++j) {
                    qp = qpMeta.qps[j];
                    presentProp = qp.prop in queryParams && qp.prop || qp.scopedPropertyName in queryParams && qp.scopedPropertyName || qp.urlKey in queryParams && qp.urlKey;
                    true && !function () {
                        if (qp.urlKey === presentProp) {
                            return true;
                        }
                        if (_fromRouterService && presentProp !== false) {
                            return false;
                        }
                        return true;
                    }() && (0, _debug.assert)('You passed the `' + presentProp + '` query parameter during a transition into ' + qp.route.routeName + ', please update to ' + qp.urlKey, function () {
                        if (qp.urlKey === presentProp) {
                            return true;
                        }if (_fromRouterService && presentProp !== false) {
                            return false;
                        }return true;
                    }());

                    if (presentProp) {
                        if (presentProp !== qp.scopedPropertyName) {
                            queryParams[qp.scopedPropertyName] = queryParams[presentProp];
                            delete queryParams[presentProp];
                        }
                    } else {
                        var cacheKey = (0, _utils.calculateCacheKey)(qp.route.fullRouteName, qp.parts, state.params);
                        queryParams[qp.scopedPropertyName] = appCache.lookup(cacheKey, qp.prop, qp.defaultValue);
                    }
                }
            }
        };

        EmberRouter.prototype._scheduleLoadingEvent = function _scheduleLoadingEvent(transition, originRoute) {
            this._cancelSlowTransitionTimer();
            this._slowTransitionTimer = (0, _runloop.scheduleOnce)('routerTransitions', this, '_handleSlowTransition', transition, originRoute);
        };

        EmberRouter.prototype._handleSlowTransition = function _handleSlowTransition(transition, originRoute) {
            if (!this._routerMicrolib.activeTransition) {
                // Don't fire an event if we've since moved on from
                // the transition that put us in a loading state.
                return;
            }
            var targetState = new _router_state.default(this, this._routerMicrolib, this._routerMicrolib.activeTransition[_router_js.STATE_SYMBOL]);
            this.set('targetState', targetState);
            transition.trigger(true, 'loading', transition, originRoute);
        };

        EmberRouter.prototype._cancelSlowTransitionTimer = function _cancelSlowTransitionTimer() {
            if (this._slowTransitionTimer) {
                (0, _runloop.cancel)(this._slowTransitionTimer);
            }
            this._slowTransitionTimer = null;
        };
        // These three helper functions are used to ensure errors aren't
        // re-raised if they're handled in a route's error action.


        EmberRouter.prototype._markErrorAsHandled = function _markErrorAsHandled(error) {
            this._handledErrors.add(error);
        };

        EmberRouter.prototype._isErrorHandled = function _isErrorHandled(error) {
            return this._handledErrors.has(error);
        };

        EmberRouter.prototype._clearHandledError = function _clearHandledError(error) {
            this._handledErrors.delete(error);
        };

        EmberRouter.prototype._getEngineInstance = function _getEngineInstance(_ref) {
            var name = _ref.name,
                instanceId = _ref.instanceId,
                mountPoint = _ref.mountPoint;

            var engineInstances = this._engineInstances;
            if (!engineInstances[name]) {
                engineInstances[name] = Object.create(null);
            }
            var engineInstance = engineInstances[name][instanceId];
            if (!engineInstance) {
                var owner = (0, _owner.getOwner)(this);
                true && !owner.hasRegistration('engine:' + name) && (0, _debug.assert)('You attempted to mount the engine \'' + name + '\' in your router map, but the engine can not be found.', owner.hasRegistration('engine:' + name));

                engineInstance = owner.buildChildEngineInstance(name, {
                    routable: true,
                    mountPoint: mountPoint
                });
                engineInstance.boot();
                engineInstances[name][instanceId] = engineInstance;
            }
            return engineInstance;
        };

        return EmberRouter;
    }(_runtime.Object);
    /*
      Helper function for iterating over routes in a set of routeInfos that are
      at or above the given origin route. Example: if `originRoute` === 'foo.bar'
      and the routeInfos given were for 'foo.bar.baz', then the given callback
      will be invoked with the routes for 'foo.bar', 'foo', and 'application'
      individually.
    
      If the callback returns anything other than `true`, then iteration will stop.
    
      @private
      @param {Route} originRoute
      @param {Array<RouteInfo>} routeInfos
      @param {Function} callback
      @return {Void}
     */

    function forEachRouteAbove(routeInfos, callback) {
        for (var i = routeInfos.length - 1; i >= 0; --i) {
            var routeInfo = routeInfos[i];
            var route = routeInfo.route;
            // routeInfo.handler being `undefined` generally means either:
            //
            // 1. an error occurred during creation of the route in question
            // 2. the route is across an async boundary (e.g. within an engine)
            //
            // In both of these cases, we cannot invoke the callback on that specific
            // route, because it just doesn't exist...
            if (route === undefined) {
                continue;
            }
            if (callback(route, routeInfo) !== true) {
                return;
            }
        }
    }
    // These get invoked when an action bubbles above ApplicationRoute
    // and are not meant to be overridable.
    var defaultActionHandlers = {
        willResolveModel: function (_routeInfos, transition, originRoute) {
            this._scheduleLoadingEvent(transition, originRoute);
        },

        // Attempt to find an appropriate error route or substate to enter.
        error: function (routeInfos, error, transition) {
            var router = this;
            var routeInfoWithError = routeInfos[routeInfos.length - 1];
            forEachRouteAbove(routeInfos, function (route, routeInfo) {
                // We don't check the leaf most routeInfo since that would
                // technically be below where we're at in the route hierarchy.
                if (routeInfo !== routeInfoWithError) {
                    // Check for the existence of an 'error' route.
                    var errorRouteName = findRouteStateName(route, 'error');
                    if (errorRouteName) {
                        router._markErrorAsHandled(error);
                        router.intermediateTransitionTo(errorRouteName, error);
                        return false;
                    }
                }
                // Check for an 'error' substate route
                var errorSubstateName = findRouteSubstateName(route, 'error');
                if (errorSubstateName) {
                    router._markErrorAsHandled(error);
                    router.intermediateTransitionTo(errorSubstateName, error);
                    return false;
                }
                return true;
            });
            logError(error, 'Error while processing route: ' + transition.targetName);
        },

        // Attempt to find an appropriate loading route or substate to enter.
        loading: function (routeInfos, transition) {
            var router = this;
            var routeInfoWithSlowLoading = routeInfos[routeInfos.length - 1];
            forEachRouteAbove(routeInfos, function (route, routeInfo) {
                // We don't check the leaf most routeInfos since that would
                // technically be below where we're at in the route hierarchy.
                if (routeInfo !== routeInfoWithSlowLoading) {
                    // Check for the existence of a 'loading' route.
                    var loadingRouteName = findRouteStateName(route, 'loading');
                    if (loadingRouteName) {
                        router.intermediateTransitionTo(loadingRouteName);
                        return false;
                    }
                }
                // Check for loading substate
                var loadingSubstateName = findRouteSubstateName(route, 'loading');
                if (loadingSubstateName) {
                    router.intermediateTransitionTo(loadingSubstateName);
                    return false;
                }
                // Don't bubble above pivot route.
                return transition.pivotHandler !== route;
            });
        }
    };
    function logError(_error, initialMessage) {
        var _console;

        var errorArgs = [];
        var error = void 0;
        if (_error && typeof _error === 'object' && typeof _error.errorThrown === 'object') {
            error = _error.errorThrown;
        } else {
            error = _error;
        }
        if (initialMessage) {
            errorArgs.push(initialMessage);
        }
        if (error) {
            if (error.message) {
                errorArgs.push(error.message);
            }
            if (error.stack) {
                errorArgs.push(error.stack);
            }
            if (typeof error === 'string') {
                errorArgs.push(error);
            }
        }
        (_console = console).error.apply(_console, errorArgs); //eslint-disable-line no-console
    }
    /**
      Finds the name of the substate route if it exists for the given route. A
      substate route is of the form `route_state`, such as `foo_loading`.
    
      @private
      @param {Route} route
      @param {String} state
      @return {String}
    */
    function findRouteSubstateName(route, state) {
        var owner = (0, _owner.getOwner)(route);
        var routeName = route.routeName,
            fullRouteName = route.fullRouteName,
            router = route._router;

        var substateName = routeName + '_' + state;
        var substateNameFull = fullRouteName + '_' + state;
        return routeHasBeenDefined(owner, router, substateName, substateNameFull) ? substateNameFull : '';
    }
    /**
      Finds the name of the state route if it exists for the given route. A state
      route is of the form `route.state`, such as `foo.loading`. Properly Handles
      `application` named routes.
    
      @private
      @param {Route} route
      @param {String} state
      @return {String}
    */
    function findRouteStateName(route, state) {
        var owner = (0, _owner.getOwner)(route);
        var routeName = route.routeName,
            fullRouteName = route.fullRouteName,
            router = route._router;

        var stateName = routeName === 'application' ? state : routeName + '.' + state;
        var stateNameFull = fullRouteName === 'application' ? state : fullRouteName + '.' + state;
        return routeHasBeenDefined(owner, router, stateName, stateNameFull) ? stateNameFull : '';
    }
    /**
      Determines whether or not a route has been defined by checking that the route
      is in the Router's map and the owner has a registration for that route.
    
      @private
      @param {Owner} owner
      @param {Router} router
      @param {String} localName
      @param {String} fullName
      @return {Boolean}
    */
    function routeHasBeenDefined(owner, router, localName, fullName) {
        var routerHasRoute = router.hasRoute(fullName);
        var ownerHasRoute = owner.hasRegistration('template:' + localName) || owner.hasRegistration('route:' + localName);
        return routerHasRoute && ownerHasRoute;
    }
    function _triggerEvent(routeInfos, ignoreFailure, name, args) {
        if (!routeInfos) {
            if (ignoreFailure) {
                return;
            }
            throw new _error2.default('Can\'t trigger action \'' + name + '\' because your app hasn\'t finished transitioning into its first route. To trigger an action on destination routes during a transition, you can call `.send()` on the `Transition` object passed to the `model/beforeModel/afterModel` hooks.');
        }
        var eventWasHandled = false;
        var routeInfo = void 0,
            handler = void 0,
            actionHandler = void 0;
        for (var i = routeInfos.length - 1; i >= 0; i--) {
            routeInfo = routeInfos[i];
            handler = routeInfo.route;
            actionHandler = handler && handler.actions && handler.actions[name];
            if (actionHandler) {
                if (actionHandler.apply(handler, args) === true) {
                    eventWasHandled = true;
                } else {
                    // Should only hit here if a non-bubbling error action is triggered on a route.
                    if (name === 'error') {
                        handler._router._markErrorAsHandled(args[0]);
                    }
                    return;
                }
            }
        }
        var defaultHandler = defaultActionHandlers[name];
        if (defaultHandler) {
            defaultHandler.apply(this, [routeInfos].concat(args));
            return;
        }
        if (!eventWasHandled && !ignoreFailure) {
            throw new _error2.default('Nothing handled the action \'' + name + '\'. If you did handle the action, this error can be caused by returning true from an action handler in a controller, causing the action to bubble.');
        }
    }
    function calculatePostTransitionState(emberRouter, leafRouteName, contexts) {
        var state = emberRouter._routerMicrolib.applyIntent(leafRouteName, contexts);
        var routeInfos = state.routeInfos,
            params = state.params;

        for (var i = 0; i < routeInfos.length; ++i) {
            var routeInfo = routeInfos[i];
            // If the routeInfo is not resolved, we serialize the context into params
            if (!routeInfo.isResolved) {
                params[routeInfo.name] = routeInfo.serialize(routeInfo.context);
            } else {
                params[routeInfo.name] = routeInfo.params;
            }
        }
        return state;
    }
    function updatePaths(router) {
        var infos = router._routerMicrolib.currentRouteInfos;
        if (infos.length === 0) {
            return;
        }
        var path = EmberRouter._routePath(infos);
        var currentRouteName = infos[infos.length - 1].name;
        var currentURL = router.get('location').getURL();
        (0, _metal.set)(router, 'currentPath', path);
        (0, _metal.set)(router, 'currentRouteName', currentRouteName);
        (0, _metal.set)(router, 'currentURL', currentURL);
        var appController = (0, _owner.getOwner)(router).lookup('controller:application');
        if (!appController) {
            // appController might not exist when top-level loading/error
            // substates have been entered since ApplicationRoute hasn't
            // actually been entered at that point.
            return;
        }
        if (!('currentPath' in appController)) {
            (0, _metal.defineProperty)(appController, 'currentPath');
        }
        (0, _metal.set)(appController, 'currentPath', path);
        if (!('currentRouteName' in appController)) {
            (0, _metal.defineProperty)(appController, 'currentRouteName');
        }
        (0, _metal.set)(appController, 'currentRouteName', currentRouteName);
    }
    EmberRouter.reopenClass({
        /**
          The `Router.map` function allows you to define mappings from URLs to routes
          in your application. These mappings are defined within the
          supplied callback function using `this.route`.
             The first parameter is the name of the route which is used by default as the
          path name as well.
             The second parameter is the optional options hash. Available options are:
               * `path`: allows you to provide your own path as well as mark dynamic
              segments.
            * `resetNamespace`: false by default; when nesting routes, ember will
              combine the route names to form the fully-qualified route name, which is
              used with `{{link-to}}` or manually transitioning to routes. Setting
              `resetNamespace: true` will cause the route not to inherit from its
              parent route's names. This is handy for preventing extremely long route names.
              Keep in mind that the actual URL path behavior is still retained.
             The third parameter is a function, which can be used to nest routes.
          Nested routes, by default, will have the parent route tree's route name and
          path prepended to it's own.
             ```app/router.js
          Router.map(function(){
            this.route('post', { path: '/post/:post_id' }, function() {
              this.route('edit');
              this.route('comments', { resetNamespace: true }, function() {
                this.route('new');
              });
            });
          });
          ```
             For more detailed documentation and examples please see
          [the guides](https://guides.emberjs.com/release/routing/defining-your-routes/).
             @method map
          @param callback
          @public
        */
        map: function (callback) {
            if (!this.dslCallbacks) {
                this.dslCallbacks = [];
                this.reopenClass({ dslCallbacks: this.dslCallbacks });
            }
            this.dslCallbacks.push(callback);
            return this;
        },
        _routePath: function (routeInfos) {
            var path = [];
            // We have to handle coalescing resource names that
            // are prefixed with their parent's names, e.g.
            // ['foo', 'foo.bar.baz'] => 'foo.bar.baz', not 'foo.foo.bar.baz'
            function intersectionMatches(a1, a2) {
                for (var i = 0; i < a1.length; ++i) {
                    if (a1[i] !== a2[i]) {
                        return false;
                    }
                }
                return true;
            }
            var name = void 0,
                nameParts = void 0,
                oldNameParts = void 0;
            for (var i = 1; i < routeInfos.length; i++) {
                name = routeInfos[i].name;
                nameParts = name.split('.');
                oldNameParts = slice.call(path);
                while (oldNameParts.length) {
                    if (intersectionMatches(oldNameParts, nameParts)) {
                        break;
                    }
                    oldNameParts.shift();
                }
                path.push.apply(path, nameParts.slice(oldNameParts.length));
            }
            return path.join('.');
        }
    });
    function didBeginTransition(transition, router) {
        var routerState = new _router_state.default(router, router._routerMicrolib, transition[_router_js.STATE_SYMBOL]);
        if (!router.currentState) {
            router.set('currentState', routerState);
        }
        router.set('targetState', routerState);
        transition.promise = transition.catch(function (error) {
            if (router._isErrorHandled(error)) {
                router._clearHandledError(error);
            } else {
                throw error;
            }
        }, 'Transition Error');
    }
    function forEachQueryParam(router, routeInfos, queryParams, callback) {
        var qpCache = router._queryParamsFor(routeInfos);
        for (var key in queryParams) {
            if (!queryParams.hasOwnProperty(key)) {
                continue;
            }
            var value = queryParams[key];
            var qp = qpCache.map[key];
            callback(key, value, qp);
        }
    }
    function findLiveRoute(liveRoutes, name) {
        if (!liveRoutes) {
            return;
        }
        var stack = [liveRoutes];
        while (stack.length > 0) {
            var test = stack.shift();
            if (test.render.name === name) {
                return test;
            }
            var outlets = test.outlets;
            for (var outletName in outlets) {
                stack.push(outlets[outletName]);
            }
        }
        return;
    }
    function appendLiveRoute(liveRoutes, defaultParentState, renderOptions) {
        var target = void 0;
        var myState = {
            render: renderOptions,
            outlets: Object.create(null),
            wasUsed: false
        };
        if (renderOptions.into) {
            target = findLiveRoute(liveRoutes, renderOptions.into);
        } else {
            target = defaultParentState;
        }
        if (target) {
            (0, _metal.set)(target.outlets, renderOptions.outlet, myState);
        } else {
            liveRoutes = myState;
        }
        return {
            liveRoutes: liveRoutes,
            ownState: myState
        };
    }
    function representEmptyRoute(liveRoutes, defaultParentState, route) {
        // the route didn't render anything
        var alreadyAppended = findLiveRoute(liveRoutes, route.routeName);
        if (alreadyAppended) {
            // But some other route has already rendered our default
            // template, so that becomes the default target for any
            // children we may have.
            return alreadyAppended;
        } else {
            // Create an entry to represent our default template name,
            // just so other routes can target it and inherit its place
            // in the outlet hierarchy.
            defaultParentState.outlets.main = {
                render: {
                    name: route.routeName,
                    outlet: 'main'
                },
                outlets: {}
            };
            return defaultParentState;
        }
    }
    EmberRouter.reopen(_runtime.Evented, {
        /**
          Handles updating the paths and notifying any listeners of the URL
          change.
             Triggers the router level `didTransition` hook.
             For example, to notify google analytics when the route changes,
          you could use this hook.  (Note: requires also including GA scripts, etc.)
             ```javascript
          import config from './config/environment';
          import EmberRouter from '@ember/routing/router';
             let Router = EmberRouter.extend({
            location: config.locationType,
               didTransition: function() {
              this._super(...arguments);
                 return ga('send', 'pageview', {
                'page': this.get('url'),
                'title': this.get('url')
              });
            }
          });
          ```
             @method didTransition
          @public
          @since 1.2.0
        */
        didTransition: defaultDidTransition,
        /**
          Handles notifying any listeners of an impending URL
          change.
             Triggers the router level `willTransition` hook.
             @method willTransition
          @public
          @since 1.11.0
        */
        willTransition: defaultWillTransition,
        /**
         Represents the URL of the root of the application, often '/'. This prefix is
         assumed on all routes defined on this router.
            @property rootURL
         @default '/'
         @public
        */
        rootURL: '/',
        /**
         The `location` property determines the type of URL's that your
         application will use.
            The following location types are currently available:
            * `history` - use the browser's history API to make the URLs look just like any standard URL
         * `hash` - use `#` to separate the server part of the URL from the Ember part: `/blog/#/posts/new`
         * `none` - do not store the Ember URL in the actual browser URL (mainly used for testing)
         * `auto` - use the best option based on browser capabilities: `history` if possible, then `hash` if possible, otherwise `none`
            This value is defaulted to `auto` by the `locationType` setting of `/config/environment.js`
            @property location
         @default 'hash'
         @see {Location}
         @public
        */
        location: 'hash',
        /**
         Represents the current URL.
            @property url
         @type {String}
         @private
        */
        url: (0, _metal.computed)(function () {
            return (0, _metal.get)(this, 'location').getURL();
        })
    });
    if (true /* EMBER_ROUTING_ROUTER_SERVICE */ && _deprecatedFeatures.ROUTER_EVENTS) {
        EmberRouter.reopen(_route.ROUTER_EVENT_DEPRECATIONS);
    }
    exports.default = EmberRouter;
});
enifed('@ember/-internals/routing/lib/system/router_state', ['exports', 'ember-babel', '@ember/polyfills', '@ember/-internals/routing/lib/utils'], function (exports, _emberBabel, _polyfills, _utils) {
    'use strict';

    var RouterState = function () {
        function RouterState(emberRouter, router, routerJsState) {
            (0, _emberBabel.classCallCheck)(this, RouterState);

            this.emberRouter = emberRouter;
            this.router = router;
            this.routerJsState = routerJsState;
        }

        RouterState.prototype.isActiveIntent = function isActiveIntent(routeName, models, queryParams, queryParamsMustMatch) {
            var state = this.routerJsState;
            if (!this.router.isActiveIntent(routeName, models, undefined, state)) {
                return false;
            }
            if (queryParamsMustMatch && Object.keys(queryParams).length > 0) {
                var visibleQueryParams = (0, _polyfills.assign)({}, queryParams);
                this.emberRouter._prepareQueryParams(routeName, models, visibleQueryParams);
                return (0, _utils.shallowEqual)(visibleQueryParams, state.queryParams);
            }
            return true;
        };

        return RouterState;
    }();

    exports.default = RouterState;
});
enifed("@ember/-internals/routing/lib/system/transition", [], function () {
  "use strict";
  /**
    A Transition is a thennable (a promise-like object) that represents
    an attempt to transition to another route. It can be aborted, either
    explicitly via `abort` or by attempting another transition while a
    previous one is still underway. An aborted transition can also
    be `retry()`d later.
  
    @class Transition
    @public
  */
  /**
    The Transition's internal promise. Calling `.then` on this property
    is that same as calling `.then` on the Transition object itself, but
    this property is exposed for when you want to pass around a
    Transition's promise, but not the Transition object itself, since
    Transition object can be externally `abort`ed, while the promise
    cannot.
  
    @property promise
    @type {Object}
    @public
    */
  /**
    Custom state can be stored on a Transition's `data` object.
    This can be useful for decorating a Transition within an earlier
    hook and shared with a later hook. Properties set on `data` will
    be copied to new transitions generated by calling `retry` on this
    transition.
  
    @property data
    @type {Object}
    @public
  */
  /**
    A standard promise hook that resolves if the transition
    succeeds and rejects if it fails/redirects/aborts.
  
    Forwards to the internal `promise` property which you can
    use in situations where you want to pass around a thennable,
    but not the Transition itself.
  
    @method then
    @param {Function} onFulfilled
    @param {Function} onRejected
    @param {String} label optional string for labeling the promise.
    Useful for tooling.
    @return {Promise}
    @public
  */
  /**
  
    Forwards to the internal `promise` property which you can
    use in situations where you want to pass around a thennable,
    but not the Transition itself.
  
    @method catch
    @param {Function} onRejection
    @param {String} label optional string for labeling the promise.
    Useful for tooling.
    @return {Promise}
    @public
  */
  /**
  
    Forwards to the internal `promise` property which you can
    use in situations where you want to pass around a thennable,
    but not the Transition itself.
  
    @method finally
    @param {Function} callback
    @param {String} label optional string for labeling the promise.
    Useful for tooling.
    @return {Promise}
    @public
  */
  /**
    Aborts the Transition. Note you can also implicitly abort a transition
    by initiating another transition while a previous one is underway.
  
    @method abort
    @return {Transition} this transition
    @public
  */
  /**
  
    Retries a previously-aborted transition (making sure to abort the
    transition if it's still active). Returns a new transition that
    represents the new attempt to transition.
  
    @method retry
    @return {Transition} new transition
    @public
    */
  /**
  
    Sets the URL-changing method to be employed at the end of a
    successful transition. By default, a new Transition will just
    use `updateURL`, but passing 'replace' to this method will
    cause the URL to update using 'replaceWith' instead. Omitting
    a parameter will disable the URL change, allowing for transitions
    that don't update the URL at completion (this is also used for
    handleURL, since the URL has already changed before the
    transition took place).
  
    @method method
    @param {String} method the type of URL-changing method to use
      at the end of a transition. Accepted values are 'replace',
      falsy values, or any other non-falsy value (which is
      interpreted as an updateURL transition).
  
    @return {Transition} this transition
    @public
  */
  /**
  
    Fires an event on the current list of resolved/resolving
    handlers within this transition. Useful for firing events
    on route hierarchies that haven't fully been entered yet.
  
    Note: This method is also aliased as `send`
  
    @method trigger
    @param {Boolean} [ignoreFailure=false] a boolean specifying whether unhandled events throw an error
    @param {String} name the name of the event to fire
    @public
  */
  /**
   * This property is a `RouteInfo` object that represents
   * where the router is transitioning to. It's important
   * to note that a `RouteInfo` is a linked list and this
   * property is simply represents leafmost route.
   * @property {RouteInfo|RouteInfoWithAttributes} to
   * @public
   * @category ember-routing-router-service
   */
  /**
   * This property is a `RouteInfo` object that represents
   * where transition originated from. It's important
   * to note that a `RouteInfo` is a linked list and this
   * property is simply represents head node of the list.
   * In the case of an initial render, from will be set to
   * `null`.
   * @property {RouteInfoWithAttributes} from
   * @public
   * @category ember-routing-router-service
   */
  /**
    Transitions are aborted and their promises rejected
    when redirects occur; this method returns a promise
    that will follow any redirects that occur and fulfill
    with the value fulfilled by any redirecting transitions
    that occur.
  
    @method followRedirects
    @return {Promise} a promise that fulfills with the same
      value that the final redirecting transition fulfills with
    @public
  */
});
enifed('@ember/-internals/routing/lib/utils', ['exports', '@ember/-internals/metal', '@ember/-internals/owner', '@ember/error', '@ember/polyfills', 'router_js'], function (exports, _metal, _owner, _error, _polyfills, _router_js) {
    'use strict';

    exports.extractRouteArgs = extractRouteArgs;
    exports.getActiveTargetName = getActiveTargetName;
    exports.stashParamNames = stashParamNames;
    exports.calculateCacheKey = calculateCacheKey;
    exports.normalizeControllerQueryParams = normalizeControllerQueryParams;
    exports.resemblesURL = resemblesURL;
    exports.prefixRouteNameArg = prefixRouteNameArg;
    exports.shallowEqual = shallowEqual;

    var ALL_PERIODS_REGEX = /\./g;
    function extractRouteArgs(args) {
        args = args.slice();
        var possibleQueryParams = args[args.length - 1];
        var queryParams = void 0;
        if (possibleQueryParams && possibleQueryParams.hasOwnProperty('queryParams')) {
            queryParams = args.pop().queryParams;
        } else {
            queryParams = {};
        }
        var routeName = args.shift();
        return { routeName: routeName, models: args, queryParams: queryParams };
    }
    function getActiveTargetName(router) {
        var routeInfos = router.activeTransition ? router.activeTransition[_router_js.STATE_SYMBOL].routeInfos : router.state.routeInfos;
        return routeInfos[routeInfos.length - 1].name;
    }
    function stashParamNames(router, routeInfos) {
        if (routeInfos['_namesStashed']) {
            return;
        }
        // This helper exists because router.js/route-recognizer.js awkwardly
        // keeps separate a routeInfo's list of parameter names depending
        // on whether a URL transition or named transition is happening.
        // Hopefully we can remove this in the future.
        var targetRouteName = routeInfos[routeInfos.length - 1].name;
        var recogHandlers = router._routerMicrolib.recognizer.handlersFor(targetRouteName);
        var dynamicParent = void 0;
        for (var i = 0; i < routeInfos.length; ++i) {
            var routeInfo = routeInfos[i];
            var names = recogHandlers[i].names;
            if (names.length) {
                dynamicParent = routeInfo;
            }
            routeInfo['_names'] = names;
            var route = routeInfo.route;
            route._stashNames(routeInfo, dynamicParent);
        }
        routeInfos['_namesStashed'] = true;
    }
    function _calculateCacheValuePrefix(prefix, part) {
        // calculates the dot separated sections from prefix that are also
        // at the start of part - which gives us the route name
        // given : prefix = site.article.comments, part = site.article.id
        //      - returns: site.article (use get(values[site.article], 'id') to get the dynamic part - used below)
        // given : prefix = site.article, part = site.article.id
        //      - returns: site.article. (use get(values[site.article], 'id') to get the dynamic part - used below)
        var prefixParts = prefix.split('.');
        var currPrefix = '';
        for (var i = 0; i < prefixParts.length; i++) {
            var currPart = prefixParts.slice(0, i + 1).join('.');
            if (part.indexOf(currPart) !== 0) {
                break;
            }
            currPrefix = currPart;
        }
        return currPrefix;
    }
    /*
      Stolen from Controller
    */
    function calculateCacheKey(prefix) {
        var parts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
        var values = arguments[2];

        var suffixes = '';
        for (var i = 0; i < parts.length; ++i) {
            var part = parts[i];
            var cacheValuePrefix = _calculateCacheValuePrefix(prefix, part);
            var value = void 0;
            if (values) {
                if (cacheValuePrefix && cacheValuePrefix in values) {
                    var partRemovedPrefix = part.indexOf(cacheValuePrefix) === 0 ? part.substr(cacheValuePrefix.length + 1) : part;
                    value = (0, _metal.get)(values[cacheValuePrefix], partRemovedPrefix);
                } else {
                    value = (0, _metal.get)(values, part);
                }
            }
            suffixes += '::' + part + ':' + value;
        }
        return prefix + suffixes.replace(ALL_PERIODS_REGEX, '-');
    }
    /*
      Controller-defined query parameters can come in three shapes:
    
      Array
        queryParams: ['foo', 'bar']
      Array of simple objects where value is an alias
        queryParams: [
          {
            'foo': 'rename_foo_to_this'
          },
          {
            'bar': 'call_bar_this_instead'
          }
        ]
      Array of fully defined objects
        queryParams: [
          {
            'foo': {
              as: 'rename_foo_to_this'
            },
          }
          {
            'bar': {
              as: 'call_bar_this_instead',
              scope: 'controller'
            }
          }
        ]
    
      This helper normalizes all three possible styles into the
      'Array of fully defined objects' style.
    */
    function normalizeControllerQueryParams(queryParams) {
        var qpMap = {};
        for (var i = 0; i < queryParams.length; ++i) {
            accumulateQueryParamDescriptors(queryParams[i], qpMap);
        }
        return qpMap;
    }
    function accumulateQueryParamDescriptors(_desc, accum) {
        var desc = _desc;
        var tmp = void 0;
        if (typeof desc === 'string') {
            tmp = {};
            tmp[desc] = { as: null };
            desc = tmp;
        }
        for (var key in desc) {
            if (!desc.hasOwnProperty(key)) {
                return;
            }
            var singleDesc = desc[key];
            if (typeof singleDesc === 'string') {
                singleDesc = { as: singleDesc };
            }
            tmp = accum[key] || { as: null, scope: 'model' };
            (0, _polyfills.assign)(tmp, singleDesc);
            accum[key] = tmp;
        }
    }
    /*
      Check if a routeName resembles a url instead
    
      @private
    */
    function resemblesURL(str) {
        return typeof str === 'string' && (str === '' || str[0] === '/');
    }
    /*
      Returns an arguments array where the route name arg is prefixed based on the mount point
    
      @private
    */
    function prefixRouteNameArg(route, args) {
        var routeName = args[0];
        var owner = (0, _owner.getOwner)(route);
        var prefix = owner.mountPoint;
        // only alter the routeName if it's actually referencing a route.
        if (owner.routable && typeof routeName === 'string') {
            if (resemblesURL(routeName)) {
                throw new _error.default('Programmatic transitions by URL cannot be used within an Engine. Please use the route name instead.');
            } else {
                routeName = prefix + '.' + routeName;
                args[0] = routeName;
            }
        }
        return args;
    }
    function shallowEqual(a, b) {
        var k = void 0;
        var aCount = 0;
        var bCount = 0;
        for (k in a) {
            if (a.hasOwnProperty(k)) {
                if (a[k] !== b[k]) {
                    return false;
                }
                aCount++;
            }
        }
        for (k in b) {
            if (b.hasOwnProperty(k)) {
                bCount++;
            }
        }
        return aCount === bCount;
    }
});
enifed('@ember/-internals/runtime/index', ['exports', '@ember/-internals/runtime/lib/system/object', '@ember/-internals/runtime/lib/mixins/registry_proxy', '@ember/-internals/runtime/lib/mixins/container_proxy', '@ember/-internals/runtime/lib/copy', '@ember/-internals/runtime/lib/compare', '@ember/-internals/runtime/lib/is-equal', '@ember/-internals/runtime/lib/mixins/array', '@ember/-internals/runtime/lib/mixins/comparable', '@ember/-internals/runtime/lib/system/namespace', '@ember/-internals/runtime/lib/system/array_proxy', '@ember/-internals/runtime/lib/system/object_proxy', '@ember/-internals/runtime/lib/system/core_object', '@ember/-internals/runtime/lib/mixins/action_handler', '@ember/-internals/runtime/lib/mixins/copyable', '@ember/-internals/runtime/lib/mixins/enumerable', '@ember/-internals/runtime/lib/mixins/-proxy', '@ember/-internals/runtime/lib/mixins/observable', '@ember/-internals/runtime/lib/mixins/mutable_enumerable', '@ember/-internals/runtime/lib/mixins/target_action_support', '@ember/-internals/runtime/lib/mixins/evented', '@ember/-internals/runtime/lib/mixins/promise_proxy', '@ember/-internals/runtime/lib/ext/rsvp', '@ember/-internals/runtime/lib/type-of', '@ember/-internals/runtime/lib/ext/function'], function (exports, _object, _registry_proxy, _container_proxy, _copy, _compare, _isEqual, _array, _comparable, _namespace, _array_proxy, _object_proxy, _core_object, _action_handler, _copyable, _enumerable, _proxy, _observable, _mutable_enumerable, _target_action_support, _evented, _promise_proxy, _rsvp, _typeOf) {
  'use strict';

  exports.typeOf = exports.onerrorDefault = exports.RSVP = exports.PromiseProxyMixin = exports.Evented = exports.TargetActionSupport = exports.MutableEnumerable = exports.Observable = exports._contentFor = exports._ProxyMixin = exports.Enumerable = exports.Copyable = exports.ActionHandler = exports.CoreObject = exports.ObjectProxy = exports.ArrayProxy = exports.Namespace = exports.Comparable = exports.isArray = exports.uniqBy = exports.removeAt = exports.MutableArray = exports.A = exports.NativeArray = exports.isEmberArray = exports.Array = exports.isEqual = exports.compare = exports.copy = exports.ContainerProxyMixin = exports.RegistryProxyMixin = exports.FrameworkObject = exports.Object = undefined;
  Object.defineProperty(exports, 'Object', {
    enumerable: true,
    get: function () {
      return _object.default;
    }
  });
  Object.defineProperty(exports, 'FrameworkObject', {
    enumerable: true,
    get: function () {
      return _object.FrameworkObject;
    }
  });
  Object.defineProperty(exports, 'RegistryProxyMixin', {
    enumerable: true,
    get: function () {
      return _registry_proxy.default;
    }
  });
  Object.defineProperty(exports, 'ContainerProxyMixin', {
    enumerable: true,
    get: function () {
      return _container_proxy.default;
    }
  });
  Object.defineProperty(exports, 'copy', {
    enumerable: true,
    get: function () {
      return _copy.default;
    }
  });
  Object.defineProperty(exports, 'compare', {
    enumerable: true,
    get: function () {
      return _compare.default;
    }
  });
  Object.defineProperty(exports, 'isEqual', {
    enumerable: true,
    get: function () {
      return _isEqual.default;
    }
  });
  Object.defineProperty(exports, 'Array', {
    enumerable: true,
    get: function () {
      return _array.default;
    }
  });
  Object.defineProperty(exports, 'isEmberArray', {
    enumerable: true,
    get: function () {
      return _array.isEmberArray;
    }
  });
  Object.defineProperty(exports, 'NativeArray', {
    enumerable: true,
    get: function () {
      return _array.NativeArray;
    }
  });
  Object.defineProperty(exports, 'A', {
    enumerable: true,
    get: function () {
      return _array.A;
    }
  });
  Object.defineProperty(exports, 'MutableArray', {
    enumerable: true,
    get: function () {
      return _array.MutableArray;
    }
  });
  Object.defineProperty(exports, 'removeAt', {
    enumerable: true,
    get: function () {
      return _array.removeAt;
    }
  });
  Object.defineProperty(exports, 'uniqBy', {
    enumerable: true,
    get: function () {
      return _array.uniqBy;
    }
  });
  Object.defineProperty(exports, 'isArray', {
    enumerable: true,
    get: function () {
      return _array.isArray;
    }
  });
  Object.defineProperty(exports, 'Comparable', {
    enumerable: true,
    get: function () {
      return _comparable.default;
    }
  });
  Object.defineProperty(exports, 'Namespace', {
    enumerable: true,
    get: function () {
      return _namespace.default;
    }
  });
  Object.defineProperty(exports, 'ArrayProxy', {
    enumerable: true,
    get: function () {
      return _array_proxy.default;
    }
  });
  Object.defineProperty(exports, 'ObjectProxy', {
    enumerable: true,
    get: function () {
      return _object_proxy.default;
    }
  });
  Object.defineProperty(exports, 'CoreObject', {
    enumerable: true,
    get: function () {
      return _core_object.default;
    }
  });
  Object.defineProperty(exports, 'ActionHandler', {
    enumerable: true,
    get: function () {
      return _action_handler.default;
    }
  });
  Object.defineProperty(exports, 'Copyable', {
    enumerable: true,
    get: function () {
      return _copyable.default;
    }
  });
  Object.defineProperty(exports, 'Enumerable', {
    enumerable: true,
    get: function () {
      return _enumerable.default;
    }
  });
  Object.defineProperty(exports, '_ProxyMixin', {
    enumerable: true,
    get: function () {
      return _proxy.default;
    }
  });
  Object.defineProperty(exports, '_contentFor', {
    enumerable: true,
    get: function () {
      return _proxy.contentFor;
    }
  });
  Object.defineProperty(exports, 'Observable', {
    enumerable: true,
    get: function () {
      return _observable.default;
    }
  });
  Object.defineProperty(exports, 'MutableEnumerable', {
    enumerable: true,
    get: function () {
      return _mutable_enumerable.default;
    }
  });
  Object.defineProperty(exports, 'TargetActionSupport', {
    enumerable: true,
    get: function () {
      return _target_action_support.default;
    }
  });
  Object.defineProperty(exports, 'Evented', {
    enumerable: true,
    get: function () {
      return _evented.default;
    }
  });
  Object.defineProperty(exports, 'PromiseProxyMixin', {
    enumerable: true,
    get: function () {
      return _promise_proxy.default;
    }
  });
  Object.defineProperty(exports, 'RSVP', {
    enumerable: true,
    get: function () {
      return _rsvp.default;
    }
  });
  Object.defineProperty(exports, 'onerrorDefault', {
    enumerable: true,
    get: function () {
      return _rsvp.onerrorDefault;
    }
  });
  Object.defineProperty(exports, 'typeOf', {
    enumerable: true,
    get: function () {
      return _typeOf.typeOf;
    }
  });
});
enifed('@ember/-internals/runtime/lib/compare', ['exports', '@ember/-internals/runtime/lib/type-of', '@ember/-internals/runtime/lib/mixins/comparable'], function (exports, _typeOf, _comparable) {
  'use strict';

  exports.default = compare;


  var TYPE_ORDER = {
    undefined: 0,
    null: 1,
    boolean: 2,
    number: 3,
    string: 4,
    array: 5,
    object: 6,
    instance: 7,
    function: 8,
    class: 9,
    date: 10
  };

  //
  // the spaceship operator
  //
  //                      `. ___
  //                     __,' __`.                _..----....____
  //         __...--.'``;.   ,.   ;``--..__     .'    ,-._    _.-'
  //   _..-''-------'   `'   `'   `'     O ``-''._   (,;') _,'
  // ,'________________                          \`-._`-','
  //  `._              ```````````------...___   '-.._'-:
  //     ```--.._      ,.                     ````--...__\-.
  //             `.--. `-` "INFINITY IS LESS     ____    |  |`
  //               `. `.   THAN BEYOND"        ,'`````.  ;  ;`
  //                 `._`.        __________   `.      \'__/`
  //                    `-:._____/______/___/____`.     \  `
  //                                |       `._    `.    \
  //                                `._________`-.   `.   `.___
  //                                              SSt  `------'`
  function spaceship(a, b) {
    var diff = a - b;
    return (diff > 0) - (diff < 0);
  }

  /**
   @module @ember/utils
  */

  /**
   Compares two javascript values and returns:
  
    - -1 if the first is smaller than the second,
    - 0 if both are equal,
    - 1 if the first is greater than the second.
  
    ```javascript
    import { compare } from '@ember/utils';
  
    compare('hello', 'hello');  // 0
    compare('abc', 'dfg');      // -1
    compare(2, 1);              // 1
    ```
  
   If the types of the two objects are different precedence occurs in the
   following order, with types earlier in the list considered `<` types
   later in the list:
  
    - undefined
    - null
    - boolean
    - number
    - string
    - array
    - object
    - instance
    - function
    - class
    - date
  
    ```javascript
    import { compare } from '@ember/utils';
  
    compare('hello', 50);       // 1
    compare(50, 'hello');       // -1
    ```
  
   @method compare
   @for @ember/utils
   @static
   @param {Object} v First value to compare
   @param {Object} w Second value to compare
   @return {Number} -1 if v < w, 0 if v = w and 1 if v > w.
   @public
  */
  function compare(v, w) {
    if (v === w) {
      return 0;
    }

    var type1 = (0, _typeOf.typeOf)(v);
    var type2 = (0, _typeOf.typeOf)(w);

    if (type1 === 'instance' && _comparable.default.detect(v) && v.constructor.compare) {
      return v.constructor.compare(v, w);
    }

    if (type2 === 'instance' && _comparable.default.detect(w) && w.constructor.compare) {
      return w.constructor.compare(w, v) * -1;
    }

    var res = spaceship(TYPE_ORDER[type1], TYPE_ORDER[type2]);

    if (res !== 0) {
      return res;
    }

    // types are equal - so we have to check values now
    switch (type1) {
      case 'boolean':
      case 'number':
        return spaceship(v, w);

      case 'string':
        return spaceship(v.localeCompare(w), 0);

      case 'array':
        {
          var vLen = v.length;
          var wLen = w.length;
          var len = Math.min(vLen, wLen);

          for (var i = 0; i < len; i++) {
            var r = compare(v[i], w[i]);
            if (r !== 0) {
              return r;
            }
          }

          // all elements are equal now
          // shorter array should be ordered first
          return spaceship(vLen, wLen);
        }
      case 'instance':
        if (_comparable.default.detect(v)) {
          return v.compare(v, w);
        }
        return 0;

      case 'date':
        return spaceship(v.getTime(), w.getTime());

      default:
        return 0;
    }
  }
});
enifed('@ember/-internals/runtime/lib/copy', ['exports', '@ember/debug', '@ember/-internals/runtime/lib/system/object', '@ember/-internals/runtime/lib/mixins/copyable'], function (exports, _debug, _object, _copyable) {
  'use strict';

  exports.default = copy;


  /**
   @module @ember/object
  */
  function _copy(obj, deep, seen, copies) {
    // primitive data types are immutable, just return them.
    if (typeof obj !== 'object' || obj === null) {
      return obj;
    }

    var ret = void 0,
        loc = void 0;

    // avoid cyclical loops
    if (deep && (loc = seen.indexOf(obj)) >= 0) {
      return copies[loc];
    }

    if (deep) {
      seen.push(obj);
    }

    // IMPORTANT: this specific test will detect a native array only. Any other
    // object will need to implement Copyable.
    if (Array.isArray(obj)) {
      ret = obj.slice();

      if (deep) {
        copies.push(ret);
        loc = ret.length;

        while (--loc >= 0) {
          ret[loc] = _copy(ret[loc], deep, seen, copies);
        }
      }
    } else if (_copyable.default.detect(obj)) {
      ret = obj.copy(deep, seen, copies);
      if (deep) {
        copies.push(ret);
      }
    } else if (obj instanceof Date) {
      ret = new Date(obj.getTime());
      if (deep) {
        copies.push(ret);
      }
    } else {
      true && !(!(obj instanceof _object.default) || _copyable.default.detect(obj)) && (0, _debug.assert)('Cannot clone an EmberObject that does not implement Copyable', !(obj instanceof _object.default) || _copyable.default.detect(obj));

      ret = {};
      if (deep) {
        copies.push(ret);
      }

      var key = void 0;
      for (key in obj) {
        // support Null prototype
        if (!Object.prototype.hasOwnProperty.call(obj, key)) {
          continue;
        }

        // Prevents browsers that don't respect non-enumerability from
        // copying internal Ember properties
        if (key.substring(0, 2) === '__') {
          continue;
        }

        ret[key] = deep ? _copy(obj[key], deep, seen, copies) : obj[key];
      }
    }

    return ret;
  }

  /**
    Creates a shallow copy of the passed object. A deep copy of the object is
    returned if the optional `deep` argument is `true`.
  
    If the passed object implements the `Copyable` interface, then this
    function will delegate to the object's `copy()` method and return the
    result. See `Copyable` for further details.
  
    For primitive values (which are immutable in JavaScript), the passed object
    is simply returned.
  
    @method copy
    @deprecated Use 'ember-copy' addon instead
    @static
    @for @ember/object/internals
    @param {Object} obj The object to clone
    @param {Boolean} [deep=false] If true, a deep copy of the object is made.
    @return {Object} The copied object
    @public
  */
  function copy(obj, deep) {
    true && !false && (0, _debug.deprecate)('Use ember-copy addon instead of copy method and Copyable mixin.', false, {
      id: 'ember-runtime.deprecate-copy-copyable',
      until: '4.0.0',
      url: 'https://emberjs.com/deprecations/v3.x/#toc_ember-runtime-deprecate-copy-copyable'
    });

    // fast paths

    if ('object' !== typeof obj || obj === null) {
      return obj; // can't copy primitives
    }

    if (!Array.isArray(obj) && _copyable.default.detect(obj)) {
      return obj.copy(deep);
    }

    return _copy(obj, deep, deep ? [] : null, deep ? [] : null);
  }
});
enifed('@ember/-internals/runtime/lib/ext/function', ['@ember/-internals/environment', '@ember/-internals/metal'], function (_environment, _metal) {
  'use strict';

  /**
  @module ember
  */

  if (_environment.ENV.EXTEND_PROTOTYPES.Function) {
    Object.defineProperties(Function.prototype, {
      /**
        The `property` extension of Javascript's Function prototype is available
        when `EmberENV.EXTEND_PROTOTYPES` or `EmberENV.EXTEND_PROTOTYPES.Function` is
        `true`, which is the default.
         Computed properties allow you to treat a function like a property:
         ```app/utils/president.js
        import EmberObject from '@ember/object';
         export default EmberObject.extend({
          firstName: '',
          lastName:  '',
           fullName: function() {
            return this.get('firstName') + ' ' + this.get('lastName');
          }.property() // Call this flag to mark the function as a property
        });
        ```
         ```javascript
        let president = President.create({
          firstName: 'Barack',
          lastName: 'Obama'
        });
         president.get('fullName'); // 'Barack Obama'
        ```
         Treating a function like a property is useful because they can work with
        bindings, just like any other property.
         Many computed properties have dependencies on other properties. For
        example, in the above example, the `fullName` property depends on
        `firstName` and `lastName` to determine its value. You can tell Ember
        about these dependencies like this:
         ```app/utils/president.js
        import EmberObject from '@ember/object';
         export default EmberObject.extend({
          firstName: '',
          lastName:  '',
           fullName: function() {
            return this.get('firstName') + ' ' + this.get('lastName');
             // Tell Ember.js that this computed property depends on firstName
            // and lastName
          }.property('firstName', 'lastName')
        });
        ```
         Make sure you list these dependencies so Ember knows when to update
        bindings that connect to a computed property. Changing a dependency
        will not immediately trigger an update of the computed property, but
        will instead clear the cache so that it is updated when the next `get`
        is called on the property.
         See [ComputedProperty](/api/ember/release/classes/ComputedProperty), [@ember/object/computed](/api/ember/release/classes/@ember%2Fobject%2Fcomputed).
         @method property
        @for Function
        @public
      */
      property: {
        configurable: true,
        enumerable: false,
        writable: true,
        value: function () {
          return _metal.computed.apply(undefined, Array.prototype.slice.call(arguments).concat([this]));
        }
      },

      /**
        The `observes` extension of Javascript's Function prototype is available
        when `EmberENV.EXTEND_PROTOTYPES` or `EmberENV.EXTEND_PROTOTYPES.Function` is
        true, which is the default.
         You can observe property changes simply by adding the `observes`
        call to the end of your method declarations in classes that you write.
        For example:
         ```javascript
        import EmberObject from '@ember/object';
         EmberObject.extend({
          valueObserver: function() {
            // Executes whenever the "value" property changes
          }.observes('value')
        });
        ```
         In the future this method may become asynchronous.
         See `observer`.
         @method observes
        @for Function
        @public
      */
      observes: {
        configurable: true,
        enumerable: false,
        writable: true,
        value: function () {
          return _metal.observer.apply(undefined, Array.prototype.slice.call(arguments).concat([this]));
        }
      },

      /**
        The `on` extension of Javascript's Function prototype is available
        when `EmberENV.EXTEND_PROTOTYPES` or `EmberENV.EXTEND_PROTOTYPES.Function` is
        true, which is the default.
         You can listen for events simply by adding the `on` call to the end of
        your method declarations in classes or mixins that you write. For example:
         ```javascript
        import Mixin from '@ember/mixin';
         Mixin.create({
          doSomethingWithElement: function() {
            // Executes whenever the "didInsertElement" event fires
          }.on('didInsertElement')
        });
        ```
         See `@ember/object/evented/on`.
         @method on
        @for Function
        @public
      */

      on: {
        configurable: true,
        enumerable: false,
        writable: true,
        value: function () {
          return _metal.on.apply(undefined, Array.prototype.slice.call(arguments).concat([this]));
        }
      }
    });
  }
});
enifed('@ember/-internals/runtime/lib/ext/rsvp', ['exports', 'rsvp', '@ember/runloop', '@ember/-internals/error-handling', '@ember/debug'], function (exports, _rsvp, _runloop, _errorHandling, _debug) {
  'use strict';

  exports.onerrorDefault = onerrorDefault;


  _rsvp.configure('async', function (callback, promise) {
    _runloop.backburner.schedule('actions', null, callback, promise);
  });

  _rsvp.configure('after', function (cb) {
    _runloop.backburner.schedule(_runloop._rsvpErrorQueue, null, cb);
  });

  _rsvp.on('error', onerrorDefault);

  function onerrorDefault(reason) {
    var error = errorFor(reason);
    if (error) {
      var overrideDispatch = (0, _errorHandling.getDispatchOverride)();
      if (overrideDispatch) {
        overrideDispatch(error);
      } else {
        throw error;
      }
    }
  }

  function errorFor(reason) {
    if (!reason) return;

    if (reason.errorThrown) {
      return unwrapErrorThrown(reason);
    }

    if (reason.name === 'UnrecognizedURLError') {
      true && !false && (0, _debug.assert)('The URL \'' + reason.message + '\' did not match any routes in your application', false);

      return;
    }

    if (reason.name === 'TransitionAborted') {
      return;
    }

    return reason;
  }

  function unwrapErrorThrown(reason) {
    var error = reason.errorThrown;
    if (typeof error === 'string') {
      error = new Error(error);
    }
    Object.defineProperty(error, '__reason_with_error_thrown__', {
      value: reason,
      enumerable: false
    });
    return error;
  }

  exports.default = _rsvp;
});
enifed('@ember/-internals/runtime/lib/is-equal', ['exports'], function (exports) {
  'use strict';

  exports.default = isEqual;
  /**
   @module @ember/utils
  */
  /**
    Compares two objects, returning true if they are equal.
  
    ```javascript
    import { isEqual } from '@ember/utils';
  
    isEqual('hello', 'hello');                   // true
    isEqual(1, 2);                               // false
    ```
  
    `isEqual` is a more specific comparison than a triple equal comparison.
    It will call the `isEqual` instance method on the objects being
    compared, allowing finer control over when objects should be considered
    equal to each other.
  
    ```javascript
    import { isEqual } from '@ember/utils';
    import EmberObject from '@ember/object';
  
    let Person = EmberObject.extend({
      isEqual(other) { return this.ssn == other.ssn; }
    });
  
    let personA = Person.create({name: 'Muhammad Ali', ssn: '123-45-6789'});
    let personB = Person.create({name: 'Cassius Clay', ssn: '123-45-6789'});
  
    isEqual(personA, personB); // true
    ```
  
    Due to the expense of array comparisons, collections will never be equal to
    each other even if each of their items are equal to each other.
  
    ```javascript
    import { isEqual } from '@ember/utils';
  
    isEqual([4, 2], [4, 2]);                     // false
    ```
  
    @method isEqual
    @for @ember/utils
    @static
    @param {Object} a first object to compare
    @param {Object} b second object to compare
    @return {Boolean}
    @public
  */
  function isEqual(a, b) {
    if (a && typeof a.isEqual === 'function') {
      return a.isEqual(b);
    }

    if (a instanceof Date && b instanceof Date) {
      return a.getTime() === b.getTime();
    }

    return a === b;
  }
});
enifed('@ember/-internals/runtime/lib/mixins/-proxy', ['exports', '@glimmer/reference', '@ember/-internals/meta', '@ember/-internals/metal', '@ember/-internals/utils', '@ember/debug'], function (exports, _reference, _meta, _metal, _utils, _debug) {
  'use strict';

  exports.contentFor = contentFor;


  function contentPropertyDidChange(content, contentKey) {
    var key = contentKey.slice(8); // remove "content."
    if (key in this) {
      return;
    } // if shadowed in proxy
    (0, _metal.notifyPropertyChange)(this, key);
  } /**
    @module ember
    */

  function contentFor(proxy, m) {
    var content = (0, _metal.get)(proxy, 'content');
    var tag = (m === undefined ? (0, _meta.meta)(proxy) : m).readableTag();
    if (tag !== undefined) {
      tag.inner.second.inner.update((0, _metal.tagFor)(content));
    }
    return content;
  }

  /**
    `Ember.ProxyMixin` forwards all properties not defined by the proxy itself
    to a proxied `content` object.  See ObjectProxy for more details.
  
    @class ProxyMixin
    @namespace Ember
    @private
  */
  exports.default = _metal.Mixin.create({
    /**
      The object whose properties will be forwarded.
       @property content
      @type EmberObject
      @default null
      @private
    */
    content: null,

    init: function () {
      this._super.apply(this, arguments);
      (0, _utils.setProxy)(this);
      var m = (0, _meta.meta)(this);
      m.writableTag(function () {
        return (0, _reference.combine)([_reference.DirtyableTag.create(), _reference.UpdatableTag.create(_reference.CONSTANT_TAG)]);
      });
    },
    willDestroy: function () {
      this.set('content', null);
      this._super.apply(this, arguments);
    },

    isTruthy: (0, _metal.computed)('content', function () {
      return !!(0, _metal.get)(this, 'content');
    }),

    willWatchProperty: function (key) {
      var contentKey = 'content.' + key;
      (0, _metal.addObserver)(this, contentKey, null, contentPropertyDidChange);
    },
    didUnwatchProperty: function (key) {
      var contentKey = 'content.' + key;
      (0, _metal.removeObserver)(this, contentKey, null, contentPropertyDidChange);
    },
    unknownProperty: function (key) {
      var content = contentFor(this);
      if (content) {
        return (0, _metal.get)(content, key);
      }
    },
    setUnknownProperty: function (key, value) {
      var m = (0, _meta.meta)(this);

      if (m.isInitializing() || m.isPrototypeMeta(this)) {
        // if marked as prototype or object is initializing then just
        // defineProperty rather than delegate
        (0, _metal.defineProperty)(this, key, null, value);
        return value;
      }

      var content = contentFor(this, m);

      true && !content && (0, _debug.assert)('Cannot delegate set(\'' + key + '\', ' + value + ') to the \'content\' property of object proxy ' + this + ': its \'content\' is undefined.', content);

      return (0, _metal.set)(content, key, value);
    }
  });
});
enifed('@ember/-internals/runtime/lib/mixins/action_handler', ['exports', '@ember/-internals/metal', '@ember/debug'], function (exports, _metal, _debug) {
  'use strict';

  /**
    `Ember.ActionHandler` is available on some familiar classes including
    `Route`, `Component`, and `Controller`.
    (Internally the mixin is used by `Ember.CoreView`, `Ember.ControllerMixin`,
    and `Route` and available to the above classes through
    inheritance.)
  
    @class ActionHandler
    @namespace Ember
    @private
  */
  /**
  @module ember
  */

  var ActionHandler = _metal.Mixin.create({
    mergedProperties: ['actions'],

    /**
      The collection of functions, keyed by name, available on this
      `ActionHandler` as action targets.
       These functions will be invoked when a matching `{{action}}` is triggered
      from within a template and the application's current route is this route.
       Actions can also be invoked from other parts of your application
      via `ActionHandler#send`.
       The `actions` hash will inherit action handlers from
      the `actions` hash defined on extended parent classes
      or mixins rather than just replace the entire hash, e.g.:
       ```app/mixins/can-display-banner.js
      import Mixin from '@ember/mixin';
       export default Mixin.create({
        actions: {
          displayBanner(msg) {
            // ...
          }
        }
      });
      ```
       ```app/routes/welcome.js
      import Route from '@ember/routing/route';
      import CanDisplayBanner from '../mixins/can-display-banner';
       export default Route.extend(CanDisplayBanner, {
        actions: {
          playMusic() {
            // ...
          }
        }
      });
       // `WelcomeRoute`, when active, will be able to respond
      // to both actions, since the actions hash is merged rather
      // then replaced when extending mixins / parent classes.
      this.send('displayBanner');
      this.send('playMusic');
      ```
       Within a Controller, Route or Component's action handler,
      the value of the `this` context is the Controller, Route or
      Component object:
       ```app/routes/song.js
      import Route from '@ember/routing/route';
       export default Route.extend({
        actions: {
          myAction() {
            this.controllerFor("song");
            this.transitionTo("other.route");
            ...
          }
        }
      });
      ```
       It is also possible to call `this._super(...arguments)` from within an
      action handler if it overrides a handler defined on a parent
      class or mixin:
       Take for example the following routes:
       ```app/mixins/debug-route.js
      import Mixin from '@ember/mixin';
       export default Mixin.create({
        actions: {
          debugRouteInformation() {
            console.debug("It's a-me, console.debug!");
          }
        }
      });
      ```
       ```app/routes/annoying-debug.js
      import Route from '@ember/routing/route';
      import DebugRoute from '../mixins/debug-route';
       export default Route.extend(DebugRoute, {
        actions: {
          debugRouteInformation() {
            // also call the debugRouteInformation of mixed in DebugRoute
            this._super(...arguments);
             // show additional annoyance
            window.alert(...);
          }
        }
      });
      ```
       ## Bubbling
       By default, an action will stop bubbling once a handler defined
      on the `actions` hash handles it. To continue bubbling the action,
      you must return `true` from the handler:
       ```app/router.js
      Router.map(function() {
        this.route("album", function() {
          this.route("song");
        });
      });
      ```
       ```app/routes/album.js
      import Route from '@ember/routing/route';
       export default Route.extend({
        actions: {
          startPlaying: function() {
          }
        }
      });
      ```
       ```app/routes/album-song.js
      import Route from '@ember/routing/route';
       export default Route.extend({
        actions: {
          startPlaying() {
            // ...
             if (actionShouldAlsoBeTriggeredOnParentRoute) {
              return true;
            }
          }
        }
      });
      ```
       @property actions
      @type Object
      @default null
      @public
    */

    /**
      Triggers a named action on the `ActionHandler`. Any parameters
      supplied after the `actionName` string will be passed as arguments
      to the action target function.
       If the `ActionHandler` has its `target` property set, actions may
      bubble to the `target`. Bubbling happens when an `actionName` can
      not be found in the `ActionHandler`'s `actions` hash or if the
      action target function returns `true`.
       Example
       ```app/routes/welcome.js
      import Route from '@ember/routing/route';
       export default Route.extend({
        actions: {
          playTheme() {
            this.send('playMusic', 'theme.mp3');
          },
          playMusic(track) {
            // ...
          }
        }
      });
      ```
       @method send
      @param {String} actionName The action to trigger
      @param {*} context a context to send with the action
      @public
    */
    send: function (actionName) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      true && !(!this.isDestroying && !this.isDestroyed) && (0, _debug.assert)('Attempted to call .send() with the action \'' + actionName + '\' on the destroyed object \'' + this + '\'.', !this.isDestroying && !this.isDestroyed);

      if (this.actions && this.actions[actionName]) {
        var shouldBubble = this.actions[actionName].apply(this, args) === true;
        if (!shouldBubble) {
          return;
        }
      }

      var target = (0, _metal.get)(this, 'target');
      if (target) {
        true && !(typeof target.send === 'function') && (0, _debug.assert)('The `target` for ' + this + ' (' + target + ') does not have a `send` method', typeof target.send === 'function');

        target.send.apply(target, arguments);
      }
    }
  });

  exports.default = ActionHandler;
});
enifed('@ember/-internals/runtime/lib/mixins/array', ['exports', '@ember/deprecated-features', '@ember/-internals/metal', '@ember/-internals/utils', '@ember/debug', '@ember/-internals/runtime/lib/mixins/enumerable', '@ember/-internals/runtime/lib/compare', '@ember/-internals/environment', '@ember/-internals/runtime/lib/mixins/observable', '@ember/-internals/runtime/lib/copy', '@ember/-internals/runtime/lib/mixins/mutable_enumerable', '@ember/-internals/runtime/lib/type-of'], function (exports, _deprecatedFeatures, _metal, _utils, _debug, _enumerable, _compare, _environment, _observable, _copy, _mutable_enumerable, _typeOf) {
  'use strict';

  exports.MutableArray = exports.NativeArray = exports.A = undefined;
  exports.isEmberArray = isEmberArray;
  exports.uniqBy = uniqBy;
  exports.removeAt = removeAt;
  exports.isArray = isArray;
  var _Mixin$create, _NativeArray;

  /**
  @module @ember/array
  */


  var EMPTY_ARRAY = Object.freeze([]);
  var EMBER_ARRAY = (0, _utils.symbol)('EMBER_ARRAY');

  function isEmberArray(obj) {
    return obj && obj[EMBER_ARRAY];
  }

  var identityFunction = function (item) {
    return item;
  };

  function uniqBy(array) {
    var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : identityFunction;

    true && !isArray(array) && (0, _debug.assert)('first argument passed to `uniqBy` should be array', isArray(array));

    var ret = A();
    var seen = new Set();
    var getter = typeof key === 'function' ? key : function (item) {
      return (0, _metal.get)(item, key);
    };

    array.forEach(function (item) {
      var val = getter(item);
      if (!seen.has(val)) {
        seen.add(val);
        ret.push(item);
      }
    });

    return ret;
  }

  function iter(key, value) {
    var valueProvided = arguments.length === 2;
    return valueProvided ? function (item) {
      return value === (0, _metal.get)(item, key);
    } : function (item) {
      return !!(0, _metal.get)(item, key);
    };
  }

  function findIndex(array, predicate, startAt) {
    var len = array.length;
    for (var index = startAt; index < len; index++) {
      var item = (0, _metal.objectAt)(array, index);
      if (predicate(item, index, array)) {
        return index;
      }
    }
    return -1;
  }

  function find(array, callback, target) {
    var predicate = callback.bind(target);
    var index = findIndex(array, predicate, 0);
    return index === -1 ? undefined : (0, _metal.objectAt)(array, index);
  }

  function any(array, callback, target) {
    var predicate = callback.bind(target);
    return findIndex(array, predicate, 0) !== -1;
  }

  function every(array, callback, target) {
    var cb = callback.bind(target);
    var predicate = function (item, index, array) {
      return !cb(item, index, array);
    };
    return findIndex(array, predicate, 0) === -1;
  }

  function indexOf(array, val) {
    var startAt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    var withNaNCheck = arguments[3];

    var len = array.length;

    if (startAt < 0) {
      startAt += len;
    }

    // SameValueZero comparison (NaN !== NaN)
    var predicate = withNaNCheck && val !== val ? function (item) {
      return item !== item;
    } : function (item) {
      return item === val;
    };
    return findIndex(array, predicate, startAt);
  }

  function removeAt(array, index) {
    var len = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;

    true && !(index > -1 && index < array.length) && (0, _debug.assert)('`removeAt` index provided is out of range', index > -1 && index < array.length);

    (0, _metal.replace)(array, index, len, EMPTY_ARRAY);
    return array;
  }

  function insertAt(array, index, item) {
    true && !(index > -1 && index <= array.length) && (0, _debug.assert)('`insertAt` index provided is out of range', index > -1 && index <= array.length);

    (0, _metal.replace)(array, index, 0, [item]);
    return item;
  }

  /**
    Returns true if the passed object is an array or Array-like.
  
    Objects are considered Array-like if any of the following are true:
  
      - the object is a native Array
      - the object has an objectAt property
      - the object is an Object, and has a length property
  
    Unlike `typeOf` this method returns true even if the passed object is
    not formally an array but appears to be array-like (i.e. implements `Array`)
  
    ```javascript
    import { isArray } from '@ember/array';
    import ArrayProxy from '@ember/array/proxy';
  
    isArray();                                      // false
    isArray([]);                                    // true
    isArray(ArrayProxy.create({ content: [] }));    // true
    ```
  
    @method isArray
    @static
    @for @ember/array
    @param {Object} obj The object to test
    @return {Boolean} true if the passed object is an array or Array-like
    @public
  */
  function isArray(_obj) {
    var obj = _obj;
    if (true /* DEBUG */ && _utils.HAS_NATIVE_PROXY && typeof _obj === 'object' && _obj !== null) {
      var possibleProxyContent = _obj[_metal.PROXY_CONTENT];
      if (possibleProxyContent !== undefined) {
        obj = possibleProxyContent;
      }
    }

    if (!obj || obj.setInterval) {
      return false;
    }
    if (Array.isArray(obj) || ArrayMixin.detect(obj)) {
      return true;
    }

    var type = (0, _typeOf.typeOf)(obj);
    if ('array' === type) {
      return true;
    }
    var length = obj.length;
    if (typeof length === 'number' && length === length && 'object' === type) {
      return true;
    }
    return false;
  }

  /*
    This allows us to define computed properties that are not enumerable.
    The primary reason this is important is that when `NativeArray` is
    applied to `Array.prototype` we need to ensure that we do not add _any_
    new enumerable properties.
  */
  function nonEnumerableComputed() {
    var property = _metal.computed.apply(undefined, arguments);
    property.enumerable = false;
    return property;
  }

  // ..........................................................
  // ARRAY
  //
  /**
    This mixin implements Observer-friendly Array-like behavior. It is not a
    concrete implementation, but it can be used up by other classes that want
    to appear like arrays.
  
    For example, ArrayProxy is a concrete classes that can
    be instantiated to implement array-like behavior. Both of these classes use
    the Array Mixin by way of the MutableArray mixin, which allows observable
    changes to be made to the underlying array.
  
    This mixin defines methods specifically for collections that provide
    index-ordered access to their contents. When you are designing code that
    needs to accept any kind of Array-like object, you should use these methods
    instead of Array primitives because these will properly notify observers of
    changes to the array.
  
    Although these methods are efficient, they do add a layer of indirection to
    your application so it is a good idea to use them only when you need the
    flexibility of using both true JavaScript arrays and "virtual" arrays such
    as controllers and collections.
  
    You can use the methods defined in this module to access and modify array
    contents in a KVO-friendly way. You can also be notified whenever the
    membership of an array changes by using `.observes('myArray.[]')`.
  
    To support `EmberArray` in your own class, you must override two
    primitives to use it: `length()` and `objectAt()`.
  
    @class EmberArray
    @uses Enumerable
    @since Ember 0.9.0
    @public
  */
  var ArrayMixin = _metal.Mixin.create(_enumerable.default, (_Mixin$create = {}, _Mixin$create[EMBER_ARRAY] = true, _Mixin$create.objectsAt = function (indexes) {
    var _this = this;

    return indexes.map(function (idx) {
      return (0, _metal.objectAt)(_this, idx);
    });
  }, _Mixin$create['[]'] = nonEnumerableComputed({
    get: function () {
      return this;
    },
    set: function (key, value) {
      this.replace(0, this.length, value);
      return this;
    }
  }), _Mixin$create.firstObject = nonEnumerableComputed(function () {
    return (0, _metal.objectAt)(this, 0);
  }).readOnly(), _Mixin$create.lastObject = nonEnumerableComputed(function () {
    return (0, _metal.objectAt)(this, this.length - 1);
  }).readOnly(), _Mixin$create.slice = function () {
    var beginIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var endIndex = arguments[1];

    var ret = A();
    var length = this.length;

    if (beginIndex < 0) {
      beginIndex = length + beginIndex;
    }

    if (endIndex === undefined || endIndex > length) {
      endIndex = length;
    } else if (endIndex < 0) {
      endIndex = length + endIndex;
    }

    while (beginIndex < endIndex) {
      ret[ret.length] = (0, _metal.objectAt)(this, beginIndex++);
    }

    return ret;
  }, _Mixin$create.indexOf = function (object, startAt) {
    return indexOf(this, object, startAt, false);
  }, _Mixin$create.lastIndexOf = function (object, startAt) {
    var len = this.length;

    if (startAt === undefined || startAt >= len) {
      startAt = len - 1;
    }

    if (startAt < 0) {
      startAt += len;
    }

    for (var idx = startAt; idx >= 0; idx--) {
      if ((0, _metal.objectAt)(this, idx) === object) {
        return idx;
      }
    }

    return -1;
  }, _Mixin$create.addArrayObserver = function (target, opts) {
    return (0, _metal.addArrayObserver)(this, target, opts);
  }, _Mixin$create.removeArrayObserver = function (target, opts) {
    return (0, _metal.removeArrayObserver)(this, target, opts);
  }, _Mixin$create.hasArrayObservers = nonEnumerableComputed(function () {
    return (0, _metal.hasListeners)(this, '@array:change') || (0, _metal.hasListeners)(this, '@array:before');
  }), _Mixin$create.arrayContentWillChange = function (startIdx, removeAmt, addAmt) {
    return (0, _metal.arrayContentWillChange)(this, startIdx, removeAmt, addAmt);
  }, _Mixin$create.arrayContentDidChange = function (startIdx, removeAmt, addAmt) {
    return (0, _metal.arrayContentDidChange)(this, startIdx, removeAmt, addAmt);
  }, _Mixin$create.forEach = function (callback) {
    var target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    true && !(typeof callback === 'function') && (0, _debug.assert)('`forEach` expects a function as first argument.', typeof callback === 'function');

    var length = this.length;

    for (var index = 0; index < length; index++) {
      var item = this.objectAt(index);
      callback.call(target, item, index, this);
    }

    return this;
  }, _Mixin$create.getEach = (0, _metal.aliasMethod)('mapBy'), _Mixin$create.setEach = function (key, value) {
    return this.forEach(function (item) {
      return (0, _metal.set)(item, key, value);
    });
  }, _Mixin$create.map = function (callback) {
    var target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    true && !(typeof callback === 'function') && (0, _debug.assert)('`map` expects a function as first argument.', typeof callback === 'function');

    var ret = A();

    this.forEach(function (x, idx, i) {
      return ret[idx] = callback.call(target, x, idx, i);
    });

    return ret;
  }, _Mixin$create.mapBy = function (key) {
    return this.map(function (next) {
      return (0, _metal.get)(next, key);
    });
  }, _Mixin$create.filter = function (callback) {
    var target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    true && !(typeof callback === 'function') && (0, _debug.assert)('`filter` expects a function as first argument.', typeof callback === 'function');

    var ret = A();

    this.forEach(function (x, idx, i) {
      if (callback.call(target, x, idx, i)) {
        ret.push(x);
      }
    });

    return ret;
  }, _Mixin$create.reject = function (callback) {
    var target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    true && !(typeof callback === 'function') && (0, _debug.assert)('`reject` expects a function as first argument.', typeof callback === 'function');

    return this.filter(function () {
      return !callback.apply(target, arguments);
    });
  }, _Mixin$create.filterBy = function () {
    return this.filter(iter.apply(undefined, arguments));
  }, _Mixin$create.rejectBy = function () {
    return this.reject(iter.apply(undefined, arguments));
  }, _Mixin$create.find = function (callback) {
    var target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    true && !(typeof callback === 'function') && (0, _debug.assert)('`find` expects a function as first argument.', typeof callback === 'function');

    return find(this, callback, target);
  }, _Mixin$create.findBy = function () {
    return find(this, iter.apply(undefined, arguments));
  }, _Mixin$create.every = function (callback) {
    var target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    true && !(typeof callback === 'function') && (0, _debug.assert)('`every` expects a function as first argument.', typeof callback === 'function');

    return every(this, callback, target);
  }, _Mixin$create.isEvery = function () {
    return every(this, iter.apply(undefined, arguments));
  }, _Mixin$create.any = function (callback) {
    var target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    true && !(typeof callback === 'function') && (0, _debug.assert)('`any` expects a function as first argument.', typeof callback === 'function');

    return any(this, callback, target);
  }, _Mixin$create.isAny = function () {
    return any(this, iter.apply(undefined, arguments));
  }, _Mixin$create.reduce = function (callback, initialValue) {
    true && !(typeof callback === 'function') && (0, _debug.assert)('`reduce` expects a function as first argument.', typeof callback === 'function');

    var ret = initialValue;

    this.forEach(function (item, i) {
      ret = callback(ret, item, i, this);
    }, this);

    return ret;
  }, _Mixin$create.invoke = function (methodName) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var ret = A();

    this.forEach(function (item) {
      return ret.push((0, _utils.tryInvoke)(item, methodName, args));
    });

    return ret;
  }, _Mixin$create.toArray = function () {
    return this.map(function (item) {
      return item;
    });
  }, _Mixin$create.compact = function () {
    return this.filter(function (value) {
      return value != null;
    });
  }, _Mixin$create.includes = function (object, startAt) {
    return indexOf(this, object, startAt, true) !== -1;
  }, _Mixin$create.sortBy = function () {
    var sortKeys = arguments;

    return this.toArray().sort(function (a, b) {
      for (var i = 0; i < sortKeys.length; i++) {
        var key = sortKeys[i];
        var propA = (0, _metal.get)(a, key);
        var propB = (0, _metal.get)(b, key);
        // return 1 or -1 else continue to the next sortKey
        var compareValue = (0, _compare.default)(propA, propB);

        if (compareValue) {
          return compareValue;
        }
      }
      return 0;
    });
  }, _Mixin$create.uniq = function () {
    return uniqBy(this);
  }, _Mixin$create.uniqBy = function (key) {
    return uniqBy(this, key);
  }, _Mixin$create.without = function (value) {
    if (!this.includes(value)) {
      return this; // nothing to do
    }

    // SameValueZero comparison (NaN !== NaN)
    var predicate = value === value ? function (item) {
      return item !== value;
    } : function (item) {
      return item === item;
    };
    return this.filter(predicate);
  }, _Mixin$create['@each'] = _deprecatedFeatures.ARRAY_AT_EACH ? nonEnumerableComputed(function () {
    true && !false && (0, _debug.deprecate)('Getting the \'@each\' property on object ' + (0, _utils.toString)(this) + ' is deprecated', false, {
      id: 'ember-metal.getting-each',
      until: '3.5.0',
      url: 'https://emberjs.com/deprecations/v3.x#toc_getting-the-each-property'
    });

    return (0, _metal.eachProxyFor)(this);
  }).readOnly() : undefined, _Mixin$create));

  /**
    This mixin defines the API for modifying array-like objects. These methods
    can be applied only to a collection that keeps its items in an ordered set.
    It builds upon the Array mixin and adds methods to modify the array.
    One concrete implementations of this class include ArrayProxy.
  
    It is important to use the methods in this class to modify arrays so that
    changes are observable. This allows the binding system in Ember to function
    correctly.
  
  
    Note that an Array can change even if it does not implement this mixin.
    For example, one might implement a SparseArray that cannot be directly
    modified, but if its underlying enumerable changes, it will change also.
  
    @class MutableArray
    @uses EmberArray
    @uses MutableEnumerable
    @public
  */

  var MutableArray = _metal.Mixin.create(ArrayMixin, _mutable_enumerable.default, {
    /**
      __Required.__ You must implement this method to apply this mixin.
       This is one of the primitives you must implement to support `Array`.
      You should replace amt objects started at idx with the objects in the
      passed array. You should also call `this.arrayContentDidChange()`
       Note that this method is expected to validate the type(s) of objects that it expects.
       @method replace
      @param {Number} idx Starting index in the array to replace. If
        idx >= length, then append to the end of the array.
      @param {Number} amt Number of elements that should be removed from
        the array, starting at *idx*.
      @param {EmberArray} objects An array of zero or more objects that should be
        inserted into the array at *idx*
      @public
    */

    /**
      Remove all elements from the array. This is useful if you
      want to reuse an existing array without having to recreate it.
       ```javascript
      let colors = ['red', 'green', 'blue'];
       colors.length;  // 3
      colors.clear(); // []
      colors.length;  // 0
      ```
       @method clear
      @return {Array} An empty Array.
      @public
    */
    clear: function () {
      var len = this.length;
      if (len === 0) {
        return this;
      }

      this.replace(0, len, EMPTY_ARRAY);
      return this;
    },

    /**
      This will use the primitive `replace()` method to insert an object at the
      specified index.
       ```javascript
      let colors = ['red', 'green', 'blue'];
       colors.insertAt(2, 'yellow');  // ['red', 'green', 'yellow', 'blue']
      colors.insertAt(5, 'orange');  // Error: Index out of range
      ```
       @method insertAt
      @param {Number} idx index of insert the object at.
      @param {Object} object object to insert
      @return {EmberArray} receiver
      @public
    */
    insertAt: function (idx, object) {
      insertAt(this, idx, object);
      return this;
    },

    /**
      Remove an object at the specified index using the `replace()` primitive
      method. You can pass either a single index, or a start and a length.
       If you pass a start and length that is beyond the
      length this method will throw an assertion.
       ```javascript
      let colors = ['red', 'green', 'blue', 'yellow', 'orange'];
       colors.removeAt(0);     // ['green', 'blue', 'yellow', 'orange']
      colors.removeAt(2, 2);  // ['green', 'blue']
      colors.removeAt(4, 2);  // Error: Index out of range
      ```
       @method removeAt
      @param {Number} start index, start of range
      @param {Number} len length of passing range
      @return {EmberArray} receiver
      @public
    */
    removeAt: function (start, len) {
      return removeAt(this, start, len);
    },

    /**
      Push the object onto the end of the array. Works just like `push()` but it
      is KVO-compliant.
       ```javascript
      let colors = ['red', 'green'];
       colors.pushObject('black');     // ['red', 'green', 'black']
      colors.pushObject(['yellow']);  // ['red', 'green', ['yellow']]
      ```
       @method pushObject
      @param {*} obj object to push
      @return object same object passed as a param
      @public
    */
    pushObject: function (obj) {
      return insertAt(this, this.length, obj);
    },

    /**
      Add the objects in the passed array to the end of the array. Defers
      notifying observers of the change until all objects are added.
       ```javascript
      let colors = ['red'];
       colors.pushObjects(['yellow', 'orange']);  // ['red', 'yellow', 'orange']
      ```
       @method pushObjects
      @param {EmberArray} objects the objects to add
      @return {EmberArray} receiver
      @public
    */
    pushObjects: function (objects) {
      this.replace(this.length, 0, objects);
      return this;
    },

    /**
      Pop object from array or nil if none are left. Works just like `pop()` but
      it is KVO-compliant.
       ```javascript
      let colors = ['red', 'green', 'blue'];
       colors.popObject();   // 'blue'
      console.log(colors);  // ['red', 'green']
      ```
       @method popObject
      @return object
      @public
    */
    popObject: function () {
      var len = this.length;
      if (len === 0) {
        return null;
      }

      var ret = (0, _metal.objectAt)(this, len - 1);
      this.removeAt(len - 1, 1);
      return ret;
    },

    /**
      Shift an object from start of array or nil if none are left. Works just
      like `shift()` but it is KVO-compliant.
       ```javascript
      let colors = ['red', 'green', 'blue'];
       colors.shiftObject();  // 'red'
      console.log(colors);   // ['green', 'blue']
      ```
       @method shiftObject
      @return object
      @public
    */
    shiftObject: function () {
      if (this.length === 0) {
        return null;
      }

      var ret = (0, _metal.objectAt)(this, 0);
      this.removeAt(0);
      return ret;
    },

    /**
      Unshift an object to start of array. Works just like `unshift()` but it is
      KVO-compliant.
       ```javascript
      let colors = ['red'];
       colors.unshiftObject('yellow');    // ['yellow', 'red']
      colors.unshiftObject(['black']);   // [['black'], 'yellow', 'red']
      ```
       @method unshiftObject
      @param {*} obj object to unshift
      @return object same object passed as a param
      @public
    */
    unshiftObject: function (obj) {
      return insertAt(this, 0, obj);
    },

    /**
      Adds the named objects to the beginning of the array. Defers notifying
      observers until all objects have been added.
       ```javascript
      let colors = ['red'];
       colors.unshiftObjects(['black', 'white']);   // ['black', 'white', 'red']
      colors.unshiftObjects('yellow'); // Type Error: 'undefined' is not a function
      ```
       @method unshiftObjects
      @param {Enumberable} objects the objects to add
      @return {EmberArray} receiver
      @public
    */
    unshiftObjects: function (objects) {
      this.replace(0, 0, objects);
      return this;
    },

    /**
      Reverse objects in the array. Works just like `reverse()` but it is
      KVO-compliant.
       @method reverseObjects
      @return {EmberArray} receiver
       @public
    */
    reverseObjects: function () {
      var len = this.length;
      if (len === 0) {
        return this;
      }

      var objects = this.toArray().reverse();
      this.replace(0, len, objects);
      return this;
    },

    /**
      Replace all the receiver's content with content of the argument.
      If argument is an empty array receiver will be cleared.
       ```javascript
      let colors = ['red', 'green', 'blue'];
       colors.setObjects(['black', 'white']);  // ['black', 'white']
      colors.setObjects([]);                  // []
      ```
       @method setObjects
      @param {EmberArray} objects array whose content will be used for replacing
          the content of the receiver
      @return {EmberArray} receiver with the new content
      @public
    */
    setObjects: function (objects) {
      if (objects.length === 0) {
        return this.clear();
      }

      var len = this.length;
      this.replace(0, len, objects);
      return this;
    },

    /**
      Remove all occurrences of an object in the array.
       ```javascript
      let cities = ['Chicago', 'Berlin', 'Lima', 'Chicago'];
       cities.removeObject('Chicago');  // ['Berlin', 'Lima']
      cities.removeObject('Lima');     // ['Berlin']
      cities.removeObject('Tokyo')     // ['Berlin']
      ```
       @method removeObject
      @param {*} obj object to remove
      @return {EmberArray} receiver
      @public
    */
    removeObject: function (obj) {
      var loc = this.length || 0;
      while (--loc >= 0) {
        var curObject = (0, _metal.objectAt)(this, loc);

        if (curObject === obj) {
          this.removeAt(loc);
        }
      }
      return this;
    },

    /**
      Removes each object in the passed array from the receiver.
       @method removeObjects
      @param {EmberArray} objects the objects to remove
      @return {EmberArray} receiver
      @public
    */
    removeObjects: function (objects) {
      (0, _metal.beginPropertyChanges)();
      for (var i = objects.length - 1; i >= 0; i--) {
        this.removeObject(objects[i]);
      }
      (0, _metal.endPropertyChanges)();
      return this;
    },

    /**
      Push the object onto the end of the array if it is not already
      present in the array.
       ```javascript
      let cities = ['Chicago', 'Berlin'];
       cities.addObject('Lima');    // ['Chicago', 'Berlin', 'Lima']
      cities.addObject('Berlin');  // ['Chicago', 'Berlin', 'Lima']
      ```
       @method addObject
      @param {*} obj object to add, if not already present
      @return {EmberArray} receiver
      @public
    */
    addObject: function (obj) {
      var included = this.includes(obj);

      if (!included) {
        this.pushObject(obj);
      }

      return this;
    },

    /**
      Adds each object in the passed array to the receiver.
       @method addObjects
      @param {EmberArray} objects the objects to add.
      @return {EmberArray} receiver
      @public
    */
    addObjects: function (objects) {
      var _this2 = this;

      (0, _metal.beginPropertyChanges)();
      objects.forEach(function (obj) {
        return _this2.addObject(obj);
      });
      (0, _metal.endPropertyChanges)();
      return this;
    }
  });

  /**
    Creates an `Ember.NativeArray` from an Array-like object.
    Does not modify the original object's contents. `A()` is not needed if
    `EmberENV.EXTEND_PROTOTYPES` is `true` (the default value). However,
    it is recommended that you use `A()` when creating addons for
    ember or when you can not guarantee that `EmberENV.EXTEND_PROTOTYPES`
    will be `true`.
  
    Example
  
    ```app/components/my-component.js
    import Component from '@ember/component';
    import { A } from '@ember/array';
  
    export default Component.extend({
      tagName: 'ul',
      classNames: ['pagination'],
  
      init() {
        this._super(...arguments);
  
        if (!this.get('content')) {
          this.set('content', A());
          this.set('otherContent', A([1,2,3]));
        }
      }
    });
    ```
  
    @method A
    @static
    @for @ember/array
    @return {Ember.NativeArray}
    @public
  */

  // Add Ember.Array to Array.prototype. Remove methods with native
  // implementations and supply some more optimized versions of generic methods
  // because they are so common.
  /**
  @module ember
  */
  /**
    The NativeArray mixin contains the properties needed to make the native
    Array support MutableArray and all of its dependent APIs. Unless you
    have `EmberENV.EXTEND_PROTOTYPES` or `EmberENV.EXTEND_PROTOTYPES.Array` set to
    false, this will be applied automatically. Otherwise you can apply the mixin
    at anytime by calling `Ember.NativeArray.apply(Array.prototype)`.
  
    @class Ember.NativeArray
    @uses MutableArray
    @uses Observable
    @public
  */
  var NativeArray = _metal.Mixin.create(MutableArray, _observable.default, {
    objectAt: function (idx) {
      return this[idx];
    },

    // primitive for array support.
    replace: function (start, deleteCount) {
      var items = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : EMPTY_ARRAY;

      true && !Array.isArray(items) && (0, _debug.assert)('The third argument to replace needs to be an array.', Array.isArray(items));

      (0, _metal.replaceInNativeArray)(this, start, deleteCount, items);

      return this;
    },
    copy: function (deep) {
      true && !false && (0, _debug.deprecate)('Using `NativeArray#copy` is deprecated', false, {
        id: 'ember-runtime.using-array-copy',
        until: '3.5.0'
      });

      if (deep) {
        return this.map(function (item) {
          return (0, _copy.default)(item, true);
        });
      }

      return this.slice();
    }
  });

  // Remove any methods implemented natively so we don't override them
  var ignore = ['length'];
  NativeArray.keys().forEach(function (methodName) {
    if (Array.prototype[methodName]) {
      ignore.push(methodName);
    }
  });

  exports.NativeArray = NativeArray = (_NativeArray = NativeArray).without.apply(_NativeArray, ignore);

  var A = void 0;

  if (_environment.ENV.EXTEND_PROTOTYPES.Array) {
    NativeArray.apply(Array.prototype);

    exports.A = A = function (arr) {
      true && !!(this instanceof A) && (0, _debug.deprecate)('`new A()` has been deprecated, please update to calling A as a function: `A()`', !(this instanceof A), {
        id: 'array.new-array-wrapper',
        until: '3.9.0',
        url: 'https://emberjs.com/deprecations/v3.x#toc_array-new-array-wrapper'
      });

      return arr || [];
    };
  } else {
    exports.A = A = function (arr) {
      true && !!(this instanceof A) && (0, _debug.deprecate)('`new A()` has been deprecated, please update to calling A as a function: `A()`', !(this instanceof A), {
        id: 'array.new-array-wrapper',
        until: '3.9.0',
        url: 'https://emberjs.com/deprecations/v3.x#toc_array-new-array-wrapper'
      });

      if (!arr) {
        arr = [];
      }

      return ArrayMixin.detect(arr) ? arr : NativeArray.apply(arr);
    };
  }

  exports.A = A;
  exports.NativeArray = NativeArray;
  exports.MutableArray = MutableArray;
  exports.default = ArrayMixin;
});
enifed('@ember/-internals/runtime/lib/mixins/comparable', ['exports', '@ember/-internals/metal'], function (exports, _metal) {
  'use strict';

  exports.default = _metal.Mixin.create({
    /**
      __Required.__ You must implement this method to apply this mixin.
       Override to return the result of the comparison of the two parameters. The
      compare method should return:
       - `-1` if `a < b`
      - `0` if `a == b`
      - `1` if `a > b`
       Default implementation raises an exception.
       @method compare
      @param a {Object} the first object to compare
      @param b {Object} the second object to compare
      @return {Number} the result of the comparison
      @private
    */
    compare: null
  });
});
enifed('@ember/-internals/runtime/lib/mixins/container_proxy', ['exports', '@ember/runloop', '@ember/-internals/metal'], function (exports, _runloop, _metal) {
  'use strict';

  /**
    ContainerProxyMixin is used to provide public access to specific
    container functionality.
  
    @class ContainerProxyMixin
    @private
  */
  var containerProxyMixin = {
    /**
     The container stores state.
      @private
     @property {Ember.Container} __container__
     */
    __container__: null,

    /**
     Returns an object that can be used to provide an owner to a
     manually created instance.
      Example:
      ```
     import { getOwner } from '@ember/application';
      let owner = getOwner(this);
      User.create(
       owner.ownerInjection(),
       { username: 'rwjblue' }
     )
     ```
      @public
     @method ownerInjection
     @since 2.3.0
     @return {Object}
    */
    ownerInjection: function () {
      return this.__container__.ownerInjection();
    },

    /**
     Given a fullName return a corresponding instance.
      The default behavior is for lookup to return a singleton instance.
     The singleton is scoped to the container, allowing multiple containers
     to all have their own locally scoped singletons.
      ```javascript
     let registry = new Registry();
     let container = registry.container();
      registry.register('api:twitter', Twitter);
      let twitter = container.lookup('api:twitter');
      twitter instanceof Twitter; // => true
      // by default the container will return singletons
     let twitter2 = container.lookup('api:twitter');
     twitter2 instanceof Twitter; // => true
      twitter === twitter2; //=> true
     ```
      If singletons are not wanted an optional flag can be provided at lookup.
      ```javascript
     let registry = new Registry();
     let container = registry.container();
      registry.register('api:twitter', Twitter);
      let twitter = container.lookup('api:twitter', { singleton: false });
     let twitter2 = container.lookup('api:twitter', { singleton: false });
      twitter === twitter2; //=> false
     ```
      @public
     @method lookup
     @param {String} fullName
     @param {Object} options
     @return {any}
     */
    lookup: function (fullName, options) {
      return this.__container__.lookup(fullName, options);
    },
    destroy: function () {
      var container = this.__container__;

      if (container) {
        (0, _runloop.join)(function () {
          container.destroy();
          (0, _runloop.schedule)('destroy', container, 'finalizeDestroy');
        });
      }

      this._super();
    },

    /**
    Given a fullName return a factory manager.
     This method returns a manager which can be used for introspection of the
    factory's class or for the creation of factory instances with initial
    properties. The manager is an object with the following properties:
     * `class` - The registered or resolved class.
    * `create` - A function that will create an instance of the class with
      any dependencies injected.
     For example:
     ```javascript
    import { getOwner } from '@ember/application';
     let owner = getOwner(otherInstance);
    // the owner is commonly the `applicationInstance`, and can be accessed via
    // an instance initializer.
     let factory = owner.factoryFor('service:bespoke');
     factory.class;
    // The registered or resolved class. For example when used with an Ember-CLI
    // app, this would be the default export from `app/services/bespoke.js`.
     let instance = factory.create({
      someProperty: 'an initial property value'
    });
    // Create an instance with any injections and the passed options as
    // initial properties.
    ```
     @public
    @method factoryFor
    @param {String} fullName
    @param {Object} options
    @return {FactoryManager}
    */
    factoryFor: function (fullName) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      return this.__container__.factoryFor(fullName, options);
    }
  };
  /**
  @module ember
  */
  exports.default = _metal.Mixin.create(containerProxyMixin);
});
enifed('@ember/-internals/runtime/lib/mixins/copyable', ['exports', '@ember/-internals/metal'], function (exports, _metal) {
  'use strict';

  exports.default = _metal.Mixin.create({
    /**
      __Required.__ You must implement this method to apply this mixin.
       Override to return a copy of the receiver. Default implementation raises
      an exception.
       @method copy
      @param {Boolean} deep if `true`, a deep copy of the object should be made
      @return {Object} copy of receiver
      @private
    */
    copy: null
  });
});
enifed('@ember/-internals/runtime/lib/mixins/enumerable', ['exports', '@ember/-internals/metal'], function (exports, _metal) {
  'use strict';

  exports.default = _metal.Mixin.create();
});
enifed('@ember/-internals/runtime/lib/mixins/evented', ['exports', '@ember/-internals/metal'], function (exports, _metal) {
  'use strict';

  exports.default = _metal.Mixin.create({
    /**
      Subscribes to a named event with given function.
       ```javascript
      person.on('didLoad', function() {
        // fired once the person has loaded
      });
      ```
       An optional target can be passed in as the 2nd argument that will
      be set as the "this" for the callback. This is a good way to give your
      function access to the object triggering the event. When the target
      parameter is used the callback becomes the third argument.
       @method on
      @param {String} name The name of the event
      @param {Object} [target] The "this" binding for the callback
      @param {Function} method The callback to execute
      @return this
      @public
    */
    on: function (name, target, method) {
      (0, _metal.addListener)(this, name, target, method);
      return this;
    },

    /**
      Subscribes a function to a named event and then cancels the subscription
      after the first time the event is triggered. It is good to use ``one`` when
      you only care about the first time an event has taken place.
       This function takes an optional 2nd argument that will become the "this"
      value for the callback. If this argument is passed then the 3rd argument
      becomes the function.
       @method one
      @param {String} name The name of the event
      @param {Object} [target] The "this" binding for the callback
      @param {Function} method The callback to execute
      @return this
      @public
    */
    one: function (name, target, method) {
      (0, _metal.addListener)(this, name, target, method, true);
      return this;
    },

    /**
      Triggers a named event for the object. Any additional arguments
      will be passed as parameters to the functions that are subscribed to the
      event.
       ```javascript
      person.on('didEat', function(food) {
        console.log('person ate some ' + food);
      });
       person.trigger('didEat', 'broccoli');
       // outputs: person ate some broccoli
      ```
      @method trigger
      @param {String} name The name of the event
      @param {Object...} args Optional arguments to pass on
      @public
    */
    trigger: function (name) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      (0, _metal.sendEvent)(this, name, args);
    },

    /**
      Cancels subscription for given name, target, and method.
       @method off
      @param {String} name The name of the event
      @param {Object} target The target of the subscription
      @param {Function} method The function of the subscription
      @return this
      @public
    */
    off: function (name, target, method) {
      (0, _metal.removeListener)(this, name, target, method);
      return this;
    },

    /**
      Checks to see if object has any subscriptions for named event.
       @method has
      @param {String} name The name of the event
      @return {Boolean} does the object have a subscription for event
      @public
     */
    has: function (name) {
      return (0, _metal.hasListeners)(this, name);
    }
  });
});
enifed('@ember/-internals/runtime/lib/mixins/mutable_enumerable', ['exports', '@ember/-internals/runtime/lib/mixins/enumerable', '@ember/-internals/metal'], function (exports, _enumerable, _metal) {
  'use strict';

  exports.default = _metal.Mixin.create(_enumerable.default);
});
enifed('@ember/-internals/runtime/lib/mixins/observable', ['exports', '@ember/-internals/metal', '@ember/debug'], function (exports, _metal, _debug) {
  'use strict';

  exports.default = _metal.Mixin.create({
    /**
      Retrieves the value of a property from the object.
       This method is usually similar to using `object[keyName]` or `object.keyName`,
      however it supports both computed properties and the unknownProperty
      handler.
       Because `get` unifies the syntax for accessing all these kinds
      of properties, it can make many refactorings easier, such as replacing a
      simple property with a computed property, or vice versa.
       ### Computed Properties
       Computed properties are methods defined with the `property` modifier
      declared at the end, such as:
       ```javascript
      import { computed } from '@ember/object';
       fullName: computed('firstName', 'lastName', function() {
        return this.get('firstName') + ' ' + this.get('lastName');
      })
      ```
       When you call `get` on a computed property, the function will be
      called and the return value will be returned instead of the function
      itself.
       ### Unknown Properties
       Likewise, if you try to call `get` on a property whose value is
      `undefined`, the `unknownProperty()` method will be called on the object.
      If this method returns any value other than `undefined`, it will be returned
      instead. This allows you to implement "virtual" properties that are
      not defined upfront.
       @method get
      @param {String} keyName The property to retrieve
      @return {Object} The property value or undefined.
      @public
    */
    get: function (keyName) {
      return (0, _metal.get)(this, keyName);
    },

    /**
      To get the values of multiple properties at once, call `getProperties`
      with a list of strings or an array:
       ```javascript
      record.getProperties('firstName', 'lastName', 'zipCode');
      // { firstName: 'John', lastName: 'Doe', zipCode: '10011' }
      ```
       is equivalent to:
       ```javascript
      record.getProperties(['firstName', 'lastName', 'zipCode']);
      // { firstName: 'John', lastName: 'Doe', zipCode: '10011' }
      ```
       @method getProperties
      @param {String...|Array} list of keys to get
      @return {Object}
      @public
    */
    getProperties: function () {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _metal.getProperties.apply(undefined, [this].concat(args));
    },

    /**
      Sets the provided key or path to the value.
       ```javascript
      record.set("key", value);
      ```
       This method is generally very similar to calling `object["key"] = value` or
      `object.key = value`, except that it provides support for computed
      properties, the `setUnknownProperty()` method and property observers.
       ### Computed Properties
       If you try to set a value on a key that has a computed property handler
      defined (see the `get()` method for an example), then `set()` will call
      that method, passing both the value and key instead of simply changing
      the value itself. This is useful for those times when you need to
      implement a property that is composed of one or more member
      properties.
       ### Unknown Properties
       If you try to set a value on a key that is undefined in the target
      object, then the `setUnknownProperty()` handler will be called instead. This
      gives you an opportunity to implement complex "virtual" properties that
      are not predefined on the object. If `setUnknownProperty()` returns
      undefined, then `set()` will simply set the value on the object.
       ### Property Observers
       In addition to changing the property, `set()` will also register a property
      change with the object. Unless you have placed this call inside of a
      `beginPropertyChanges()` and `endPropertyChanges(),` any "local" observers
      (i.e. observer methods declared on the same object), will be called
      immediately. Any "remote" observers (i.e. observer methods declared on
      another object) will be placed in a queue and called at a later time in a
      coalesced manner.
       @method set
      @param {String} keyName The property to set
      @param {Object} value The value to set or `null`.
      @return {Object} The passed value
      @public
    */
    set: function (keyName, value) {
      return (0, _metal.set)(this, keyName, value);
    },

    /**
      Sets a list of properties at once. These properties are set inside
      a single `beginPropertyChanges` and `endPropertyChanges` batch, so
      observers will be buffered.
       ```javascript
      record.setProperties({ firstName: 'Charles', lastName: 'Jolley' });
      ```
       @method setProperties
      @param {Object} hash the hash of keys and values to set
      @return {Object} The passed in hash
      @public
    */
    setProperties: function (hash) {
      return (0, _metal.setProperties)(this, hash);
    },

    /**
      Begins a grouping of property changes.
       You can use this method to group property changes so that notifications
      will not be sent until the changes are finished. If you plan to make a
      large number of changes to an object at one time, you should call this
      method at the beginning of the changes to begin deferring change
      notifications. When you are done making changes, call
      `endPropertyChanges()` to deliver the deferred change notifications and end
      deferring.
       @method beginPropertyChanges
      @return {Observable}
      @private
    */
    beginPropertyChanges: function () {
      (0, _metal.beginPropertyChanges)();
      return this;
    },

    /**
      Ends a grouping of property changes.
       You can use this method to group property changes so that notifications
      will not be sent until the changes are finished. If you plan to make a
      large number of changes to an object at one time, you should call
      `beginPropertyChanges()` at the beginning of the changes to defer change
      notifications. When you are done making changes, call this method to
      deliver the deferred change notifications and end deferring.
       @method endPropertyChanges
      @return {Observable}
      @private
    */
    endPropertyChanges: function () {
      (0, _metal.endPropertyChanges)();
      return this;
    },

    /**
      Notify the observer system that a property has just changed.
       Sometimes you need to change a value directly or indirectly without
      actually calling `get()` or `set()` on it. In this case, you can use this
      method instead. Calling this method will notify all observers that the
      property has potentially changed value.
       @method notifyPropertyChange
      @param {String} keyName The property key to be notified about.
      @return {Observable}
      @public
    */
    notifyPropertyChange: function (keyName) {
      (0, _metal.notifyPropertyChange)(this, keyName);
      return this;
    },

    /**
      Adds an observer on a property.
       This is the core method used to register an observer for a property.
       Once you call this method, any time the key's value is set, your observer
      will be notified. Note that the observers are triggered any time the
      value is set, regardless of whether it has actually changed. Your
      observer should be prepared to handle that.
       ### Observer Methods
       Observer methods have the following signature:
       ```app/components/my-component.js
      import Component from '@ember/component';
       export default Component.extend({
        init() {
          this._super(...arguments);
          this.addObserver('foo', this, 'fooDidChange');
        },
         fooDidChange(sender, key, value, rev) {
          // your code
        }
      });
      ```
       The `sender` is the object that changed. The `key` is the property that
      changes. The `value` property is currently reserved and unused. The `rev`
      is the last property revision of the object when it changed, which you can
      use to detect if the key value has really changed or not.
       Usually you will not need the value or revision parameters at
      the end. In this case, it is common to write observer methods that take
      only a sender and key value as parameters or, if you aren't interested in
      any of these values, to write an observer that has no parameters at all.
       @method addObserver
      @param {String} key The key to observe
      @param {Object} target The target object to invoke
      @param {String|Function} method The method to invoke
      @return {Observable}
      @public
    */
    addObserver: function (key, target, method) {
      (0, _metal.addObserver)(this, key, target, method);
      return this;
    },

    /**
      Remove an observer you have previously registered on this object. Pass
      the same key, target, and method you passed to `addObserver()` and your
      target will no longer receive notifications.
       @method removeObserver
      @param {String} key The key to observe
      @param {Object} target The target object to invoke
      @param {String|Function} method The method to invoke
      @return {Observable}
      @public
    */
    removeObserver: function (key, target, method) {
      (0, _metal.removeObserver)(this, key, target, method);
      return this;
    },

    /**
      Returns `true` if the object currently has observers registered for a
      particular key. You can use this method to potentially defer performing
      an expensive action until someone begins observing a particular property
      on the object.
       @method hasObserverFor
      @param {String} key Key to check
      @return {Boolean}
      @private
    */
    hasObserverFor: function (key) {
      return (0, _metal.hasListeners)(this, key + ':change');
    },

    /**
      Retrieves the value of a property, or a default value in the case that the
      property returns `undefined`.
       ```javascript
      person.getWithDefault('lastName', 'Doe');
      ```
       @method getWithDefault
      @param {String} keyName The name of the property to retrieve
      @param {Object} defaultValue The value to return if the property value is undefined
      @return {Object} The property value or the defaultValue.
      @public
    */
    getWithDefault: function (keyName, defaultValue) {
      return (0, _metal.getWithDefault)(this, keyName, defaultValue);
    },

    /**
      Set the value of a property to the current value plus some amount.
       ```javascript
      person.incrementProperty('age');
      team.incrementProperty('score', 2);
      ```
       @method incrementProperty
      @param {String} keyName The name of the property to increment
      @param {Number} increment The amount to increment by. Defaults to 1
      @return {Number} The new property value
      @public
    */
    incrementProperty: function (keyName) {
      var increment = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

      true && !(!isNaN(parseFloat(increment)) && isFinite(increment)) && (0, _debug.assert)('Must pass a numeric value to incrementProperty', !isNaN(parseFloat(increment)) && isFinite(increment));

      return (0, _metal.set)(this, keyName, (parseFloat((0, _metal.get)(this, keyName)) || 0) + increment);
    },

    /**
      Set the value of a property to the current value minus some amount.
       ```javascript
      player.decrementProperty('lives');
      orc.decrementProperty('health', 5);
      ```
       @method decrementProperty
      @param {String} keyName The name of the property to decrement
      @param {Number} decrement The amount to decrement by. Defaults to 1
      @return {Number} The new property value
      @public
    */
    decrementProperty: function (keyName) {
      var decrement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

      true && !(!isNaN(parseFloat(decrement)) && isFinite(decrement)) && (0, _debug.assert)('Must pass a numeric value to decrementProperty', !isNaN(parseFloat(decrement)) && isFinite(decrement));

      return (0, _metal.set)(this, keyName, ((0, _metal.get)(this, keyName) || 0) - decrement);
    },

    /**
      Set the value of a boolean property to the opposite of its
      current value.
       ```javascript
      starship.toggleProperty('warpDriveEngaged');
      ```
       @method toggleProperty
      @param {String} keyName The name of the property to toggle
      @return {Boolean} The new property value
      @public
    */
    toggleProperty: function (keyName) {
      return (0, _metal.set)(this, keyName, !(0, _metal.get)(this, keyName));
    },

    /**
      Returns the cached value of a computed property, if it exists.
      This allows you to inspect the value of a computed property
      without accidentally invoking it if it is intended to be
      generated lazily.
       @method cacheFor
      @param {String} keyName
      @return {Object} The cached value of the computed property, if any
      @public
    */
    cacheFor: function (keyName) {
      return (0, _metal.getCachedValueFor)(this, keyName);
    }
  });
});
enifed('@ember/-internals/runtime/lib/mixins/promise_proxy', ['exports', '@ember/-internals/metal', '@ember/error'], function (exports, _metal, _error) {
  'use strict';

  /**
    @module @ember/object
  */

  function tap(proxy, promise) {
    (0, _metal.setProperties)(proxy, {
      isFulfilled: false,
      isRejected: false
    });

    return promise.then(function (value) {
      if (!proxy.isDestroyed && !proxy.isDestroying) {
        (0, _metal.setProperties)(proxy, {
          content: value,
          isFulfilled: true
        });
      }
      return value;
    }, function (reason) {
      if (!proxy.isDestroyed && !proxy.isDestroying) {
        (0, _metal.setProperties)(proxy, {
          reason: reason,
          isRejected: true
        });
      }
      throw reason;
    }, 'Ember: PromiseProxy');
  }

  /**
    A low level mixin making ObjectProxy promise-aware.
  
    ```javascript
    import { resolve } from 'rsvp';
    import $ from 'jquery';
    import ObjectProxy from '@ember/object/proxy';
    import PromiseProxyMixin from '@ember/object/promise-proxy-mixin';
  
    let ObjectPromiseProxy = ObjectProxy.extend(PromiseProxyMixin);
  
    let proxy = ObjectPromiseProxy.create({
      promise: resolve($.getJSON('/some/remote/data.json'))
    });
  
    proxy.then(function(json){
       // the json
    }, function(reason) {
       // the reason why you have no json
    });
    ```
  
    the proxy has bindable attributes which
    track the promises life cycle
  
    ```javascript
    proxy.get('isPending')   //=> true
    proxy.get('isSettled')  //=> false
    proxy.get('isRejected')  //=> false
    proxy.get('isFulfilled') //=> false
    ```
  
    When the $.getJSON completes, and the promise is fulfilled
    with json, the life cycle attributes will update accordingly.
    Note that $.getJSON doesn't return an ECMA specified promise,
    it is useful to wrap this with an `RSVP.resolve` so that it behaves
    as a spec compliant promise.
  
    ```javascript
    proxy.get('isPending')   //=> false
    proxy.get('isSettled')   //=> true
    proxy.get('isRejected')  //=> false
    proxy.get('isFulfilled') //=> true
    ```
  
    As the proxy is an ObjectProxy, and the json now its content,
    all the json properties will be available directly from the proxy.
  
    ```javascript
    // Assuming the following json:
    {
      firstName: 'Stefan',
      lastName: 'Penner'
    }
  
    // both properties will accessible on the proxy
    proxy.get('firstName') //=> 'Stefan'
    proxy.get('lastName')  //=> 'Penner'
    ```
  
    @class PromiseProxyMixin
    @public
  */
  exports.default = _metal.Mixin.create({
    /**
      If the proxied promise is rejected this will contain the reason
      provided.
       @property reason
      @default null
      @public
    */
    reason: null,

    /**
      Once the proxied promise has settled this will become `false`.
       @property isPending
      @default true
      @public
    */
    isPending: (0, _metal.computed)('isSettled', function () {
      return !(0, _metal.get)(this, 'isSettled');
    }).readOnly(),

    /**
      Once the proxied promise has settled this will become `true`.
       @property isSettled
      @default false
      @public
    */
    isSettled: (0, _metal.computed)('isRejected', 'isFulfilled', function () {
      return (0, _metal.get)(this, 'isRejected') || (0, _metal.get)(this, 'isFulfilled');
    }).readOnly(),

    /**
      Will become `true` if the proxied promise is rejected.
       @property isRejected
      @default false
      @public
    */
    isRejected: false,

    /**
      Will become `true` if the proxied promise is fulfilled.
       @property isFulfilled
      @default false
      @public
    */
    isFulfilled: false,

    /**
      The promise whose fulfillment value is being proxied by this object.
       This property must be specified upon creation, and should not be
      changed once created.
       Example:
       ```javascript
      import ObjectProxy from '@ember/object/proxy';
      import PromiseProxyMixin from '@ember/object/promise-proxy-mixin';
       ObjectProxy.extend(PromiseProxyMixin).create({
        promise: <thenable>
      });
      ```
       @property promise
      @public
    */
    promise: (0, _metal.computed)({
      get: function () {
        throw new _error.default("PromiseProxy's promise must be set");
      },
      set: function (key, promise) {
        return tap(this, promise);
      }
    }),

    /**
      An alias to the proxied promise's `then`.
       See RSVP.Promise.then.
       @method then
      @param {Function} callback
      @return {RSVP.Promise}
      @public
    */
    then: promiseAlias('then'),

    /**
      An alias to the proxied promise's `catch`.
       See RSVP.Promise.catch.
       @method catch
      @param {Function} callback
      @return {RSVP.Promise}
      @since 1.3.0
      @public
    */
    catch: promiseAlias('catch'),

    /**
      An alias to the proxied promise's `finally`.
       See RSVP.Promise.finally.
       @method finally
      @param {Function} callback
      @return {RSVP.Promise}
      @since 1.3.0
      @public
    */
    finally: promiseAlias('finally')
  });


  function promiseAlias(name) {
    return function () {
      var promise = (0, _metal.get)(this, 'promise');
      return promise[name].apply(promise, arguments);
    };
  }
});
enifed('@ember/-internals/runtime/lib/mixins/registry_proxy', ['exports', '@ember/debug', '@ember/-internals/metal'], function (exports, _debug, _metal) {
  'use strict';

  exports.default = _metal.Mixin.create({
    __registry__: null,

    /**
     Given a fullName return the corresponding factory.
      @public
     @method resolveRegistration
     @param {String} fullName
     @return {Function} fullName's factory
     */
    resolveRegistration: function (fullName, options) {
      true && !this.__registry__.isValidFullName(fullName) && (0, _debug.assert)('fullName must be a proper full name', this.__registry__.isValidFullName(fullName));

      return this.__registry__.resolve(fullName, options);
    },

    /**
      Registers a factory that can be used for dependency injection (with
      `inject`) or for service lookup. Each factory is registered with
      a full name including two parts: `type:name`.
       A simple example:
       ```javascript
      import Application from '@ember/application';
      import EmberObject from '@ember/object';
       let App = Application.create();
       App.Orange = EmberObject.extend();
      App.register('fruit:favorite', App.Orange);
      ```
       Ember will resolve factories from the `App` namespace automatically.
      For example `App.CarsController` will be discovered and returned if
      an application requests `controller:cars`.
       An example of registering a controller with a non-standard name:
       ```javascript
      import Application from '@ember/application';
      import Controller from '@ember/controller';
       let App = Application.create();
      let Session = Controller.extend();
       App.register('controller:session', Session);
       // The Session controller can now be treated like a normal controller,
      // despite its non-standard name.
      App.ApplicationController = Controller.extend({
        needs: ['session']
      });
      ```
       Registered factories are **instantiated** by having `create`
      called on them. Additionally they are **singletons**, each time
      they are looked up they return the same instance.
       Some examples modifying that default behavior:
       ```javascript
      import Application from '@ember/application';
      import EmberObject from '@ember/object';
       let App = Application.create();
       App.Person = EmberObject.extend();
      App.Orange = EmberObject.extend();
      App.Email = EmberObject.extend();
      App.session = EmberObject.create();
       App.register('model:user', App.Person, { singleton: false });
      App.register('fruit:favorite', App.Orange);
      App.register('communication:main', App.Email, { singleton: false });
      App.register('session', App.session, { instantiate: false });
      ```
       @method register
      @param  fullName {String} type:name (e.g., 'model:user')
      @param  factory {Function} (e.g., App.Person)
      @param  options {Object} (optional) disable instantiation or singleton usage
      @public
     */
    register: registryAlias('register'),

    /**
     Unregister a factory.
      ```javascript
     import Application from '@ember/application';
     import EmberObject from '@ember/object';
      let App = Application.create();
     let User = EmberObject.extend();
     App.register('model:user', User);
      App.resolveRegistration('model:user').create() instanceof User //=> true
      App.unregister('model:user')
     App.resolveRegistration('model:user') === undefined //=> true
     ```
      @public
     @method unregister
     @param {String} fullName
     */
    unregister: registryAlias('unregister'),

    /**
     Check if a factory is registered.
      @public
     @method hasRegistration
     @param {String} fullName
     @return {Boolean}
     */
    hasRegistration: registryAlias('has'),

    /**
     Return a specific registered option for a particular factory.
      @public
     @method registeredOption
     @param  {String} fullName
     @param  {String} optionName
     @return {Object} options
     */
    registeredOption: registryAlias('getOption'),

    /**
     Register options for a particular factory.
      @public
     @method registerOptions
     @param {String} fullName
     @param {Object} options
     */
    registerOptions: registryAlias('options'),

    /**
     Return registered options for a particular factory.
      @public
     @method registeredOptions
     @param  {String} fullName
     @return {Object} options
     */
    registeredOptions: registryAlias('getOptions'),

    /**
     Allow registering options for all factories of a type.
      ```javascript
     import Application from '@ember/application';
      let App = Application.create();
     let appInstance = App.buildInstance();
      // if all of type `connection` must not be singletons
     appInstance.registerOptionsForType('connection', { singleton: false });
      appInstance.register('connection:twitter', TwitterConnection);
     appInstance.register('connection:facebook', FacebookConnection);
      let twitter = appInstance.lookup('connection:twitter');
     let twitter2 = appInstance.lookup('connection:twitter');
      twitter === twitter2; // => false
      let facebook = appInstance.lookup('connection:facebook');
     let facebook2 = appInstance.lookup('connection:facebook');
      facebook === facebook2; // => false
     ```
      @public
     @method registerOptionsForType
     @param {String} type
     @param {Object} options
     */
    registerOptionsForType: registryAlias('optionsForType'),

    /**
     Return the registered options for all factories of a type.
      @public
     @method registeredOptionsForType
     @param {String} type
     @return {Object} options
     */
    registeredOptionsForType: registryAlias('getOptionsForType'),

    /**
      Define a dependency injection onto a specific factory or all factories
      of a type.
       When Ember instantiates a controller, view, or other framework component
      it can attach a dependency to that component. This is often used to
      provide services to a set of framework components.
       An example of providing a session object to all controllers:
       ```javascript
      import { alias } from '@ember/object/computed';
      import Application from '@ember/application';
      import Controller from '@ember/controller';
      import EmberObject from '@ember/object';
       let App = Application.create();
      let Session = EmberObject.extend({ isAuthenticated: false });
       // A factory must be registered before it can be injected
      App.register('session:main', Session);
       // Inject 'session:main' onto all factories of the type 'controller'
      // with the name 'session'
      App.inject('controller', 'session', 'session:main');
       App.IndexController = Controller.extend({
        isLoggedIn: alias('session.isAuthenticated')
      });
      ```
       Injections can also be performed on specific factories.
       ```javascript
      App.inject(<full_name or type>, <property name>, <full_name>)
      App.inject('route', 'source', 'source:main')
      App.inject('route:application', 'email', 'model:email')
      ```
       It is important to note that injections can only be performed on
      classes that are instantiated by Ember itself. Instantiating a class
      directly (via `create` or `new`) bypasses the dependency injection
      system.
       @public
      @method inject
      @param  factoryNameOrType {String}
      @param  property {String}
      @param  injectionName {String}
    **/
    inject: registryAlias('injection')
  });


  function registryAlias(name) {
    return function () {
      var _registry__;

      return (_registry__ = this.__registry__)[name].apply(_registry__, arguments);
    };
  }
});
enifed('@ember/-internals/runtime/lib/mixins/target_action_support', ['exports', '@ember/-internals/environment', '@ember/-internals/metal', '@ember/debug', '@ember/deprecated-features'], function (exports, _environment, _metal, _debug, _deprecatedFeatures) {
  'use strict';

  exports.default = _metal.Mixin.create({
    target: null,
    targetObject: _deprecatedFeatures.TARGET_OBJECT ? (0, _metal.descriptor)({
      configurable: true,
      enumerable: false,
      get: function () {
        var message = this + ' Usage of `targetObject` is deprecated. Please use `target` instead.';
        var options = { id: 'ember-runtime.using-targetObject', until: '3.5.0' };
        true && !false && (0, _debug.deprecate)(message, false, options);

        return this._targetObject;
      },
      set: function (value) {
        var message = this + ' Usage of `targetObject` is deprecated. Please use `target` instead.';
        var options = { id: 'ember-runtime.using-targetObject', until: '3.5.0' };
        true && !false && (0, _debug.deprecate)(message, false, options);

        this._targetObject = value;
      }
    }) : undefined,
    action: null,
    actionContext: null,

    actionContextObject: (0, _metal.computed)('actionContext', function () {
      var actionContext = (0, _metal.get)(this, 'actionContext');

      if (typeof actionContext === 'string') {
        var value = (0, _metal.get)(this, actionContext);
        if (value === undefined) {
          value = (0, _metal.get)(_environment.context.lookup, actionContext);
        }
        return value;
      } else {
        return actionContext;
      }
    }),

    /**
    Send an `action` with an `actionContext` to a `target`. The action, actionContext
    and target will be retrieved from properties of the object. For example:
     ```javascript
    import { alias } from '@ember/object/computed';
     App.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {
      target: alias('controller'),
      action: 'save',
      actionContext: alias('context'),
      click() {
        this.triggerAction(); // Sends the `save` action, along with the current context
                              // to the current controller
      }
    });
    ```
     The `target`, `action`, and `actionContext` can be provided as properties of
    an optional object argument to `triggerAction` as well.
     ```javascript
    App.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {
      click() {
        this.triggerAction({
          action: 'save',
          target: this.get('controller'),
          actionContext: this.get('context')
        }); // Sends the `save` action, along with the current context
            // to the current controller
      }
    });
    ```
     The `actionContext` defaults to the object you are mixing `TargetActionSupport` into.
    But `target` and `action` must be specified either as properties or with the argument
    to `triggerAction`, or a combination:
     ```javascript
    import { alias } from '@ember/object/computed';
     App.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {
      target: alias('controller'),
      click() {
        this.triggerAction({
          action: 'save'
        }); // Sends the `save` action, along with a reference to `this`,
            // to the current controller
      }
    });
    ```
     @method triggerAction
    @param opts {Object} (optional, with the optional keys action, target and/or actionContext)
    @return {Boolean} true if the action was sent successfully and did not return false
    @private
    */
    triggerAction: function () {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var action = opts.action,
          target = opts.target,
          actionContext = opts.actionContext;

      action = action || (0, _metal.get)(this, 'action');
      target = target || getTarget(this);

      if (actionContext === undefined) {
        actionContext = (0, _metal.get)(this, 'actionContextObject') || this;
      }

      if (target && action) {
        var ret = void 0;

        if (target.send) {
          var _target;

          ret = (_target = target).send.apply(_target, [action].concat(actionContext));
        } else {
          var _target2;

          true && !(typeof target[action] === 'function') && (0, _debug.assert)('The action \'' + action + '\' did not exist on ' + target, typeof target[action] === 'function');

          ret = (_target2 = target)[action].apply(_target2, [].concat(actionContext));
        }

        if (ret !== false) {
          return true;
        }
      }

      return false;
    }
  });


  function getTarget(instance) {
    var target = (0, _metal.get)(instance, 'target');
    if (target) {
      if (typeof target === 'string') {
        var value = (0, _metal.get)(instance, target);
        if (value === undefined) {
          value = (0, _metal.get)(_environment.context.lookup, target);
        }

        return value;
      } else {
        return target;
      }
    }

    // if _targetObject use it
    if (_deprecatedFeatures.TARGET_OBJECT && instance._targetObject) {
      return instance._targetObject;
    }

    return null;
  }
});
enifed('@ember/-internals/runtime/lib/system/array_proxy', ['exports', 'ember-babel', '@ember/-internals/metal', '@ember/-internals/runtime/lib/system/object', '@ember/-internals/runtime/lib/mixins/array', '@ember/debug'], function (exports, _emberBabel, _metal, _object, _array, _debug) {
  'use strict';

  /**
  @module @ember/array
  */

  var ARRAY_OBSERVER_MAPPING = {
    willChange: '_arrangedContentArrayWillChange',
    didChange: '_arrangedContentArrayDidChange'
  };

  /**
    An ArrayProxy wraps any other object that implements `Array` and/or
    `MutableArray,` forwarding all requests. This makes it very useful for
    a number of binding use cases or other cases where being able to swap
    out the underlying array is useful.
  
    A simple example of usage:
  
    ```javascript
    import { A } from '@ember/array';
    import ArrayProxy from '@ember/array/proxy';
  
    let pets = ['dog', 'cat', 'fish'];
    let ap = ArrayProxy.create({ content: A(pets) });
  
    ap.get('firstObject');                        // 'dog'
    ap.set('content', ['amoeba', 'paramecium']);
    ap.get('firstObject');                        // 'amoeba'
    ```
  
    This class can also be useful as a layer to transform the contents of
    an array, as they are accessed. This can be done by overriding
    `objectAtContent`:
  
    ```javascript
    import { A } from '@ember/array';
    import ArrayProxy from '@ember/array/proxy';
  
    let pets = ['dog', 'cat', 'fish'];
    let ap = ArrayProxy.create({
        content: A(pets),
        objectAtContent: function(idx) {
            return this.get('content').objectAt(idx).toUpperCase();
        }
    });
  
    ap.get('firstObject'); // . 'DOG'
    ```
  
    When overriding this class, it is important to place the call to
    `_super` *after* setting `content` so the internal observers have
    a chance to fire properly:
  
    ```javascript
    import { A } from '@ember/array';
    import ArrayProxy from '@ember/array/proxy';
  
    export default ArrayProxy.extend({
      init() {
        this.set('content', A(['dog', 'cat', 'fish']));
        this._super(...arguments);
      }
    });
    ```
  
    @class ArrayProxy
    @extends EmberObject
    @uses MutableArray
    @public
  */

  var ArrayProxy = function (_EmberObject) {
    (0, _emberBabel.inherits)(ArrayProxy, _EmberObject);

    function ArrayProxy() {
      (0, _emberBabel.classCallCheck)(this, ArrayProxy);

      return (0, _emberBabel.possibleConstructorReturn)(this, _EmberObject.apply(this, arguments));
    }

    ArrayProxy.prototype.init = function init() {
      var _EmberObject$prototyp;

      (_EmberObject$prototyp = _EmberObject.prototype.init).call.apply(_EmberObject$prototyp, [this].concat(Array.prototype.slice.call(arguments)));

      /*
        `this._objectsDirtyIndex` determines which indexes in the `this._objects`
        cache are dirty.
         If `this._objectsDirtyIndex === -1` then no indexes are dirty.
        Otherwise, an index `i` is dirty if `i >= this._objectsDirtyIndex`.
         Calling `objectAt` with a dirty index will cause the `this._objects`
        cache to be recomputed.
      */
      this._objectsDirtyIndex = 0;
      this._objects = null;

      this._lengthDirty = true;
      this._length = 0;

      this._arrangedContent = null;
      this._addArrangedContentArrayObsever();
    };

    ArrayProxy.prototype.willDestroy = function willDestroy() {
      this._removeArrangedContentArrayObsever();
    };

    /**
      The content array. Must be an object that implements `Array` and/or
      `MutableArray.`
       @property content
      @type EmberArray
      @public
    */

    /**
      Should actually retrieve the object at the specified index from the
      content. You can override this method in subclasses to transform the
      content item to something new.
       This method will only be called if content is non-`null`.
       @method objectAtContent
      @param {Number} idx The index to retrieve.
      @return {Object} the value or undefined if none found
      @public
    */

    ArrayProxy.prototype.objectAtContent = function objectAtContent(idx) {
      return (0, _metal.objectAt)((0, _metal.get)(this, 'arrangedContent'), idx);
    };

    // See additional docs for `replace` from `MutableArray`:
    // https://www.emberjs.com/api/ember/3.3/classes/MutableArray/methods/replace?anchor=replace


    ArrayProxy.prototype.replace = function replace(idx, amt, objects) {
      true && !((0, _metal.get)(this, 'arrangedContent') === (0, _metal.get)(this, 'content')) && (0, _debug.assert)('Mutating an arranged ArrayProxy is not allowed', (0, _metal.get)(this, 'arrangedContent') === (0, _metal.get)(this, 'content'));

      this.replaceContent(idx, amt, objects);
    };

    /**
      Should actually replace the specified objects on the content array.
      You can override this method in subclasses to transform the content item
      into something new.
       This method will only be called if content is non-`null`.
       @method replaceContent
      @param {Number} idx The starting index
      @param {Number} amt The number of items to remove from the content.
      @param {EmberArray} objects Optional array of objects to insert or null if no
        objects.
      @return {void}
      @public
    */

    ArrayProxy.prototype.replaceContent = function replaceContent(idx, amt, objects) {
      (0, _metal.get)(this, 'content').replace(idx, amt, objects);
    };

    // Overriding objectAt is not supported.


    ArrayProxy.prototype.objectAt = function objectAt(idx) {
      if (this._objects === null) {
        this._objects = [];
      }

      if (this._objectsDirtyIndex !== -1 && idx >= this._objectsDirtyIndex) {
        var arrangedContent = (0, _metal.get)(this, 'arrangedContent');
        if (arrangedContent) {
          var length = this._objects.length = (0, _metal.get)(arrangedContent, 'length');

          for (var i = this._objectsDirtyIndex; i < length; i++) {
            this._objects[i] = this.objectAtContent(i);
          }
        } else {
          this._objects.length = 0;
        }
        this._objectsDirtyIndex = -1;
      }

      return this._objects[idx];
    };

    // Overriding length is not supported.


    ArrayProxy.prototype[_metal.PROPERTY_DID_CHANGE] = function (key) {
      if (key === 'arrangedContent') {
        var oldLength = this._objects === null ? 0 : this._objects.length;
        var arrangedContent = (0, _metal.get)(this, 'arrangedContent');
        var newLength = arrangedContent ? (0, _metal.get)(arrangedContent, 'length') : 0;

        this._removeArrangedContentArrayObsever();
        this.arrayContentWillChange(0, oldLength, newLength);

        this._invalidate();

        this.arrayContentDidChange(0, oldLength, newLength);
        this._addArrangedContentArrayObsever();
      } else if (key === 'content') {
        this._invalidate();
      }
    };

    ArrayProxy.prototype._addArrangedContentArrayObsever = function _addArrangedContentArrayObsever() {
      var arrangedContent = (0, _metal.get)(this, 'arrangedContent');
      if (arrangedContent) {
        true && !(arrangedContent !== this) && (0, _debug.assert)("Can't set ArrayProxy's content to itself", arrangedContent !== this);
        true && !((0, _array.isArray)(arrangedContent) || arrangedContent.isDestroyed) && (0, _debug.assert)('ArrayProxy expects an Array or ArrayProxy, but you passed ' + typeof arrangedContent, (0, _array.isArray)(arrangedContent) || arrangedContent.isDestroyed);

        (0, _metal.addArrayObserver)(arrangedContent, this, ARRAY_OBSERVER_MAPPING);

        this._arrangedContent = arrangedContent;
      }
    };

    ArrayProxy.prototype._removeArrangedContentArrayObsever = function _removeArrangedContentArrayObsever() {
      if (this._arrangedContent) {
        (0, _metal.removeArrayObserver)(this._arrangedContent, this, ARRAY_OBSERVER_MAPPING);
      }
    };

    ArrayProxy.prototype._arrangedContentArrayWillChange = function _arrangedContentArrayWillChange() {};

    ArrayProxy.prototype._arrangedContentArrayDidChange = function _arrangedContentArrayDidChange(proxy, idx, removedCnt, addedCnt) {
      this.arrayContentWillChange(idx, removedCnt, addedCnt);

      var dirtyIndex = idx;
      if (dirtyIndex < 0) {
        var length = (0, _metal.get)(this._arrangedContent, 'length');
        dirtyIndex += length + removedCnt - addedCnt;
      }

      if (this._objectsDirtyIndex === -1) {
        this._objectsDirtyIndex = dirtyIndex;
      } else {
        if (this._objectsDirtyIndex > dirtyIndex) {
          this._objectsDirtyIndex = dirtyIndex;
        }
      }

      this._lengthDirty = true;

      this.arrayContentDidChange(idx, removedCnt, addedCnt);
    };

    ArrayProxy.prototype._invalidate = function _invalidate() {
      this._objectsDirtyIndex = 0;
      this._lengthDirty = true;
    };

    (0, _emberBabel.createClass)(ArrayProxy, [{
      key: 'length',
      get: function () {
        if (this._lengthDirty) {
          var arrangedContent = (0, _metal.get)(this, 'arrangedContent');
          this._length = arrangedContent ? (0, _metal.get)(arrangedContent, 'length') : 0;
          this._lengthDirty = false;
        }

        return this._length;
      },
      set: function (value) {
        var length = this.length;
        var removedCount = length - value;
        var added = void 0;

        if (removedCount === 0) {
          return;
        } else if (removedCount < 0) {
          added = new Array(-removedCount);
          removedCount = 0;
        }

        var content = (0, _metal.get)(this, 'content');
        if (content) {
          (0, _metal.replace)(content, value, removedCount, added);

          this._invalidate();
        }
      }
    }]);

    return ArrayProxy;
  }(_object.default);

  exports.default = ArrayProxy;


  ArrayProxy.reopen(_array.MutableArray, {
    /**
      The array that the proxy pretends to be. In the default `ArrayProxy`
      implementation, this and `content` are the same. Subclasses of `ArrayProxy`
      can override this property to provide things like sorting and filtering.
       @property arrangedContent
      @public
    */
    arrangedContent: (0, _metal.alias)('content')
  });
});
enifed('@ember/-internals/runtime/lib/system/core_object', ['exports', 'ember-babel', '@ember/-internals/container', '@ember/polyfills', '@ember/-internals/utils', '@ember/runloop', '@ember/-internals/meta', '@ember/-internals/metal', '@ember/-internals/runtime/lib/mixins/action_handler', '@ember/debug'], function (exports, _emberBabel, _container, _polyfills, _utils, _runloop, _meta2, _metal, _action_handler, _debug) {
  'use strict';

  /**
    @module @ember/object
  */

  var _reopen = _metal.Mixin.prototype.reopen;

  var wasApplied = new _polyfills._WeakSet();

  var factoryMap = new WeakMap();

  var prototypeMixinMap = new WeakMap();

  var DELAY_INIT = Object.freeze({});

  var initCalled = void 0; // only used in debug builds to enable the proxy trap

  // using DEBUG here to avoid the extraneous variable when not needed
  if (true /* DEBUG */) {
      initCalled = new _polyfills._WeakSet();
    }

  function initialize(obj, properties) {
    var m = (0, _meta2.meta)(obj);

    if (properties !== undefined) {
      true && !(typeof properties === 'object' && properties !== null) && (0, _debug.assert)('EmberObject.create only accepts objects.', typeof properties === 'object' && properties !== null);
      true && !!(properties instanceof _metal.Mixin) && (0, _debug.assert)('EmberObject.create no longer supports mixing in other ' + 'definitions, use .extend & .create separately instead.', !(properties instanceof _metal.Mixin));

      var concatenatedProperties = obj.concatenatedProperties;
      var mergedProperties = obj.mergedProperties;
      var hasConcatenatedProps = concatenatedProperties !== undefined && concatenatedProperties.length > 0;
      var hasMergedProps = mergedProperties !== undefined && mergedProperties.length > 0;

      var keyNames = Object.keys(properties);

      for (var i = 0; i < keyNames.length; i++) {
        var keyName = keyNames[i];
        var value = properties[keyName];

        true && !!(value instanceof _metal.ComputedProperty) && (0, _debug.assert)('EmberObject.create no longer supports defining computed ' + 'properties. Define computed properties using extend() or reopen() ' + 'before calling create().', !(value instanceof _metal.ComputedProperty));
        true && !!(typeof value === 'function' && value.toString().indexOf('._super') !== -1) && (0, _debug.assert)('EmberObject.create no longer supports defining methods that call _super.', !(typeof value === 'function' && value.toString().indexOf('._super') !== -1));
        true && !!(keyName === 'actions' && _action_handler.default.detect(obj)) && (0, _debug.assert)('`actions` must be provided at extend time, not at create time, ' + 'when Ember.ActionHandler is used (i.e. views, controllers & routes).', !(keyName === 'actions' && _action_handler.default.detect(obj)));

        var possibleDesc = (0, _meta2.descriptorFor)(obj, keyName, m);
        var isDescriptor = possibleDesc !== undefined;

        if (!isDescriptor) {
          var baseValue = obj[keyName];

          if (hasConcatenatedProps && concatenatedProperties.indexOf(keyName) > -1) {
            if (baseValue) {
              value = (0, _utils.makeArray)(baseValue).concat(value);
            } else {
              value = (0, _utils.makeArray)(value);
            }
          }

          if (hasMergedProps && mergedProperties.indexOf(keyName) > -1) {
            value = (0, _polyfills.assign)({}, baseValue, value);
          }
        }

        if (isDescriptor) {
          possibleDesc.set(obj, keyName, value);
        } else if (typeof obj.setUnknownProperty === 'function' && !(keyName in obj)) {
          obj.setUnknownProperty(keyName, value);
        } else {
          if (true /* DEBUG */) {
              (0, _metal.defineProperty)(obj, keyName, null, value, m); // setup mandatory setter
            } else {
            obj[keyName] = value;
          }
        }
      }
    }

    // using DEBUG here to avoid the extraneous variable when not needed
    if (true /* DEBUG */) {
        initCalled.add(obj);
      }
    obj.init(properties);

    // re-enable chains
    m.unsetInitializing();
    (0, _metal.finishChains)(m);
    (0, _metal.sendEvent)(obj, 'init', undefined, undefined, undefined, m);
  }

  /**
    @class CoreObject
    @public
  */

  var CoreObject = function () {
    CoreObject._initFactory = function _initFactory(factory) {
      factoryMap.set(this, factory);
    };

    function CoreObject(properties) {
      (0, _emberBabel.classCallCheck)(this, CoreObject);

      // pluck off factory
      var initFactory = factoryMap.get(this.constructor);
      if (initFactory !== undefined) {
        factoryMap.delete(this.constructor);
        _container.FACTORY_FOR.set(this, initFactory);
      }

      // prepare prototype...
      this.constructor.proto();

      var self = this;

      if (true /* DEBUG */ && _utils.HAS_NATIVE_PROXY && typeof self.unknownProperty === 'function') {
        var messageFor = function (obj, property) {
          return 'You attempted to access the `' + String(property) + '` property (of ' + obj + ').\n' + 'Since Ember 3.1, this is usually fine as you no longer need to use `.get()`\n' + 'to access computed properties. However, in this case, the object in question\n' + 'is a special kind of Ember object (a proxy). Therefore, it is still necessary\n' + ('to use `.get(\'' + String(property) + '\')` in this case.\n\n') + 'If you encountered this error because of third-party code that you don\'t control,\n' + 'there is more information at https://github.com/emberjs/ember.js/issues/16148, and\n' + 'you can help us improve this error message by telling us more about what happened in\n' + 'this situation.';
        };

        /* globals Proxy Reflect */
        self = new Proxy(this, {
          get: function (target, property, receiver) {
            if (property === _metal.PROXY_CONTENT) {
              return target;
            } else if (
            // init called will be set on the proxy, not the target, so get with the receiver
            !initCalled.has(receiver) || typeof property === 'symbol' || (0, _utils.isInternalSymbol)(property) || property === 'toJSON' || property === 'toString' || property === 'toStringExtension' || property === 'didDefineProperty' || property === 'willWatchProperty' || property === 'didUnwatchProperty' || property === 'didAddListener' || property === 'didRemoveListener' || property === 'isDescriptor' || property === '_onLookup' || property in target) {
              return Reflect.get(target, property, receiver);
            }

            var value = target.unknownProperty.call(receiver, property);

            if (typeof value !== 'function') {
              true && !(value === undefined || value === null) && (0, _debug.assert)(messageFor(receiver, property), value === undefined || value === null);
            }
          }
        });

        _container.FACTORY_FOR.set(self, initFactory);
      }

      // disable chains
      var m = (0, _meta2.meta)(self);
      m.setInitializing();

      if (properties !== DELAY_INIT) {
        true && !false && (0, _debug.deprecate)('using `new` with EmberObject has been deprecated. Please use `create` instead, or consider using native classes without extending from EmberObject.', false, {
          id: 'object.new-constructor',
          until: '3.9.0',
          url: 'https://emberjs.com/deprecations/v3.x#toc_object-new-constructor'
        });

        initialize(self, properties);
      }

      // only return when in debug builds and `self` is the proxy created above
      if (true /* DEBUG */ && self !== this) {
        return self;
      }
    }

    CoreObject.prototype.reopen = function reopen() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      (0, _metal.applyMixin)(this, args);
      return this;
    };

    /**
      An overridable method called when objects are instantiated. By default,
      does nothing unless it is overridden during class definition.
       Example:
       ```javascript
      import EmberObject from '@ember/object';
       const Person = EmberObject.extend({
        init() {
          alert(`Name is ${this.get('name')}`);
        }
      });
       let steve = Person.create({
        name: 'Steve'
      });
       // alerts 'Name is Steve'.
      ```
       NOTE: If you do override `init` for a framework class like `Ember.View`,
      be sure to call `this._super(...arguments)` in your
      `init` declaration! If you don't, Ember may not have an opportunity to
      do important setup work, and you'll see strange behavior in your
      application.
       @method init
      @public
    */

    CoreObject.prototype.init = function init() {};

    /**
      Defines the properties that will be concatenated from the superclass
      (instead of overridden).
       By default, when you extend an Ember class a property defined in
      the subclass overrides a property with the same name that is defined
      in the superclass. However, there are some cases where it is preferable
      to build up a property's value by combining the superclass' property
      value with the subclass' value. An example of this in use within Ember
      is the `classNames` property of `Ember.View`.
       Here is some sample code showing the difference between a concatenated
      property and a normal one:
       ```javascript
      import EmberObject from '@ember/object';
       const Bar = EmberObject.extend({
        // Configure which properties to concatenate
        concatenatedProperties: ['concatenatedProperty'],
         someNonConcatenatedProperty: ['bar'],
        concatenatedProperty: ['bar']
      });
       const FooBar = Bar.extend({
        someNonConcatenatedProperty: ['foo'],
        concatenatedProperty: ['foo']
      });
       let fooBar = FooBar.create();
      fooBar.get('someNonConcatenatedProperty'); // ['foo']
      fooBar.get('concatenatedProperty'); // ['bar', 'foo']
      ```
       This behavior extends to object creation as well. Continuing the
      above example:
       ```javascript
      let fooBar = FooBar.create({
        someNonConcatenatedProperty: ['baz'],
        concatenatedProperty: ['baz']
      })
      fooBar.get('someNonConcatenatedProperty'); // ['baz']
      fooBar.get('concatenatedProperty'); // ['bar', 'foo', 'baz']
      ```
       Adding a single property that is not an array will just add it in the array:
       ```javascript
      let fooBar = FooBar.create({
        concatenatedProperty: 'baz'
      })
      view.get('concatenatedProperty'); // ['bar', 'foo', 'baz']
      ```
       Using the `concatenatedProperties` property, we can tell Ember to mix the
      content of the properties.
       In `Component` the `classNames`, `classNameBindings` and
      `attributeBindings` properties are concatenated.
       This feature is available for you to use throughout the Ember object model,
      although typical app developers are likely to use it infrequently. Since
      it changes expectations about behavior of properties, you should properly
      document its usage in each individual concatenated property (to not
      mislead your users to think they can override the property in a subclass).
       @property concatenatedProperties
      @type Array
      @default null
      @public
    */

    /**
      Defines the properties that will be merged from the superclass
      (instead of overridden).
       By default, when you extend an Ember class a property defined in
      the subclass overrides a property with the same name that is defined
      in the superclass. However, there are some cases where it is preferable
      to build up a property's value by merging the superclass property value
      with the subclass property's value. An example of this in use within Ember
      is the `queryParams` property of routes.
       Here is some sample code showing the difference between a merged
      property and a normal one:
       ```javascript
      import EmberObject from '@ember/object';
       const Bar = EmberObject.extend({
        // Configure which properties are to be merged
        mergedProperties: ['mergedProperty'],
         someNonMergedProperty: {
          nonMerged: 'superclass value of nonMerged'
        },
        mergedProperty: {
          page: { replace: false },
          limit: { replace: true }
        }
      });
       const FooBar = Bar.extend({
        someNonMergedProperty: {
          completelyNonMerged: 'subclass value of nonMerged'
        },
        mergedProperty: {
          limit: { replace: false }
        }
      });
       let fooBar = FooBar.create();
       fooBar.get('someNonMergedProperty');
      // => { completelyNonMerged: 'subclass value of nonMerged' }
      //
      // Note the entire object, including the nonMerged property of
      // the superclass object, has been replaced
       fooBar.get('mergedProperty');
      // => {
      //   page: {replace: false},
      //   limit: {replace: false}
      // }
      //
      // Note the page remains from the superclass, and the
      // `limit` property's value of `false` has been merged from
      // the subclass.
      ```
       This behavior is not available during object `create` calls. It is only
      available at `extend` time.
       In `Route` the `queryParams` property is merged.
       This feature is available for you to use throughout the Ember object model,
      although typical app developers are likely to use it infrequently. Since
      it changes expectations about behavior of properties, you should properly
      document its usage in each individual merged property (to not
      mislead your users to think they can override the property in a subclass).
       @property mergedProperties
      @type Array
      @default null
      @public
    */

    /**
      Destroyed object property flag.
       if this property is `true` the observers and bindings were already
      removed by the effect of calling the `destroy()` method.
       @property isDestroyed
      @default false
      @public
    */

    /**
      Destroys an object by setting the `isDestroyed` flag and removing its
      metadata, which effectively destroys observers and bindings.
       If you try to set a property on a destroyed object, an exception will be
      raised.
       Note that destruction is scheduled for the end of the run loop and does not
      happen immediately.  It will set an isDestroying flag immediately.
       @method destroy
      @return {EmberObject} receiver
      @public
    */
    CoreObject.prototype.destroy = function destroy() {
      var m = (0, _meta2.peekMeta)(this);
      if (m.isSourceDestroying()) {
        return;
      }

      m.setSourceDestroying();

      (0, _runloop.schedule)('actions', this, this.willDestroy);
      (0, _runloop.schedule)('destroy', this, this._scheduledDestroy, m);

      return this;
    };

    /**
      Override to implement teardown.
       @method willDestroy
      @public
    */

    CoreObject.prototype.willDestroy = function willDestroy() {};

    /**
      Invoked by the run loop to actually destroy the object. This is
      scheduled for execution by the `destroy` method.
       @private
      @method _scheduledDestroy
    */

    CoreObject.prototype._scheduledDestroy = function _scheduledDestroy(m) {
      if (m.isSourceDestroyed()) {
        return;
      }
      (0, _meta2.deleteMeta)(this);
      m.setSourceDestroyed();
    };

    /**
      Returns a string representation which attempts to provide more information
      than Javascript's `toString` typically does, in a generic way for all Ember
      objects.
       ```javascript
      import EmberObject from '@ember/object';
       const Person = EmberObject.extend();
      person = Person.create();
      person.toString(); //=> "<Person:ember1024>"
      ```
       If the object's class is not defined on an Ember namespace, it will
      indicate it is a subclass of the registered superclass:
       ```javascript
      const Student = Person.extend();
      let student = Student.create();
      student.toString(); //=> "<(subclass of Person):ember1025>"
      ```
       If the method `toStringExtension` is defined, its return value will be
      included in the output.
       ```javascript
      const Teacher = Person.extend({
        toStringExtension() {
          return this.get('fullName');
        }
      });
      teacher = Teacher.create();
      teacher.toString(); //=> "<Teacher:ember1026:Tom Dale>"
      ```
       @method toString
      @return {String} string representation
      @public
    */

    CoreObject.prototype.toString = function toString() {
      var hasToStringExtension = typeof this.toStringExtension === 'function';
      var extension = hasToStringExtension ? ':' + this.toStringExtension() : '';

      var ret = '<' + ((0, _utils.getName)(this) || _container.FACTORY_FOR.get(this) || this.constructor.toString()) + ':' + (0, _utils.guidFor)(this) + extension + '>';

      return ret;
    };

    /**
      Creates a new subclass.
       ```javascript
      import EmberObject from '@ember/object';
       const Person = EmberObject.extend({
        say(thing) {
          alert(thing);
         }
      });
      ```
       This defines a new subclass of EmberObject: `Person`. It contains one method: `say()`.
       You can also create a subclass from any existing class by calling its `extend()` method.
      For example, you might want to create a subclass of Ember's built-in `Component` class:
       ```javascript
      import Component from '@ember/component';
       const PersonComponent = Component.extend({
        tagName: 'li',
        classNameBindings: ['isAdministrator']
      });
      ```
       When defining a subclass, you can override methods but still access the
      implementation of your parent class by calling the special `_super()` method:
       ```javascript
      import EmberObject from '@ember/object';
       const Person = EmberObject.extend({
        say(thing) {
          let name = this.get('name');
          alert(`${name} says: ${thing}`);
        }
      });
       const Soldier = Person.extend({
        say(thing) {
          this._super(`${thing}, sir!`);
        },
        march(numberOfHours) {
          alert(`${this.get('name')} marches for ${numberOfHours} hours.`);
        }
      });
       let yehuda = Soldier.create({
        name: 'Yehuda Katz'
      });
       yehuda.say('Yes');  // alerts "Yehuda Katz says: Yes, sir!"
      ```
       The `create()` on line #17 creates an *instance* of the `Soldier` class.
      The `extend()` on line #8 creates a *subclass* of `Person`. Any instance
      of the `Person` class will *not* have the `march()` method.
       You can also pass `Mixin` classes to add additional properties to the subclass.
       ```javascript
      import EmberObject from '@ember/object';
      import Mixin from '@ember/object/mixin';
       const Person = EmberObject.extend({
        say(thing) {
          alert(`${this.get('name')} says: ${thing}`);
        }
      });
       const SingingMixin = Mixin.create({
        sing(thing) {
          alert(`${this.get('name')} sings: la la la ${thing}`);
        }
      });
       const BroadwayStar = Person.extend(SingingMixin, {
        dance() {
          alert(`${this.get('name')} dances: tap tap tap tap `);
        }
      });
      ```
       The `BroadwayStar` class contains three methods: `say()`, `sing()`, and `dance()`.
       @method extend
      @static
      @for @ember/object
      @param {Mixin} [mixins]* One or more Mixin classes
      @param {Object} [arguments]* Object containing values to use within the new class
      @public
    */

    CoreObject.extend = function extend() {
      var Class = function (_ref) {
        (0, _emberBabel.inherits)(Class, _ref);

        function Class() {
          (0, _emberBabel.classCallCheck)(this, Class);

          return (0, _emberBabel.possibleConstructorReturn)(this, _ref.apply(this, arguments));
        }

        return Class;
      }(this);
      _reopen.apply(Class.PrototypeMixin, arguments);
      return Class;
    };

    /**
      Creates an instance of a class. Accepts either no arguments, or an object
      containing values to initialize the newly instantiated object with.
       ```javascript
      import EmberObject from '@ember/object';
       const Person = EmberObject.extend({
        helloWorld() {
          alert(`Hi, my name is ${this.get('name')}`);
        }
      });
       let tom = Person.create({
        name: 'Tom Dale'
      });
       tom.helloWorld(); // alerts "Hi, my name is Tom Dale".
      ```
       `create` will call the `init` function if defined during
      `AnyObject.extend`
       If no arguments are passed to `create`, it will not set values to the new
      instance during initialization:
       ```javascript
      let noName = Person.create();
      noName.helloWorld(); // alerts undefined
      ```
       NOTE: For performance reasons, you cannot declare methods or computed
      properties during `create`. You should instead declare methods and computed
      properties when using `extend`.
       @method create
      @for @ember/object
      @static
      @param [arguments]*
      @public
    */

    CoreObject.create = function create(props, extra) {
      var C = this;
      var instance = new C(DELAY_INIT);

      if (extra === undefined) {
        initialize(instance, props);
      } else {
        initialize(instance, flattenProps.apply(this, arguments));
      }

      return instance;
    };

    /**
      Augments a constructor's prototype with additional
      properties and functions:
       ```javascript
      import EmberObject from '@ember/object';
       const MyObject = EmberObject.extend({
        name: 'an object'
      });
       o = MyObject.create();
      o.get('name'); // 'an object'
       MyObject.reopen({
        say(msg) {
          console.log(msg);
        }
      });
       o2 = MyObject.create();
      o2.say('hello'); // logs "hello"
       o.say('goodbye'); // logs "goodbye"
      ```
       To add functions and properties to the constructor itself,
      see `reopenClass`
       @method reopen
      @for @ember/object
      @static
      @public
    */

    CoreObject.reopen = function reopen() {
      this.willReopen();
      _reopen.apply(this.PrototypeMixin, arguments);
      return this;
    };

    CoreObject.willReopen = function willReopen() {
      var p = this.prototype;
      if (wasApplied.has(p)) {
        wasApplied.delete(p);

        // If the base mixin already exists and was applied, create a new mixin to
        // make sure that it gets properly applied. Reusing the same mixin after
        // the first `proto` call will cause it to get skipped.
        if (prototypeMixinMap.has(this)) {
          prototypeMixinMap.set(this, _metal.Mixin.create(this.PrototypeMixin));
        }
      }
    };

    /**
      Augments a constructor's own properties and functions:
       ```javascript
      import EmberObject from '@ember/object';
       const MyObject = EmberObject.extend({
        name: 'an object'
      });
       MyObject.reopenClass({
        canBuild: false
      });
       MyObject.canBuild; // false
      o = MyObject.create();
      ```
       In other words, this creates static properties and functions for the class.
      These are only available on the class and not on any instance of that class.
       ```javascript
      import EmberObject from '@ember/object';
       const Person = EmberObject.extend({
        name: '',
        sayHello() {
          alert(`Hello. My name is ${this.get('name')}`);
        }
      });
       Person.reopenClass({
        species: 'Homo sapiens',
         createPerson(name) {
          return Person.create({ name });
        }
      });
       let tom = Person.create({
        name: 'Tom Dale'
      });
      let yehuda = Person.createPerson('Yehuda Katz');
       tom.sayHello(); // "Hello. My name is Tom Dale"
      yehuda.sayHello(); // "Hello. My name is Yehuda Katz"
      alert(Person.species); // "Homo sapiens"
      ```
       Note that `species` and `createPerson` are *not* valid on the `tom` and `yehuda`
      variables. They are only valid on `Person`.
       To add functions and properties to instances of
      a constructor by extending the constructor's prototype
      see `reopen`
       @method reopenClass
      @for @ember/object
      @static
      @public
    */

    CoreObject.reopenClass = function reopenClass() {
      (0, _metal.applyMixin)(this, arguments);
      return this;
    };

    CoreObject.detect = function detect(obj) {
      if ('function' !== typeof obj) {
        return false;
      }
      while (obj) {
        if (obj === this) {
          return true;
        }
        obj = obj.superclass;
      }
      return false;
    };

    CoreObject.detectInstance = function detectInstance(obj) {
      return obj instanceof this;
    };

    /**
      In some cases, you may want to annotate computed properties with additional
      metadata about how they function or what values they operate on. For
      example, computed property functions may close over variables that are then
      no longer available for introspection.
       You can pass a hash of these values to a computed property like this:
       ```javascript
      import { computed } from '@ember/object';
       person: computed(function() {
        let personId = this.get('personId');
        return Person.create({ id: personId });
      }).meta({ type: Person })
      ```
       Once you've done this, you can retrieve the values saved to the computed
      property from your class like this:
       ```javascript
      MyClass.metaForProperty('person');
      ```
       This will return the original hash that was passed to `meta()`.
       @static
      @method metaForProperty
      @param key {String} property name
      @private
    */

    CoreObject.metaForProperty = function metaForProperty(key) {
      var proto = this.proto(); // ensure prototype is initialized
      var possibleDesc = (0, _meta2.descriptorFor)(proto, key);

      true && !(possibleDesc !== undefined) && (0, _debug.assert)('metaForProperty() could not find a computed property with key \'' + key + '\'.', possibleDesc !== undefined);

      return possibleDesc._meta || {};
    };

    /**
      Iterate over each computed property for the class, passing its name
      and any associated metadata (see `metaForProperty`) to the callback.
       @static
      @method eachComputedProperty
      @param {Function} callback
      @param {Object} binding
      @private
    */

    CoreObject.eachComputedProperty = function eachComputedProperty(callback) {
      var binding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this;

      this.proto(); // ensure prototype is initialized
      var empty = {};

      (0, _meta2.meta)(this.prototype).forEachDescriptors(function (name, descriptor) {
        if (descriptor.enumerable) {
          var _meta = descriptor._meta || empty;
          callback.call(binding, name, _meta);
        }
      });
    };

    CoreObject.proto = function proto() {
      var p = this.prototype;
      if (!wasApplied.has(p)) {
        wasApplied.add(p);
        var parent = this.superclass;
        if (parent) {
          parent.proto();
        }

        // If the prototype mixin exists, apply it. In the case of native classes,
        // it will not exist (unless the class has been reopened).
        if (prototypeMixinMap.has(this)) {
          this.PrototypeMixin.apply(p);
        }
      }
      return p;
    };

    (0, _emberBabel.createClass)(CoreObject, [{
      key: 'isDestroyed',
      get: function () {
        return (0, _meta2.peekMeta)(this).isSourceDestroyed();
      },
      set: function (value) {
        true && !false && (0, _debug.assert)('You cannot set `' + this + '.isDestroyed` directly, please use `.destroy()`.', false);
      }

      /**
        Destruction scheduled flag. The `destroy()` method has been called.
         The object stays intact until the end of the run loop at which point
        the `isDestroyed` flag is set.
         @property isDestroying
        @default false
        @public
      */

    }, {
      key: 'isDestroying',
      get: function () {
        return (0, _meta2.peekMeta)(this).isSourceDestroying();
      },
      set: function (value) {
        true && !false && (0, _debug.assert)('You cannot set `' + this + '.isDestroying` directly, please use `.destroy()`.', false);
      }
    }], [{
      key: 'PrototypeMixin',
      get: function () {
        var prototypeMixin = prototypeMixinMap.get(this);
        if (prototypeMixin === undefined) {
          prototypeMixin = _metal.Mixin.create();
          prototypeMixin.ownerConstructor = this;
          prototypeMixinMap.set(this, prototypeMixin);
        }
        return prototypeMixin;
      }
    }, {
      key: 'superclass',
      get: function () {
        var c = Object.getPrototypeOf(this);
        if (c !== Function.prototype) return c;
      }
    }]);

    return CoreObject;
  }();

  CoreObject.toString = _metal.classToString;
  (0, _utils.setName)(CoreObject, 'Ember.CoreObject');

  CoreObject.isClass = true;
  CoreObject.isMethod = false;

  function flattenProps() {
    var concatenatedProperties = this.concatenatedProperties,
        mergedProperties = this.mergedProperties;

    var hasConcatenatedProps = concatenatedProperties !== undefined && concatenatedProperties.length > 0;
    var hasMergedProps = mergedProperties !== undefined && mergedProperties.length > 0;

    var initProperties = {};

    for (var _len2 = arguments.length, props = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      props[_key2] = arguments[_key2];
    }

    for (var i = 0; i < props.length; i++) {
      var properties = props[i];

      true && !!(properties instanceof _metal.Mixin) && (0, _debug.assert)('EmberObject.create no longer supports mixing in other ' + 'definitions, use .extend & .create separately instead.', !(properties instanceof _metal.Mixin));

      var keyNames = Object.keys(properties);

      for (var j = 0, k = keyNames.length; j < k; j++) {
        var keyName = keyNames[j];
        var value = properties[keyName];

        if (hasConcatenatedProps && concatenatedProperties.indexOf(keyName) > -1) {
          var baseValue = initProperties[keyName];

          if (baseValue) {
            value = (0, _utils.makeArray)(baseValue).concat(value);
          } else {
            value = (0, _utils.makeArray)(value);
          }
        }

        if (hasMergedProps && mergedProperties.indexOf(keyName) > -1) {
          var _baseValue = initProperties[keyName];

          value = (0, _polyfills.assign)({}, _baseValue, value);
        }

        initProperties[keyName] = value;
      }
    }

    return initProperties;
  }

  if (true /* DEBUG */) {
      /**
        Provides lookup-time type validation for injected properties.
         @private
        @method _onLookup
      */
      CoreObject._onLookup = function injectedPropertyAssertion(debugContainerKey) {
        var _debugContainerKey$sp = debugContainerKey.split(':'),
            type = _debugContainerKey$sp[0];

        var proto = this.proto();

        for (var key in proto) {
          var desc = (0, _meta2.descriptorFor)(proto, key);
          if (desc instanceof _metal.InjectedProperty) {
            true && !(type === 'controller' || desc.type !== 'controller') && (0, _debug.assert)('Defining `' + key + '` as an injected controller property on a non-controller (`' + debugContainerKey + '`) is not allowed.', type === 'controller' || desc.type !== 'controller');
          }
        }
      };

      /**
        Returns a hash of property names and container names that injected
        properties will lookup on the container lazily.
         @method _lazyInjections
        @return {Object} Hash of all lazy injected property keys to container names
        @private
      */
      CoreObject._lazyInjections = function () {
        var injections = {};
        var proto = this.proto();
        var key = void 0;
        var desc = void 0;

        for (key in proto) {
          desc = (0, _meta2.descriptorFor)(proto, key);
          if (desc instanceof _metal.InjectedProperty) {
            injections[key] = {
              namespace: desc.namespace,
              source: desc.source,
              specifier: desc.type + ':' + (desc.name || key)
            };
          }
        }

        return injections;
      };
    }

  exports.default = CoreObject;
});
enifed('@ember/-internals/runtime/lib/system/namespace', ['exports', 'ember-babel', '@ember/-internals/metal', '@ember/-internals/utils', '@ember/-internals/runtime/lib/system/object'], function (exports, _emberBabel, _metal, _utils, _object) {
  'use strict';

  /**
    A Namespace is an object usually used to contain other objects or methods
    such as an application or framework. Create a namespace anytime you want
    to define one of these new containers.
  
    # Example Usage
  
    ```javascript
    MyFramework = Ember.Namespace.create({
      VERSION: '1.0.0'
    });
    ```
  
    @class Namespace
    @namespace Ember
    @extends EmberObject
    @public
  */

  // Preloaded into namespaces
  var Namespace = function (_EmberObject) {
    (0, _emberBabel.inherits)(Namespace, _EmberObject);

    function Namespace() {
      (0, _emberBabel.classCallCheck)(this, Namespace);

      return (0, _emberBabel.possibleConstructorReturn)(this, _EmberObject.apply(this, arguments));
    }

    Namespace.prototype.init = function init() {
      (0, _metal.addNamespace)(this);
    };

    Namespace.prototype.toString = function toString() {
      var name = (0, _metal.get)(this, 'name') || (0, _metal.get)(this, 'modulePrefix');
      if (name) {
        return name;
      }
      (0, _metal.findNamespaces)();
      name = (0, _utils.getName)(this);
      if (name === undefined) {
        name = (0, _utils.guidFor)(this);
        (0, _utils.setName)(this, name);
      }
      return name;
    };

    Namespace.prototype.nameClasses = function nameClasses() {
      (0, _metal.processNamespace)(this);
    };

    Namespace.prototype.destroy = function destroy() {
      (0, _metal.removeNamespace)(this);
      _EmberObject.prototype.destroy.call(this);
    };

    return Namespace;
  }(_object.default);
  /**
  @module ember
  */
  exports.default = Namespace;


  Namespace.prototype.isNamespace = true;
  Namespace.NAMESPACES = _metal.NAMESPACES;
  Namespace.NAMESPACES_BY_ID = _metal.NAMESPACES_BY_ID;
  Namespace.processAll = _metal.processAllNamespaces;
  Namespace.byName = _metal.findNamespace;
});
enifed('@ember/-internals/runtime/lib/system/object', ['exports', 'ember-babel', '@ember/-internals/container', '@ember/-internals/owner', '@ember/-internals/utils', '@ember/-internals/metal', '@ember/-internals/runtime/lib/system/core_object', '@ember/-internals/runtime/lib/mixins/observable', '@ember/debug'], function (exports, _emberBabel, _container, _owner, _utils, _metal, _core_object, _observable, _debug) {
  'use strict';

  exports.FrameworkObject = undefined;


  var OVERRIDE_OWNER = (0, _utils.symbol)('OVERRIDE_OWNER');

  /**
    `EmberObject` is the main base class for all Ember objects. It is a subclass
    of `CoreObject` with the `Observable` mixin applied. For details,
    see the documentation for each of these.
  
    @class EmberObject
    @extends CoreObject
    @uses Observable
    @public
  */

  /**
  @module @ember/object
  */

  var EmberObject = function (_CoreObject) {
    (0, _emberBabel.inherits)(EmberObject, _CoreObject);

    function EmberObject() {
      (0, _emberBabel.classCallCheck)(this, EmberObject);

      return (0, _emberBabel.possibleConstructorReturn)(this, _CoreObject.apply(this, arguments));
    }

    (0, _emberBabel.createClass)(EmberObject, [{
      key: '_debugContainerKey',
      get: function () {
        var factory = _container.FACTORY_FOR.get(this);
        return factory !== undefined && factory.fullName;
      }
    }, {
      key: _owner.OWNER,
      get: function () {
        if (this[OVERRIDE_OWNER]) {
          return this[OVERRIDE_OWNER];
        }

        var factory = _container.FACTORY_FOR.get(this);
        return factory !== undefined && factory.owner;
      }

      // we need a setter here largely to support
      // folks calling `owner.ownerInjection()` API

      , set: function (value) {
        this[OVERRIDE_OWNER] = value;
      }
    }]);

    return EmberObject;
  }(_core_object.default);

  exports.default = EmberObject;


  (0, _utils.setName)(EmberObject, 'Ember.Object');

  _observable.default.apply(EmberObject.prototype);

  var FrameworkObject = exports.FrameworkObject = EmberObject;

  if (true /* DEBUG */) {
      var INIT_WAS_CALLED = (0, _utils.symbol)('INIT_WAS_CALLED');
      var ASSERT_INIT_WAS_CALLED = (0, _utils.symbol)('ASSERT_INIT_WAS_CALLED');

      exports.FrameworkObject = FrameworkObject = function (_EmberObject) {
        (0, _emberBabel.inherits)(FrameworkObject, _EmberObject);

        function FrameworkObject() {
          (0, _emberBabel.classCallCheck)(this, FrameworkObject);

          return (0, _emberBabel.possibleConstructorReturn)(this, _EmberObject.apply(this, arguments));
        }

        FrameworkObject.prototype.init = function init() {
          var _EmberObject$prototyp;

          (_EmberObject$prototyp = _EmberObject.prototype.init).call.apply(_EmberObject$prototyp, [this].concat(Array.prototype.slice.call(arguments)));
          this[INIT_WAS_CALLED] = true;
        };

        FrameworkObject.prototype[ASSERT_INIT_WAS_CALLED] = function () {
          true && !this[INIT_WAS_CALLED] && (0, _debug.assert)('You must call `this._super(...arguments);` when overriding `init` on a framework object. Please update ' + this + ' to call `this._super(...arguments);` from `init`.', this[INIT_WAS_CALLED]);
        };

        return FrameworkObject;
      }(EmberObject);

      (0, _metal.addListener)(FrameworkObject.prototype, 'init', null, ASSERT_INIT_WAS_CALLED);
    }
});
enifed('@ember/-internals/runtime/lib/system/object_proxy', ['exports', 'ember-babel', '@ember/-internals/runtime/lib/system/object', '@ember/-internals/runtime/lib/mixins/-proxy'], function (exports, _emberBabel, _object, _proxy) {
  'use strict';

  /**
    `ObjectProxy` forwards all properties not defined by the proxy itself
    to a proxied `content` object.
  
    ```javascript
    import EmberObject from '@ember/object';
    import ObjectProxy from '@ember/object/proxy';
  
    object = EmberObject.create({
      name: 'Foo'
    });
  
    proxy = ObjectProxy.create({
      content: object
    });
  
    // Access and change existing properties
    proxy.get('name')          // 'Foo'
    proxy.set('name', 'Bar');
    object.get('name')         // 'Bar'
  
    // Create new 'description' property on `object`
    proxy.set('description', 'Foo is a whizboo baz');
    object.get('description')  // 'Foo is a whizboo baz'
    ```
  
    While `content` is unset, setting a property to be delegated will throw an
    Error.
  
    ```javascript
    import ObjectProxy from '@ember/object/proxy';
  
    proxy = ObjectProxy.create({
      content: null,
      flag: null
    });
    proxy.set('flag', true);
    proxy.get('flag');         // true
    proxy.get('foo');          // undefined
    proxy.set('foo', 'data');  // throws Error
    ```
  
    Delegated properties can be bound to and will change when content is updated.
  
    Computed properties on the proxy itself can depend on delegated properties.
  
    ```javascript
    import { computed } from '@ember/object';
    import ObjectProxy from '@ember/object/proxy';
  
    ProxyWithComputedProperty = ObjectProxy.extend({
      fullName: computed('firstName', 'lastName', function() {
        var firstName = this.get('firstName'),
            lastName = this.get('lastName');
        if (firstName && lastName) {
          return firstName + ' ' + lastName;
        }
        return firstName || lastName;
      })
    });
  
    proxy = ProxyWithComputedProperty.create();
  
    proxy.get('fullName');  // undefined
    proxy.set('content', {
      firstName: 'Tom', lastName: 'Dale'
    }); // triggers property change for fullName on proxy
  
    proxy.get('fullName');  // 'Tom Dale'
    ```
  
    @class ObjectProxy
    @extends EmberObject
    @uses Ember.ProxyMixin
    @public
  */

  var ObjectProxy = function (_FrameworkObject) {
    (0, _emberBabel.inherits)(ObjectProxy, _FrameworkObject);

    function ObjectProxy() {
      (0, _emberBabel.classCallCheck)(this, ObjectProxy);

      return (0, _emberBabel.possibleConstructorReturn)(this, _FrameworkObject.apply(this, arguments));
    }

    return ObjectProxy;
  }(_object.default);

  exports.default = ObjectProxy;


  ObjectProxy.PrototypeMixin.reopen(_proxy.default);
});
enifed('@ember/-internals/runtime/lib/type-of', ['exports', '@ember/-internals/runtime/lib/system/object'], function (exports, _object) {
  'use strict';

  exports.typeOf = typeOf;


  // ........................................
  // TYPING & ARRAY MESSAGING
  //
  var TYPE_MAP = {
    '[object Boolean]': 'boolean',
    '[object Number]': 'number',
    '[object String]': 'string',
    '[object Function]': 'function',
    '[object Array]': 'array',
    '[object Date]': 'date',
    '[object RegExp]': 'regexp',
    '[object Object]': 'object',
    '[object FileList]': 'filelist'
  };

  var toString = Object.prototype.toString;

  /**
   @module @ember/utils
  */
  /**
    Returns a consistent type for the passed object.
  
    Use this instead of the built-in `typeof` to get the type of an item.
    It will return the same result across all browsers and includes a bit
    more detail. Here is what will be returned:
  
        | Return Value  | Meaning                                              |
        |---------------|------------------------------------------------------|
        | 'string'      | String primitive or String object.                   |
        | 'number'      | Number primitive or Number object.                   |
        | 'boolean'     | Boolean primitive or Boolean object.                 |
        | 'null'        | Null value                                           |
        | 'undefined'   | Undefined value                                      |
        | 'function'    | A function                                           |
        | 'array'       | An instance of Array                                 |
        | 'regexp'      | An instance of RegExp                                |
        | 'date'        | An instance of Date                                  |
        | 'filelist'    | An instance of FileList                              |
        | 'class'       | An Ember class (created using EmberObject.extend())  |
        | 'instance'    | An Ember object instance                             |
        | 'error'       | An instance of the Error object                      |
        | 'object'      | A JavaScript object not inheriting from EmberObject  |
  
    Examples:
  
    ```javascript
    import { A } from '@ember/array';
    import { typeOf } from '@ember/utils';
    import EmberObject from '@ember/object';
  
    typeOf();                       // 'undefined'
    typeOf(null);                   // 'null'
    typeOf(undefined);              // 'undefined'
    typeOf('michael');              // 'string'
    typeOf(new String('michael'));  // 'string'
    typeOf(101);                    // 'number'
    typeOf(new Number(101));        // 'number'
    typeOf(true);                   // 'boolean'
    typeOf(new Boolean(true));      // 'boolean'
    typeOf(A);                      // 'function'
    typeOf([1, 2, 90]);             // 'array'
    typeOf(/abc/);                  // 'regexp'
    typeOf(new Date());             // 'date'
    typeOf(event.target.files);     // 'filelist'
    typeOf(EmberObject.extend());   // 'class'
    typeOf(EmberObject.create());   // 'instance'
    typeOf(new Error('teamocil'));  // 'error'
  
    // 'normal' JavaScript object
    typeOf({ a: 'b' });             // 'object'
    ```
  
    @method typeOf
    @for @ember/utils
    @param {Object} item the item to check
    @return {String} the type
    @public
    @static
  */

  function typeOf(item) {
    if (item === null) {
      return 'null';
    }
    if (item === undefined) {
      return 'undefined';
    }
    var ret = TYPE_MAP[toString.call(item)] || 'object';

    if (ret === 'function') {
      if (_object.default.detect(item)) {
        ret = 'class';
      }
    } else if (ret === 'object') {
      if (item instanceof Error) {
        ret = 'error';
      } else if (item instanceof _object.default) {
        ret = 'instance';
      } else if (item instanceof Date) {
        ret = 'date';
      }
    }

    return ret;
  }
});
enifed('@ember/-internals/utils', ['exports', 'ember-babel', '@ember/polyfills'], function (exports, _emberBabel, _polyfills) {
    'use strict';

    exports.Cache = exports.setProxy = exports.isProxy = exports.HAS_NATIVE_PROXY = exports.HAS_NATIVE_SYMBOL = exports.toString = exports.setName = exports.getName = exports.makeArray = exports.tryInvoke = exports.canInvoke = exports.lookupDescriptor = exports.inspect = exports.setListeners = exports.setObservers = exports.getListeners = exports.getObservers = exports.wrap = exports.ROOT = exports.checkHasSuper = exports.intern = exports.guidFor = exports.generateGuid = exports.GUID_KEY = exports.uuid = exports.dictionary = exports.isInternalSymbol = exports.symbol = exports.NAME_KEY = undefined;


    /**
      Strongly hint runtimes to intern the provided string.
    
      When do I need to use this function?
    
      For the most part, never. Pre-mature optimization is bad, and often the
      runtime does exactly what you need it to, and more often the trade-off isn't
      worth it.
    
      Why?
    
      Runtimes store strings in at least 2 different representations:
      Ropes and Symbols (interned strings). The Rope provides a memory efficient
      data-structure for strings created from concatenation or some other string
      manipulation like splitting.
    
      Unfortunately checking equality of different ropes can be quite costly as
      runtimes must resort to clever string comparison algorithms. These
      algorithms typically cost in proportion to the length of the string.
      Luckily, this is where the Symbols (interned strings) shine. As Symbols are
      unique by their string content, equality checks can be done by pointer
      comparison.
    
      How do I know if my string is a rope or symbol?
    
      Typically (warning general sweeping statement, but truthy in runtimes at
      present) static strings created as part of the JS source are interned.
      Strings often used for comparisons can be interned at runtime if some
      criteria are met.  One of these criteria can be the size of the entire rope.
      For example, in chrome 38 a rope longer then 12 characters will not
      intern, nor will segments of that rope.
    
      Some numbers: http://jsperf.com/eval-vs-keys/8
    
      Known Trick™
    
      @private
      @return {String} interned version of the provided string
    */
    function intern(str) {
        var obj = {};
        obj[str] = 1;
        for (var key in obj) {
            if (key === str) {
                return key;
            }
        }
        return str;
    }

    /**
      Returns whether Type(value) is Object.
    
      Useful for checking whether a value is a valid WeakMap key.
    
      Refs: https://tc39.github.io/ecma262/#sec-typeof-operator-runtime-semantics-evaluation
            https://tc39.github.io/ecma262/#sec-weakmap.prototype.set
    
      @private
      @function isObject
    */
    function isObject(value) {
        return value !== null && (typeof value === 'object' || typeof value === 'function');
    }

    /**
     @module @ember/object
    */
    /**
     Previously we used `Ember.$.uuid`, however `$.uuid` has been removed from
     jQuery master. We'll just bootstrap our own uuid now.
    
     @private
     @return {Number} the uuid
     */
    var _uuid = 0;
    /**
     Generates a universally unique identifier. This method
     is used internally by Ember for assisting with
     the generation of GUID's and other unique identifiers.
    
     @public
     @return {Number} [description]
     */
    function uuid() {
        return ++_uuid;
    }
    /**
     Prefix used for guids through out Ember.
     @private
     @property GUID_PREFIX
     @for Ember
     @type String
     @final
     */
    var GUID_PREFIX = 'ember';
    // Used for guid generation...
    var OBJECT_GUIDS = new WeakMap();
    var NON_OBJECT_GUIDS = new Map();
    /**
      A unique key used to assign guids and other private metadata to objects.
      If you inspect an object in your browser debugger you will often see these.
      They can be safely ignored.
    
      On browsers that support it, these properties are added with enumeration
      disabled so they won't show up when you iterate over your properties.
    
      @private
      @property GUID_KEY
      @for Ember
      @type String
      @final
    */
    var GUID_KEY = intern('__ember' + +new Date());
    /**
      Generates a new guid, optionally saving the guid to the object that you
      pass in. You will rarely need to use this method. Instead you should
      call `guidFor(obj)`, which return an existing guid if available.
    
      @private
      @method generateGuid
      @static
      @for @ember/object/internals
      @param {Object} [obj] Object the guid will be used for. If passed in, the guid will
        be saved on the object and reused whenever you pass the same object
        again.
    
        If no object is passed, just generate a new guid.
      @param {String} [prefix] Prefix to place in front of the guid. Useful when you want to
        separate the guid into separate namespaces.
      @return {String} the guid
    */
    function generateGuid(obj) {
        var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : GUID_PREFIX;

        var guid = prefix + uuid();
        if (isObject(obj)) {
            OBJECT_GUIDS.set(obj, guid);
        }
        return guid;
    }
    /**
      Returns a unique id for the object. If the object does not yet have a guid,
      one will be assigned to it. You can call this on any object,
      `EmberObject`-based or not.
    
      You can also use this method on DOM Element objects.
    
      @public
      @static
      @method guidFor
      @for @ember/object/internals
      @param {Object} obj any object, string, number, Element, or primitive
      @return {String} the unique guid for this instance.
    */
    function guidFor(value) {
        var guid = void 0;
        if (isObject(value)) {
            guid = OBJECT_GUIDS.get(value);
            if (guid === undefined) {
                guid = GUID_PREFIX + uuid();
                OBJECT_GUIDS.set(value, guid);
            }
        } else {
            guid = NON_OBJECT_GUIDS.get(value);
            if (guid === undefined) {
                var type = typeof value;
                if (type === 'string') {
                    guid = 'st' + uuid();
                } else if (type === 'number') {
                    guid = 'nu' + uuid();
                } else if (type === 'symbol') {
                    guid = 'sy' + uuid();
                } else {
                    guid = '(' + value + ')';
                }
                NON_OBJECT_GUIDS.set(value, guid);
            }
        }
        return guid;
    }

    var GENERATED_SYMBOLS = [];
    function isInternalSymbol(possibleSymbol) {
        return GENERATED_SYMBOLS.indexOf(possibleSymbol) !== -1;
    }
    function symbol(debugName) {
        // TODO: Investigate using platform symbols, but we do not
        // want to require non-enumerability for this API, which
        // would introduce a large cost.
        var id = GUID_KEY + Math.floor(Math.random() * +new Date());
        var symbol = intern('__' + debugName + id + '__');
        GENERATED_SYMBOLS.push(symbol);
        return symbol;
    }

    // the delete is meant to hint at runtimes that this object should remain in
    // dictionary mode. This is clearly a runtime specific hack, but currently it
    // appears worthwhile in some usecases. Please note, these deletes do increase
    // the cost of creation dramatically over a plain Object.create. And as this
    // only makes sense for long-lived dictionaries that aren't instantiated often.
    function makeDictionary(parent) {
        var dict = Object.create(parent);
        dict['_dict'] = null;
        delete dict['_dict'];
        return dict;
    }

    var HAS_SUPER_PATTERN = /\.(_super|call\(this|apply\(this)/;
    var fnToString = Function.prototype.toString;
    var checkHasSuper = function () {
        var sourceAvailable = fnToString.call(function () {
            return this;
        }).indexOf('return this') > -1;
        if (sourceAvailable) {
            return function checkHasSuper(func) {
                return HAS_SUPER_PATTERN.test(fnToString.call(func));
            };
        }
        return function checkHasSuper() {
            return true;
        };
    }();
    var HAS_SUPER_MAP = new WeakMap();
    var ROOT = Object.freeze(function () {});
    HAS_SUPER_MAP.set(ROOT, false);
    function hasSuper(func) {
        var hasSuper = HAS_SUPER_MAP.get(func);
        if (hasSuper === undefined) {
            hasSuper = checkHasSuper(func);
            HAS_SUPER_MAP.set(func, hasSuper);
        }
        return hasSuper;
    }
    var OBSERVERS_MAP = new WeakMap();
    function setObservers(func, observers) {
        if (observers) {
            OBSERVERS_MAP.set(func, observers);
        }
    }
    function getObservers(func) {
        return OBSERVERS_MAP.get(func);
    }
    var LISTENERS_MAP = new WeakMap();
    function setListeners(func, listeners) {
        if (listeners) {
            LISTENERS_MAP.set(func, listeners);
        }
    }
    function getListeners(func) {
        return LISTENERS_MAP.get(func);
    }
    var IS_WRAPPED_FUNCTION_SET = new _polyfills._WeakSet();
    /**
      Wraps the passed function so that `this._super` will point to the superFunc
      when the function is invoked. This is the primitive we use to implement
      calls to super.
    
      @private
      @method wrap
      @for Ember
      @param {Function} func The function to call
      @param {Function} superFunc The super function.
      @return {Function} wrapped function.
    */
    function wrap(func, superFunc) {
        if (!hasSuper(func)) {
            return func;
        }
        // ensure an unwrapped super that calls _super is wrapped with a terminal _super
        if (!IS_WRAPPED_FUNCTION_SET.has(superFunc) && hasSuper(superFunc)) {
            return _wrap(func, _wrap(superFunc, ROOT));
        }
        return _wrap(func, superFunc);
    }
    function _wrap(func, superFunc) {
        function superWrapper() {
            var orig = this._super;
            this._super = superFunc;
            var ret = func.apply(this, arguments);
            this._super = orig;
            return ret;
        }
        IS_WRAPPED_FUNCTION_SET.add(superWrapper);
        setObservers(superWrapper, getObservers(func));
        setListeners(superWrapper, getListeners(func));
        return superWrapper;
    }

    var objectToString = Object.prototype.toString;
    var functionToString = Function.prototype.toString;
    var isArray = Array.isArray;
    var objectKeys = Object.keys;
    var stringify = JSON.stringify;

    var LIST_LIMIT = 100;
    var DEPTH_LIMIT = 4;
    var SAFE_KEY = /^[\w$]+$/;
    /**
     @module @ember/debug
    */
    /**
      Convenience method to inspect an object. This method will attempt to
      convert the object into a useful string description.
    
      It is a pretty simple implementation. If you want something more robust,
      use something like JSDump: https://github.com/NV/jsDump
    
      @method inspect
      @static
      @param {Object} obj The object you want to inspect.
      @return {String} A description of the object
      @since 1.4.0
      @private
    */
    function inspect(obj) {
        // detect Node util.inspect call inspect(depth: number, opts: object)
        if (typeof obj === 'number' && arguments.length === 2) {
            return this;
        }
        return inspectValue(obj, 0);
    }
    function inspectValue(value, depth, seen) {
        var valueIsArray = false;
        switch (typeof value) {
            case 'undefined':
                return 'undefined';
            case 'object':
                if (value === null) return 'null';
                if (isArray(value)) {
                    valueIsArray = true;
                    break;
                }
                // is toString Object.prototype.toString or undefined then traverse
                if (value.toString === objectToString || value.toString === undefined) {
                    break;
                }
                // custom toString
                return value.toString();
            case 'function':
                return value.toString === functionToString ? value.name ? '[Function:' + value.name + ']' : '[Function]' : value.toString();
            case 'string':
                return stringify(value);
            case 'symbol':
            case 'boolean':
            case 'number':
            default:
                return value.toString();
        }
        if (seen === undefined) {
            seen = new _polyfills._WeakSet();
        } else {
            if (seen.has(value)) return '[Circular]';
        }
        seen.add(value);
        return valueIsArray ? inspectArray(value, depth + 1, seen) : inspectObject(value, depth + 1, seen);
    }
    function inspectKey(key) {
        return SAFE_KEY.test(key) ? key : stringify(key);
    }
    function inspectObject(obj, depth, seen) {
        if (depth > DEPTH_LIMIT) {
            return '[Object]';
        }
        var s = '{';
        var keys = objectKeys(obj);
        for (var i = 0; i < keys.length; i++) {
            s += i === 0 ? ' ' : ', ';
            if (i >= LIST_LIMIT) {
                s += '... ' + (keys.length - LIST_LIMIT) + ' more keys';
                break;
            }
            var key = keys[i];
            s += inspectKey(key) + ': ' + inspectValue(obj[key], depth, seen);
        }
        s += ' }';
        return s;
    }
    function inspectArray(arr, depth, seen) {
        if (depth > DEPTH_LIMIT) {
            return '[Array]';
        }
        var s = '[';
        for (var i = 0; i < arr.length; i++) {
            s += i === 0 ? ' ' : ', ';
            if (i >= LIST_LIMIT) {
                s += '... ' + (arr.length - LIST_LIMIT) + ' more items';
                break;
            }
            s += inspectValue(arr[i], depth, seen);
        }
        s += ' ]';
        return s;
    }

    function lookupDescriptor(obj, keyName) {
        var current = obj;
        do {
            var descriptor = Object.getOwnPropertyDescriptor(current, keyName);
            if (descriptor !== undefined) {
                return descriptor;
            }
            current = Object.getPrototypeOf(current);
        } while (current !== null);
        return null;
    }

    /**
      Checks to see if the `methodName` exists on the `obj`.
    
      ```javascript
      let foo = { bar: function() { return 'bar'; }, baz: null };
    
      Ember.canInvoke(foo, 'bar'); // true
      Ember.canInvoke(foo, 'baz'); // false
      Ember.canInvoke(foo, 'bat'); // false
      ```
    
      @method canInvoke
      @for Ember
      @param {Object} obj The object to check for the method
      @param {String} methodName The method name to check for
      @return {Boolean}
      @private
    */
    function canInvoke(obj, methodName) {
        return obj !== null && obj !== undefined && typeof obj[methodName] === 'function';
    }
    /**
      @module @ember/utils
    */
    /**
      Checks to see if the `methodName` exists on the `obj`,
      and if it does, invokes it with the arguments passed.
    
      ```javascript
      import { tryInvoke } from '@ember/utils';
    
      let d = new Date('03/15/2013');
    
      tryInvoke(d, 'getTime');              // 1363320000000
      tryInvoke(d, 'setFullYear', [2014]);  // 1394856000000
      tryInvoke(d, 'noSuchMethod', [2014]); // undefined
      ```
    
      @method tryInvoke
      @for @ember/utils
      @static
      @param {Object} obj The object to check for the method
      @param {String} methodName The method name to check for
      @param {Array} [args] The arguments to pass to the method
      @return {*} the return value of the invoked method or undefined if it cannot be invoked
      @public
    */
    function tryInvoke(obj, methodName, args) {
        if (canInvoke(obj, methodName)) {
            var method = obj[methodName];
            return method.apply(obj, args);
        }
    }

    var isArray$1 = Array.isArray;

    function makeArray(obj) {
        if (obj === null || obj === undefined) {
            return [];
        }
        return isArray$1(obj) ? obj : [obj];
    }

    var NAMES = new WeakMap();
    function setName(obj, name) {
        if (isObject(obj)) NAMES.set(obj, name);
    }
    function getName(obj) {
        return NAMES.get(obj);
    }

    var objectToString$1 = Object.prototype.toString;
    function isNone(obj) {
        return obj === null || obj === undefined;
    }
    /*
     A `toString` util function that supports objects without a `toString`
     method, e.g. an object created with `Object.create(null)`.
    */
    function toString(obj) {
        if (typeof obj === 'string') {
            return obj;
        }
        if (null === obj) return 'null';
        if (undefined === obj) return 'undefined';
        if (Array.isArray(obj)) {
            // Reimplement Array.prototype.join according to spec (22.1.3.13)
            // Changing ToString(element) with this safe version of ToString.
            var r = '';
            for (var k = 0; k < obj.length; k++) {
                if (k > 0) {
                    r += ',';
                }
                if (!isNone(obj[k])) {
                    r += toString(obj[k]);
                }
            }
            return r;
        }
        if (typeof obj.toString === 'function') {
            return obj.toString();
        }
        return objectToString$1.call(obj);
    }

    var HAS_NATIVE_SYMBOL = function () {
        if (typeof Symbol !== 'function') {
            return false;
        }
        // use `Object`'s `.toString` directly to prevent us from detecting
        // polyfills as native
        return Object.prototype.toString.call(Symbol()) === '[object Symbol]';
    }();

    var HAS_NATIVE_PROXY = typeof Proxy === 'function';

    var PROXIES = new _polyfills._WeakSet();
    function isProxy(object) {
        if (isObject(object)) {
            return PROXIES.has(object);
        }
        return false;
    }
    function setProxy(object) {
        if (isObject(object)) {
            PROXIES.add(object);
        }
    }

    var Cache = function () {
        function Cache(limit, func, store) {
            (0, _emberBabel.classCallCheck)(this, Cache);

            this.limit = limit;
            this.func = func;
            this.store = store;
            this.size = 0;
            this.misses = 0;
            this.hits = 0;
            this.store = store || new Map();
        }

        Cache.prototype.get = function get(key) {
            var value = this.store.get(key);
            if (this.store.has(key)) {
                this.hits++;
                return this.store.get(key);
            } else {
                this.misses++;
                value = this.set(key, this.func(key));
            }
            return value;
        };

        Cache.prototype.set = function set(key, value) {
            if (this.limit > this.size) {
                this.size++;
                this.store.set(key, value);
            }
            return value;
        };

        Cache.prototype.purge = function purge() {
            this.store.clear();
            this.size = 0;
            this.hits = 0;
            this.misses = 0;
        };

        return Cache;
    }();

    /*
     This package will be eagerly parsed and should have no dependencies on external
     packages.
    
     It is intended to be used to share utility methods that will be needed
     by every Ember application (and is **not** a dumping ground of useful utilities).
    
     Utility methods that are needed in < 80% of cases should be placed
     elsewhere (so they can be lazily evaluated / parsed).
    */

    var NAME_KEY = symbol('NAME_KEY');

    exports.NAME_KEY = NAME_KEY;
    exports.symbol = symbol;
    exports.isInternalSymbol = isInternalSymbol;
    exports.dictionary = makeDictionary;
    exports.uuid = uuid;
    exports.GUID_KEY = GUID_KEY;
    exports.generateGuid = generateGuid;
    exports.guidFor = guidFor;
    exports.intern = intern;
    exports.checkHasSuper = checkHasSuper;
    exports.ROOT = ROOT;
    exports.wrap = wrap;
    exports.getObservers = getObservers;
    exports.getListeners = getListeners;
    exports.setObservers = setObservers;
    exports.setListeners = setListeners;
    exports.inspect = inspect;
    exports.lookupDescriptor = lookupDescriptor;
    exports.canInvoke = canInvoke;
    exports.tryInvoke = tryInvoke;
    exports.makeArray = makeArray;
    exports.getName = getName;
    exports.setName = setName;
    exports.toString = toString;
    exports.HAS_NATIVE_SYMBOL = HAS_NATIVE_SYMBOL;
    exports.HAS_NATIVE_PROXY = HAS_NATIVE_PROXY;
    exports.isProxy = isProxy;
    exports.setProxy = setProxy;
    exports.Cache = Cache;
});
enifed('@ember/-internals/views/index', ['exports', '@ember/-internals/views/lib/system/jquery', '@ember/-internals/views/lib/system/utils', '@ember/-internals/views/lib/system/event_dispatcher', '@ember/-internals/views/lib/component_lookup', '@ember/-internals/views/lib/mixins/text_support', '@ember/-internals/views/lib/views/core_view', '@ember/-internals/views/lib/mixins/class_names_support', '@ember/-internals/views/lib/mixins/child_views_support', '@ember/-internals/views/lib/mixins/view_state_support', '@ember/-internals/views/lib/mixins/view_support', '@ember/-internals/views/lib/mixins/action_support', '@ember/-internals/views/lib/compat/attrs', '@ember/-internals/views/lib/system/lookup_partial', '@ember/-internals/views/lib/utils/lookup-component', '@ember/-internals/views/lib/system/action_manager', '@ember/-internals/views/lib/compat/fallback-view-registry'], function (exports, _jquery, _utils, _event_dispatcher, _component_lookup, _text_support, _core_view, _class_names_support, _child_views_support, _view_state_support, _view_support, _action_support, _attrs, _lookup_partial, _lookupComponent, _action_manager, _fallbackViewRegistry) {
  'use strict';

  Object.defineProperty(exports, 'jQuery', {
    enumerable: true,
    get: function () {
      return _jquery.default;
    }
  });
  Object.defineProperty(exports, 'jQueryDisabled', {
    enumerable: true,
    get: function () {
      return _jquery.jQueryDisabled;
    }
  });
  Object.defineProperty(exports, 'addChildView', {
    enumerable: true,
    get: function () {
      return _utils.addChildView;
    }
  });
  Object.defineProperty(exports, 'isSimpleClick', {
    enumerable: true,
    get: function () {
      return _utils.isSimpleClick;
    }
  });
  Object.defineProperty(exports, 'getViewBounds', {
    enumerable: true,
    get: function () {
      return _utils.getViewBounds;
    }
  });
  Object.defineProperty(exports, 'getViewClientRects', {
    enumerable: true,
    get: function () {
      return _utils.getViewClientRects;
    }
  });
  Object.defineProperty(exports, 'getViewBoundingClientRect', {
    enumerable: true,
    get: function () {
      return _utils.getViewBoundingClientRect;
    }
  });
  Object.defineProperty(exports, 'getRootViews', {
    enumerable: true,
    get: function () {
      return _utils.getRootViews;
    }
  });
  Object.defineProperty(exports, 'getChildViews', {
    enumerable: true,
    get: function () {
      return _utils.getChildViews;
    }
  });
  Object.defineProperty(exports, 'getViewId', {
    enumerable: true,
    get: function () {
      return _utils.getViewId;
    }
  });
  Object.defineProperty(exports, 'getViewElement', {
    enumerable: true,
    get: function () {
      return _utils.getViewElement;
    }
  });
  Object.defineProperty(exports, 'setViewElement', {
    enumerable: true,
    get: function () {
      return _utils.setViewElement;
    }
  });
  Object.defineProperty(exports, 'constructStyleDeprecationMessage', {
    enumerable: true,
    get: function () {
      return _utils.constructStyleDeprecationMessage;
    }
  });
  Object.defineProperty(exports, 'EventDispatcher', {
    enumerable: true,
    get: function () {
      return _event_dispatcher.default;
    }
  });
  Object.defineProperty(exports, 'ComponentLookup', {
    enumerable: true,
    get: function () {
      return _component_lookup.default;
    }
  });
  Object.defineProperty(exports, 'TextSupport', {
    enumerable: true,
    get: function () {
      return _text_support.default;
    }
  });
  Object.defineProperty(exports, 'CoreView', {
    enumerable: true,
    get: function () {
      return _core_view.default;
    }
  });
  Object.defineProperty(exports, 'ClassNamesSupport', {
    enumerable: true,
    get: function () {
      return _class_names_support.default;
    }
  });
  Object.defineProperty(exports, 'ChildViewsSupport', {
    enumerable: true,
    get: function () {
      return _child_views_support.default;
    }
  });
  Object.defineProperty(exports, 'ViewStateSupport', {
    enumerable: true,
    get: function () {
      return _view_state_support.default;
    }
  });
  Object.defineProperty(exports, 'ViewMixin', {
    enumerable: true,
    get: function () {
      return _view_support.default;
    }
  });
  Object.defineProperty(exports, 'ActionSupport', {
    enumerable: true,
    get: function () {
      return _action_support.default;
    }
  });
  Object.defineProperty(exports, 'MUTABLE_CELL', {
    enumerable: true,
    get: function () {
      return _attrs.MUTABLE_CELL;
    }
  });
  Object.defineProperty(exports, 'lookupPartial', {
    enumerable: true,
    get: function () {
      return _lookup_partial.default;
    }
  });
  Object.defineProperty(exports, 'hasPartial', {
    enumerable: true,
    get: function () {
      return _lookup_partial.hasPartial;
    }
  });
  Object.defineProperty(exports, 'lookupComponent', {
    enumerable: true,
    get: function () {
      return _lookupComponent.default;
    }
  });
  Object.defineProperty(exports, 'ActionManager', {
    enumerable: true,
    get: function () {
      return _action_manager.default;
    }
  });
  Object.defineProperty(exports, 'fallbackViewRegistry', {
    enumerable: true,
    get: function () {
      return _fallbackViewRegistry.default;
    }
  });
});
enifed('@ember/-internals/views/lib/compat/attrs', ['exports', '@ember/-internals/utils'], function (exports, _utils) {
  'use strict';

  exports.MUTABLE_CELL = undefined;
  var MUTABLE_CELL = exports.MUTABLE_CELL = (0, _utils.symbol)('MUTABLE_CELL');
});
enifed('@ember/-internals/views/lib/compat/fallback-view-registry', ['exports', '@ember/-internals/utils'], function (exports, _utils) {
  'use strict';

  exports.default = (0, _utils.dictionary)(null);
});
enifed('@ember/-internals/views/lib/component_lookup', ['exports', '@ember/debug', '@ember/-internals/runtime'], function (exports, _debug, _runtime) {
  'use strict';

  exports.default = _runtime.Object.extend({
    componentFor: function (name, owner, options) {
      true && !(name.indexOf('-') > -1 || true /* EMBER_GLIMMER_ANGLE_BRACKET_INVOCATION */) && (0, _debug.assert)('You cannot use \'' + name + '\' as a component name. Component names must contain a hyphen' + (true /* EMBER_GLIMMER_ANGLE_BRACKET_INVOCATION */ ? ' or start with a capital letter' : '') + '.', name.indexOf('-') > -1 || true);

      var fullName = 'component:' + name;
      return owner.factoryFor(fullName, options);
    },
    layoutFor: function (name, owner, options) {
      true && !(name.indexOf('-') > -1 || true /* EMBER_GLIMMER_ANGLE_BRACKET_INVOCATION */) && (0, _debug.assert)('You cannot use \'' + name + '\' as a component name. Component names must contain a hyphen.', name.indexOf('-') > -1 || true);

      var templateFullName = 'template:components/' + name;
      return owner.lookup(templateFullName, options);
    }
  });
});
enifed('@ember/-internals/views/lib/mixins/action_support', ['exports', '@ember/-internals/utils', '@ember/-internals/metal', '@ember/debug', '@ember/-internals/views/lib/compat/attrs', '@ember/deprecated-features'], function (exports, _utils, _metal, _debug, _attrs, _deprecatedFeatures) {
  'use strict';

  var mixinObj = {
    send: function (actionName) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      true && !(!this.isDestroying && !this.isDestroyed) && (0, _debug.assert)('Attempted to call .send() with the action \'' + actionName + '\' on the destroyed object \'' + this + '\'.', !this.isDestroying && !this.isDestroyed);

      var action = this.actions && this.actions[actionName];

      if (action) {
        var shouldBubble = action.apply(this, args) === true;
        if (!shouldBubble) {
          return;
        }
      }

      var target = (0, _metal.get)(this, 'target');
      if (target) {
        true && !(typeof target.send === 'function') && (0, _debug.assert)('The `target` for ' + this + ' (' + target + ') does not have a `send` method', typeof target.send === 'function');

        target.send.apply(target, arguments);
      } else {
        true && !action && (0, _debug.assert)((0, _utils.inspect)(this) + ' had no action handler for: ' + actionName, action);
      }
    }
  }; /**
      @module ember
     */


  if (_deprecatedFeatures.SEND_ACTION) {
    /**
      Calls an action passed to a component.
       For example a component for playing or pausing music may translate click events
      into action notifications of "play" or "stop" depending on some internal state
      of the component:
       ```app/components/play-button.js
      import Component from '@ember/component';
       export default Component.extend({
        click() {
          if (this.get('isPlaying')) {
            this.sendAction('play');
          } else {
            this.sendAction('stop');
          }
        }
      });
      ```
       The actions "play" and "stop" must be passed to this `play-button` component:
       ```handlebars
      {{! app/templates/application.hbs }}
      {{play-button play=(action "musicStarted") stop=(action "musicStopped")}}
      ```
       When the component receives a browser `click` event it translate this
      interaction into application-specific semantics ("play" or "stop") and
      calls the specified action.
       ```app/controller/application.js
      import Controller from '@ember/controller';
       export default Controller.extend({
        actions: {
          musicStarted() {
            // called when the play button is clicked
            // and the music started playing
          },
          musicStopped() {
            // called when the play button is clicked
            // and the music stopped playing
          }
        }
      });
      ```
       If no action is passed to `sendAction` a default name of "action"
      is assumed.
       ```app/components/next-button.js
      import Component from '@ember/component';
       export default Component.extend({
        click() {
          this.sendAction();
        }
      });
      ```
       ```handlebars
      {{! app/templates/application.hbs }}
      {{next-button action=(action "playNextSongInAlbum")}}
      ```
       ```app/controllers/application.js
      import Controller from '@ember/controller';
       export default Controller.extend({
        actions: {
          playNextSongInAlbum() {
            ...
          }
        }
      });
      ```
       @method sendAction
      @param [action] {String} the action to call
      @param [params] {*} arguments for the action
      @public
      @deprecated
    */
    var sendAction = function sendAction(action) {
      for (var _len2 = arguments.length, contexts = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        contexts[_key2 - 1] = arguments[_key2];
      }

      true && !(!this.isDestroying && !this.isDestroyed) && (0, _debug.assert)('Attempted to call .sendAction() with the action \'' + action + '\' on the destroyed object \'' + this + '\'.', !this.isDestroying && !this.isDestroyed);
      true && !false && (0, _debug.deprecate)('You called ' + (0, _utils.inspect)(this) + '.sendAction(' + (typeof action === 'string' ? '"' + action + '"' : '') + ') but Component#sendAction is deprecated. Please use closure actions instead.', false, {
        id: 'ember-component.send-action',
        until: '4.0.0',
        url: 'https://emberjs.com/deprecations/v3.x#toc_ember-component-send-action'
      });

      var actionName = void 0;

      // Send the default action
      if (action === undefined) {
        action = 'action';
      }
      actionName = (0, _metal.get)(this, 'attrs.' + action) || (0, _metal.get)(this, action);
      actionName = validateAction(this, actionName);

      // If no action name for that action could be found, just abort.
      if (actionName === undefined) {
        return;
      }

      if (typeof actionName === 'function') {
        actionName.apply(undefined, contexts);
      } else {
        this.triggerAction({
          action: actionName,
          actionContext: contexts
        });
      }
    };

    var validateAction = function validateAction(component, actionName) {
      if (actionName && actionName[_attrs.MUTABLE_CELL]) {
        actionName = actionName.value;
      }

      true && !(actionName === null || actionName === undefined || typeof actionName === 'string' || typeof actionName === 'function') && (0, _debug.assert)('The default action was triggered on the component ' + component.toString() + ', but the action name (' + actionName + ') was not a string.', actionName === null || actionName === undefined || typeof actionName === 'string' || typeof actionName === 'function');

      return actionName;
    };

    mixinObj.sendAction = sendAction;
  }

  /**
   @class ActionSupport
   @namespace Ember
   @private
  */
  exports.default = _metal.Mixin.create(mixinObj);
});
enifed('@ember/-internals/views/lib/mixins/child_views_support', ['exports', '@ember/-internals/metal', '@ember/-internals/views/lib/system/utils'], function (exports, _metal, _utils) {
  'use strict';

  exports.default = _metal.Mixin.create({
    /**
      Array of child views. You should never edit this array directly.
       @property childViews
      @type Array
      @default []
      @private
    */
    childViews: (0, _metal.descriptor)({
      configurable: false,
      enumerable: false,
      get: function () {
        return (0, _utils.getChildViews)(this);
      }
    }),

    appendChild: function (view) {
      (0, _utils.addChildView)(this, view);
    }
  });
});
enifed('@ember/-internals/views/lib/mixins/class_names_support', ['exports', '@ember/-internals/meta', '@ember/-internals/metal', '@ember/debug'], function (exports, _meta, _metal, _debug) {
  'use strict';

  var EMPTY_ARRAY = Object.freeze([]);

  /**
    @class ClassNamesSupport
    @namespace Ember
    @private
  */
  /**
  @module ember
  */
  exports.default = _metal.Mixin.create({
    concatenatedProperties: ['classNames', 'classNameBindings'],

    init: function () {
      this._super.apply(this, arguments);

      true && !((0, _meta.descriptorFor)(this, 'classNameBindings') === undefined && Array.isArray(this.classNameBindings)) && (0, _debug.assert)('Only arrays are allowed for \'classNameBindings\'', (0, _meta.descriptorFor)(this, 'classNameBindings') === undefined && Array.isArray(this.classNameBindings));
      true && !((0, _meta.descriptorFor)(this, 'classNames') === undefined && Array.isArray(this.classNames)) && (0, _debug.assert)('Only arrays of static class strings are allowed for \'classNames\'. For dynamic classes, use \'classNameBindings\'.', (0, _meta.descriptorFor)(this, 'classNames') === undefined && Array.isArray(this.classNames));
    },

    /**
      Standard CSS class names to apply to the view's outer element. This
      property automatically inherits any class names defined by the view's
      superclasses as well.
       @property classNames
      @type Array
      @default ['ember-view']
      @public
    */
    classNames: EMPTY_ARRAY,

    /**
      A list of properties of the view to apply as class names. If the property
      is a string value, the value of that string will be applied as a class
      name.
       ```javascript
      // Applies the 'high' class to the view element
      import Component from '@ember/component';
      Component.extend({
        classNameBindings: ['priority'],
        priority: 'high'
      });
      ```
       If the value of the property is a Boolean, the name of that property is
      added as a dasherized class name.
       ```javascript
      // Applies the 'is-urgent' class to the view element
      import Component from '@ember/component';
      Component.extend({
        classNameBindings: ['isUrgent'],
        isUrgent: true
      });
      ```
       If you would prefer to use a custom value instead of the dasherized
      property name, you can pass a binding like this:
       ```javascript
      // Applies the 'urgent' class to the view element
      import Component from '@ember/component';
      Component.extend({
        classNameBindings: ['isUrgent:urgent'],
        isUrgent: true
      });
      ```
       If you would like to specify a class that should only be added when the
      property is false, you can declare a binding like this:
       ```javascript
      // Applies the 'disabled' class to the view element
      import Component from '@ember/component';
      Component.extend({
        classNameBindings: ['isEnabled::disabled'],
        isEnabled: false
      });
      ```
       This list of properties is inherited from the component's superclasses as well.
       @property classNameBindings
      @type Array
      @default []
      @public
    */
    classNameBindings: EMPTY_ARRAY
  });
});
enifed('@ember/-internals/views/lib/mixins/text_support', ['exports', '@ember/-internals/metal', '@ember/-internals/runtime', '@ember/debug', '@ember/deprecated-features'], function (exports, _metal, _runtime, _debug, _deprecatedFeatures) {
  'use strict';

  /**
  @module ember
  */

  var KEY_EVENTS = {
    13: 'insertNewline',
    27: 'cancel'
  };

  /**
    `TextSupport` is a shared mixin used by both `TextField` and
    `TextArea`. `TextSupport` adds a number of methods that allow you to
    specify a controller action to invoke when a certain event is fired on your
    text field or textarea. The specified controller action would get the current
    value of the field passed in as the only argument unless the value of
    the field is empty. In that case, the instance of the field itself is passed
    in as the only argument.
  
    Let's use the pressing of the escape key as an example. If you wanted to
    invoke a controller action when a user presses the escape key while on your
    field, you would use the `escape-press` attribute on your field like so:
  
    ```handlebars
      {{! application.hbs}}
  
      {{input escape-press='alertUser'}}
    ```
  
    ```javascript
        import Application from '@ember/application';
        import Controller from '@ember/controller';
        App = Application.create();
  
        App.ApplicationController = Controller.extend({
          actions: {
            alertUser: function ( currentValue ) {
              alert( 'escape pressed, current value: ' + currentValue );
            }
          }
        });
    ```
  
    The following chart is a visual representation of what takes place when the
    escape key is pressed in this scenario:
  
    ```
    The Template
    +---------------------------+
    |                           |
    | escape-press='alertUser'  |
    |                           |          TextSupport Mixin
    +----+----------------------+          +-------------------------------+
         |                                 | cancel method                 |
         |      escape button pressed      |                               |
         +-------------------------------> | checks for the `escape-press` |
                                           | attribute and pulls out the   |
         +-------------------------------+ | `alertUser` value             |
         |     action name 'alertUser'     +-------------------------------+
         |     sent to controller
         v
    Controller
    +------------------------------------------ +
    |                                           |
    |  actions: {                               |
    |     alertUser: function( currentValue ){  |
    |       alert( 'the esc key was pressed!' ) |
    |     }                                     |
    |  }                                        |
    |                                           |
    +-------------------------------------------+
    ```
  
    Here are the events that we currently support along with the name of the
    attribute you would need to use on your field. To reiterate, you would use the
    attribute name like so:
  
    ```handlebars
      {{input attribute-name='controllerAction'}}
    ```
  
    ```
    +--------------------+----------------+
    |                    |                |
    | event              | attribute name |
    +--------------------+----------------+
    | new line inserted  | insert-newline |
    |                    |                |
    | enter key pressed  | enter          |
    |                    |                |
    | cancel key pressed | escape-press   |
    |                    |                |
    | focusin            | focus-in       |
    |                    |                |
    | focusout           | focus-out      |
    |                    |                |
    | keypress           | key-press      |
    |                    |                |
    | keyup              | key-up         |
    |                    |                |
    | keydown            | key-down       |
    +--------------------+----------------+
    ```
  
    @class TextSupport
    @namespace Ember
    @uses Ember.TargetActionSupport
    @extends Mixin
    @private
  */
  exports.default = _metal.Mixin.create(_runtime.TargetActionSupport, {
    value: '',

    attributeBindings: ['autocapitalize', 'autocorrect', 'autofocus', 'disabled', 'form', 'maxlength', 'minlength', 'placeholder', 'readonly', 'required', 'selectionDirection', 'spellcheck', 'tabindex', 'title'],
    placeholder: null,
    disabled: false,
    maxlength: null,

    init: function () {
      this._super.apply(this, arguments);
      this.on('paste', this, this._elementValueDidChange);
      this.on('cut', this, this._elementValueDidChange);
      this.on('input', this, this._elementValueDidChange);
    },

    /**
      Whether the `keyUp` event that triggers an `action` to be sent continues
      propagating to other views.
       By default, when the user presses the return key on their keyboard and
      the text field has an `action` set, the action will be sent to the view's
      controller and the key event will stop propagating.
       If you would like parent views to receive the `keyUp` event even after an
      action has been dispatched, set `bubbles` to true.
       @property bubbles
      @type Boolean
      @default false
      @private
    */
    bubbles: false,

    interpretKeyEvents: function (event) {
      var map = KEY_EVENTS;
      var method = map[event.keyCode];

      this._elementValueDidChange();
      if (method) {
        return this[method](event);
      }
    },
    _elementValueDidChange: function () {
      (0, _metal.set)(this, 'value', this.element.value);
    },
    change: function (event) {
      this._elementValueDidChange(event);
    },

    /**
      Allows you to specify a controller action to invoke when either the `enter`
      key is pressed or, in the case of the field being a textarea, when a newline
      is inserted. To use this method, give your field an `insert-newline`
      attribute. The value of that attribute should be the name of the action
      in your controller that you wish to invoke.
       For an example on how to use the `insert-newline` attribute, please
      reference the example near the top of this file.
       @method insertNewline
      @param {Event} event
      @private
    */
    insertNewline: function (event) {
      sendAction('enter', this, event);
      sendAction('insert-newline', this, event);
    },

    /**
      Allows you to specify a controller action to invoke when the escape button
      is pressed. To use this method, give your field an `escape-press`
      attribute. The value of that attribute should be the name of the action
      in your controller that you wish to invoke.
       For an example on how to use the `escape-press` attribute, please reference
      the example near the top of this file.
       @method cancel
      @param {Event} event
      @private
    */
    cancel: function (event) {
      sendAction('escape-press', this, event);
    },

    /**
      Allows you to specify a controller action to invoke when a field receives
      focus. To use this method, give your field a `focus-in` attribute. The value
      of that attribute should be the name of the action in your controller
      that you wish to invoke.
       For an example on how to use the `focus-in` attribute, please reference the
      example near the top of this file.
       @method focusIn
      @param {Event} event
      @private
    */
    focusIn: function (event) {
      sendAction('focus-in', this, event);
    },

    /**
      Allows you to specify a controller action to invoke when a field loses
      focus. To use this method, give your field a `focus-out` attribute. The value
      of that attribute should be the name of the action in your controller
      that you wish to invoke.
       For an example on how to use the `focus-out` attribute, please reference the
      example near the top of this file.
       @method focusOut
      @param {Event} event
      @private
    */
    focusOut: function (event) {
      this._elementValueDidChange(event);
      sendAction('focus-out', this, event);
    },

    /**
      Allows you to specify a controller action to invoke when a key is pressed.
      To use this method, give your field a `key-press` attribute. The value of
      that attribute should be the name of the action in your controller you
      that wish to invoke.
       For an example on how to use the `key-press` attribute, please reference the
      example near the top of this file.
       @method keyPress
      @param {Event} event
      @private
    */
    keyPress: function (event) {
      sendAction('key-press', this, event);
    },

    /**
      Allows you to specify a controller action to invoke when a key-up event is
      fired. To use this method, give your field a `key-up` attribute. The value
      of that attribute should be the name of the action in your controller
      that you wish to invoke.
       For an example on how to use the `key-up` attribute, please reference the
      example near the top of this file.
       @method keyUp
      @param {Event} event
      @private
    */
    keyUp: function (event) {
      this.interpretKeyEvents(event);
      sendAction('key-up', this, event);
    },

    /**
      Allows you to specify a controller action to invoke when a key-down event is
      fired. To use this method, give your field a `key-down` attribute. The value
      of that attribute should be the name of the action in your controller that
      you wish to invoke.
       For an example on how to use the `key-down` attribute, please reference the
      example near the top of this file.
       @method keyDown
      @param {Event} event
      @private
    */
    keyDown: function (event) {
      sendAction('key-down', this, event);
    }
  });


  // In principle, this shouldn't be necessary, but the legacy
  // sendAction semantics for TextField are different from
  // the component semantics so this method normalizes them.
  function sendAction(eventName, view, event) {
    var actionName = (0, _metal.get)(view, 'attrs.' + eventName) || (0, _metal.get)(view, eventName);
    var value = (0, _metal.get)(view, 'value');

    if (_deprecatedFeatures.SEND_ACTION && typeof actionName === 'string') {
      true && !false && (0, _debug.deprecate)('Passing actions to components as strings (like {{input ' + eventName + '="' + actionName + '"}}) is deprecated. Please use closure actions instead ({{input ' + eventName + '=(action "' + actionName + '")}})', false, {
        id: 'ember-component.send-action',
        until: '4.0.0',
        url: 'https://emberjs.com/deprecations/v3.x#toc_ember-component-send-action'
      });

      view.triggerAction({
        action: actionName,
        actionContext: [value, event]
      });
    } else if (typeof actionName === 'function') {
      actionName(value, event);
    }

    if (actionName && !(0, _metal.get)(view, 'bubbles')) {
      event.stopPropagation();
    }
  }
});
enifed('@ember/-internals/views/lib/mixins/view_state_support', ['exports', '@ember/-internals/metal'], function (exports, _metal) {
  'use strict';

  exports.default = _metal.Mixin.create({
    _transitionTo: function (state) {
      var priorState = this._currentState;
      var currentState = this._currentState = this._states[state];
      this._state = state;

      if (priorState && priorState.exit) {
        priorState.exit(this);
      }
      if (currentState.enter) {
        currentState.enter(this);
      }
    }
  });
});
enifed('@ember/-internals/views/lib/mixins/view_support', ['exports', '@ember/-internals/utils', '@ember/-internals/meta', '@ember/-internals/metal', '@ember/debug', '@ember/-internals/browser-environment', '@ember/-internals/views/lib/system/utils', '@ember/-internals/views/lib/system/jquery'], function (exports, _utils, _meta, _metal, _debug, _browserEnvironment, _utils2, _jquery) {
  'use strict';

  function K() {
    return this;
  }

  /**
   @class ViewMixin
   @namespace Ember
   @private
  */
  exports.default = _metal.Mixin.create({
    /**
      A list of properties of the view to apply as attributes. If the property
      is a string value, the value of that string will be applied as the value
      for an attribute of the property's name.
       The following example creates a tag like `<div priority="high" />`.
       ```app/components/my-component.js
      import Component from '@ember/component';
       export default Component.extend({
        attributeBindings: ['priority'],
        priority: 'high'
      });
      ```
       If the value of the property is a Boolean, the attribute is treated as
      an HTML Boolean attribute. It will be present if the property is `true`
      and omitted if the property is `false`.
       The following example creates markup like `<div visible />`.
       ```app/components/my-component.js
      import Component from '@ember/component';
       export default Component.extend({
        attributeBindings: ['visible'],
        visible: true
      });
      ```
       If you would prefer to use a custom value instead of the property name,
      you can create the same markup as the last example with a binding like
      this:
       ```app/components/my-component.js
      import Component from '@ember/component';
       export default Component.extend({
        attributeBindings: ['isVisible:visible'],
        isVisible: true
      });
      ```
       This list of attributes is inherited from the component's superclasses,
      as well.
       @property attributeBindings
      @type Array
      @default []
      @public
     */
    concatenatedProperties: ['attributeBindings'],

    // ..........................................................
    // TEMPLATE SUPPORT
    //

    /**
      Return the nearest ancestor that is an instance of the provided
      class or mixin.
       @method nearestOfType
      @param {Class,Mixin} klass Subclass of Ember.View (or Ember.View itself),
             or an instance of Mixin.
      @return Ember.View
      @deprecated use `yield` and contextual components for composition instead.
      @private
    */
    nearestOfType: function (klass) {
      var view = this.parentView;
      var isOfType = klass instanceof _metal.Mixin ? function (view) {
        return klass.detect(view);
      } : function (view) {
        return klass.detect(view.constructor);
      };

      while (view) {
        if (isOfType(view)) {
          return view;
        }
        view = view.parentView;
      }
    },

    /**
      Return the nearest ancestor that has a given property.
       @method nearestWithProperty
      @param {String} property A property name
      @return Ember.View
      @deprecated use `yield` and contextual components for composition instead.
      @private
    */
    nearestWithProperty: function (property) {
      var view = this.parentView;

      while (view) {
        if (property in view) {
          return view;
        }
        view = view.parentView;
      }
    },

    /**
      Renders the view again. This will work regardless of whether the
      view is already in the DOM or not. If the view is in the DOM, the
      rendering process will be deferred to give bindings a chance
      to synchronize.
       If children were added during the rendering process using `appendChild`,
      `rerender` will remove them, because they will be added again
      if needed by the next `render`.
       In general, if the display of your view changes, you should modify
      the DOM element directly instead of manually calling `rerender`, which can
      be slow.
       @method rerender
      @public
    */
    rerender: function () {
      return this._currentState.rerender(this);
    },

    // ..........................................................
    // ELEMENT SUPPORT
    //

    /**
      Returns the current DOM element for the view.
       @property element
      @type DOMElement
      @public
    */
    element: (0, _metal.descriptor)({
      configurable: false,
      enumerable: false,
      get: function () {
        return this.renderer.getElement(this);
      }
    }),

    /**
      Returns a jQuery object for this view's element. If you pass in a selector
      string, this method will return a jQuery object, using the current element
      as its buffer.
       For example, calling `view.$('li')` will return a jQuery object containing
      all of the `li` elements inside the DOM element of this view.
       @method $
      @param {String} [selector] a jQuery-compatible selector string
      @return {jQuery} the jQuery object for the DOM node
      @public
    */
    $: function (sel) {
      true && !(this.tagName !== '') && (0, _debug.assert)("You cannot access this.$() on a component with `tagName: ''` specified.", this.tagName !== '');
      true && !!_jquery.jQueryDisabled && (0, _debug.assert)('You cannot access this.$() with `jQuery` disabled.', !_jquery.jQueryDisabled);

      if (this.element) {
        return sel ? (0, _jquery.default)(sel, this.element) : (0, _jquery.default)(this.element);
      }
    },

    /**
      Appends the view's element to the specified parent element.
       Note that this method just schedules the view to be appended; the DOM
      element will not be appended to the given element until all bindings have
      finished synchronizing.
       This is not typically a function that you will need to call directly when
      building your application. If you do need to use `appendTo`, be sure that
      the target element you are providing is associated with an `Application`
      and does not have an ancestor element that is associated with an Ember view.
       @method appendTo
      @param {String|DOMElement|jQuery} A selector, element, HTML string, or jQuery object
      @return {Ember.View} receiver
      @private
    */
    appendTo: function (selector) {
      var target = void 0;

      if (_browserEnvironment.hasDOM) {
        target = typeof selector === 'string' ? document.querySelector(selector) : selector;

        true && !target && (0, _debug.assert)('You tried to append to (' + selector + ') but that isn\'t in the DOM', target);
        true && !!(0, _utils2.matches)(target, '.ember-view') && (0, _debug.assert)('You cannot append to an existing Ember.View.', !(0, _utils2.matches)(target, '.ember-view'));
        true && !function () {
          var node = target.parentNode;
          while (node) {
            if (node.nodeType !== 9 && (0, _utils2.matches)(node, '.ember-view')) {
              return false;
            }

            node = node.parentNode;
          }

          return true;
        }() && (0, _debug.assert)('You cannot append to an existing Ember.View.', function () {
          var node = target.parentNode;while (node) {
            if (node.nodeType !== 9 && (0, _utils2.matches)(node, '.ember-view')) {
              return false;
            }node = node.parentNode;
          }return true;
        }());
      } else {
        target = selector;

        true && !(typeof target !== 'string') && (0, _debug.assert)('You tried to append to a selector string (' + selector + ') in an environment without jQuery', typeof target !== 'string');
        true && !(typeof selector.appendChild === 'function') && (0, _debug.assert)('You tried to append to a non-Element (' + selector + ') in an environment without jQuery', typeof selector.appendChild === 'function');
      }

      this.renderer.appendTo(this, target);

      return this;
    },

    /**
      Appends the view's element to the document body. If the view does
      not have an HTML representation yet
      the element will be generated automatically.
       If your application uses the `rootElement` property, you must append
      the view within that element. Rendering views outside of the `rootElement`
      is not supported.
       Note that this method just schedules the view to be appended; the DOM
      element will not be appended to the document body until all bindings have
      finished synchronizing.
       @method append
      @return {Ember.View} receiver
      @private
    */
    append: function () {
      return this.appendTo(document.body);
    },

    /**
      The HTML `id` of the view's element in the DOM. You can provide this
      value yourself but it must be unique (just as in HTML):
       ```handlebars
        {{my-component elementId="a-really-cool-id"}}
      ```
       If not manually set a default value will be provided by the framework.
       Once rendered an element's `elementId` is considered immutable and you
      should never change it. If you need to compute a dynamic value for the
      `elementId`, you should do this when the component or element is being
      instantiated:
       ```app/components/my-component.js
      import Component from '@ember/component';
       export default Component.extend({
        init() {
          this._super(...arguments);
          let index = this.get('index');
          this.set('elementId', 'component-id' + index);
        }
      });
      ```
       @property elementId
      @type String
      @public
    */
    elementId: null,

    /**
      Attempts to discover the element in the parent element. The default
      implementation looks for an element with an ID of `elementId` (or the
      view's guid if `elementId` is null). You can override this method to
      provide your own form of lookup. For example, if you want to discover your
      element using a CSS class name instead of an ID.
       @method findElementInParentElement
      @param {DOMElement} parentElement The parent's DOM element
      @return {DOMElement} The discovered element
      @private
    */
    findElementInParentElement: function (parentElem) {
      var id = '#' + this.elementId;
      return (0, _jquery.default)(id)[0] || (0, _jquery.default)(id, parentElem)[0];
    },

    /**
      Called when a view is going to insert an element into the DOM.
       @event willInsertElement
      @public
    */
    willInsertElement: K,

    /**
      Called when the element of the view has been inserted into the DOM.
      Override this function to do any set up that requires an element
      in the document body.
       When a view has children, didInsertElement will be called on the
      child view(s) first and on itself afterwards.
       @event didInsertElement
      @public
    */
    didInsertElement: K,

    /**
      Called when the view is about to rerender, but before anything has
      been torn down. This is a good opportunity to tear down any manual
      observers you have installed based on the DOM state
       @event willClearRender
      @public
    */
    willClearRender: K,

    /**
      You must call `destroy` on a view to destroy the view (and all of its
      child views). This will remove the view from any parent node, then make
      sure that the DOM element managed by the view can be released by the
      memory manager.
       @method destroy
      @private
    */
    destroy: function () {
      this._super.apply(this, arguments);
      this._currentState.destroy(this);
    },

    /**
      Called when the element of the view is going to be destroyed. Override
      this function to do any teardown that requires an element, like removing
      event listeners.
       Please note: any property changes made during this event will have no
      effect on object observers.
       @event willDestroyElement
      @public
    */
    willDestroyElement: K,

    /**
      Called after the element of the view is destroyed.
       @event willDestroyElement
      @public
    */
    didDestroyElement: K,

    /**
      Called when the parentView property has changed.
       @event parentViewDidChange
      @private
    */
    parentViewDidChange: K,

    // ..........................................................
    // STANDARD RENDER PROPERTIES
    //

    /**
      Tag name for the view's outer element. The tag name is only used when an
      element is first created. If you change the `tagName` for an element, you
      must destroy and recreate the view element.
       By default, the render buffer will use a `<div>` tag for views.
       @property tagName
      @type String
      @default null
      @public
    */

    // We leave this null by default so we can tell the difference between
    // the default case and a user-specified tag.
    tagName: null,

    // .......................................................
    // CORE DISPLAY METHODS
    //

    /**
      Setup a view, but do not finish waking it up.
       * configure `childViews`
      * register the view with the global views hash, which is used for event
        dispatch
       @method init
      @private
    */
    init: function () {
      this._super.apply(this, arguments);

      // tslint:disable-next-line:max-line-length
      true && !((0, _meta.descriptorFor)(this, 'elementId') === undefined) && (0, _debug.assert)('You cannot use a computed property for the component\'s `elementId` (' + this + ').', (0, _meta.descriptorFor)(this, 'elementId') === undefined);

      // tslint:disable-next-line:max-line-length

      true && !((0, _meta.descriptorFor)(this, 'tagName') === undefined) && (0, _debug.assert)('You cannot use a computed property for the component\'s `tagName` (' + this + ').', (0, _meta.descriptorFor)(this, 'tagName') === undefined);

      if (!this.elementId && this.tagName !== '') {
        this.elementId = (0, _utils.guidFor)(this);
      }

      true && !!this.render && (0, _debug.assert)('Using a custom `.render` function is no longer supported.', !this.render);
    },

    // .......................................................
    // EVENT HANDLING
    //

    /**
      Handle events from `EventDispatcher`
       @method handleEvent
      @param eventName {String}
      @param evt {Event}
      @private
    */
    handleEvent: function (eventName, evt) {
      return this._currentState.handleEvent(this, eventName, evt);
    }
  });
});
enifed("@ember/-internals/views/lib/system/action_manager", ["exports"], function (exports) {
  "use strict";

  exports.default = ActionManager;
  /**
  @module ember
  */

  function ActionManager() {}

  /**
    Global action id hash.
  
    @private
    @property registeredActions
    @type Object
  */
  ActionManager.registeredActions = {};
});
enifed('@ember/-internals/views/lib/system/event_dispatcher', ['exports', '@ember/-internals/owner', '@ember/polyfills', '@ember/debug', '@ember/-internals/metal', '@ember/-internals/runtime', '@ember/-internals/views/lib/system/jquery', '@ember/-internals/views/lib/system/action_manager', '@ember/-internals/views/lib/compat/fallback-view-registry', '@ember/-internals/views/lib/system/jquery_event_deprecation', '@ember/-internals/views/lib/system/utils'], function (exports, _owner, _polyfills, _debug, _metal, _runtime, _jquery, _action_manager, _fallbackViewRegistry, _jquery_event_deprecation, _utils) {
  'use strict';

  /**
  @module ember
  */

  var ROOT_ELEMENT_CLASS = 'ember-application';
  var ROOT_ELEMENT_SELECTOR = '.' + ROOT_ELEMENT_CLASS;

  var EVENT_MAP = {
    mouseenter: 'mouseover',
    mouseleave: 'mouseout'
  };

  /**
    `Ember.EventDispatcher` handles delegating browser events to their
    corresponding `Ember.Views.` For example, when you click on a view,
    `Ember.EventDispatcher` ensures that that view's `mouseDown` method gets
    called.
  
    @class EventDispatcher
    @namespace Ember
    @private
    @extends Ember.Object
  */
  exports.default = _runtime.Object.extend({
    /**
      The set of events names (and associated handler function names) to be setup
      and dispatched by the `EventDispatcher`. Modifications to this list can be done
      at setup time, generally via the `Application.customEvents` hash.
       To add new events to be listened to:
       ```javascript
      import Application from '@ember/application';
       let App = Application.create({
        customEvents: {
          paste: 'paste'
        }
      });
      ```
       To prevent default events from being listened to:
       ```javascript
      import Application from '@ember/application';
       let App = Application.create({
        customEvents: {
          mouseenter: null,
          mouseleave: null
        }
      });
      ```
      @property events
      @type Object
      @private
    */
    events: {
      touchstart: 'touchStart',
      touchmove: 'touchMove',
      touchend: 'touchEnd',
      touchcancel: 'touchCancel',
      keydown: 'keyDown',
      keyup: 'keyUp',
      keypress: 'keyPress',
      mousedown: 'mouseDown',
      mouseup: 'mouseUp',
      contextmenu: 'contextMenu',
      click: 'click',
      dblclick: 'doubleClick',
      mousemove: 'mouseMove',
      focusin: 'focusIn',
      focusout: 'focusOut',
      mouseenter: 'mouseEnter',
      mouseleave: 'mouseLeave',
      submit: 'submit',
      input: 'input',
      change: 'change',
      dragstart: 'dragStart',
      drag: 'drag',
      dragenter: 'dragEnter',
      dragleave: 'dragLeave',
      dragover: 'dragOver',
      drop: 'drop',
      dragend: 'dragEnd'
    },

    /**
      The root DOM element to which event listeners should be attached. Event
      listeners will be attached to the document unless this is overridden.
       Can be specified as a DOMElement or a selector string.
       The default body is a string since this may be evaluated before document.body
      exists in the DOM.
       @private
      @property rootElement
      @type DOMElement
      @default 'body'
    */
    rootElement: 'body',

    init: function () {
      var _this = this;

      this._super();

      true && !function () {
        var owner = (0, _owner.getOwner)(_this);
        var environment = owner.lookup('-environment:main');

        return environment.isInteractive;
      }() && (0, _debug.assert)('EventDispatcher should never be instantiated in fastboot mode. Please report this as an Ember bug.', function () {
        var owner = (0, _owner.getOwner)(_this);var environment = owner.lookup('-environment:main');return environment.isInteractive;
      }());

      this._eventHandlers = Object.create(null);
    },

    /**
      Sets up event listeners for standard browser events.
       This will be called after the browser sends a `DOMContentReady` event. By
      default, it will set up all of the listeners on the document body. If you
      would like to register the listeners on a different element, set the event
      dispatcher's `root` property.
       @private
      @method setup
      @param addedEvents {Object}
    */
    setup: function (addedEvents, _rootElement) {
      var events = this._finalEvents = (0, _polyfills.assign)({}, (0, _metal.get)(this, 'events'), addedEvents);

      if (_rootElement !== undefined && _rootElement !== null) {
        (0, _metal.set)(this, 'rootElement', _rootElement);
      }

      var rootElementSelector = (0, _metal.get)(this, 'rootElement');
      var rootElement = void 0;
      if (_jquery.jQueryDisabled) {
        if (typeof rootElementSelector !== 'string') {
          rootElement = rootElementSelector;
        } else {
          rootElement = document.querySelector(rootElementSelector);
        }

        true && !!rootElement.classList.contains(ROOT_ELEMENT_CLASS) && (0, _debug.assert)('You cannot use the same root element (' + ((0, _metal.get)(this, 'rootElement') || rootElement.tagName) + ') multiple times in an Ember.Application', !rootElement.classList.contains(ROOT_ELEMENT_CLASS));
        true && !function () {
          var target = rootElement.parentNode;
          do {
            if (target.classList.contains(ROOT_ELEMENT_CLASS)) {
              return false;
            }

            target = target.parentNode;
          } while (target && target.nodeType === 1);

          return true;
        }() && (0, _debug.assert)('You cannot make a new Ember.Application using a root element that is a descendent of an existing Ember.Application', function () {
          var target = rootElement.parentNode;do {
            if (target.classList.contains(ROOT_ELEMENT_CLASS)) {
              return false;
            }target = target.parentNode;
          } while (target && target.nodeType === 1);return true;
        }());
        true && !!rootElement.querySelector(ROOT_ELEMENT_SELECTOR) && (0, _debug.assert)('You cannot make a new Ember.Application using a root element that is an ancestor of an existing Ember.Application', !rootElement.querySelector(ROOT_ELEMENT_SELECTOR));

        rootElement.classList.add(ROOT_ELEMENT_CLASS);

        true && !rootElement.classList.contains(ROOT_ELEMENT_CLASS) && (0, _debug.assert)('Unable to add \'' + ROOT_ELEMENT_CLASS + '\' class to root element (' + ((0, _metal.get)(this, 'rootElement') || rootElement.tagName) + '). Make sure you set rootElement to the body or an element in the body.', rootElement.classList.contains(ROOT_ELEMENT_CLASS));
      } else {
        rootElement = (0, _jquery.default)(rootElementSelector);
        true && !!rootElement.is(ROOT_ELEMENT_SELECTOR) && (0, _debug.assert)('You cannot use the same root element (' + (rootElement.selector || rootElement[0].tagName) + ') multiple times in an Ember.Application', !rootElement.is(ROOT_ELEMENT_SELECTOR));
        true && !!rootElement.closest(ROOT_ELEMENT_SELECTOR).length && (0, _debug.assert)('You cannot make a new Ember.Application using a root element that is a descendent of an existing Ember.Application', !rootElement.closest(ROOT_ELEMENT_SELECTOR).length);
        true && !!rootElement.find(ROOT_ELEMENT_SELECTOR).length && (0, _debug.assert)('You cannot make a new Ember.Application using a root element that is an ancestor of an existing Ember.Application', !rootElement.find(ROOT_ELEMENT_SELECTOR).length);

        rootElement.addClass(ROOT_ELEMENT_CLASS);

        if (!rootElement.is(ROOT_ELEMENT_SELECTOR)) {
          throw new TypeError('Unable to add \'' + ROOT_ELEMENT_CLASS + '\' class to root element (' + (rootElement.selector || rootElement[0].tagName) + '). Make sure you set rootElement to the body or an element in the body.');
        }
      }

      var viewRegistry = this._getViewRegistry();

      for (var event in events) {
        if (events.hasOwnProperty(event)) {
          this.setupHandler(rootElement, event, events[event], viewRegistry);
        }
      }
    },

    /**
      Registers an event listener on the rootElement. If the given event is
      triggered, the provided event handler will be triggered on the target view.
       If the target view does not implement the event handler, or if the handler
      returns `false`, the parent view will be called. The event will continue to
      bubble to each successive parent view until it reaches the top.
       @private
      @method setupHandler
      @param {Element} rootElement
      @param {String} event the browser-originated event to listen to
      @param {String} eventName the name of the method to call on the view
      @param {Object} viewRegistry
    */
    setupHandler: function (rootElement, event, eventName, viewRegistry) {
      if (eventName === null) {
        return;
      }

      if (_jquery.jQueryDisabled) {
        var viewHandler = function (target, event) {
          var view = viewRegistry[target.id];
          var result = true;

          if (view) {
            result = view.handleEvent(eventName, event);
          }

          return result;
        };

        var actionHandler = function (target, event) {
          var actionId = target.getAttribute('data-ember-action');
          var actions = _action_manager.default.registeredActions[actionId];

          // In Glimmer2 this attribute is set to an empty string and an additional
          // attribute it set for each action on a given element. In this case, the
          // attributes need to be read so that a proper set of action handlers can
          // be coalesced.
          if (actionId === '') {
            var attributes = target.attributes;
            var attributeCount = attributes.length;

            actions = [];

            for (var i = 0; i < attributeCount; i++) {
              var attr = attributes.item(i);
              var attrName = attr.name;

              if (attrName.indexOf('data-ember-action-') === 0) {
                actions = actions.concat(_action_manager.default.registeredActions[attr.value]);
              }
            }
          }

          // We have to check for actions here since in some cases, jQuery will trigger
          // an event on `removeChild` (i.e. focusout) after we've already torn down the
          // action handlers for the view.
          if (!actions) {
            return;
          }

          for (var index = 0; index < actions.length; index++) {
            var action = actions[index];

            if (action && action.eventName === eventName) {
              return action.handler(event);
            }
          }
        };

        // Special handling of events that don't bubble (event delegation does not work).
        // Mimics the way this is handled in jQuery,
        // see https://github.com/jquery/jquery/blob/899c56f6ada26821e8af12d9f35fa039100e838e/src/event.js#L666-L700
        if (EVENT_MAP[event] !== undefined) {
          var mappedEventType = EVENT_MAP[event];
          var origEventType = event;

          var createFakeEvent = function (eventType, event) {
            var fakeEvent = document.createEvent('MouseEvent');
            fakeEvent.initMouseEvent(eventType, false, false, event.view, event.detail, event.screenX, event.screenY, event.clientX, event.clientY, event.ctrlKey, event.altKey, event.shiftKey, event.metaKey, event.button, event.relatedTarget);

            // fake event.target as we don't dispatch the event
            Object.defineProperty(fakeEvent, 'target', { value: event.target, enumerable: true });

            return fakeEvent;
          };

          var handleMappedEvent = this._eventHandlers[mappedEventType] = function (event) {
            var target = event.target;
            var related = event.relatedTarget;

            while (target && target.nodeType === 1 && (related === null || related !== target && !(0, _utils.contains)(target, related))) {
              // mouseEnter/Leave don't bubble, so there is no logic to prevent it as with other events
              if (viewRegistry[target.id]) {
                viewHandler(target, createFakeEvent(origEventType, event));
              } else if (target.hasAttribute('data-ember-action')) {
                actionHandler(target, createFakeEvent(origEventType, event));
              }

              // separate mouseEnter/Leave events are dispatched for each listening element
              // until the element (related) has been reached that the pointing device exited from/to
              target = target.parentNode;
            }
          };

          rootElement.addEventListener(mappedEventType, handleMappedEvent);
        } else {
          var handleEvent = this._eventHandlers[event] = function (event) {
            var target = event.target;

            do {
              if (viewRegistry[target.id]) {
                if (viewHandler(target, event) === false) {
                  event.preventDefault();
                  event.stopPropagation();
                  break;
                }
              } else if (target.hasAttribute('data-ember-action')) {
                if (actionHandler(target, event) === false) {
                  break;
                }
              }

              target = target.parentNode;
            } while (target && target.nodeType === 1);
          };

          rootElement.addEventListener(event, handleEvent);
        }
      } else {
        rootElement.on(event + '.ember', '.ember-view', function (evt) {
          var view = viewRegistry[this.id];
          var result = true;

          if (view) {
            result = view.handleEvent(eventName, (0, _jquery_event_deprecation.default)(evt));
          }

          return result;
        });

        rootElement.on(event + '.ember', '[data-ember-action]', function (evt) {
          var attributes = evt.currentTarget.attributes;
          var handledActions = [];

          evt = (0, _jquery_event_deprecation.default)(evt);

          for (var i = 0; i < attributes.length; i++) {
            var attr = attributes.item(i);
            var attrName = attr.name;

            if (attrName.lastIndexOf('data-ember-action-', 0) !== -1) {
              var action = _action_manager.default.registeredActions[attr.value];

              // We have to check for action here since in some cases, jQuery will trigger
              // an event on `removeChild` (i.e. focusout) after we've already torn down the
              // action handlers for the view.
              if (action && action.eventName === eventName && handledActions.indexOf(action) === -1) {
                action.handler(evt);
                // Action handlers can mutate state which in turn creates new attributes on the element.
                // This effect could cause the `data-ember-action` attribute to shift down and be invoked twice.
                // To avoid this, we keep track of which actions have been handled.
                handledActions.push(action);
              }
            }
          }
        });
      }
    },
    _getViewRegistry: function () {
      var owner = (0, _owner.getOwner)(this);
      var viewRegistry = owner && owner.lookup('-view-registry:main') || _fallbackViewRegistry.default;

      return viewRegistry;
    },
    destroy: function () {
      var rootElementSelector = (0, _metal.get)(this, 'rootElement');
      var rootElement = void 0;
      if (rootElementSelector.nodeType) {
        rootElement = rootElementSelector;
      } else {
        rootElement = document.querySelector(rootElementSelector);
      }

      if (!rootElement) {
        return;
      }

      if (_jquery.jQueryDisabled) {
        for (var event in this._eventHandlers) {
          rootElement.removeEventListener(event, this._eventHandlers[event]);
        }
      } else {
        (0, _jquery.default)(rootElementSelector).off('.ember', '**');
      }

      rootElement.classList.remove(ROOT_ELEMENT_CLASS);

      return this._super.apply(this, arguments);
    },
    toString: function () {
      return '(EventDispatcher)';
    }
  });
});
enifed('@ember/-internals/views/lib/system/jquery', ['exports', '@ember/-internals/environment', '@ember/-internals/browser-environment'], function (exports, _environment, _browserEnvironment) {
  'use strict';

  exports.jQueryDisabled = undefined;


  var jQuery = void 0;
  var jQueryDisabled = exports.jQueryDisabled = _environment.ENV._JQUERY_INTEGRATION === false;

  if (_browserEnvironment.hasDOM) {
    jQuery = _environment.context.imports.jQuery;

    if (!jQueryDisabled && jQuery) {
      if (jQuery.event.addProp) {
        jQuery.event.addProp('dataTransfer');
      } else {
        // http://www.whatwg.org/specs/web-apps/current-work/multipage/dnd.html#dndevents
        ['dragstart', 'drag', 'dragenter', 'dragleave', 'dragover', 'drop', 'dragend'].forEach(function (eventName) {
          jQuery.event.fixHooks[eventName] = {
            props: ['dataTransfer']
          };
        });
      }
    } else {
      exports.jQueryDisabled = jQueryDisabled = true;
    }
  }

  exports.default = jQueryDisabled ? undefined : jQuery;
});
enifed('@ember/-internals/views/lib/system/jquery_event_deprecation', ['exports', '@ember/debug', '@ember/-internals/environment', '@ember/-internals/utils'], function (exports, _debug, _environment, _utils) {
  'use strict';

  exports.default = addJQueryEventDeprecation;
  function addJQueryEventDeprecation(jqEvent) {
    if (!true /* DEBUG */ || !_utils.HAS_NATIVE_PROXY) {
      return jqEvent;
    }

    var boundFunctions = new Map();

    // wrap the jQuery event in a Proxy to add the deprecation message for originalEvent, according to RFC#294
    // we need a native Proxy here, so we can make sure that the internal use of originalEvent in jQuery itself does
    // not trigger a deprecation
    return new Proxy(jqEvent, {
      get: function (target, name) {
        switch (name) {
          case 'originalEvent':
            true && !function (EmberENV) {
              // this deprecation is intentionally checking `global.EmberENV` /
              // `global.ENV` so that we can ensure we _only_ deprecate in the
              // case where jQuery integration is enabled implicitly (e.g.
              // "defaulted" to enabled) as opposed to when the user explicitly
              // opts in to using jQuery
              if (typeof EmberENV !== 'object' || EmberENV === null) return false;

              return EmberENV._JQUERY_INTEGRATION === true;
            }(_environment.global.EmberENV || _environment.global.ENV) && (0, _debug.deprecate)('Accessing jQuery.Event specific properties is deprecated. Either use the ember-jquery-legacy addon to normalize events to native events, or explicitly opt into jQuery integration using @ember/optional-features.', function (EmberENV) {
              if (typeof EmberENV !== 'object' || EmberENV === null) return false;return EmberENV._JQUERY_INTEGRATION === true;
            }(_environment.global.EmberENV || _environment.global.ENV), {
              id: 'ember-views.event-dispatcher.jquery-event',
              until: '4.0.0',
              url: 'https://emberjs.com/deprecations/v3.x#toc_jquery-event'
            });

            return target[name];

          // provide an escape hatch for ember-jquery-legacy to access originalEvent without a deprecation
          case '__originalEvent':
            return target.originalEvent;

          default:
            if (typeof target[name] === 'function') {
              // cache functions for reuse
              if (!boundFunctions.has(name)) {
                // for jQuery.Event methods call them with `target` as the `this` context, so they will access
                // `originalEvent` from the original jQuery event, not our proxy, thus not trigger the deprecation
                boundFunctions.set(name, target[name].bind(target));
              }

              return boundFunctions.get(name);
            }
            // same for jQuery's getter functions for simple properties
            return target[name];
        }
      }
    });
  } /* global Proxy */
});
enifed('@ember/-internals/views/lib/system/lookup_partial', ['exports', '@ember/debug', '@ember/error'], function (exports, _debug, _error) {
  'use strict';

  exports.default = lookupPartial;
  exports.hasPartial = hasPartial;


  function parseUnderscoredName(templateName) {
    var nameParts = templateName.split('/');
    var lastPart = nameParts[nameParts.length - 1];

    nameParts[nameParts.length - 1] = '_' + lastPart;

    return nameParts.join('/');
  }

  function lookupPartial(templateName, owner) {
    if (templateName == null) {
      return;
    }

    var template = templateFor(owner, parseUnderscoredName(templateName), templateName);

    true && !!!template && (0, _debug.assert)('Unable to find partial with name "' + templateName + '"', !!template);

    return template;
  }

  function hasPartial(name, owner) {
    if (!owner) {
      throw new _error.default('Container was not found when looking up a views template. ' + 'This is most likely due to manually instantiating an Ember.View. ' + 'See: http://git.io/EKPpnA');
    }

    return owner.hasRegistration('template:' + parseUnderscoredName(name)) || owner.hasRegistration('template:' + name);
  }

  function templateFor(owner, underscored, name) {
    if (!name) {
      return;
    }
    true && !(name.indexOf('.') === -1) && (0, _debug.assert)('templateNames are not allowed to contain periods: ' + name, name.indexOf('.') === -1);

    if (!owner) {
      throw new _error.default('Container was not found when looking up a views template. ' + 'This is most likely due to manually instantiating an Ember.View. ' + 'See: http://git.io/EKPpnA');
    }

    return owner.lookup('template:' + underscored) || owner.lookup('template:' + name);
  }
});
enifed('@ember/-internals/views/lib/system/utils', ['exports', '@ember/-internals/owner', '@ember/-internals/utils'], function (exports, _owner, _utils) {
  'use strict';

  exports.elMatches = undefined;
  exports.isSimpleClick = isSimpleClick;
  exports.constructStyleDeprecationMessage = constructStyleDeprecationMessage;
  exports.getRootViews = getRootViews;
  exports.getViewId = getViewId;
  exports.getViewElement = getViewElement;
  exports.initViewElement = initViewElement;
  exports.setViewElement = setViewElement;
  exports.getChildViews = getChildViews;
  exports.initChildViews = initChildViews;
  exports.addChildView = addChildView;
  exports.collectChildViews = collectChildViews;
  exports.getViewBounds = getViewBounds;
  exports.getViewRange = getViewRange;
  exports.getViewClientRects = getViewClientRects;
  exports.getViewBoundingClientRect = getViewBoundingClientRect;
  exports.matches = matches;
  exports.contains = contains;


  /**
  @module ember
  */

  function isSimpleClick(event) {
    var modifier = event.shiftKey || event.metaKey || event.altKey || event.ctrlKey;
    var secondaryClick = event.which > 1; // IE9 may return undefined

    return !modifier && !secondaryClick;
  }
  /* globals Element */
  function constructStyleDeprecationMessage(affectedStyle) {
    return '' + 'Binding style attributes may introduce cross-site scripting vulnerabilities; ' + 'please ensure that values being bound are properly escaped. For more information, ' + 'including how to disable this warning, see ' + 'https://emberjs.com/deprecations/v1.x/#toc_binding-style-attributes. ' + 'Style affected: "' + affectedStyle + '"';
  }

  /**
    @private
    @method getRootViews
    @param {Object} owner
  */
  function getRootViews(owner) {
    var registry = owner.lookup('-view-registry:main');

    var rootViews = [];

    Object.keys(registry).forEach(function (id) {
      var view = registry[id];

      if (view.parentView === null) {
        rootViews.push(view);
      }
    });

    return rootViews;
  }

  /**
    @private
    @method getViewId
    @param {Ember.View} view
   */
  function getViewId(view) {
    if (view.tagName !== '' && view.elementId) {
      return view.elementId;
    } else {
      return (0, _utils.guidFor)(view);
    }
  }

  var VIEW_ELEMENT = (0, _utils.symbol)('VIEW_ELEMENT');

  /**
    @private
    @method getViewElement
    @param {Ember.View} view
   */
  function getViewElement(view) {
    return view[VIEW_ELEMENT];
  }

  function initViewElement(view) {
    view[VIEW_ELEMENT] = null;
  }

  function setViewElement(view, element) {
    return view[VIEW_ELEMENT] = element;
  }

  var CHILD_VIEW_IDS = new WeakMap();

  /**
    @private
    @method getChildViews
    @param {Ember.View} view
  */
  function getChildViews(view) {
    var owner = (0, _owner.getOwner)(view);
    var registry = owner.lookup('-view-registry:main');
    return collectChildViews(view, registry);
  }

  function initChildViews(view) {
    var childViews = new Set();
    CHILD_VIEW_IDS.set(view, childViews);
    return childViews;
  }

  function addChildView(parent, child) {
    var childViews = CHILD_VIEW_IDS.get(parent);
    if (childViews === undefined) {
      childViews = initChildViews(parent);
    }

    childViews.add(getViewId(child));
  }

  function collectChildViews(view, registry) {
    var views = [];
    var childViews = CHILD_VIEW_IDS.get(view);

    if (childViews !== undefined) {
      childViews.forEach(function (id) {
        var view = registry[id];
        if (view && !view.isDestroying && !view.isDestroyed) {
          views.push(view);
        }
      });
    }

    return views;
  }

  /**
    @private
    @method getViewBounds
    @param {Ember.View} view
  */
  function getViewBounds(view) {
    return view.renderer.getBounds(view);
  }

  /**
    @private
    @method getViewRange
    @param {Ember.View} view
  */
  function getViewRange(view) {
    var bounds = getViewBounds(view);

    var range = document.createRange();
    range.setStartBefore(bounds.firstNode);
    range.setEndAfter(bounds.lastNode);

    return range;
  }

  /**
    `getViewClientRects` provides information about the position of the border
    box edges of a view relative to the viewport.
  
    It is only intended to be used by development tools like the Ember Inspector
    and may not work on older browsers.
  
    @private
    @method getViewClientRects
    @param {Ember.View} view
  */
  function getViewClientRects(view) {
    var range = getViewRange(view);
    return range.getClientRects();
  }

  /**
    `getViewBoundingClientRect` provides information about the position of the
    bounding border box edges of a view relative to the viewport.
  
    It is only intended to be used by development tools like the Ember Inspector
    and may not work on older browsers.
  
    @private
    @method getViewBoundingClientRect
    @param {Ember.View} view
  */
  function getViewBoundingClientRect(view) {
    var range = getViewRange(view);
    return range.getBoundingClientRect();
  }

  /**
    Determines if the element matches the specified selector.
  
    @private
    @method matches
    @param {DOMElement} el
    @param {String} selector
  */
  var elMatches = exports.elMatches = typeof Element !== 'undefined' && (Element.prototype.matches || Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector);

  function matches(el, selector) {
    return elMatches.call(el, selector);
  }

  function contains(a, b) {
    if (a.contains !== undefined) {
      return a.contains(b);
    }
    while (b = b.parentNode) {
      if (b === a) {
        return true;
      }
    }
    return false;
  }
});
enifed('@ember/-internals/views/lib/utils/lookup-component', ['exports'], function (exports) {
  'use strict';

  exports.default = lookupComponent;


  function lookupModuleUnificationComponentPair(componentLookup, owner, name, options) {
    var localComponent = componentLookup.componentFor(name, owner, options);
    var localLayout = componentLookup.layoutFor(name, owner, options);

    var globalComponent = componentLookup.componentFor(name, owner);
    var globalLayout = componentLookup.layoutFor(name, owner);

    // TODO: we shouldn't have to recheck fallback, we should have a lookup that doesn't fallback
    if (localComponent !== undefined && globalComponent !== undefined && globalComponent.class === localComponent.class) {
      localComponent = undefined;
    }
    if (localLayout !== undefined && globalLayout !== undefined && localLayout.referrer.moduleName === globalLayout.referrer.moduleName) {
      localLayout = undefined;
    }

    if (localLayout !== undefined || localComponent !== undefined) {
      return { layout: localLayout, component: localComponent };
    }

    return { layout: globalLayout, component: globalComponent };
  }

  function lookupComponentPair(componentLookup, owner, name, options) {
    if (false /* EMBER_MODULE_UNIFICATION */) {
        return lookupModuleUnificationComponentPair(componentLookup, owner, name, options);
      }

    var component = componentLookup.componentFor(name, owner, options);
    var layout = componentLookup.layoutFor(name, owner, options);

    var result = { layout: layout, component: component };

    return result;
  }

  function lookupComponent(owner, name, options) {
    var componentLookup = owner.lookup('component-lookup:main');

    if (options && (options.source || options.namespace)) {
      var localResult = lookupComponentPair(componentLookup, owner, name, options);

      if (localResult.component || localResult.layout) {
        return localResult;
      }
    }

    return lookupComponentPair(componentLookup, owner, name);
  }
});
enifed('@ember/-internals/views/lib/views/core_view', ['exports', '@ember/-internals/runtime', '@ember/-internals/views/lib/system/utils', '@ember/-internals/views/lib/views/states'], function (exports, _runtime, _utils, _states) {
  'use strict';

  /**
    `Ember.CoreView` is an abstract class that exists to give view-like behavior
    to both Ember's main view class `Component` and other classes that don't need
    the full functionality of `Component`.
  
    Unless you have specific needs for `CoreView`, you will use `Component`
    in your applications.
  
    @class CoreView
    @namespace Ember
    @extends EmberObject
    @deprecated Use `Component` instead.
    @uses Evented
    @uses Ember.ActionHandler
    @private
  */
  var CoreView = _runtime.FrameworkObject.extend(_runtime.Evented, _runtime.ActionHandler, {
    isView: true,

    _states: (0, _states.cloneStates)(_states.states),

    init: function () {
      this._super.apply(this, arguments);
      this._state = 'preRender';
      this._currentState = this._states.preRender;

      (0, _utils.initViewElement)(this);

      if (!this.renderer) {
        throw new Error('Cannot instantiate a component without a renderer. Please ensure that you are creating ' + this + ' with a proper container/registry.');
      }
    },

    /**
      If the view is currently inserted into the DOM of a parent view, this
      property will point to the parent of the view.
       @property parentView
      @type Ember.View
      @default null
      @private
    */
    parentView: null,

    instrumentDetails: function (hash) {
      hash.object = this.toString();
      hash.containerKey = this._debugContainerKey;
      hash.view = this;
      return hash;
    },

    /**
      Override the default event firing from `Evented` to
      also call methods with the given name.
       @method trigger
      @param name {String}
      @private
    */
    trigger: function (name) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      this._super.apply(this, arguments);
      var method = this[name];
      if (typeof method === 'function') {
        return method.apply(this, args);
      }
    },
    has: function (name) {
      return typeof this[name] === 'function' || this._super(name);
    }
  });

  CoreView.reopenClass({
    isViewFactory: true
  });

  exports.default = CoreView;
});
enifed('@ember/-internals/views/lib/views/states', ['exports', '@ember/polyfills', '@ember/-internals/views/lib/views/states/default', '@ember/-internals/views/lib/views/states/pre_render', '@ember/-internals/views/lib/views/states/has_element', '@ember/-internals/views/lib/views/states/in_dom', '@ember/-internals/views/lib/views/states/destroying'], function (exports, _polyfills, _default2, _pre_render, _has_element, _in_dom, _destroying) {
  'use strict';

  exports.states = undefined;
  exports.cloneStates = cloneStates;
  function cloneStates(from) {
    var into = {};

    into._default = {};
    into.preRender = Object.create(into._default);
    into.destroying = Object.create(into._default);
    into.hasElement = Object.create(into._default);
    into.inDOM = Object.create(into.hasElement);

    for (var stateName in from) {
      if (!from.hasOwnProperty(stateName)) {
        continue;
      }
      (0, _polyfills.assign)(into[stateName], from[stateName]);
    }

    return into;
  }

  /*
    Describe how the specified actions should behave in the various
    states that a view can exist in. Possible states:
  
    * preRender: when a view is first instantiated, and after its
      element was destroyed, it is in the preRender state
    * hasElement: the DOM representation of the view is created,
      and is ready to be inserted
    * inDOM: once a view has been inserted into the DOM it is in
      the inDOM state. A view spends the vast majority of its
      existence in this state.
    * destroyed: once a view has been destroyed (using the destroy
      method), it is in this state. No further actions can be invoked
      on a destroyed view.
  */
  var states = exports.states = {
    _default: _default2.default,
    preRender: _pre_render.default,
    inDOM: _in_dom.default,
    hasElement: _has_element.default,
    destroying: _destroying.default
  };
});
enifed("@ember/-internals/views/lib/views/states/default", ["exports", "@ember/error"], function (exports, _error) {
  "use strict";

  exports.default = {
    // appendChild is only legal while rendering the buffer.
    appendChild: function () {
      throw new _error.default("You can't use appendChild outside of the rendering process");
    },

    // Handle events from `Ember.EventDispatcher`
    handleEvent: function () {
      return true; // continue event propagation
    },
    rerender: function () {},
    destroy: function () {}
  };
});
enifed('@ember/-internals/views/lib/views/states/destroying', ['exports', '@ember/polyfills', '@ember/error', '@ember/-internals/views/lib/views/states/default'], function (exports, _polyfills, _error, _default2) {
  'use strict';

  var destroying = Object.create(_default2.default);

  (0, _polyfills.assign)(destroying, {
    appendChild: function () {
      throw new _error.default("You can't call appendChild on a view being destroyed");
    },
    rerender: function () {
      throw new _error.default("You can't call rerender on a view being destroyed");
    }
  });

  exports.default = destroying;
});
enifed('@ember/-internals/views/lib/views/states/has_element', ['exports', '@ember/polyfills', '@ember/-internals/views/lib/views/states/default', '@ember/runloop', '@ember/instrumentation'], function (exports, _polyfills, _default2, _runloop, _instrumentation) {
  'use strict';

  var hasElement = Object.create(_default2.default);

  (0, _polyfills.assign)(hasElement, {
    rerender: function (view) {
      view.renderer.rerender(view);
    },
    destroy: function (view) {
      view.renderer.remove(view);
    },

    // Handle events from `Ember.EventDispatcher`
    handleEvent: function (view, eventName, event) {
      if (view.has(eventName)) {
        // Handler should be able to re-dispatch events, so we don't
        // preventDefault or stopPropagation.
        return (0, _instrumentation.flaggedInstrument)('interaction.' + eventName, { event: event, view: view }, function () {
          return (0, _runloop.join)(view, view.trigger, eventName, event);
        });
      } else {
        return true; // continue event propagation
      }
    }
  });

  exports.default = hasElement;
});
enifed('@ember/-internals/views/lib/views/states/in_dom', ['exports', '@ember/polyfills', '@ember/-internals/metal', '@ember/error', '@ember/-internals/views/lib/views/states/has_element'], function (exports, _polyfills, _metal, _error, _has_element) {
  'use strict';

  var inDOM = Object.create(_has_element.default);

  (0, _polyfills.assign)(inDOM, {
    enter: function (view) {
      // Register the view for event handling. This hash is used by
      // Ember.EventDispatcher to dispatch incoming events.
      view.renderer.register(view);

      if (true /* DEBUG */) {
          (0, _metal.addObserver)(view, 'elementId', function () {
            throw new _error.default("Changing a view's elementId after creation is not allowed");
          });
        }
    },
    exit: function (view) {
      view.renderer.unregister(view);
    }
  });

  exports.default = inDOM;
});
enifed('@ember/-internals/views/lib/views/states/pre_render', ['exports', '@ember/-internals/views/lib/views/states/default'], function (exports, _default2) {
  'use strict';

  exports.default = Object.create(_default2.default);
});
enifed('@ember/application/globals-resolver', ['exports', 'ember-babel', '@ember/-internals/utils', '@ember/-internals/metal', '@ember/debug', '@ember/string', '@ember/-internals/runtime', '@ember/application/lib/validate-type', '@ember/-internals/glimmer'], function (exports, _emberBabel, _utils, _metal, _debug, _string, _runtime, _validateType, _glimmer) {
  'use strict';

  /**
    The DefaultResolver defines the default lookup rules to resolve
    container lookups before consulting the container for registered
    items:
  
    * templates are looked up on `Ember.TEMPLATES`
    * other names are looked up on the application after converting
      the name. For example, `controller:post` looks up
      `App.PostController` by default.
    * there are some nuances (see examples below)
  
    ### How Resolving Works
  
    The container calls this object's `resolve` method with the
    `fullName` argument.
  
    It first parses the fullName into an object using `parseName`.
  
    Then it checks for the presence of a type-specific instance
    method of the form `resolve[Type]` and calls it if it exists.
    For example if it was resolving 'template:post', it would call
    the `resolveTemplate` method.
  
    Its last resort is to call the `resolveOther` method.
  
    The methods of this object are designed to be easy to override
    in a subclass. For example, you could enhance how a template
    is resolved like so:
  
    ```app/app.js
    import Application from '@ember/application';
    import GlobalsResolver from '@ember/application/globals-resolver';
  
    App = Application.create({
      Resolver: GlobalsResolver.extend({
        resolveTemplate(parsedName) {
          let resolvedTemplate = this._super(parsedName);
          if (resolvedTemplate) { return resolvedTemplate; }
  
          return Ember.TEMPLATES['not_found'];
        }
      })
    });
    ```
  
    Some examples of how names are resolved:
  
    ```text
    'template:post'           //=> Ember.TEMPLATES['post']
    'template:posts/byline'   //=> Ember.TEMPLATES['posts/byline']
    'template:posts.byline'   //=> Ember.TEMPLATES['posts/byline']
    'template:blogPost'       //=> Ember.TEMPLATES['blog-post']
    'controller:post'         //=> App.PostController
    'controller:posts.index'  //=> App.PostsIndexController
    'controller:blog/post'    //=> Blog.PostController
    'controller:basic'        //=> Controller
    'route:post'              //=> App.PostRoute
    'route:posts.index'       //=> App.PostsIndexRoute
    'route:blog/post'         //=> Blog.PostRoute
    'route:basic'             //=> Route
    'foo:post'                //=> App.PostFoo
    'model:post'              //=> App.Post
    ```
  
    @class GlobalsResolver
    @extends EmberObject
    @public
  */

  var DefaultResolver = function (_EmberObject) {
    (0, _emberBabel.inherits)(DefaultResolver, _EmberObject);

    function DefaultResolver() {
      (0, _emberBabel.classCallCheck)(this, DefaultResolver);

      return (0, _emberBabel.possibleConstructorReturn)(this, _EmberObject.apply(this, arguments));
    }

    DefaultResolver.create = function create(props) {
      // DO NOT REMOVE even though this doesn't do anything
      // This is required for a FireFox 60+ JIT bug with our tests.
      // without it, create(props) in our tests would lose props on a deopt.
      return _EmberObject.create.call(this, props);
    };

    /**
      This will be set to the Application instance when it is
      created.
       @property namespace
      @public
    */

    DefaultResolver.prototype.init = function init() {
      this._parseNameCache = (0, _utils.dictionary)(null);
    };

    DefaultResolver.prototype.normalize = function normalize(fullName) {
      var _fullName$split = fullName.split(':'),
          type = _fullName$split[0],
          name = _fullName$split[1];

      true && !(fullName.split(':').length === 2) && (0, _debug.assert)('Tried to normalize a container name without a colon (:) in it. ' + 'You probably tried to lookup a name that did not contain a type, ' + 'a colon, and a name. A proper lookup name would be `view:post`.', fullName.split(':').length === 2);

      if (type !== 'template') {
        var result = name.replace(/(\.|_|-)./g, function (m) {
          return m.charAt(1).toUpperCase();
        });

        return type + ':' + result;
      } else {
        return fullName;
      }
    };

    /**
      This method is called via the container's resolver method.
      It parses the provided `fullName` and then looks up and
      returns the appropriate template or class.
       @method resolve
      @param {String} fullName the lookup string
      @return {Object} the resolved factory
      @public
    */

    DefaultResolver.prototype.resolve = function resolve(fullName) {
      var parsedName = this.parseName(fullName);
      var resolveMethodName = parsedName.resolveMethodName;
      var resolved = void 0;

      if (this[resolveMethodName]) {
        resolved = this[resolveMethodName](parsedName);
      }

      resolved = resolved || this.resolveOther(parsedName);

      if (true /* DEBUG */) {
          if (parsedName.root && parsedName.root.LOG_RESOLVER) {
            this._logLookup(resolved, parsedName);
          }
        }

      if (resolved) {
        (0, _validateType.default)(resolved, parsedName);
      }

      return resolved;
    };

    /**
      Convert the string name of the form 'type:name' to
      a Javascript object with the parsed aspects of the name
      broken out.
       @param {String} fullName the lookup string
      @method parseName
      @protected
    */

    DefaultResolver.prototype.parseName = function parseName(fullName) {
      return this._parseNameCache[fullName] || (this._parseNameCache[fullName] = this._parseName(fullName));
    };

    DefaultResolver.prototype._parseName = function _parseName(fullName) {
      var _fullName$split2 = fullName.split(':'),
          type = _fullName$split2[0],
          fullNameWithoutType = _fullName$split2[1];

      var name = fullNameWithoutType;
      var namespace = (0, _metal.get)(this, 'namespace');
      var root = namespace;
      var lastSlashIndex = name.lastIndexOf('/');
      var dirname = lastSlashIndex !== -1 ? name.slice(0, lastSlashIndex) : null;

      if (type !== 'template' && lastSlashIndex !== -1) {
        var parts = name.split('/');
        name = parts[parts.length - 1];
        var namespaceName = (0, _string.capitalize)(parts.slice(0, -1).join('.'));
        root = (0, _metal.findNamespace)(namespaceName);

        true && !root && (0, _debug.assert)('You are looking for a ' + name + ' ' + type + ' in the ' + namespaceName + ' namespace, but the namespace could not be found', root);
      }

      var resolveMethodName = fullNameWithoutType === 'main' ? 'Main' : (0, _string.classify)(type);

      if (!(name && type)) {
        throw new TypeError('Invalid fullName: `' + fullName + '`, must be of the form `type:name` ');
      }

      return {
        fullName: fullName,
        type: type,
        fullNameWithoutType: fullNameWithoutType,
        dirname: dirname,
        name: name,
        root: root,
        resolveMethodName: 'resolve' + resolveMethodName
      };
    };

    /**
      Returns a human-readable description for a fullName. Used by the
      Application namespace in assertions to describe the
      precise name of the class that Ember is looking for, rather than
      container keys.
       @param {String} fullName the lookup string
      @method lookupDescription
      @protected
    */

    DefaultResolver.prototype.lookupDescription = function lookupDescription(fullName) {
      var parsedName = this.parseName(fullName);
      var description = void 0;

      if (parsedName.type === 'template') {
        return 'template at ' + parsedName.fullNameWithoutType.replace(/\./g, '/');
      }

      description = parsedName.root + '.' + (0, _string.classify)(parsedName.name).replace(/\./g, '');

      if (parsedName.type !== 'model') {
        description += (0, _string.classify)(parsedName.type);
      }

      return description;
    };

    DefaultResolver.prototype.makeToString = function makeToString(factory) {
      return factory.toString();
    };

    /**
      Given a parseName object (output from `parseName`), apply
      the conventions expected by `Router`
       @param {Object} parsedName a parseName object with the parsed
        fullName lookup string
      @method useRouterNaming
      @protected
    */

    DefaultResolver.prototype.useRouterNaming = function useRouterNaming(parsedName) {
      if (parsedName.name === 'basic') {
        parsedName.name = '';
      } else {
        parsedName.name = parsedName.name.replace(/\./g, '_');
      }
    };
    /**
      Look up the template in Ember.TEMPLATES
       @param {Object} parsedName a parseName object with the parsed
        fullName lookup string
      @method resolveTemplate
      @protected
    */

    DefaultResolver.prototype.resolveTemplate = function resolveTemplate(parsedName) {
      var templateName = parsedName.fullNameWithoutType.replace(/\./g, '/');

      return (0, _glimmer.getTemplate)(templateName) || (0, _glimmer.getTemplate)((0, _string.decamelize)(templateName));
    };

    /**
      Lookup the view using `resolveOther`
       @param {Object} parsedName a parseName object with the parsed
        fullName lookup string
      @method resolveView
      @protected
    */

    DefaultResolver.prototype.resolveView = function resolveView(parsedName) {
      this.useRouterNaming(parsedName);
      return this.resolveOther(parsedName);
    };

    /**
      Lookup the controller using `resolveOther`
       @param {Object} parsedName a parseName object with the parsed
        fullName lookup string
      @method resolveController
      @protected
    */

    DefaultResolver.prototype.resolveController = function resolveController(parsedName) {
      this.useRouterNaming(parsedName);
      return this.resolveOther(parsedName);
    };
    /**
      Lookup the route using `resolveOther`
       @param {Object} parsedName a parseName object with the parsed
        fullName lookup string
      @method resolveRoute
      @protected
    */

    DefaultResolver.prototype.resolveRoute = function resolveRoute(parsedName) {
      this.useRouterNaming(parsedName);
      return this.resolveOther(parsedName);
    };

    /**
      Lookup the model on the Application namespace
       @param {Object} parsedName a parseName object with the parsed
        fullName lookup string
      @method resolveModel
      @protected
    */

    DefaultResolver.prototype.resolveModel = function resolveModel(parsedName) {
      var className = (0, _string.classify)(parsedName.name);
      var factory = (0, _metal.get)(parsedName.root, className);

      return factory;
    };
    /**
      Look up the specified object (from parsedName) on the appropriate
      namespace (usually on the Application)
       @param {Object} parsedName a parseName object with the parsed
        fullName lookup string
      @method resolveHelper
      @protected
    */

    DefaultResolver.prototype.resolveHelper = function resolveHelper(parsedName) {
      return this.resolveOther(parsedName);
    };
    /**
      Look up the specified object (from parsedName) on the appropriate
      namespace (usually on the Application)
       @param {Object} parsedName a parseName object with the parsed
        fullName lookup string
      @method resolveOther
      @protected
    */

    DefaultResolver.prototype.resolveOther = function resolveOther(parsedName) {
      var className = (0, _string.classify)(parsedName.name) + (0, _string.classify)(parsedName.type);
      var factory = (0, _metal.get)(parsedName.root, className);
      return factory;
    };

    DefaultResolver.prototype.resolveMain = function resolveMain(parsedName) {
      var className = (0, _string.classify)(parsedName.type);
      return (0, _metal.get)(parsedName.root, className);
    };

    /**
      Used to iterate all items of a given type.
       @method knownForType
      @param {String} type the type to search for
      @private
    */

    DefaultResolver.prototype.knownForType = function knownForType(type) {
      var namespace = (0, _metal.get)(this, 'namespace');
      var suffix = (0, _string.classify)(type);
      var typeRegexp = new RegExp(suffix + '$');

      var known = (0, _utils.dictionary)(null);
      var knownKeys = Object.keys(namespace);
      for (var index = 0; index < knownKeys.length; index++) {
        var name = knownKeys[index];

        if (typeRegexp.test(name)) {
          var containerName = this.translateToContainerFullname(type, name);

          known[containerName] = true;
        }
      }

      return known;
    };

    /**
      Converts provided name from the backing namespace into a container lookup name.
       Examples:
       * App.FooBarHelper -> helper:foo-bar
      * App.THelper -> helper:t
       @method translateToContainerFullname
      @param {String} type
      @param {String} name
      @private
    */

    DefaultResolver.prototype.translateToContainerFullname = function translateToContainerFullname(type, name) {
      var suffix = (0, _string.classify)(type);
      var namePrefix = name.slice(0, suffix.length * -1);
      var dasherizedName = (0, _string.dasherize)(namePrefix);

      return type + ':' + dasherizedName;
    };

    return DefaultResolver;
  }(_runtime.Object);
  /**
  @module @ember/application
  */

  exports.default = DefaultResolver;


  if (true /* DEBUG */) {
      /**
          @method _logLookup
          @param {Boolean} found
          @param {Object} parsedName
          @private
        */
      DefaultResolver.prototype._logLookup = function (found, parsedName) {
        var symbol = found ? '[✓]' : '[ ]';

        var padding = void 0;
        if (parsedName.fullName.length > 60) {
          padding = '.';
        } else {
          padding = new Array(60 - parsedName.fullName.length).join('.');
        }

        (0, _debug.info)(symbol, parsedName.fullName, padding, this.lookupDescription(parsedName.fullName));
      };
    }
});
enifed('@ember/application/index', ['exports', '@ember/-internals/owner', '@ember/application/lib/lazy_load', '@ember/application/lib/application'], function (exports, _owner, _lazy_load, _application) {
  'use strict';

  Object.defineProperty(exports, 'getOwner', {
    enumerable: true,
    get: function () {
      return _owner.getOwner;
    }
  });
  Object.defineProperty(exports, 'setOwner', {
    enumerable: true,
    get: function () {
      return _owner.setOwner;
    }
  });
  Object.defineProperty(exports, 'onLoad', {
    enumerable: true,
    get: function () {
      return _lazy_load.onLoad;
    }
  });
  Object.defineProperty(exports, 'runLoadHooks', {
    enumerable: true,
    get: function () {
      return _lazy_load.runLoadHooks;
    }
  });
  Object.defineProperty(exports, '_loaded', {
    enumerable: true,
    get: function () {
      return _lazy_load._loaded;
    }
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _application.default;
    }
  });
});
enifed('@ember/application/instance', ['exports', 'ember-babel', '@ember/polyfills', '@ember/-internals/metal', '@ember/-internals/browser-environment', '@ember/-internals/views', '@ember/engine/instance', '@ember/-internals/glimmer'], function (exports, _emberBabel, _polyfills, _metal, _browserEnvironment, _views, _instance, _glimmer) {
  'use strict';

  /**
    The `ApplicationInstance` encapsulates all of the stateful aspects of a
    running `Application`.
  
    At a high-level, we break application boot into two distinct phases:
  
    * Definition time, where all of the classes, templates, and other
      dependencies are loaded (typically in the browser).
    * Run time, where we begin executing the application once everything
      has loaded.
  
    Definition time can be expensive and only needs to happen once since it is
    an idempotent operation. For example, between test runs and FastBoot
    requests, the application stays the same. It is only the state that we want
    to reset.
  
    That state is what the `ApplicationInstance` manages: it is responsible for
    creating the container that contains all application state, and disposing of
    it once the particular test run or FastBoot request has finished.
  
    @public
    @class ApplicationInstance
    @extends EngineInstance
  */

  /**
  @module @ember/application
  */

  var ApplicationInstance = _instance.default.extend({
    /**
      The `Application` for which this is an instance.
       @property {Application} application
      @private
    */
    application: null,

    /**
      The DOM events for which the event dispatcher should listen.
       By default, the application's `Ember.EventDispatcher` listens
      for a set of standard DOM events, such as `mousedown` and
      `keyup`, and delegates them to your application's `Ember.View`
      instances.
       @private
      @property {Object} customEvents
    */
    customEvents: null,

    /**
      The root DOM element of the Application as an element or a
      [jQuery-compatible selector
      string](http://api.jquery.com/category/selectors/).
       @private
      @property {String|DOMElement} rootElement
    */
    rootElement: null,

    init: function () {
      this._super.apply(this, arguments);

      this.application._watchInstance(this);

      // Register this instance in the per-instance registry.
      //
      // Why do we need to register the instance in the first place?
      // Because we need a good way for the root route (a.k.a ApplicationRoute)
      // to notify us when it has created the root-most view. That view is then
      // appended to the rootElement, in the case of apps, to the fixture harness
      // in tests, or rendered to a string in the case of FastBoot.
      this.register('-application-instance:main', this, { instantiate: false });
    },

    /**
      Overrides the base `EngineInstance._bootSync` method with concerns relevant
      to booting application (instead of engine) instances.
       This method should only contain synchronous boot concerns. Asynchronous
      boot concerns should eventually be moved to the `boot` method, which
      returns a promise.
       Until all boot code has been made asynchronous, we need to continue to
      expose this method for use *internally* in places where we need to boot an
      instance synchronously.
       @private
    */
    _bootSync: function (options) {
      if (this._booted) {
        return this;
      }

      options = new BootOptions(options);

      this.setupRegistry(options);

      if (options.rootElement) {
        this.rootElement = options.rootElement;
      } else {
        this.rootElement = this.application.rootElement;
      }

      if (options.location) {
        var router = (0, _metal.get)(this, 'router');
        (0, _metal.set)(router, 'location', options.location);
      }

      this.application.runInstanceInitializers(this);

      if (options.isInteractive) {
        this.setupEventDispatcher();
      }

      this._booted = true;

      return this;
    },
    setupRegistry: function (options) {
      this.constructor.setupRegistry(this.__registry__, options);
    },

    router: (0, _metal.computed)(function () {
      return this.lookup('router:main');
    }).readOnly(),

    /**
      This hook is called by the root-most Route (a.k.a. the ApplicationRoute)
      when it has finished creating the root View. By default, we simply take the
      view and append it to the `rootElement` specified on the Application.
       In cases like FastBoot and testing, we can override this hook and implement
      custom behavior, such as serializing to a string and sending over an HTTP
      socket rather than appending to DOM.
       @param view {Ember.View} the root-most view
      @private
    */
    didCreateRootView: function (view) {
      view.appendTo(this.rootElement);
    },

    /**
      Tells the router to start routing. The router will ask the location for the
      current URL of the page to determine the initial URL to start routing to.
      To start the app at a specific URL, call `handleURL` instead.
       @private
    */
    startRouting: function () {
      var router = (0, _metal.get)(this, 'router');
      router.startRouting();
      this._didSetupRouter = true;
    },

    /**
      @private
       Sets up the router, initializing the child router and configuring the
      location before routing begins.
       Because setup should only occur once, multiple calls to `setupRouter`
      beyond the first call have no effect.
    */
    setupRouter: function () {
      if (this._didSetupRouter) {
        return;
      }
      this._didSetupRouter = true;

      var router = (0, _metal.get)(this, 'router');
      router.setupRouter();
    },

    /**
      Directs the router to route to a particular URL. This is useful in tests,
      for example, to tell the app to start at a particular URL.
       @param url {String} the URL the router should route to
      @private
    */
    handleURL: function (url) {
      var router = (0, _metal.get)(this, 'router');

      this.setupRouter();
      return router.handleURL(url);
    },

    /**
      @private
    */
    setupEventDispatcher: function () {
      var dispatcher = this.lookup('event_dispatcher:main');
      var applicationCustomEvents = (0, _metal.get)(this.application, 'customEvents');
      var instanceCustomEvents = (0, _metal.get)(this, 'customEvents');

      var customEvents = (0, _polyfills.assign)({}, applicationCustomEvents, instanceCustomEvents);
      dispatcher.setup(customEvents, this.rootElement);

      return dispatcher;
    },

    /**
      Returns the current URL of the app instance. This is useful when your
      app does not update the browsers URL bar (i.e. it uses the `'none'`
      location adapter).
       @public
      @return {String} the current URL
    */
    getURL: function () {
      return (0, _metal.get)(this, 'router.url');
    },

    // `instance.visit(url)` should eventually replace `instance.handleURL()`;
    // the test helpers can probably be switched to use this implementation too

    /**
      Navigate the instance to a particular URL. This is useful in tests, for
      example, or to tell the app to start at a particular URL. This method
      returns a promise that resolves with the app instance when the transition
      is complete, or rejects if the transion was aborted due to an error.
       @public
      @param url {String} the destination URL
      @return {Promise<ApplicationInstance>}
    */
    visit: function (url) {
      var _this = this;

      this.setupRouter();

      var bootOptions = this.__container__.lookup('-environment:main');

      var router = (0, _metal.get)(this, 'router');

      var handleTransitionResolve = function () {
        if (!bootOptions.options.shouldRender) {
          // No rendering is needed, and routing has completed, simply return.
          return _this;
        } else {
          // Ensure that the visit promise resolves when all rendering has completed
          return (0, _glimmer.renderSettled)().then(function () {
            return _this;
          });
        }
      };

      var handleTransitionReject = function (error) {
        if (error.error) {
          throw error.error;
        } else if (error.name === 'TransitionAborted' && router._routerMicrolib.activeTransition) {
          return router._routerMicrolib.activeTransition.then(handleTransitionResolve, handleTransitionReject);
        } else if (error.name === 'TransitionAborted') {
          throw new Error(error.message);
        } else {
          throw error;
        }
      };

      var location = (0, _metal.get)(router, 'location');

      // Keeps the location adapter's internal URL in-sync
      location.setURL(url);

      // getURL returns the set url with the rootURL stripped off
      return router.handleURL(location.getURL()).then(handleTransitionResolve, handleTransitionReject);
    },
    willDestroy: function () {
      this._super.apply(this, arguments);
      this.application._unwatchInstance(this);
    }
  });

  ApplicationInstance.reopenClass({
    /**
     @private
     @method setupRegistry
     @param {Registry} registry
     @param {BootOptions} options
    */
    setupRegistry: function (registry) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      if (!options.toEnvironment) {
        options = new BootOptions(options);
      }

      registry.register('-environment:main', options.toEnvironment(), {
        instantiate: false
      });
      registry.register('service:-document', options.document, {
        instantiate: false
      });

      this._super(registry, options);
    }
  });

  /**
    A list of boot-time configuration options for customizing the behavior of
    an `ApplicationInstance`.
  
    This is an interface class that exists purely to document the available
    options; you do not need to construct it manually. Simply pass a regular
    JavaScript object containing the desired options into methods that require
    one of these options object:
  
    ```javascript
    MyApp.visit("/", { location: "none", rootElement: "#container" });
    ```
  
    Not all combinations of the supported options are valid. See the documentation
    on `Application#visit` for the supported configurations.
  
    Internal, experimental or otherwise unstable flags are marked as private.
  
    @class BootOptions
    @namespace ApplicationInstance
    @public
  */

  var BootOptions = function () {
    function BootOptions() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      (0, _emberBabel.classCallCheck)(this, BootOptions);

      /**
        Provide a specific instance of jQuery. This is useful in conjunction with
        the `document` option, as it allows you to use a copy of `jQuery` that is
        appropriately bound to the foreign `document` (e.g. a jsdom).
         This is highly experimental and support very incomplete at the moment.
         @property jQuery
        @type Object
        @default auto-detected
        @private
      */
      this.jQuery = _views.jQuery; // This default is overridable below

      /**
        Interactive mode: whether we need to set up event delegation and invoke
        lifecycle callbacks on Components.
         @property isInteractive
        @type boolean
        @default auto-detected
        @private
      */
      this.isInteractive = _browserEnvironment.hasDOM; // This default is overridable below

      /**
        @property _renderMode
        @type string
        @default false
        @private
      */
      this._renderMode = options._renderMode;

      /**
        Run in a full browser environment.
         When this flag is set to `true`, it will disable most browser-specific
        and interactive features. Specifically:
         * It does not use `jQuery` to append the root view; the `rootElement`
          (either specified as a subsequent option or on the application itself)
          must already be an `Element` in the given `document` (as opposed to a
          string selector).
         * It does not set up an `EventDispatcher`.
         * It does not run any `Component` lifecycle hooks (such as `didInsertElement`).
         * It sets the `location` option to `"none"`. (If you would like to use
          the location adapter specified in the app's router instead, you can also
          specify `{ location: null }` to specifically opt-out.)
         @property isBrowser
        @type boolean
        @default auto-detected
        @public
      */
      if (options.isBrowser !== undefined) {
        this.isBrowser = !!options.isBrowser;
      } else {
        this.isBrowser = _browserEnvironment.hasDOM;
      }

      if (!this.isBrowser) {
        this.jQuery = null;
        this.isInteractive = false;
        this.location = 'none';
      }

      /**
        Disable rendering completely.
         When this flag is set to `true`, it will disable the entire rendering
        pipeline. Essentially, this puts the app into "routing-only" mode. No
        templates will be rendered, and no Components will be created.
         @property shouldRender
        @type boolean
        @default true
        @public
      */
      if (options.shouldRender !== undefined) {
        this.shouldRender = !!options.shouldRender;
      } else {
        this.shouldRender = true;
      }

      if (!this.shouldRender) {
        this.jQuery = null;
        this.isInteractive = false;
      }

      /**
        If present, render into the given `Document` object instead of the
        global `window.document` object.
         In practice, this is only useful in non-browser environment or in
        non-interactive mode, because Ember's `jQuery` dependency is
        implicitly bound to the current document, causing event delegation
        to not work properly when the app is rendered into a foreign
        document object (such as an iframe's `contentDocument`).
         In non-browser mode, this could be a "`Document`-like" object as
        Ember only interact with a small subset of the DOM API in non-
        interactive mode. While the exact requirements have not yet been
        formalized, the `SimpleDOM` library's implementation is known to
        work.
         @property document
        @type Document
        @default the global `document` object
        @public
      */
      if (options.document) {
        this.document = options.document;
      } else {
        this.document = typeof document !== 'undefined' ? document : null;
      }

      /**
        If present, overrides the application's `rootElement` property on
        the instance. This is useful for testing environment, where you
        might want to append the root view to a fixture area.
         In non-browser mode, because Ember does not have access to jQuery,
        this options must be specified as a DOM `Element` object instead of
        a selector string.
         See the documentation on `Application`'s `rootElement` for
        details.
         @property rootElement
        @type String|Element
        @default null
        @public
       */
      if (options.rootElement) {
        this.rootElement = options.rootElement;
      }

      // Set these options last to give the user a chance to override the
      // defaults from the "combo" options like `isBrowser` (although in
      // practice, the resulting combination is probably invalid)

      /**
        If present, overrides the router's `location` property with this
        value. This is useful for environments where trying to modify the
        URL would be inappropriate.
         @property location
        @type string
        @default null
        @public
      */
      if (options.location !== undefined) {
        this.location = options.location;
      }

      if (options.jQuery !== undefined) {
        this.jQuery = options.jQuery;
      }

      if (options.isInteractive !== undefined) {
        this.isInteractive = !!options.isInteractive;
      }
    }

    BootOptions.prototype.toEnvironment = function toEnvironment() {
      // Do we really want to assign all of this!?
      var env = (0, _polyfills.assign)({}, _browserEnvironment);
      // For compatibility with existing code
      env.hasDOM = this.isBrowser;
      env.isInteractive = this.isInteractive;
      env._renderMode = this._renderMode;
      env.options = this;
      return env;
    };

    return BootOptions;
  }();

  exports.default = ApplicationInstance;
});
enifed('@ember/application/lib/application', ['exports', 'ember-babel', '@ember/-internals/utils', '@ember/-internals/environment', '@ember/-internals/browser-environment', '@ember/debug', '@ember/runloop', '@ember/-internals/metal', '@ember/application/lib/lazy_load', '@ember/-internals/runtime', '@ember/-internals/views', '@ember/-internals/routing', '@ember/application/instance', '@ember/engine', '@ember/-internals/container', '@ember/-internals/glimmer'], function (exports, _emberBabel, _utils, _environment, _browserEnvironment, _debug, _runloop, _metal, _lazy_load, _runtime, _views, _routing, _instance, _engine, _container, _glimmer) {
  'use strict';

  var _templateObject = (0, _emberBabel.taggedTemplateLiteralLoose)(['-bucket-cache:main'], ['-bucket-cache:main']);

  /**
  @module @ember/application
  */

  var librariesRegistered = false;

  /**
    An instance of `Application` is the starting point for every Ember
    application. It helps to instantiate, initialize and coordinate the many
    objects that make up your app.
  
    Each Ember app has one and only one `Application` object. In fact, the
    very first thing you should do in your application is create the instance:
  
    ```javascript
    import Application from '@ember/application';
  
    window.App = Application.create();
    ```
  
    Typically, the application object is the only global variable. All other
    classes in your app should be properties on the `Application` instance,
    which highlights its first role: a global namespace.
  
    For example, if you define a view class, it might look like this:
  
    ```javascript
    import Application from '@ember/application';
  
    App.MyView = Ember.View.extend();
    ```
  
    By default, calling `Application.create()` will automatically initialize
    your application by calling the `Application.initialize()` method. If
    you need to delay initialization, you can call your app's `deferReadiness()`
    method. When you are ready for your app to be initialized, call its
    `advanceReadiness()` method.
  
    You can define a `ready` method on the `Application` instance, which
    will be run by Ember when the application is initialized.
  
    Because `Application` inherits from `Ember.Namespace`, any classes
    you create will have useful string representations when calling `toString()`.
    See the `Ember.Namespace` documentation for more information.
  
    While you can think of your `Application` as a container that holds the
    other classes in your application, there are several other responsibilities
    going on under-the-hood that you may want to understand.
  
    ### Event Delegation
  
    Ember uses a technique called _event delegation_. This allows the framework
    to set up a global, shared event listener instead of requiring each view to
    do it manually. For example, instead of each view registering its own
    `mousedown` listener on its associated element, Ember sets up a `mousedown`
    listener on the `body`.
  
    If a `mousedown` event occurs, Ember will look at the target of the event and
    start walking up the DOM node tree, finding corresponding views and invoking
    their `mouseDown` method as it goes.
  
    `Application` has a number of default events that it listens for, as
    well as a mapping from lowercase events to camel-cased view method names. For
    example, the `keypress` event causes the `keyPress` method on the view to be
    called, the `dblclick` event causes `doubleClick` to be called, and so on.
  
    If there is a bubbling browser event that Ember does not listen for by
    default, you can specify custom events and their corresponding view method
    names by setting the application's `customEvents` property:
  
    ```javascript
    import Application from '@ember/application';
  
    let App = Application.create({
      customEvents: {
        // add support for the paste event
        paste: 'paste'
      }
    });
    ```
  
    To prevent Ember from setting up a listener for a default event,
    specify the event name with a `null` value in the `customEvents`
    property:
  
    ```javascript
    import Application from '@ember/application';
  
    let App = Application.create({
      customEvents: {
        // prevent listeners for mouseenter/mouseleave events
        mouseenter: null,
        mouseleave: null
      }
    });
    ```
  
    By default, the application sets up these event listeners on the document
    body. However, in cases where you are embedding an Ember application inside
    an existing page, you may want it to set up the listeners on an element
    inside the body.
  
    For example, if only events inside a DOM element with the ID of `ember-app`
    should be delegated, set your application's `rootElement` property:
  
    ```javascript
    import Application from '@ember/application';
  
    let App = Application.create({
      rootElement: '#ember-app'
    });
    ```
  
    The `rootElement` can be either a DOM element or a jQuery-compatible selector
    string. Note that *views appended to the DOM outside the root element will
    not receive events.* If you specify a custom root element, make sure you only
    append views inside it!
  
    To learn more about the events Ember components use, see
  
    [components/handling-events](https://guides.emberjs.com/release/components/handling-events/#toc_event-names).
  
    ### Initializers
  
    Libraries on top of Ember can add initializers, like so:
  
    ```javascript
    import Application from '@ember/application';
  
    Application.initializer({
      name: 'api-adapter',
  
      initialize: function(application) {
        application.register('api-adapter:main', ApiAdapter);
      }
    });
    ```
  
    Initializers provide an opportunity to access the internal registry, which
    organizes the different components of an Ember application. Additionally
    they provide a chance to access the instantiated application. Beyond
    being used for libraries, initializers are also a great way to organize
    dependency injection or setup in your own application.
  
    ### Routing
  
    In addition to creating your application's router, `Application` is
    also responsible for telling the router when to start routing. Transitions
    between routes can be logged with the `LOG_TRANSITIONS` flag, and more
    detailed intra-transition logging can be logged with
    the `LOG_TRANSITIONS_INTERNAL` flag:
  
    ```javascript
    import Application from '@ember/application';
  
    let App = Application.create({
      LOG_TRANSITIONS: true, // basic logging of successful transitions
      LOG_TRANSITIONS_INTERNAL: true // detailed logging of all routing steps
    });
    ```
  
    By default, the router will begin trying to translate the current URL into
    application state once the browser emits the `DOMContentReady` event. If you
    need to defer routing, you can call the application's `deferReadiness()`
    method. Once routing can begin, call the `advanceReadiness()` method.
  
    If there is any setup required before routing begins, you can implement a
    `ready()` method on your app that will be invoked immediately before routing
    begins.
  
    @class Application
    @extends Engine
    @uses RegistryProxyMixin
    @public
  */

  var Application = _engine.default.extend({
    /**
      The root DOM element of the Application. This can be specified as an
      element or a
      [jQuery-compatible selector string](http://api.jquery.com/category/selectors/).
       This is the element that will be passed to the Application's,
      `eventDispatcher`, which sets up the listeners for event delegation. Every
      view in your application should be a child of the element you specify here.
       @property rootElement
      @type DOMElement
      @default 'body'
      @public
    */
    rootElement: 'body',

    /**
      The `Ember.EventDispatcher` responsible for delegating events to this
      application's views.
       The event dispatcher is created by the application at initialization time
      and sets up event listeners on the DOM element described by the
      application's `rootElement` property.
       See the documentation for `Ember.EventDispatcher` for more information.
       @property eventDispatcher
      @type Ember.EventDispatcher
      @default null
      @public
    */
    eventDispatcher: null,

    /**
      The DOM events for which the event dispatcher should listen.
       By default, the application's `Ember.EventDispatcher` listens
      for a set of standard DOM events, such as `mousedown` and
      `keyup`, and delegates them to your application's `Ember.View`
      instances.
       If you would like additional bubbling events to be delegated to your
      views, set your `Application`'s `customEvents` property
      to a hash containing the DOM event name as the key and the
      corresponding view method name as the value. Setting an event to
      a value of `null` will prevent a default event listener from being
      added for that event.
       To add new events to be listened to:
       ```javascript
      import Application from '@ember/application';
       let App = Application.create({
        customEvents: {
          // add support for the paste event
          paste: 'paste'
        }
      });
      ```
       To prevent default events from being listened to:
       ```javascript
      import Application from '@ember/application';
       let App = Application.create({
        customEvents: {
          // remove support for mouseenter / mouseleave events
          mouseenter: null,
          mouseleave: null
        }
      });
      ```
      @property customEvents
      @type Object
      @default null
      @public
    */
    customEvents: null,

    /**
      Whether the application should automatically start routing and render
      templates to the `rootElement` on DOM ready. While default by true,
      other environments such as FastBoot or a testing harness can set this
      property to `false` and control the precise timing and behavior of the boot
      process.
       @property autoboot
      @type Boolean
      @default true
      @private
    */
    autoboot: true,

    /**
      Whether the application should be configured for the legacy "globals mode".
      Under this mode, the Application object serves as a global namespace for all
      classes.
       ```javascript
      import Application from '@ember/application';
      import Component from '@ember/component';
       let App = Application.create({
        ...
      });
       App.Router.reopen({
        location: 'none'
      });
       App.Router.map({
        ...
      });
       App.MyComponent = Component.extend({
        ...
      });
      ```
       This flag also exposes other internal APIs that assumes the existence of
      a special "default instance", like `App.__container__.lookup(...)`.
       This option is currently not configurable, its value is derived from
      the `autoboot` flag – disabling `autoboot` also implies opting-out of
      globals mode support, although they are ultimately orthogonal concerns.
       Some of the global modes features are already deprecated in 1.x. The
      existence of this flag is to untangle the globals mode code paths from
      the autoboot code paths, so that these legacy features can be reviewed
      for deprecation/removal separately.
       Forcing the (autoboot=true, _globalsMode=false) here and running the tests
      would reveal all the places where we are still relying on these legacy
      behavior internally (mostly just tests).
       @property _globalsMode
      @type Boolean
      @default true
      @private
    */
    _globalsMode: true,

    /**
      An array of application instances created by `buildInstance()`. Used
      internally to ensure that all instances get destroyed.
       @property _applicationInstances
      @type Array
      @default null
      @private
    */
    _applicationInstances: null,

    init: function () {
      // eslint-disable-line no-unused-vars
      this._super.apply(this, arguments);

      if (!this.$) {
        this.$ = _views.jQuery;
      }

      registerLibraries();

      if (true /* DEBUG */) {
          if (_environment.ENV.LOG_VERSION) {
            // we only need to see this once per Application#init
            _environment.ENV.LOG_VERSION = false;
            _metal.libraries.logVersions();
          }
        }

      // Start off the number of deferrals at 1. This will be decremented by
      // the Application's own `boot` method.
      this._readinessDeferrals = 1;
      this._booted = false;
      this._applicationInstances = new Set();

      this.autoboot = this._globalsMode = !!this.autoboot;

      if (this._globalsMode) {
        this._prepareForGlobalsMode();
      }

      if (this.autoboot) {
        this.waitForDOMReady();
      }
    },

    /**
      Create an ApplicationInstance for this application.
       @public
      @method buildInstance
      @return {ApplicationInstance} the application instance
    */
    buildInstance: function () {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      options.base = this;
      options.application = this;
      return _instance.default.create(options);
    },

    /**
      Start tracking an ApplicationInstance for this application.
      Used when the ApplicationInstance is created.
       @private
      @method _watchInstance
    */
    _watchInstance: function (instance) {
      this._applicationInstances.add(instance);
    },

    /**
      Stop tracking an ApplicationInstance for this application.
      Used when the ApplicationInstance is about to be destroyed.
       @private
      @method _unwatchInstance
    */
    _unwatchInstance: function (instance) {
      return this._applicationInstances.delete(instance);
    },

    /**
      Enable the legacy globals mode by allowing this application to act
      as a global namespace. See the docs on the `_globalsMode` property
      for details.
       Most of these features are already deprecated in 1.x, so we can
      stop using them internally and try to remove them.
       @private
      @method _prepareForGlobalsMode
    */
    _prepareForGlobalsMode: function () {
      // Create subclass of Router for this Application instance.
      // This is to ensure that someone reopening `App.Router` does not
      // tamper with the default `Router`.
      this.Router = (this.Router || _routing.Router).extend();

      this._buildDeprecatedInstance();
    },

    /*
      Build the deprecated instance for legacy globals mode support.
      Called when creating and resetting the application.
       This is orthogonal to autoboot: the deprecated instance needs to
      be created at Application construction (not boot) time to expose
      App.__container__. If autoboot sees that this instance exists,
      it will continue booting it to avoid doing unncessary work (as
      opposed to building a new instance at boot time), but they are
      otherwise unrelated.
       @private
      @method _buildDeprecatedInstance
    */
    _buildDeprecatedInstance: function () {
      // Build a default instance
      var instance = this.buildInstance();

      // Legacy support for App.__container__ and other global methods
      // on App that rely on a single, default instance.
      this.__deprecatedInstance__ = instance;
      this.__container__ = instance.__container__;
    },

    /**
      Automatically kick-off the boot process for the application once the
      DOM has become ready.
       The initialization itself is scheduled on the actions queue which
      ensures that code-loading finishes before booting.
       If you are asynchronously loading code, you should call `deferReadiness()`
      to defer booting, and then call `advanceReadiness()` once all of your code
      has finished loading.
       @private
      @method waitForDOMReady
    */
    waitForDOMReady: function () {
      if (!this.$ || this.$.isReady) {
        (0, _runloop.schedule)('actions', this, 'domReady');
      } else {
        this.$().ready((0, _runloop.bind)(this, 'domReady'));
      }
    },

    /**
      This is the autoboot flow:
       1. Boot the app by calling `this.boot()`
      2. Create an instance (or use the `__deprecatedInstance__` in globals mode)
      3. Boot the instance by calling `instance.boot()`
      4. Invoke the `App.ready()` callback
      5. Kick-off routing on the instance
       Ideally, this is all we would need to do:
       ```javascript
      _autoBoot() {
        this.boot().then(() => {
          let instance = (this._globalsMode) ? this.__deprecatedInstance__ : this.buildInstance();
          return instance.boot();
        }).then((instance) => {
          App.ready();
          instance.startRouting();
        });
      }
      ```
       Unfortunately, we cannot actually write this because we need to participate
      in the "synchronous" boot process. While the code above would work fine on
      the initial boot (i.e. DOM ready), when `App.reset()` is called, we need to
      boot a new instance synchronously (see the documentation on `_bootSync()`
      for details).
       Because of this restriction, the actual logic of this method is located
      inside `didBecomeReady()`.
       @private
      @method domReady
    */
    domReady: function () {
      if (this.isDestroyed) {
        return;
      }

      this._bootSync();

      // Continues to `didBecomeReady`
    },

    /**
      Use this to defer readiness until some condition is true.
       Example:
       ```javascript
      import Application from '@ember/application';
       let App = Application.create();
       App.deferReadiness();
       // $ is a reference to the jQuery object/function
      import $ from 'jquery;
       $.getJSON('/auth-token', function(token) {
        App.token = token;
        App.advanceReadiness();
      });
      ```
       This allows you to perform asynchronous setup logic and defer
      booting your application until the setup has finished.
       However, if the setup requires a loading UI, it might be better
      to use the router for this purpose.
       @method deferReadiness
      @public
    */
    deferReadiness: function () {
      true && !(this instanceof Application) && (0, _debug.assert)('You must call deferReadiness on an instance of Application', this instanceof Application);
      true && !(this._readinessDeferrals > 0) && (0, _debug.assert)('You cannot defer readiness since the `ready()` hook has already been called.', this._readinessDeferrals > 0);

      this._readinessDeferrals++;
    },

    /**
      Call `advanceReadiness` after any asynchronous setup logic has completed.
      Each call to `deferReadiness` must be matched by a call to `advanceReadiness`
      or the application will never become ready and routing will not begin.
       @method advanceReadiness
      @see {Application#deferReadiness}
      @public
    */
    advanceReadiness: function () {
      true && !(this instanceof Application) && (0, _debug.assert)('You must call advanceReadiness on an instance of Application', this instanceof Application);

      this._readinessDeferrals--;

      if (this._readinessDeferrals === 0) {
        (0, _runloop.once)(this, this.didBecomeReady);
      }
    },

    /**
      Initialize the application and return a promise that resolves with the `Application`
      object when the boot process is complete.
       Run any application initializers and run the application load hook. These hooks may
      choose to defer readiness. For example, an authentication hook might want to defer
      readiness until the auth token has been retrieved.
       By default, this method is called automatically on "DOM ready"; however, if autoboot
      is disabled, this is automatically called when the first application instance is
      created via `visit`.
       @public
      @method boot
      @return {Promise<Application,Error>}
    */
    boot: function () {
      if (this._bootPromise) {
        return this._bootPromise;
      }

      try {
        this._bootSync();
      } catch (_) {
        // Ignore the error: in the asynchronous boot path, the error is already reflected
        // in the promise rejection
      }

      return this._bootPromise;
    },

    /**
      Unfortunately, a lot of existing code assumes the booting process is
      "synchronous". Specifically, a lot of tests assumes the last call to
      `app.advanceReadiness()` or `app.reset()` will result in the app being
      fully-booted when the current runloop completes.
       We would like new code (like the `visit` API) to stop making this assumption,
      so we created the asynchronous version above that returns a promise. But until
      we have migrated all the code, we would have to expose this method for use
      *internally* in places where we need to boot an app "synchronously".
       @private
    */
    _bootSync: function () {
      if (this._booted) {
        return;
      }

      // Even though this returns synchronously, we still need to make sure the
      // boot promise exists for book-keeping purposes: if anything went wrong in
      // the boot process, we need to store the error as a rejection on the boot
      // promise so that a future caller of `boot()` can tell what failed.
      var defer = this._bootResolver = _runtime.RSVP.defer();
      this._bootPromise = defer.promise;

      try {
        this.runInitializers();
        (0, _lazy_load.runLoadHooks)('application', this);
        this.advanceReadiness();
        // Continues to `didBecomeReady`
      } catch (error) {
        // For the asynchronous boot path
        defer.reject(error);

        // For the synchronous boot path
        throw error;
      }
    },

    /**
      Reset the application. This is typically used only in tests. It cleans up
      the application in the following order:
       1. Deactivate existing routes
      2. Destroy all objects in the container
      3. Create a new application container
      4. Re-route to the existing url
       Typical Example:
       ```javascript
      import Application from '@ember/application';
      let App;
       run(function() {
        App = Application.create();
      });
       module('acceptance test', {
        setup: function() {
          App.reset();
        }
      });
       test('first test', function() {
        // App is freshly reset
      });
       test('second test', function() {
        // App is again freshly reset
      });
      ```
       Advanced Example:
       Occasionally you may want to prevent the app from initializing during
      setup. This could enable extra configuration, or enable asserting prior
      to the app becoming ready.
       ```javascript
      import Application from '@ember/application';
      let App;
       run(function() {
        App = Application.create();
      });
       module('acceptance test', {
        setup: function() {
          run(function() {
            App.reset();
            App.deferReadiness();
          });
        }
      });
       test('first test', function() {
        ok(true, 'something before app is initialized');
         run(function() {
          App.advanceReadiness();
        });
         ok(true, 'something after app is initialized');
      });
      ```
       @method reset
      @public
    */
    reset: function () {
      true && !(this._globalsMode && this.autoboot) && (0, _debug.assert)('Calling reset() on instances of `Application` is not\n            supported when globals mode is disabled; call `visit()` to\n            create new `ApplicationInstance`s and dispose them\n            via their `destroy()` method instead.', this._globalsMode && this.autoboot);

      var instance = this.__deprecatedInstance__;

      this._readinessDeferrals = 1;
      this._bootPromise = null;
      this._bootResolver = null;
      this._booted = false;

      function handleReset() {
        (0, _runloop.run)(instance, 'destroy');
        this._buildDeprecatedInstance();
        (0, _runloop.schedule)('actions', this, '_bootSync');
      }

      (0, _runloop.join)(this, handleReset);
    },

    /**
      @private
      @method didBecomeReady
    */
    didBecomeReady: function () {
      try {
        // TODO: Is this still needed for _globalsMode = false?
        if (!(0, _debug.isTesting)()) {
          // Eagerly name all classes that are already loaded
          (0, _metal.processAllNamespaces)();
          (0, _metal.setNamespaceSearchDisabled)(true);
        }

        // See documentation on `_autoboot()` for details
        if (this.autoboot) {
          var instance = void 0;

          if (this._globalsMode) {
            // If we already have the __deprecatedInstance__ lying around, boot it to
            // avoid unnecessary work
            instance = this.__deprecatedInstance__;
          } else {
            // Otherwise, build an instance and boot it. This is currently unreachable,
            // because we forced _globalsMode to === autoboot; but having this branch
            // allows us to locally toggle that flag for weeding out legacy globals mode
            // dependencies independently
            instance = this.buildInstance();
          }

          instance._bootSync();

          // TODO: App.ready() is not called when autoboot is disabled, is this correct?
          this.ready();

          instance.startRouting();
        }

        // For the asynchronous boot path
        this._bootResolver.resolve(this);

        // For the synchronous boot path
        this._booted = true;
      } catch (error) {
        // For the asynchronous boot path
        this._bootResolver.reject(error);

        // For the synchronous boot path
        throw error;
      }
    },

    /**
      Called when the Application has become ready, immediately before routing
      begins. The call will be delayed until the DOM has become ready.
       @event ready
      @public
    */
    ready: function () {
      return this;
    },

    // This method must be moved to the application instance object
    willDestroy: function () {
      this._super.apply(this, arguments);
      (0, _metal.setNamespaceSearchDisabled)(false);
      this._booted = false;
      this._bootPromise = null;
      this._bootResolver = null;

      if (_lazy_load._loaded.application === this) {
        _lazy_load._loaded.application = undefined;
      }

      if (this._applicationInstances.size) {
        this._applicationInstances.forEach(function (i) {
          return i.destroy();
        });
        this._applicationInstances.clear();
      }
    },

    /**
      Boot a new instance of `ApplicationInstance` for the current
      application and navigate it to the given `url`. Returns a `Promise` that
      resolves with the instance when the initial routing and rendering is
      complete, or rejects with any error that occurred during the boot process.
       When `autoboot` is disabled, calling `visit` would first cause the
      application to boot, which runs the application initializers.
       This method also takes a hash of boot-time configuration options for
      customizing the instance's behavior. See the documentation on
      `ApplicationInstance.BootOptions` for details.
       `ApplicationInstance.BootOptions` is an interface class that exists
      purely to document the available options; you do not need to construct it
      manually. Simply pass a regular JavaScript object containing of the
      desired options:
       ```javascript
      MyApp.visit("/", { location: "none", rootElement: "#container" });
      ```
       ### Supported Scenarios
       While the `BootOptions` class exposes a large number of knobs, not all
      combinations of them are valid; certain incompatible combinations might
      result in unexpected behavior.
       For example, booting the instance in the full browser environment
      while specifying a foreign `document` object (e.g. `{ isBrowser: true,
      document: iframe.contentDocument }`) does not work correctly today,
      largely due to Ember's jQuery dependency.
       Currently, there are three officially supported scenarios/configurations.
      Usages outside of these scenarios are not guaranteed to work, but please
      feel free to file bug reports documenting your experience and any issues
      you encountered to help expand support.
       #### Browser Applications (Manual Boot)
       The setup is largely similar to how Ember works out-of-the-box. Normally,
      Ember will boot a default instance for your Application on "DOM ready".
      However, you can customize this behavior by disabling `autoboot`.
       For example, this allows you to render a miniture demo of your application
      into a specific area on your marketing website:
       ```javascript
      import MyApp from 'my-app';
       $(function() {
        let App = MyApp.create({ autoboot: false });
         let options = {
          // Override the router's location adapter to prevent it from updating
          // the URL in the address bar
          location: 'none',
           // Override the default `rootElement` on the app to render into a
          // specific `div` on the page
          rootElement: '#demo'
        };
         // Start the app at the special demo URL
        App.visit('/demo', options);
      });
      ```
       Or perhaps you might want to boot two instances of your app on the same
      page for a split-screen multiplayer experience:
       ```javascript
      import MyApp from 'my-app';
       $(function() {
        let App = MyApp.create({ autoboot: false });
         let sessionId = MyApp.generateSessionID();
         let player1 = App.visit(`/matches/join?name=Player+1&session=${sessionId}`, { rootElement: '#left', location: 'none' });
        let player2 = App.visit(`/matches/join?name=Player+2&session=${sessionId}`, { rootElement: '#right', location: 'none' });
         Promise.all([player1, player2]).then(() => {
          // Both apps have completed the initial render
          $('#loading').fadeOut();
        });
      });
      ```
       Do note that each app instance maintains their own registry/container, so
      they will run in complete isolation by default.
       #### Server-Side Rendering (also known as FastBoot)
       This setup allows you to run your Ember app in a server environment using
      Node.js and render its content into static HTML for SEO purposes.
       ```javascript
      const HTMLSerializer = new SimpleDOM.HTMLSerializer(SimpleDOM.voidMap);
       function renderURL(url) {
        let dom = new SimpleDOM.Document();
        let rootElement = dom.body;
        let options = { isBrowser: false, document: dom, rootElement: rootElement };
         return MyApp.visit(options).then(instance => {
          try {
            return HTMLSerializer.serialize(rootElement.firstChild);
          } finally {
            instance.destroy();
          }
        });
      }
      ```
       In this scenario, because Ember does not have access to a global `document`
      object in the Node.js environment, you must provide one explicitly. In practice,
      in the non-browser environment, the stand-in `document` object only needs to
      implement a limited subset of the full DOM API. The `SimpleDOM` library is known
      to work.
       Since there is no access to jQuery in the non-browser environment, you must also
      specify a DOM `Element` object in the same `document` for the `rootElement` option
      (as opposed to a selector string like `"body"`).
       See the documentation on the `isBrowser`, `document` and `rootElement` properties
      on `ApplicationInstance.BootOptions` for details.
       #### Server-Side Resource Discovery
       This setup allows you to run the routing layer of your Ember app in a server
      environment using Node.js and completely disable rendering. This allows you
      to simulate and discover the resources (i.e. AJAX requests) needed to fulfill
      a given request and eagerly "push" these resources to the client.
       ```app/initializers/network-service.js
      import BrowserNetworkService from 'app/services/network/browser';
      import NodeNetworkService from 'app/services/network/node';
       // Inject a (hypothetical) service for abstracting all AJAX calls and use
      // the appropriate implementation on the client/server. This also allows the
      // server to log all the AJAX calls made during a particular request and use
      // that for resource-discovery purpose.
       export function initialize(application) {
        if (window) { // browser
          application.register('service:network', BrowserNetworkService);
        } else { // node
          application.register('service:network', NodeNetworkService);
        }
         application.inject('route', 'network', 'service:network');
      };
       export default {
        name: 'network-service',
        initialize: initialize
      };
      ```
       ```app/routes/post.js
      import Route from '@ember/routing/route';
       // An example of how the (hypothetical) service is used in routes.
       export default Route.extend({
        model(params) {
          return this.network.fetch(`/api/posts/${params.post_id}.json`);
        },
         afterModel(post) {
          if (post.isExternalContent) {
            return this.network.fetch(`/api/external/?url=${post.externalURL}`);
          } else {
            return post;
          }
        }
      });
      ```
       ```javascript
      // Finally, put all the pieces together
       function discoverResourcesFor(url) {
        return MyApp.visit(url, { isBrowser: false, shouldRender: false }).then(instance => {
          let networkService = instance.lookup('service:network');
          return networkService.requests; // => { "/api/posts/123.json": "..." }
        });
      }
      ```
       @public
      @method visit
      @param url {String} The initial URL to navigate to
      @param options {ApplicationInstance.BootOptions}
      @return {Promise<ApplicationInstance, Error>}
    */
    visit: function (url, options) {
      var _this = this;

      return this.boot().then(function () {
        var instance = _this.buildInstance();

        return instance.boot(options).then(function () {
          return instance.visit(url);
        }).catch(function (error) {
          (0, _runloop.run)(instance, 'destroy');
          throw error;
        });
      });
    }
  });

  Application.reopenClass({
    /**
      This creates a registry with the default Ember naming conventions.
       It also configures the registry:
       * registered views are created every time they are looked up (they are
        not singletons)
      * registered templates are not factories; the registered value is
        returned directly.
      * the router receives the application as its `namespace` property
      * all controllers receive the router as their `target` and `controllers`
        properties
      * all controllers receive the application as their `namespace` property
      * the application view receives the application controller as its
        `controller` property
      * the application view receives the application template as its
        `defaultTemplate` property
       @method buildRegistry
      @static
      @param {Application} namespace the application for which to
        build the registry
      @return {Ember.Registry} the built registry
      @private
    */
    buildRegistry: function () {
      // eslint-disable-line no-unused-vars
      var registry = this._super.apply(this, arguments);

      commonSetupRegistry(registry);

      (0, _glimmer.setupApplicationRegistry)(registry);

      return registry;
    }
  });

  function commonSetupRegistry(registry) {
    registry.register('router:main', _routing.Router.extend());
    registry.register('-view-registry:main', {
      create: function () {
        return (0, _utils.dictionary)(null);
      }
    });

    registry.register('route:basic', _routing.Route);
    registry.register('event_dispatcher:main', _views.EventDispatcher);

    registry.injection('router:main', 'namespace', 'application:main');

    registry.register('location:auto', _routing.AutoLocation);
    registry.register('location:hash', _routing.HashLocation);
    registry.register('location:history', _routing.HistoryLocation);
    registry.register('location:none', _routing.NoneLocation);

    registry.register((0, _container.privatize)(_templateObject), {
      create: function () {
        return new _routing.BucketCache();
      }
    });

    registry.register('service:router', _routing.RouterService);
    registry.injection('service:router', '_router', 'router:main');
  }

  function registerLibraries() {
    if (!librariesRegistered) {
      librariesRegistered = true;

      if (_browserEnvironment.hasDOM && !_views.jQueryDisabled) {
        _metal.libraries.registerCoreLibrary('jQuery', (0, _views.jQuery)().jquery);
      }
    }
  }

  exports.default = Application;
});
enifed('@ember/application/lib/lazy_load', ['exports', '@ember/-internals/environment', '@ember/-internals/browser-environment'], function (exports, _environment, _browserEnvironment) {
  'use strict';

  exports._loaded = undefined;
  exports.onLoad = onLoad;
  exports.runLoadHooks = runLoadHooks;


  /**
    @module @ember/application
  */

  /*globals CustomEvent */

  var loadHooks = _environment.ENV.EMBER_LOAD_HOOKS || {};
  var loaded = {};
  var _loaded = exports._loaded = loaded;

  /**
    Detects when a specific package of Ember (e.g. 'Application')
    has fully loaded and is available for extension.
  
    The provided `callback` will be called with the `name` passed
    resolved from a string into the object:
  
    ``` javascript
    import { onLoad } from '@ember/application';
  
    onLoad('Ember.Application' function(hbars) {
      hbars.registerHelper(...);
    });
    ```
  
    @method onLoad
    @static
    @for @ember/application
    @param name {String} name of hook
    @param callback {Function} callback to be called
    @private
  */
  function onLoad(name, callback) {
    var object = loaded[name];

    loadHooks[name] = loadHooks[name] || [];
    loadHooks[name].push(callback);

    if (object) {
      callback(object);
    }
  }

  /**
    Called when an Ember.js package (e.g Application) has finished
    loading. Triggers any callbacks registered for this event.
  
    @method runLoadHooks
    @static
    @for @ember/application
    @param name {String} name of hook
    @param object {Object} object to pass to callbacks
    @private
  */
  function runLoadHooks(name, object) {
    loaded[name] = object;

    if (_browserEnvironment.window && typeof CustomEvent === 'function') {
      var event = new CustomEvent(name, { detail: object, name: name });
      _browserEnvironment.window.dispatchEvent(event);
    }

    if (loadHooks[name]) {
      loadHooks[name].forEach(function (callback) {
        return callback(object);
      });
    }
  }
});
enifed('@ember/application/lib/validate-type', ['exports', '@ember/debug'], function (exports, _debug) {
  'use strict';

  exports.default = validateType;


  var VALIDATED_TYPES = {
    route: ['assert', 'isRouteFactory', 'Ember.Route'],
    component: ['deprecate', 'isComponentFactory', 'Ember.Component'],
    view: ['deprecate', 'isViewFactory', 'Ember.View'],
    service: ['deprecate', 'isServiceFactory', 'Ember.Service']
  };

  function validateType(resolvedType, parsedName) {
    var validationAttributes = VALIDATED_TYPES[parsedName.type];

    if (!validationAttributes) {
      return;
    }

    var factoryFlag = validationAttributes[1],
        expectedType = validationAttributes[2];

    true && !!!resolvedType[factoryFlag] && (0, _debug.assert)('Expected ' + parsedName.fullName + ' to resolve to an ' + expectedType + ' but ' + ('instead it was ' + resolvedType + '.'), !!resolvedType[factoryFlag]);
  }
});
enifed('@ember/canary-features/index', ['exports', '@ember/-internals/environment', '@ember/polyfills'], function (exports, _environment, _polyfills) {
    'use strict';

    exports.GLIMMER_MODIFIER_MANAGER = exports.EMBER_GLIMMER_ANGLE_BRACKET_INVOCATION = exports.GLIMMER_CUSTOM_COMPONENT_MANAGER = exports.EMBER_METAL_TRACKED_PROPERTIES = exports.EMBER_MODULE_UNIFICATION = exports.EMBER_ENGINES_MOUNT_PARAMS = exports.EMBER_ROUTING_ROUTER_SERVICE = exports.EMBER_GLIMMER_NAMED_ARGUMENTS = exports.EMBER_IMPROVED_INSTRUMENTATION = exports.EMBER_LIBRARIES_ISREGISTERED = exports.FEATURES = exports.DEFAULT_FEATURES = undefined;
    exports.isEnabled = isEnabled;

    /**
      Set `EmberENV.FEATURES` in your application's `config/environment.js` file
      to enable canary features in your application.
    
      See the [feature flag guide](https://guides.emberjs.com/release/configuring-ember/feature-flags/)
      for more details.
    
      @module @ember/canary-features
      @public
    */
    var DEFAULT_FEATURES = exports.DEFAULT_FEATURES = {
        EMBER_LIBRARIES_ISREGISTERED: false,
        EMBER_IMPROVED_INSTRUMENTATION: false,
        EMBER_GLIMMER_NAMED_ARGUMENTS: true,
        EMBER_ROUTING_ROUTER_SERVICE: true,
        EMBER_ENGINES_MOUNT_PARAMS: true,
        EMBER_MODULE_UNIFICATION: false,
        GLIMMER_CUSTOM_COMPONENT_MANAGER: true,
        GLIMMER_MODIFIER_MANAGER: false,
        EMBER_METAL_TRACKED_PROPERTIES: false,
        EMBER_GLIMMER_ANGLE_BRACKET_INVOCATION: true
    };
    /**
      The hash of enabled Canary features. Add to this, any canary features
      before creating your application.
    
      @class FEATURES
      @static
      @since 1.1.0
      @public
    */
    var FEATURES = exports.FEATURES = (0, _polyfills.assign)(DEFAULT_FEATURES, _environment.ENV.FEATURES);
    /**
      Determine whether the specified `feature` is enabled. Used by Ember's
      build tools to exclude experimental features from beta/stable builds.
    
      You can define the following configuration options:
    
      * `EmberENV.ENABLE_OPTIONAL_FEATURES` - enable any features that have not been explicitly
        enabled/disabled.
    
      @method isEnabled
      @param {String} feature The feature to check
      @return {Boolean}
      @since 1.1.0
      @public
    */
    function isEnabled(feature) {
        var featureValue = FEATURES[feature];
        if (featureValue === true || featureValue === false) {
            return featureValue;
        } else if (_environment.ENV.ENABLE_OPTIONAL_FEATURES) {
            return true;
        } else {
            return false;
        }
    }
    function featureValue(value) {
        if (_environment.ENV.ENABLE_OPTIONAL_FEATURES && value === null) {
            return true;
        }
        return value;
    }
    var EMBER_LIBRARIES_ISREGISTERED = exports.EMBER_LIBRARIES_ISREGISTERED = featureValue(FEATURES.EMBER_LIBRARIES_ISREGISTERED);
    var EMBER_IMPROVED_INSTRUMENTATION = exports.EMBER_IMPROVED_INSTRUMENTATION = featureValue(FEATURES.EMBER_IMPROVED_INSTRUMENTATION);
    var EMBER_GLIMMER_NAMED_ARGUMENTS = exports.EMBER_GLIMMER_NAMED_ARGUMENTS = featureValue(FEATURES.EMBER_GLIMMER_NAMED_ARGUMENTS);
    var EMBER_ROUTING_ROUTER_SERVICE = exports.EMBER_ROUTING_ROUTER_SERVICE = featureValue(FEATURES.EMBER_ROUTING_ROUTER_SERVICE);
    var EMBER_ENGINES_MOUNT_PARAMS = exports.EMBER_ENGINES_MOUNT_PARAMS = featureValue(FEATURES.EMBER_ENGINES_MOUNT_PARAMS);
    var EMBER_MODULE_UNIFICATION = exports.EMBER_MODULE_UNIFICATION = featureValue(FEATURES.EMBER_MODULE_UNIFICATION);
    var EMBER_METAL_TRACKED_PROPERTIES = exports.EMBER_METAL_TRACKED_PROPERTIES = featureValue(FEATURES.EMBER_METAL_TRACKED_PROPERTIES);
    var GLIMMER_CUSTOM_COMPONENT_MANAGER = exports.GLIMMER_CUSTOM_COMPONENT_MANAGER = featureValue(FEATURES.GLIMMER_CUSTOM_COMPONENT_MANAGER);
    var EMBER_GLIMMER_ANGLE_BRACKET_INVOCATION = exports.EMBER_GLIMMER_ANGLE_BRACKET_INVOCATION = featureValue(FEATURES.EMBER_GLIMMER_ANGLE_BRACKET_INVOCATION);
    var GLIMMER_MODIFIER_MANAGER = exports.GLIMMER_MODIFIER_MANAGER = featureValue(FEATURES.GLIMMER_MODIFIER_MANAGER);
});
enifed('@ember/controller/index', ['exports', '@ember/-internals/runtime', '@ember/controller/lib/controller_mixin', '@ember/-internals/metal'], function (exports, _runtime, _controller_mixin, _metal) {
  'use strict';

  exports.inject = inject;


  /**
  @module @ember/controller
  */

  /**
    @class Controller
    @extends EmberObject
    @uses Ember.ControllerMixin
    @public
  */
  var Controller = _runtime.Object.extend(_controller_mixin.default);

  /**
    Creates a property that lazily looks up another controller in the container.
    Can only be used when defining another controller.
  
    Example:
  
    ```app/controllers/post.js
    import Controller, {
      inject as controller
    } from '@ember/controller';
  
    export default Controller.extend({
      posts: controller()
    });
    ```
  
    This example will create a `posts` property on the `post` controller that
    looks up the `posts` controller in the container, making it easy to
    reference other controllers.
  
    @method inject
    @static
    @for @ember/controller
    @since 1.10.0
    @param {String} name (optional) name of the controller to inject, defaults
           to the property's name
    @return {Ember.InjectedProperty} injection descriptor instance
    @public
  */
  function inject(name, options) {
    return new _metal.InjectedProperty('controller', name, options);
  }

  exports.default = Controller;
});
enifed('@ember/controller/lib/controller_mixin', ['exports', '@ember/-internals/metal', '@ember/-internals/runtime'], function (exports, _metal, _runtime) {
  'use strict';

  exports.default = _metal.Mixin.create(_runtime.ActionHandler, {
    /* ducktype as a controller */
    isController: true,

    /**
      The object to which actions from the view should be sent.
       For example, when a Handlebars template uses the `{{action}}` helper,
      it will attempt to send the action to the view's controller's `target`.
       By default, the value of the target property is set to the router, and
      is injected when a controller is instantiated. This injection is applied
      as part of the application's initialization process. In most cases the
      `target` property will automatically be set to the logical consumer of
      actions for the controller.
       @property target
      @default null
      @public
    */
    target: null,

    store: null,

    /**
      The controller's current model. When retrieving or modifying a controller's
      model, this property should be used instead of the `content` property.
       @property model
      @public
    */
    model: null
  });
});
enifed('@ember/debug/index', ['exports', '@ember/debug/lib/warn', '@ember/debug/lib/deprecate', '@ember/debug/lib/testing', '@ember/-internals/browser-environment', '@ember/error'], function (exports, _warn2, _deprecate2, _testing, _browserEnvironment, _error) {
    'use strict';

    exports._warnIfUsingStrippedFeatureFlags = exports.getDebugFunction = exports.setDebugFunction = exports.deprecateFunc = exports.runInDebug = exports.debugFreeze = exports.debugSeal = exports.deprecate = exports.debug = exports.warn = exports.info = exports.assert = exports.setTesting = exports.isTesting = exports.registerDeprecationHandler = exports.registerWarnHandler = undefined;
    Object.defineProperty(exports, 'registerWarnHandler', {
        enumerable: true,
        get: function () {
            return _warn2.registerHandler;
        }
    });
    Object.defineProperty(exports, 'registerDeprecationHandler', {
        enumerable: true,
        get: function () {
            return _deprecate2.registerHandler;
        }
    });
    Object.defineProperty(exports, 'isTesting', {
        enumerable: true,
        get: function () {
            return _testing.isTesting;
        }
    });
    Object.defineProperty(exports, 'setTesting', {
        enumerable: true,
        get: function () {
            return _testing.setTesting;
        }
    });

    // These are the default production build versions:
    var noop = function () {};
    var assert = noop;
    var info = noop;
    var warn = noop;
    var debug = noop;
    var deprecate = noop;
    var debugSeal = noop;
    var debugFreeze = noop;
    var runInDebug = noop;
    var setDebugFunction = noop;
    var getDebugFunction = noop;
    var deprecateFunc = function () {
        return arguments[arguments.length - 1];
    };
    if (true /* DEBUG */) {
            exports.setDebugFunction = setDebugFunction = function (type, callback) {
                switch (type) {
                    case 'assert':
                        return exports.assert = assert = callback;
                    case 'info':
                        return exports.info = info = callback;
                    case 'warn':
                        return exports.warn = warn = callback;
                    case 'debug':
                        return exports.debug = debug = callback;
                    case 'deprecate':
                        return exports.deprecate = deprecate = callback;
                    case 'debugSeal':
                        return exports.debugSeal = debugSeal = callback;
                    case 'debugFreeze':
                        return exports.debugFreeze = debugFreeze = callback;
                    case 'runInDebug':
                        return exports.runInDebug = runInDebug = callback;
                    case 'deprecateFunc':
                        return exports.deprecateFunc = deprecateFunc = callback;
                }
            };
            exports.getDebugFunction = getDebugFunction = function (type) {
                switch (type) {
                    case 'assert':
                        return assert;
                    case 'info':
                        return info;
                    case 'warn':
                        return warn;
                    case 'debug':
                        return debug;
                    case 'deprecate':
                        return deprecate;
                    case 'debugSeal':
                        return debugSeal;
                    case 'debugFreeze':
                        return debugFreeze;
                    case 'runInDebug':
                        return runInDebug;
                    case 'deprecateFunc':
                        return deprecateFunc;
                }
            };
        }
    /**
    @module @ember/debug
    */
    if (true /* DEBUG */) {
            /**
              Verify that a certain expectation is met, or throw a exception otherwise.
                 This is useful for communicating assumptions in the code to other human
              readers as well as catching bugs that accidentally violates these
              expectations.
                 Assertions are removed from production builds, so they can be freely added
              for documentation and debugging purposes without worries of incuring any
              performance penalty. However, because of that, they should not be used for
              checks that could reasonably fail during normal usage. Furthermore, care
              should be taken to avoid accidentally relying on side-effects produced from
              evaluating the condition itself, since the code will not run in production.
                 ```javascript
              import { assert } from '@ember/debug';
                 // Test for truthiness
              assert('Must pass a string', typeof str === 'string');
                 // Fail unconditionally
              assert('This code path should never be run');
              ```
                 @method assert
              @static
              @for @ember/debug
              @param {String} description Describes the expectation. This will become the
                text of the Error thrown if the assertion fails.
              @param {Boolean} condition Must be truthy for the assertion to pass. If
                falsy, an exception will be thrown.
              @public
              @since 1.0.0
            */
            setDebugFunction('assert', function assert(desc, test) {
                if (!test) {
                    throw new _error.default('Assertion Failed: ' + desc);
                }
            });
            /**
              Display a debug notice.
                 Calls to this function are removed from production builds, so they can be
              freely added for documentation and debugging purposes without worries of
              incuring any performance penalty.
                 ```javascript
              import { debug } from '@ember/debug';
                 debug('I\'m a debug notice!');
              ```
                 @method debug
              @for @ember/debug
              @static
              @param {String} message A debug message to display.
              @public
            */
            setDebugFunction('debug', function debug(message) {
                /* eslint-disable no-console */
                if (console.debug) {
                    console.debug('DEBUG: ' + message);
                } else {
                    console.log('DEBUG: ' + message);
                }
                /* eslint-ensable no-console */
            });
            /**
              Display an info notice.
                 Calls to this function are removed from production builds, so they can be
              freely added for documentation and debugging purposes without worries of
              incuring any performance penalty.
                 @method info
              @private
            */
            setDebugFunction('info', function info() {
                var _console;

                (_console = console).info.apply(_console, arguments); /* eslint-disable-line no-console */
            });
            /**
             @module @ember/application
             @public
            */
            /**
              Alias an old, deprecated method with its new counterpart.
                 Display a deprecation warning with the provided message and a stack trace
              (Chrome and Firefox only) when the assigned method is called.
                 Calls to this function are removed from production builds, so they can be
              freely added for documentation and debugging purposes without worries of
              incuring any performance penalty.
                 ```javascript
              import { deprecateFunc } from '@ember/application/deprecations';
                 Ember.oldMethod = deprecateFunc('Please use the new, updated method', options, Ember.newMethod);
              ```
                 @method deprecateFunc
              @static
              @for @ember/application/deprecations
              @param {String} message A description of the deprecation.
              @param {Object} [options] The options object for `deprecate`.
              @param {Function} func The new function called to replace its deprecated counterpart.
              @return {Function} A new function that wraps the original function with a deprecation warning
              @private
            */
            setDebugFunction('deprecateFunc', function deprecateFunc() {
                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = arguments[_key];
                }

                if (args.length === 3) {
                    var message = args[0],
                        options = args[1],
                        func = args[2];

                    return function () {
                        deprecate(message, false, options);
                        return func.apply(this, arguments);
                    };
                } else {
                    var _message = args[0],
                        _func = args[1];

                    return function () {
                        deprecate(_message);
                        return _func.apply(this, arguments);
                    };
                }
            });
            /**
             @module @ember/debug
             @public
            */
            /**
              Run a function meant for debugging.
                 Calls to this function are removed from production builds, so they can be
              freely added for documentation and debugging purposes without worries of
              incuring any performance penalty.
                 ```javascript
              import Component from '@ember/component';
              import { runInDebug } from '@ember/debug';
                 runInDebug(() => {
                Component.reopen({
                  didInsertElement() {
                    console.log("I'm happy");
                  }
                });
              });
              ```
                 @method runInDebug
              @for @ember/debug
              @static
              @param {Function} func The function to be executed.
              @since 1.5.0
              @public
            */
            setDebugFunction('runInDebug', function runInDebug(func) {
                func();
            });
            setDebugFunction('debugSeal', function debugSeal(obj) {
                Object.seal(obj);
            });
            setDebugFunction('debugFreeze', function debugFreeze(obj) {
                Object.freeze(obj);
            });
            setDebugFunction('deprecate', _deprecate2.default);
            setDebugFunction('warn', _warn2.default);
        }
    var _warnIfUsingStrippedFeatureFlags = void 0;
    if (true /* DEBUG */ && !(0, _testing.isTesting)()) {
        if (typeof window !== 'undefined' && (_browserEnvironment.isFirefox || _browserEnvironment.isChrome) && window.addEventListener) {
            window.addEventListener('load', function () {
                if (document.documentElement && document.documentElement.dataset && !document.documentElement.dataset.emberExtension) {
                    var downloadURL = void 0;
                    if (_browserEnvironment.isChrome) {
                        downloadURL = 'https://chrome.google.com/webstore/detail/ember-inspector/bmdblncegkenkacieihfhpjfppoconhi';
                    } else if (_browserEnvironment.isFirefox) {
                        downloadURL = 'https://addons.mozilla.org/en-US/firefox/addon/ember-inspector/';
                    }
                    debug('For more advanced debugging, install the Ember Inspector from ' + downloadURL);
                }
            }, false);
        }
    }
    exports.assert = assert;
    exports.info = info;
    exports.warn = warn;
    exports.debug = debug;
    exports.deprecate = deprecate;
    exports.debugSeal = debugSeal;
    exports.debugFreeze = debugFreeze;
    exports.runInDebug = runInDebug;
    exports.deprecateFunc = deprecateFunc;
    exports.setDebugFunction = setDebugFunction;
    exports.getDebugFunction = getDebugFunction;
    exports._warnIfUsingStrippedFeatureFlags = _warnIfUsingStrippedFeatureFlags;
});
enifed('@ember/debug/lib/deprecate', ['exports', '@ember/-internals/environment', '@ember/debug/index', '@ember/debug/lib/handlers'], function (exports, _environment, _index, _handlers) {
    'use strict';

    exports.missingOptionsUntilDeprecation = exports.missingOptionsIdDeprecation = exports.missingOptionsDeprecation = exports.registerHandler = undefined;

    /**
     @module @ember/debug
     @public
    */
    /**
      Allows for runtime registration of handler functions that override the default deprecation behavior.
      Deprecations are invoked by calls to [@ember/application/deprecations/deprecate](https://emberjs.com/api/ember/release/classes/@ember%2Fapplication%2Fdeprecations/methods/deprecate?anchor=deprecate).
      The following example demonstrates its usage by registering a handler that throws an error if the
      message contains the word "should", otherwise defers to the default handler.
    
      ```javascript
      import { registerDeprecationHandler } from '@ember/debug';
    
      registerDeprecationHandler((message, options, next) => {
        if (message.indexOf('should') !== -1) {
          throw new Error(`Deprecation message with should: ${message}`);
        } else {
          // defer to whatever handler was registered before this one
          next(message, options);
        }
      });
      ```
    
      The handler function takes the following arguments:
    
      <ul>
        <li> <code>message</code> - The message received from the deprecation call.</li>
        <li> <code>options</code> - An object passed in with the deprecation call containing additional information including:</li>
          <ul>
            <li> <code>id</code> - An id of the deprecation in the form of <code>package-name.specific-deprecation</code>.</li>
            <li> <code>until</code> - The Ember version number the feature and deprecation will be removed in.</li>
          </ul>
        <li> <code>next</code> - A function that calls into the previously registered handler.</li>
      </ul>
    
      @public
      @static
      @method registerDeprecationHandler
      @for @ember/debug
      @param handler {Function} A function to handle deprecation calls.
      @since 2.1.0
    */
    var registerHandler = function () {};
    var missingOptionsDeprecation = void 0;
    var missingOptionsIdDeprecation = void 0;
    var missingOptionsUntilDeprecation = void 0;
    var deprecate = function () {};
    if (true /* DEBUG */) {
            exports.registerHandler = registerHandler = function registerHandler(handler) {
                (0, _handlers.registerHandler)('deprecate', handler);
            };
            var formatMessage = function formatMessage(_message, options) {
                var message = _message;
                if (options && options.id) {
                    message = message + (' [deprecation id: ' + options.id + ']');
                }
                if (options && options.url) {
                    message += ' See ' + options.url + ' for more details.';
                }
                return message;
            };
            registerHandler(function logDeprecationToConsole(message, options) {
                var updatedMessage = formatMessage(message, options);
                console.warn('DEPRECATION: ' + updatedMessage); // eslint-disable-line no-console
            });
            var captureErrorForStack = void 0;
            if (new Error().stack) {
                captureErrorForStack = function () {
                    return new Error();
                };
            } else {
                captureErrorForStack = function () {
                    try {
                        __fail__.fail();
                    } catch (e) {
                        return e;
                    }
                };
            }
            registerHandler(function logDeprecationStackTrace(message, options, next) {
                if (_environment.ENV.LOG_STACKTRACE_ON_DEPRECATION) {
                    var stackStr = '';
                    var error = captureErrorForStack();
                    var stack = void 0;
                    if (error.stack) {
                        if (error['arguments']) {
                            // Chrome
                            stack = error.stack.replace(/^\s+at\s+/gm, '').replace(/^([^\(]+?)([\n$])/gm, '{anonymous}($1)$2').replace(/^Object.<anonymous>\s*\(([^\)]+)\)/gm, '{anonymous}($1)').split('\n');
                            stack.shift();
                        } else {
                            // Firefox
                            stack = error.stack.replace(/(?:\n@:0)?\s+$/m, '').replace(/^\(/gm, '{anonymous}(').split('\n');
                        }
                        stackStr = '\n    ' + stack.slice(2).join('\n    ');
                    }
                    var updatedMessage = formatMessage(message, options);
                    console.warn('DEPRECATION: ' + updatedMessage + stackStr); // eslint-disable-line no-console
                } else {
                    next(message, options);
                }
            });
            registerHandler(function raiseOnDeprecation(message, options, next) {
                if (_environment.ENV.RAISE_ON_DEPRECATION) {
                    var updatedMessage = formatMessage(message);
                    throw new Error(updatedMessage);
                } else {
                    next(message, options);
                }
            });
            exports.missingOptionsDeprecation = missingOptionsDeprecation = 'When calling `deprecate` you ' + 'must provide an `options` hash as the third parameter.  ' + '`options` should include `id` and `until` properties.';
            exports.missingOptionsIdDeprecation = missingOptionsIdDeprecation = 'When calling `deprecate` you must provide `id` in options.';
            exports.missingOptionsUntilDeprecation = missingOptionsUntilDeprecation = 'When calling `deprecate` you must provide `until` in options.';
            /**
             @module @ember/application
             @public
             */
            /**
              Display a deprecation warning with the provided message and a stack trace
              (Chrome and Firefox only).
                 * In a production build, this method is defined as an empty function (NOP).
              Uses of this method in Ember itself are stripped from the ember.prod.js build.
                 @method deprecate
              @for @ember/application/deprecations
              @param {String} message A description of the deprecation.
              @param {Boolean} test A boolean. If falsy, the deprecation will be displayed.
              @param {Object} options
              @param {String} options.id A unique id for this deprecation. The id can be
                used by Ember debugging tools to change the behavior (raise, log or silence)
                for that specific deprecation. The id should be namespaced by dots, e.g.
                "view.helper.select".
              @param {string} options.until The version of Ember when this deprecation
                warning will be removed.
              @param {String} [options.url] An optional url to the transition guide on the
                emberjs.com website.
              @static
              @public
              @since 1.0.0
            */
            deprecate = function deprecate(message, test, options) {
                (0, _index.assert)(missingOptionsDeprecation, !!(options && (options.id || options.until)));
                (0, _index.assert)(missingOptionsIdDeprecation, !!options.id);
                (0, _index.assert)(missingOptionsUntilDeprecation, !!options.until);
                (0, _handlers.invoke)('deprecate', message, test, options);
            };
        }
    exports.default = deprecate;
    exports.registerHandler = registerHandler;
    exports.missingOptionsDeprecation = missingOptionsDeprecation;
    exports.missingOptionsIdDeprecation = missingOptionsIdDeprecation;
    exports.missingOptionsUntilDeprecation = missingOptionsUntilDeprecation;
});
enifed("@ember/debug/lib/handlers", ["exports"], function (exports) {
    "use strict";

    var HANDLERS = exports.HANDLERS = {};
    var registerHandler = function () {};
    var invoke = function () {};
    if (true /* DEBUG */) {
            exports.registerHandler = registerHandler = function registerHandler(type, callback) {
                var nextHandler = HANDLERS[type] || function () {};
                HANDLERS[type] = function (message, options) {
                    callback(message, options, nextHandler);
                };
            };
            exports.invoke = invoke = function invoke(type, message, test, options) {
                if (test) {
                    return;
                }
                var handlerForType = HANDLERS[type];
                if (handlerForType) {
                    handlerForType(message, options);
                }
            };
        }
    exports.registerHandler = registerHandler;
    exports.invoke = invoke;
});
enifed("@ember/debug/lib/testing", ["exports"], function (exports) {
    "use strict";

    exports.isTesting = isTesting;
    exports.setTesting = setTesting;
    var testing = false;
    function isTesting() {
        return testing;
    }
    function setTesting(value) {
        testing = !!value;
    }
});
enifed('@ember/debug/lib/warn', ['exports', '@ember/debug/index', '@ember/debug/lib/handlers'], function (exports, _index, _handlers) {
  'use strict';

  exports.missingOptionsDeprecation = exports.missingOptionsIdDeprecation = exports.registerHandler = undefined;

  var registerHandler = function () {};
  var warn = function () {};
  var missingOptionsDeprecation = void 0;
  var missingOptionsIdDeprecation = void 0;
  /**
  @module @ember/debug
  */
  if (true /* DEBUG */) {
      /**
        Allows for runtime registration of handler functions that override the default warning behavior.
        Warnings are invoked by calls made to [@ember/debug/warn](https://emberjs.com/api/ember/release/classes/@ember%2Fdebug/methods/warn?anchor=warn).
        The following example demonstrates its usage by registering a handler that does nothing overriding Ember's
        default warning behavior.
           ```javascript
        import { registerWarnHandler } from '@ember/debug';
           // next is not called, so no warnings get the default behavior
        registerWarnHandler(() => {});
        ```
           The handler function takes the following arguments:
           <ul>
          <li> <code>message</code> - The message received from the warn call. </li>
          <li> <code>options</code> - An object passed in with the warn call containing additional information including:</li>
            <ul>
              <li> <code>id</code> - An id of the warning in the form of <code>package-name.specific-warning</code>.</li>
            </ul>
          <li> <code>next</code> - A function that calls into the previously registered handler.</li>
        </ul>
           @public
        @static
        @method registerWarnHandler
        @for @ember/debug
        @param handler {Function} A function to handle warnings.
        @since 2.1.0
      */
      exports.registerHandler = registerHandler = function registerHandler(handler) {
        (0, _handlers.registerHandler)('warn', handler);
      };
      registerHandler(function logWarning(message) {
        /* eslint-disable no-console */
        console.warn('WARNING: ' + message);
        /* eslint-enable no-console */
      });
      exports.missingOptionsDeprecation = missingOptionsDeprecation = 'When calling `warn` you ' + 'must provide an `options` hash as the third parameter.  ' + '`options` should include an `id` property.';
      exports.missingOptionsIdDeprecation = missingOptionsIdDeprecation = 'When calling `warn` you must provide `id` in options.';
      /**
        Display a warning with the provided message.
           * In a production build, this method is defined as an empty function (NOP).
        Uses of this method in Ember itself are stripped from the ember.prod.js build.
           ```javascript
        import { warn } from '@ember/debug';
        import tomsterCount from './tomster-counter'; // a module in my project
           // Log a warning if we have more than 3 tomsters
        warn('Too many tomsters!', tomsterCount <= 3, {
          id: 'ember-debug.too-many-tomsters'
        });
        ```
           @method warn
        @for @ember/debug
        @static
        @param {String} message A warning to display.
        @param {Boolean} test An optional boolean. If falsy, the warning
          will be displayed.
        @param {Object} options An object that can be used to pass a unique
          `id` for this warning.  The `id` can be used by Ember debugging tools
          to change the behavior (raise, log, or silence) for that specific warning.
          The `id` should be namespaced by dots, e.g. "ember-debug.feature-flag-with-features-stripped"
        @public
        @since 1.0.0
      */
      warn = function warn(message, test, options) {
        if (arguments.length === 2 && typeof test === 'object') {
          options = test;
          test = false;
        }
        (0, _index.assert)(missingOptionsDeprecation, !!options);
        (0, _index.assert)(missingOptionsIdDeprecation, !!(options && options.id));
        (0, _handlers.invoke)('warn', message, test, options);
      };
    }
  exports.default = warn;
  exports.registerHandler = registerHandler;
  exports.missingOptionsIdDeprecation = missingOptionsIdDeprecation;
  exports.missingOptionsDeprecation = missingOptionsDeprecation;
});
enifed('@ember/deprecated-features/index', ['exports'], function (exports) {
  'use strict';

  var SEND_ACTION = exports.SEND_ACTION = !!'3.4.0';
  var EMBER_EXTEND_PROTOTYPES = exports.EMBER_EXTEND_PROTOTYPES = !!'3.2.0-beta.5';
  var RUN_SYNC = exports.RUN_SYNC = !!'3.0.0-beta.4';
  var LOGGER = exports.LOGGER = !!'3.2.0-beta.1';
  var POSITIONAL_PARAM_CONFLICT = exports.POSITIONAL_PARAM_CONFLICT = !!'3.1.0-beta.1';
  var ARRAY_AT_EACH = exports.ARRAY_AT_EACH = !!'3.1.0-beta.1';
  var TARGET_OBJECT = exports.TARGET_OBJECT = !!'2.18.0-beta.1';
  var MAP = exports.MAP = !!'3.3.0-beta.1';
  var ORDERED_SET = exports.ORDERED_SET = !!'3.3.0-beta.1';
  var MERGE = exports.MERGE = !!'3.6.0-beta.1';
  var HANDLER_INFOS = exports.HANDLER_INFOS = !!'3.9.0';
  var ROUTER_EVENTS = exports.ROUTER_EVENTS = !!'3.9.0';
  var TRANSITION_STATE = exports.TRANSITION_STATE = !!'3.9.0';
});
enifed('@ember/engine/index', ['exports', '@ember/engine/lib/engine-parent', 'ember-babel', '@ember/-internals/utils', '@ember/controller', '@ember/-internals/runtime', '@ember/-internals/container', 'dag-map', '@ember/debug', '@ember/-internals/metal', '@ember/application/globals-resolver', '@ember/engine/instance', '@ember/-internals/routing', '@ember/-internals/extension-support', '@ember/-internals/views', '@ember/-internals/glimmer'], function (exports, _engineParent, _emberBabel, _utils, _controller, _runtime, _container, _dagMap, _debug, _metal, _globalsResolver, _instance, _routing, _extensionSupport, _views, _glimmer) {
  'use strict';

  exports.setEngineParent = exports.getEngineParent = undefined;
  Object.defineProperty(exports, 'getEngineParent', {
    enumerable: true,
    get: function () {
      return _engineParent.getEngineParent;
    }
  });
  Object.defineProperty(exports, 'setEngineParent', {
    enumerable: true,
    get: function () {
      return _engineParent.setEngineParent;
    }
  });


  var _templateObject = (0, _emberBabel.taggedTemplateLiteralLoose)(['-bucket-cache:main'], ['-bucket-cache:main']);

  /**
  @module @ember/engine
  */

  function props(obj) {
    var properties = [];

    for (var key in obj) {
      properties.push(key);
    }

    return properties;
  }

  /**
    The `Engine` class contains core functionality for both applications and
    engines.
  
    Each engine manages a registry that's used for dependency injection and
    exposed through `RegistryProxy`.
  
    Engines also manage initializers and instance initializers.
  
    Engines can spawn `EngineInstance` instances via `buildInstance()`.
  
    @class Engine
    @extends Ember.Namespace
    @uses RegistryProxy
    @public
  */
  var Engine = _runtime.Namespace.extend(_runtime.RegistryProxyMixin, {
    init: function () {
      this._super.apply(this, arguments);

      this.buildRegistry();
    },

    /**
      A private flag indicating whether an engine's initializers have run yet.
       @private
      @property _initializersRan
    */
    _initializersRan: false,

    /**
      Ensure that initializers are run once, and only once, per engine.
       @private
      @method ensureInitializers
    */
    ensureInitializers: function () {
      if (!this._initializersRan) {
        this.runInitializers();
        this._initializersRan = true;
      }
    },

    /**
      Create an EngineInstance for this engine.
       @public
      @method buildInstance
      @return {EngineInstance} the engine instance
    */
    buildInstance: function () {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      this.ensureInitializers();
      options.base = this;
      return _instance.default.create(options);
    },

    /**
      Build and configure the registry for the current engine.
       @private
      @method buildRegistry
      @return {Ember.Registry} the configured registry
    */
    buildRegistry: function () {
      var registry = this.__registry__ = this.constructor.buildRegistry(this);

      return registry;
    },

    /**
      @private
      @method initializer
    */
    initializer: function (options) {
      this.constructor.initializer(options);
    },

    /**
      @private
      @method instanceInitializer
    */
    instanceInitializer: function (options) {
      this.constructor.instanceInitializer(options);
    },

    /**
      @private
      @method runInitializers
    */
    runInitializers: function () {
      var _this = this;

      this._runInitializer('initializers', function (name, initializer) {
        true && !!!initializer && (0, _debug.assert)('No application initializer named \'' + name + '\'', !!initializer);

        initializer.initialize(_this);
      });
    },

    /**
      @private
      @since 1.12.0
      @method runInstanceInitializers
    */
    runInstanceInitializers: function (instance) {
      this._runInitializer('instanceInitializers', function (name, initializer) {
        true && !!!initializer && (0, _debug.assert)('No instance initializer named \'' + name + '\'', !!initializer);

        initializer.initialize(instance);
      });
    },
    _runInitializer: function (bucketName, cb) {
      var initializersByName = (0, _metal.get)(this.constructor, bucketName);
      var initializers = props(initializersByName);
      var graph = new _dagMap.default();
      var initializer = void 0;

      for (var i = 0; i < initializers.length; i++) {
        initializer = initializersByName[initializers[i]];
        graph.add(initializer.name, initializer, initializer.before, initializer.after);
      }

      graph.topsort(cb);
    }
  });

  Engine.reopenClass({
    initializers: Object.create(null),
    instanceInitializers: Object.create(null),

    /**
      The goal of initializers should be to register dependencies and injections.
      This phase runs once. Because these initializers may load code, they are
      allowed to defer application readiness and advance it. If you need to access
      the container or store you should use an InstanceInitializer that will be run
      after all initializers and therefore after all code is loaded and the app is
      ready.
       Initializer receives an object which has the following attributes:
      `name`, `before`, `after`, `initialize`. The only required attribute is
      `initialize`, all others are optional.
       * `name` allows you to specify under which name the initializer is registered.
      This must be a unique name, as trying to register two initializers with the
      same name will result in an error.
       ```app/initializer/named-initializer.js
      import { debug } from '@ember/debug';
       export function initialize() {
        debug('Running namedInitializer!');
      }
       export default {
        name: 'named-initializer',
        initialize
      };
      ```
       * `before` and `after` are used to ensure that this initializer is ran prior
      or after the one identified by the value. This value can be a single string
      or an array of strings, referencing the `name` of other initializers.
       An example of ordering initializers, we create an initializer named `first`:
       ```app/initializer/first.js
      import { debug } from '@ember/debug';
       export function initialize() {
        debug('First initializer!');
      }
       export default {
        name: 'first',
        initialize
      };
      ```
       ```bash
      // DEBUG: First initializer!
      ```
       We add another initializer named `second`, specifying that it should run
      after the initializer named `first`:
       ```app/initializer/second.js
      import { debug } from '@ember/debug';
       export function initialize() {
        debug('Second initializer!');
      }
       export default {
        name: 'second',
        after: 'first',
        initialize
      };
      ```
       ```
      // DEBUG: First initializer!
      // DEBUG: Second initializer!
      ```
       Afterwards we add a further initializer named `pre`, this time specifying
      that it should run before the initializer named `first`:
       ```app/initializer/pre.js
      import { debug } from '@ember/debug';
       export function initialize() {
        debug('Pre initializer!');
      }
       export default {
        name: 'pre',
        before: 'first',
        initialize
      };
      ```
       ```bash
      // DEBUG: Pre initializer!
      // DEBUG: First initializer!
      // DEBUG: Second initializer!
      ```
       Finally we add an initializer named `post`, specifying it should run after
      both the `first` and the `second` initializers:
       ```app/initializer/post.js
      import { debug } from '@ember/debug';
       export function initialize() {
        debug('Post initializer!');
      }
       export default {
        name: 'post',
        after: ['first', 'second'],
        initialize
      };
      ```
       ```bash
      // DEBUG: Pre initializer!
      // DEBUG: First initializer!
      // DEBUG: Second initializer!
      // DEBUG: Post initializer!
      ```
       * `initialize` is a callback function that receives one argument,
        `application`, on which you can operate.
       Example of using `application` to register an adapter:
       ```app/initializer/api-adapter.js
      import ApiAdapter from '../utils/api-adapter';
       export function initialize(application) {
        application.register('api-adapter:main', ApiAdapter);
      }
       export default {
        name: 'post',
        after: ['first', 'second'],
        initialize
      };
      ```
       @method initializer
      @param initializer {Object}
      @public
    */

    initializer: buildInitializerMethod('initializers', 'initializer'),

    /**
      Instance initializers run after all initializers have run. Because
      instance initializers run after the app is fully set up. We have access
      to the store, container, and other items. However, these initializers run
      after code has loaded and are not allowed to defer readiness.
       Instance initializer receives an object which has the following attributes:
      `name`, `before`, `after`, `initialize`. The only required attribute is
      `initialize`, all others are optional.
       * `name` allows you to specify under which name the instanceInitializer is
      registered. This must be a unique name, as trying to register two
      instanceInitializer with the same name will result in an error.
       ```app/initializer/named-instance-initializer.js
      import { debug } from '@ember/debug';
       export function initialize() {
        debug('Running named-instance-initializer!');
      }
       export default {
        name: 'named-instance-initializer',
        initialize
      };
      ```
       * `before` and `after` are used to ensure that this initializer is ran prior
      or after the one identified by the value. This value can be a single string
      or an array of strings, referencing the `name` of other initializers.
       * See Application.initializer for discussion on the usage of before
      and after.
       Example instanceInitializer to preload data into the store.
       ```app/initializer/preload-data.js
      import $ from 'jquery';
       export function initialize(application) {
          var userConfig, userConfigEncoded, store;
          // We have a HTML escaped JSON representation of the user's basic
          // configuration generated server side and stored in the DOM of the main
          // index.html file. This allows the app to have access to a set of data
          // without making any additional remote calls. Good for basic data that is
          // needed for immediate rendering of the page. Keep in mind, this data,
          // like all local models and data can be manipulated by the user, so it
          // should not be relied upon for security or authorization.
           // Grab the encoded data from the meta tag
          userConfigEncoded = $('head meta[name=app-user-config]').attr('content');
           // Unescape the text, then parse the resulting JSON into a real object
          userConfig = JSON.parse(unescape(userConfigEncoded));
           // Lookup the store
          store = application.lookup('service:store');
           // Push the encoded JSON into the store
          store.pushPayload(userConfig);
      }
       export default {
        name: 'named-instance-initializer',
        initialize
      };
      ```
       @method instanceInitializer
      @param instanceInitializer
      @public
    */
    instanceInitializer: buildInitializerMethod('instanceInitializers', 'instance initializer'),

    /**
      This creates a registry with the default Ember naming conventions.
       It also configures the registry:
       * registered views are created every time they are looked up (they are
        not singletons)
      * registered templates are not factories; the registered value is
        returned directly.
      * the router receives the application as its `namespace` property
      * all controllers receive the router as their `target` and `controllers`
        properties
      * all controllers receive the application as their `namespace` property
      * the application view receives the application controller as its
        `controller` property
      * the application view receives the application template as its
        `defaultTemplate` property
       @method buildRegistry
      @static
      @param {Application} namespace the application for which to
        build the registry
      @return {Ember.Registry} the built registry
      @private
    */
    buildRegistry: function (namespace) {
      var registry = new _container.Registry({
        resolver: resolverFor(namespace)
      });

      registry.set = _metal.set;

      registry.register('application:main', namespace, { instantiate: false });

      commonSetupRegistry(registry);
      (0, _glimmer.setupEngineRegistry)(registry);

      return registry;
    },

    /**
      Set this to provide an alternate class to `DefaultResolver`
       @deprecated Use 'Resolver' instead
      @property resolver
      @public
    */
    resolver: null,

    /**
      Set this to provide an alternate class to `DefaultResolver`
       @property resolver
      @public
    */
    Resolver: null
  });

  /**
    This function defines the default lookup rules for container lookups:
  
    * templates are looked up on `Ember.TEMPLATES`
    * other names are looked up on the application after classifying the name.
      For example, `controller:post` looks up `App.PostController` by default.
    * if the default lookup fails, look for registered classes on the container
  
    This allows the application to register default injections in the container
    that could be overridden by the normal naming convention.
  
    @private
    @method resolverFor
    @param {Ember.Namespace} namespace the namespace to look for classes
    @return {*} the resolved value for a given lookup
  */
  function resolverFor(namespace) {
    var ResolverClass = (0, _metal.get)(namespace, 'Resolver') || _globalsResolver.default;
    var props = { namespace: namespace };
    return ResolverClass.create(props);
  }

  function buildInitializerMethod(bucketName, humanName) {
    return function (initializer) {
      // If this is the first initializer being added to a subclass, we are going to reopen the class
      // to make sure we have a new `initializers` object, which extends from the parent class' using
      // prototypal inheritance. Without this, attempting to add initializers to the subclass would
      // pollute the parent class as well as other subclasses.
      if (this.superclass[bucketName] !== undefined && this.superclass[bucketName] === this[bucketName]) {
        var attrs = {};
        attrs[bucketName] = Object.create(this[bucketName]);
        this.reopenClass(attrs);
      }

      true && !!this[bucketName][initializer.name] && (0, _debug.assert)('The ' + humanName + ' \'' + initializer.name + '\' has already been registered', !this[bucketName][initializer.name]);
      true && !(0, _utils.canInvoke)(initializer, 'initialize') && (0, _debug.assert)('An ' + humanName + ' cannot be registered without an initialize function', (0, _utils.canInvoke)(initializer, 'initialize'));
      true && !(initializer.name !== undefined) && (0, _debug.assert)('An ' + humanName + ' cannot be registered without a name property', initializer.name !== undefined);

      this[bucketName][initializer.name] = initializer;
    };
  }

  function commonSetupRegistry(registry) {
    registry.optionsForType('component', { singleton: false });
    registry.optionsForType('view', { singleton: false });

    registry.register('controller:basic', _controller.default, { instantiate: false });

    registry.injection('view', '_viewRegistry', '-view-registry:main');
    registry.injection('renderer', '_viewRegistry', '-view-registry:main');
    registry.injection('event_dispatcher:main', '_viewRegistry', '-view-registry:main');

    registry.injection('route', '_topLevelViewTemplate', 'template:-outlet');

    registry.injection('view:-outlet', 'namespace', 'application:main');

    registry.injection('controller', 'target', 'router:main');
    registry.injection('controller', 'namespace', 'application:main');

    registry.injection('router', '_bucketCache', (0, _container.privatize)(_templateObject));
    registry.injection('route', '_bucketCache', (0, _container.privatize)(_templateObject));

    registry.injection('route', '_router', 'router:main');

    // Register the routing service...
    registry.register('service:-routing', _routing.RoutingService);
    // Then inject the app router into it
    registry.injection('service:-routing', 'router', 'router:main');

    // DEBUGGING
    registry.register('resolver-for-debugging:main', registry.resolver, {
      instantiate: false
    });
    registry.injection('container-debug-adapter:main', 'resolver', 'resolver-for-debugging:main');
    registry.injection('data-adapter:main', 'containerDebugAdapter', 'container-debug-adapter:main');
    // Custom resolver authors may want to register their own ContainerDebugAdapter with this key

    registry.register('container-debug-adapter:main', _extensionSupport.ContainerDebugAdapter);

    registry.register('component-lookup:main', _views.ComponentLookup);
  }

  exports.default = Engine;
});
enifed('@ember/engine/instance', ['exports', 'ember-babel', '@ember/-internals/utils', '@ember/-internals/runtime', '@ember/debug', '@ember/error', '@ember/-internals/container', '@ember/engine/lib/engine-parent'], function (exports, _emberBabel, _utils, _runtime, _debug, _error, _container, _engineParent) {
  'use strict';

  var _templateObject = (0, _emberBabel.taggedTemplateLiteralLoose)(['-bucket-cache:main'], ['-bucket-cache:main']),
      _templateObject2 = (0, _emberBabel.taggedTemplateLiteralLoose)(['template-compiler:main'], ['template-compiler:main']);

  /**
  @module @ember/engine
  */

  /**
    The `EngineInstance` encapsulates all of the stateful aspects of a
    running `Engine`.
  
    @public
    @class EngineInstance
    @extends EmberObject
    @uses RegistryProxyMixin
    @uses ContainerProxyMixin
  */

  var EngineInstance = _runtime.Object.extend(_runtime.RegistryProxyMixin, _runtime.ContainerProxyMixin, {
    /**
      The base `Engine` for which this is an instance.
       @property {Engine} engine
      @private
    */
    base: null,

    init: function () {
      this._super.apply(this, arguments);

      (0, _utils.guidFor)(this);

      var base = this.base;

      if (!base) {
        base = this.application;
        this.base = base;
      }

      // Create a per-instance registry that will use the application's registry
      // as a fallback for resolving registrations.
      var registry = this.__registry__ = new _container.Registry({
        fallback: base.__registry__
      });

      // Create a per-instance container from the instance's registry
      this.__container__ = registry.container({ owner: this });

      this._booted = false;
    },

    /**
      Initialize the `EngineInstance` and return a promise that resolves
      with the instance itself when the boot process is complete.
       The primary task here is to run any registered instance initializers.
       See the documentation on `BootOptions` for the options it takes.
       @public
      @method boot
      @param options {Object}
      @return {Promise<EngineInstance,Error>}
    */
    boot: function (options) {
      var _this = this;

      if (this._bootPromise) {
        return this._bootPromise;
      }

      this._bootPromise = new _runtime.RSVP.Promise(function (resolve) {
        return resolve(_this._bootSync(options));
      });

      return this._bootPromise;
    },

    /**
      Unfortunately, a lot of existing code assumes booting an instance is
      synchronous – specifically, a lot of tests assume the last call to
      `app.advanceReadiness()` or `app.reset()` will result in a new instance
      being fully-booted when the current runloop completes.
       We would like new code (like the `visit` API) to stop making this
      assumption, so we created the asynchronous version above that returns a
      promise. But until we have migrated all the code, we would have to expose
      this method for use *internally* in places where we need to boot an instance
      synchronously.
       @private
    */
    _bootSync: function (options) {
      if (this._booted) {
        return this;
      }

      true && !(0, _engineParent.getEngineParent)(this) && (0, _debug.assert)("An engine instance's parent must be set via `setEngineParent(engine, parent)` prior to calling `engine.boot()`.", (0, _engineParent.getEngineParent)(this));

      this.cloneParentDependencies();

      this.setupRegistry(options);

      this.base.runInstanceInitializers(this);

      this._booted = true;

      return this;
    },
    setupRegistry: function () {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.__container__.lookup('-environment:main');

      this.constructor.setupRegistry(this.__registry__, options);
    },

    /**
     Unregister a factory.
      Overrides `RegistryProxy#unregister` in order to clear any cached instances
     of the unregistered factory.
      @public
     @method unregister
     @param {String} fullName
     */
    unregister: function (fullName) {
      this.__container__.reset(fullName);
      this._super.apply(this, arguments);
    },

    /**
      Build a new `EngineInstance` that's a child of this instance.
       Engines must be registered by name with their parent engine
      (or application).
       @private
      @method buildChildEngineInstance
      @param name {String} the registered name of the engine.
      @param options {Object} options provided to the engine instance.
      @return {EngineInstance,Error}
    */
    buildChildEngineInstance: function (name) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var Engine = this.lookup('engine:' + name);

      if (!Engine) {
        throw new _error.default('You attempted to mount the engine \'' + name + '\', but it is not registered with its parent.');
      }

      var engineInstance = Engine.buildInstance(options);

      (0, _engineParent.setEngineParent)(engineInstance, this);

      return engineInstance;
    },

    /**
      Clone dependencies shared between an engine instance and its parent.
       @private
      @method cloneParentDependencies
    */
    cloneParentDependencies: function () {
      var _this2 = this;

      var parent = (0, _engineParent.getEngineParent)(this);

      var registrations = ['route:basic', 'service:-routing', 'service:-glimmer-environment'];

      registrations.forEach(function (key) {
        return _this2.register(key, parent.resolveRegistration(key));
      });

      var env = parent.lookup('-environment:main');
      this.register('-environment:main', env, { instantiate: false });

      var singletons = ['router:main', (0, _container.privatize)(_templateObject), '-view-registry:main', 'renderer:-' + (env.isInteractive ? 'dom' : 'inert'), 'service:-document', (0, _container.privatize)(_templateObject2)];

      if (env.isInteractive) {
        singletons.push('event_dispatcher:main');
      }

      singletons.forEach(function (key) {
        return _this2.register(key, parent.lookup(key), { instantiate: false });
      });

      this.inject('view', '_environment', '-environment:main');
      this.inject('route', '_environment', '-environment:main');
    }
  });

  EngineInstance.reopenClass({
    /**
     @private
     @method setupRegistry
     @param {Registry} registry
     @param {BootOptions} options
     */
    setupRegistry: function (registry, options) {
      // when no options/environment is present, do nothing
      if (!options) {
        return;
      }

      registry.injection('view', '_environment', '-environment:main');
      registry.injection('route', '_environment', '-environment:main');

      if (options.isInteractive) {
        registry.injection('view', 'renderer', 'renderer:-dom');
        registry.injection('component', 'renderer', 'renderer:-dom');
      } else {
        registry.injection('view', 'renderer', 'renderer:-inert');
        registry.injection('component', 'renderer', 'renderer:-inert');
      }
    }
  });

  exports.default = EngineInstance;
});
enifed('@ember/engine/lib/engine-parent', ['exports', '@ember/-internals/utils'], function (exports, _utils) {
  'use strict';

  exports.getEngineParent = getEngineParent;
  exports.setEngineParent = setEngineParent;


  var ENGINE_PARENT = (0, _utils.symbol)('ENGINE_PARENT');

  /**
    `getEngineParent` retrieves an engine instance's parent instance.
  
    @method getEngineParent
    @param {EngineInstance} engine An engine instance.
    @return {EngineInstance} The parent engine instance.
    @for @ember/engine
    @static
    @private
  */
  /**
  @module @ember/engine
  */
  function getEngineParent(engine) {
    return engine[ENGINE_PARENT];
  }

  /**
    `setEngineParent` sets an engine instance's parent instance.
  
    @method setEngineParent
    @param {EngineInstance} engine An engine instance.
    @param {EngineInstance} parent The parent engine instance.
    @private
  */
  function setEngineParent(engine, parent) {
    engine[ENGINE_PARENT] = parent;
  }
});
enifed("@ember/error/index", ["exports"], function (exports) {
  "use strict";

  exports.default = EmberError;
  /**
    A subclass of the JavaScript Error object for use in Ember.
  
    @class Error
    @namespace Ember
    @extends Error
    @constructor
    @public
  */
  function EmberError(message) {
    if (!(this instanceof EmberError)) {
      return new EmberError(message);
    }

    var error = Error.call(this, message);

    this.stack = error.stack;
    this.description = error.description;
    this.fileName = error.fileName;
    this.lineNumber = error.lineNumber;
    this.message = error.message;
    this.name = error.name;
    this.number = error.number;
    this.code = error.code;
  }

  EmberError.prototype = Object.create(Error.prototype);
  EmberError.prototype.constructor = EmberError;
});
enifed('@ember/instrumentation/index', ['exports', '@ember/-internals/environment'], function (exports, _environment) {
    'use strict';

    exports.flaggedInstrument = exports.subscribers = undefined;
    exports.instrument = instrument;
    exports._instrumentStart = _instrumentStart;
    exports.subscribe = subscribe;
    exports.unsubscribe = unsubscribe;
    exports.reset = reset;


    /**
    @module @ember/instrumentation
    @private
    */
    /**
      The purpose of the Ember Instrumentation module is
      to provide efficient, general-purpose instrumentation
      for Ember.
    
      Subscribe to a listener by using `subscribe`:
    
      ```javascript
      import { subscribe } from '@ember/instrumentation';
    
      subscribe("render", {
        before(name, timestamp, payload) {
    
        },
    
        after(name, timestamp, payload) {
    
        }
      });
      ```
    
      If you return a value from the `before` callback, that same
      value will be passed as a fourth parameter to the `after`
      callback.
    
      Instrument a block of code by using `instrument`:
    
      ```javascript
      import { instrument } from '@ember/instrumentation';
    
      instrument("render.handlebars", payload, function() {
        // rendering logic
      }, binding);
      ```
    
      Event names passed to `instrument` are namespaced
      by periods, from more general to more specific. Subscribers
      can listen for events by whatever level of granularity they
      are interested in.
    
      In the above example, the event is `render.handlebars`,
      and the subscriber listened for all events beginning with
      `render`. It would receive callbacks for events named
      `render`, `render.handlebars`, `render.container`, or
      even `render.handlebars.layout`.
    
      @class Instrumentation
      @static
      @private
    */
    var subscribers = exports.subscribers = []; /* eslint no-console:off */
    /* global console */

    var cache = {};
    function populateListeners(name) {
        var listeners = [];
        var subscriber = void 0;
        for (var i = 0; i < subscribers.length; i++) {
            subscriber = subscribers[i];
            if (subscriber.regex.test(name)) {
                listeners.push(subscriber.object);
            }
        }
        cache[name] = listeners;
        return listeners;
    }
    var time = function () {
        var perf = 'undefined' !== typeof window ? window.performance || {} : {};
        var fn = perf.now || perf.mozNow || perf.webkitNow || perf.msNow || perf.oNow;
        // fn.bind will be available in all the browsers that support the advanced window.performance... ;-)
        return fn ? fn.bind(perf) : function () {
            return +new Date();
        };
    }();
    function instrument(name, p1, p2, p3) {
        var payload = void 0;
        var callback = void 0;
        var binding = void 0;
        if (arguments.length <= 3 && typeof p1 === 'function') {
            payload = {};
            callback = p1;
            binding = p2;
        } else {
            payload = p1 || {};
            callback = p2;
            binding = p3;
        }
        if (subscribers.length === 0) {
            return callback.call(binding);
        }
        var finalizer = _instrumentStart(name, function () {
            return payload;
        });
        if (finalizer) {
            return withFinalizer(callback, finalizer, payload, binding);
        } else {
            return callback.call(binding);
        }
    }
    var flaggedInstrument = void 0;
    if (false /* EMBER_IMPROVED_INSTRUMENTATION */) {
            exports.flaggedInstrument = flaggedInstrument = instrument;
        } else {
        exports.flaggedInstrument = flaggedInstrument = function (_name, _payload, callback) {
            return callback();
        };
    }
    exports.flaggedInstrument = flaggedInstrument;

    function withFinalizer(callback, finalizer, payload, binding) {
        var result = void 0;
        try {
            result = callback.call(binding);
        } catch (e) {
            payload.exception = e;
            result = payload;
        } finally {
            finalizer();
        }
        return result;
    }
    function NOOP() {}
    function _instrumentStart(name, _payload, _payloadParam) {
        if (subscribers.length === 0) {
            return NOOP;
        }
        var listeners = cache[name];
        if (!listeners) {
            listeners = populateListeners(name);
        }
        if (listeners.length === 0) {
            return NOOP;
        }
        var payload = _payload(_payloadParam);
        var STRUCTURED_PROFILE = _environment.ENV.STRUCTURED_PROFILE;
        var timeName = void 0;
        if (STRUCTURED_PROFILE) {
            timeName = name + ': ' + payload.object;
            console.time(timeName);
        }
        var beforeValues = new Array(listeners.length);
        var i = void 0;
        var listener = void 0;
        var timestamp = time();
        for (i = 0; i < listeners.length; i++) {
            listener = listeners[i];
            beforeValues[i] = listener.before(name, timestamp, payload);
        }
        return function _instrumentEnd() {
            var i = void 0;
            var listener = void 0;
            var timestamp = time();
            for (i = 0; i < listeners.length; i++) {
                listener = listeners[i];
                if (typeof listener.after === 'function') {
                    listener.after(name, timestamp, payload, beforeValues[i]);
                }
            }
            if (STRUCTURED_PROFILE) {
                console.timeEnd(timeName);
            }
        };
    }
    /**
      Subscribes to a particular event or instrumented block of code.
    
      @method subscribe
      @for @ember/instrumentation
      @static
    
      @param {String} [pattern] Namespaced event name.
      @param {Object} [object] Before and After hooks.
    
      @return {Subscriber}
      @private
    */
    function subscribe(pattern, object) {
        var paths = pattern.split('.');
        var path = void 0;
        var regexes = [];
        for (var i = 0; i < paths.length; i++) {
            path = paths[i];
            if (path === '*') {
                regexes.push('[^\\.]*');
            } else {
                regexes.push(path);
            }
        }
        var regex = regexes.join('\\.');
        regex = regex + '(\\..*)?';
        var subscriber = {
            pattern: pattern,
            regex: new RegExp('^' + regex + '$'),
            object: object
        };
        subscribers.push(subscriber);
        cache = {};
        return subscriber;
    }
    /**
      Unsubscribes from a particular event or instrumented block of code.
    
      @method unsubscribe
      @for @ember/instrumentation
      @static
    
      @param {Object} [subscriber]
      @private
    */
    function unsubscribe(subscriber) {
        var index = 0;
        for (var i = 0; i < subscribers.length; i++) {
            if (subscribers[i] === subscriber) {
                index = i;
            }
        }
        subscribers.splice(index, 1);
        cache = {};
    }
    /**
      Resets `Instrumentation` by flushing list of subscribers.
    
      @method reset
      @for @ember/instrumentation
      @static
      @private
    */
    function reset() {
        subscribers.length = 0;
        cache = {};
    }
});
enifed('@ember/map/index', ['exports', 'ember-babel', '@ember/debug', '@ember/-internals/utils', '@ember/map/lib/ordered-set', '@ember/map/lib/utils', '@ember/deprecated-features'], function (exports, _emberBabel, _debug, _utils, _orderedSet, _utils2, _deprecatedFeatures) {
  'use strict';

  /**
  @module @ember/map
  @private
  */

  var Map = void 0;

  if (_deprecatedFeatures.MAP) {
    /*
    JavaScript (before ES6) does not have a Map implementation. Objects,
    which are often used as dictionaries, may only have Strings as keys.
     Because Ember has a way to get a unique identifier for every object
    via `guidFor`, we can implement a performant Map with arbitrary
    keys. Because it is commonly used in low-level bookkeeping, Map is
    implemented as a pure JavaScript object for performance.
     This implementation follows the current iteration of the ES6 proposal for
    maps (http://wiki.ecmascript.org/doku.php?id=harmony:simple_maps_and_sets),
    with one exception:  as we do not have the luxury of in-VM iteration, we implement a
    forEach method for iteration.
     Map is mocked out to look like an Ember object, so you can do
    `EmberMap.create()` for symmetry with other Ember classes.
    */

    /**
    A Map stores values indexed by keys. Unlike JavaScript's
    default Objects, the keys of a Map can be any JavaScript
    object.
     Internally, a Map has two data structures:
     1. `keys`: an OrderedSet of all of the existing keys
    2. `values`: a JavaScript Object indexed by the `guidFor(key)`
     When a key/value pair is added for the first time, we
    add the key to the `keys` OrderedSet, and create or
    replace an entry in `values`. When an entry is deleted,
    we delete its entry in `keys` and `values`.
     @class Map
    @private
    @constructor
    @deprecated use native `Map` instead.
    */
    Map = function () {
      function Map() {
        (0, _emberBabel.classCallCheck)(this, Map);

        true && !false && (0, _debug.deprecate)('Use of @ember/Map is deprecated. Please use native `Map` instead', false, {
          id: 'ember-map-deprecation',
          until: '3.5.0'
        });

        this._keys = new _orderedSet.default();
        this._values = Object.create(null);
        this.size = 0;
      }

      /**
      @method create
      @static
      @private
      */

      Map.create = function create() {
        var Constructor = this;
        return new Constructor();
      };

      /**
      Retrieve the value associated with a given key.
       @method get
      @param {*} key
      @return {*} the value associated with the key, or `undefined`
      @private
      */

      Map.prototype.get = function get(key) {
        if (this.size === 0) {
          return;
        }

        var values = this._values;
        var guid = (0, _utils.guidFor)(key);

        return values[guid];
      };

      /**
      Adds a value to the map. If a value for the given key has already been
      provided, the new value will replace the old value.
       @method set
      @param {*} key
      @param {*} value
      @return {Map}
      @private
      */

      Map.prototype.set = function set(key, value) {
        var keys = this._keys;
        var values = this._values;
        var guid = (0, _utils.guidFor)(key);

        // ensure we don't store -0
        var k = key === -0 ? 0 : key; // eslint-disable-line no-compare-neg-zero

        keys.add(k, guid);

        values[guid] = value;

        this.size = keys.size;

        return this;
      };

      /**
      Removes a value from the map for an associated key.
       @since 1.8.0
      @method delete
      @param {*} key
      @return {Boolean} true if an item was removed, false otherwise
      @private
      */

      Map.prototype.delete = function _delete(key) {
        if (this.size === 0) {
          return false;
        }
        // don't use ES6 "delete" because it will be annoying
        // to use in browsers that are not ES6 friendly;
        var keys = this._keys;
        var values = this._values;
        var guid = (0, _utils.guidFor)(key);

        if (keys.delete(key, guid)) {
          delete values[guid];
          this.size = keys.size;
          return true;
        } else {
          return false;
        }
      };

      /**
      Check whether a key is present.
       @method has
      @param {*} key
      @return {Boolean} true if the item was present, false otherwise
      @private
      */

      Map.prototype.has = function has(key) {
        return this._keys.has(key);
      };

      /**
      Iterate over all the keys and values. Calls the function once
      for each key, passing in value, key, and the map being iterated over,
      in that order.
       The keys are guaranteed to be iterated over in insertion order.
       @method forEach
      @param {Function} callback
      @param {*} self if passed, the `this` value inside the
        callback. By default, `this` is the map.
      @private
      */

      Map.prototype.forEach = function forEach(callback /*, ...thisArg*/) {
        true && !(typeof callback === 'function') && (0, _debug.assert)(Object.prototype.toString.call(callback) + ' is not a function', typeof callback === 'function');

        if (this.size === 0) {
          return;
        }

        var map = this;
        var cb = void 0,
            thisArg = void 0;

        if (arguments.length === 2) {
          thisArg = arguments[1];
          cb = function (key) {
            return callback.call(thisArg, map.get(key), key, map);
          };
        } else {
          cb = function (key) {
            return callback(map.get(key), key, map);
          };
        }

        this._keys.forEach(cb);
      };

      /**
      @method clear
      @private
      */

      Map.prototype.clear = function clear() {
        this._keys.clear();
        this._values = Object.create(null);
        this.size = 0;
      };

      /**
      @method copy
      @return {Map}
      @private
      */

      Map.prototype.copy = function copy() {
        return (0, _utils2.copyMap)(this, new Map());
      };

      return Map;
    }();
  }

  exports.default = Map;
});
enifed('@ember/map/lib/ordered-set', ['exports', 'ember-babel', '@ember/debug', '@ember/-internals/utils', '@ember/map/lib/utils', '@ember/deprecated-features'], function (exports, _emberBabel, _debug, _utils, _utils2, _deprecatedFeatures) {
  'use strict';

  exports.__OrderedSet__ = undefined;


  /**
    This class is used internally by Ember and Ember Data.
    Please do not use it at this time. We plan to clean it up
    and add many tests soon.
  
    @class OrderedSet
    @namespace Ember
    @constructor
    @private
    @deprecated
  */
  var __OrderedSet__ = void 0,
      OrderedSet = void 0;
  /**
   * This is exported so it can be used by the OrderedSet library.
   * This is private do not use it.
   @private
   */

  if (_deprecatedFeatures.ORDERED_SET) {
    exports.__OrderedSet__ = __OrderedSet__ = function () {
      function __OrderedSet__() {
        (0, _emberBabel.classCallCheck)(this, __OrderedSet__);

        this.clear();
      }
      /**
      @method create
      @static
      @return {Ember.OrderedSet}
      @private
      */

      __OrderedSet__.create = function create() {
        var Constructor = this;
        return new Constructor();
      };

      /**
      @method clear
      @private
      */

      __OrderedSet__.prototype.clear = function clear() {
        this.presenceSet = Object.create(null);
        this.list = [];
        this.size = 0;
      };

      /**
      @method add
      @param obj
      @param guid (optional, and for internal use)
      @return {Ember.OrderedSet}
      @private
      */

      __OrderedSet__.prototype.add = function add(obj, _guid) {
        var guid = _guid || (0, _utils.guidFor)(obj);
        var presenceSet = this.presenceSet;
        var list = this.list;

        if (presenceSet[guid] !== true) {
          presenceSet[guid] = true;
          this.size = list.push(obj);
        }

        return this;
      };

      /**
      @since 1.8.0
      @method delete
      @param obj
      @param _guid (optional and for internal use only)
      @return {Boolean}
      @private
      */

      __OrderedSet__.prototype.delete = function _delete(obj, _guid) {
        var guid = _guid || (0, _utils.guidFor)(obj);
        var presenceSet = this.presenceSet;
        var list = this.list;

        if (presenceSet[guid] === true) {
          delete presenceSet[guid];
          var index = list.indexOf(obj);
          if (index > -1) {
            list.splice(index, 1);
          }
          this.size = list.length;
          return true;
        } else {
          return false;
        }
      };

      /**
      @method isEmpty
      @return {Boolean}
      @private
      */

      __OrderedSet__.prototype.isEmpty = function isEmpty() {
        return this.size === 0;
      };

      /**
      @method has
      @param obj
      @return {Boolean}
      @private
      */

      __OrderedSet__.prototype.has = function has(obj) {
        if (this.size === 0) {
          return false;
        }

        var guid = (0, _utils.guidFor)(obj);
        var presenceSet = this.presenceSet;

        return presenceSet[guid] === true;
      };

      /**
      @method forEach
      @param {Function} fn
      @param self
      @private
      */

      __OrderedSet__.prototype.forEach = function forEach(fn /*, ...thisArg*/) {
        true && !(typeof fn === 'function') && (0, _debug.assert)(Object.prototype.toString.call(fn) + ' is not a function', typeof fn === 'function');

        if (this.size === 0) {
          return;
        }

        var list = this.list;

        if (arguments.length === 2) {
          for (var i = 0; i < list.length; i++) {
            fn.call(arguments[1], list[i]);
          }
        } else {
          for (var _i = 0; _i < list.length; _i++) {
            fn(list[_i]);
          }
        }
      };

      /**
      @method toArray
      @return {Array}
      @private
      */

      __OrderedSet__.prototype.toArray = function toArray() {
        return this.list.slice();
      };

      /**
      @method copy
      @return {Ember.OrderedSet}
      @private
      */

      __OrderedSet__.prototype.copy = function copy() {
        var Constructor = this.constructor;
        var set = new Constructor();

        set.presenceSet = (0, _utils2.copyNull)(this.presenceSet);
        set.list = this.toArray();
        set.size = this.size;

        return set;
      };

      return __OrderedSet__;
    }();

    OrderedSet = function (_OrderedSet__) {
      (0, _emberBabel.inherits)(OrderedSet, _OrderedSet__);

      function OrderedSet() {
        (0, _emberBabel.classCallCheck)(this, OrderedSet);

        var _this = (0, _emberBabel.possibleConstructorReturn)(this, _OrderedSet__.call(this));

        true && !false && (0, _debug.deprecate)('Use of @ember/OrderedSet is deprecated. Please use native `Map` instead', false, {
          id: 'ember-map-deprecation',
          until: '3.5.0'
        });

        return _this;
      }

      return OrderedSet;
    }(__OrderedSet__);
  }

  exports.__OrderedSet__ = __OrderedSet__;
  exports.default = OrderedSet;
});
enifed('@ember/map/lib/utils', ['exports', '@ember/deprecated-features'], function (exports, _deprecatedFeatures) {
  'use strict';

  exports.copyNull = exports.copyMap = undefined;


  var copyNull = void 0,
      copyMap = void 0;

  if (_deprecatedFeatures.MAP || _deprecatedFeatures.ORDERED_SET) {
    exports.copyNull = copyNull = function copyNull(obj) {
      var output = Object.create(null);

      for (var prop in obj) {
        // hasOwnPropery is not needed because obj is Object.create(null);
        output[prop] = obj[prop];
      }

      return output;
    };

    exports.copyMap = copyMap = function copyMap(original, newObject) {
      var keys = original._keys.copy();
      var values = copyNull(original._values);

      newObject._keys = keys;
      newObject._values = values;
      newObject.size = original.size;

      return newObject;
    };
  }

  exports.copyMap = copyMap;
  exports.copyNull = copyNull;
});
enifed('@ember/map/with-default', ['exports', 'ember-babel', '@ember/debug', '@ember/map/index', '@ember/map/lib/utils', '@ember/deprecated-features'], function (exports, _emberBabel, _debug, _index, _utils, _deprecatedFeatures) {
  'use strict';

  var MapWithDefault = void 0;

  if (_deprecatedFeatures.MAP) {
    /**
    @class MapWithDefault
    @extends Map
    @private
    @constructor
    @param [options]
      @param {*} [options.defaultValue]
    */
    MapWithDefault = function (_Map) {
      (0, _emberBabel.inherits)(MapWithDefault, _Map);

      function MapWithDefault(options) {
        (0, _emberBabel.classCallCheck)(this, MapWithDefault);

        true && !false && (0, _debug.deprecate)('Use of @ember/MapWithDefault is deprecated. Please use native `Map` instead', false, {
          id: 'ember-map-deprecation',
          until: '3.5.0'
        });

        var _this = (0, _emberBabel.possibleConstructorReturn)(this, _Map.call(this));

        _this.defaultValue = options.defaultValue;
        return _this;
      }

      /**
      @method create
      @static
      @param [options]
        @param {*} [options.defaultValue]
      @return {MapWithDefault|Map} If options are passed, returns
        `MapWithDefault` otherwise returns `EmberMap`
      @private
      @deprecated use native `Map` instead
      */

      MapWithDefault.create = function create(options) {
        if (options) {
          return new MapWithDefault(options);
        } else {
          return new _index.default();
        }
      };

      /**
      Retrieve the value associated with a given key.
       @method get
      @param {*} key
      @return {*} the value associated with the key, or the default value
      @private
      */

      MapWithDefault.prototype.get = function get(key) {
        var hasValue = this.has(key);

        if (hasValue) {
          return _Map.prototype.get.call(this, key);
        } else {
          var defaultValue = this.defaultValue(key);
          this.set(key, defaultValue);
          return defaultValue;
        }
      };

      /**
      @method copy
      @return {MapWithDefault}
      @private
      */

      MapWithDefault.prototype.copy = function copy() {
        var Constructor = this.constructor;
        return (0, _utils.copyMap)(this, new Constructor({
          defaultValue: this.defaultValue
        }));
      };

      return MapWithDefault;
    }(_index.default);
  }

  exports.default = MapWithDefault;
});
enifed('@ember/modifier/index', ['exports', '@ember/-internals/glimmer'], function (exports, _glimmer) {
  'use strict';

  Object.defineProperty(exports, 'setModifierManager', {
    enumerable: true,
    get: function () {
      return _glimmer.setModifierManager;
    }
  });
  Object.defineProperty(exports, 'capabilties', {
    enumerable: true,
    get: function () {
      return _glimmer.modifierCapabilties;
    }
  });
});
enifed('@ember/object/computed', ['exports', '@ember/object/lib/computed/computed_macros', '@ember/object/lib/computed/reduce_computed_macros'], function (exports, _computed_macros, _reduce_computed_macros) {
  'use strict';

  Object.defineProperty(exports, 'empty', {
    enumerable: true,
    get: function () {
      return _computed_macros.empty;
    }
  });
  Object.defineProperty(exports, 'notEmpty', {
    enumerable: true,
    get: function () {
      return _computed_macros.notEmpty;
    }
  });
  Object.defineProperty(exports, 'none', {
    enumerable: true,
    get: function () {
      return _computed_macros.none;
    }
  });
  Object.defineProperty(exports, 'not', {
    enumerable: true,
    get: function () {
      return _computed_macros.not;
    }
  });
  Object.defineProperty(exports, 'bool', {
    enumerable: true,
    get: function () {
      return _computed_macros.bool;
    }
  });
  Object.defineProperty(exports, 'match', {
    enumerable: true,
    get: function () {
      return _computed_macros.match;
    }
  });
  Object.defineProperty(exports, 'equal', {
    enumerable: true,
    get: function () {
      return _computed_macros.equal;
    }
  });
  Object.defineProperty(exports, 'gt', {
    enumerable: true,
    get: function () {
      return _computed_macros.gt;
    }
  });
  Object.defineProperty(exports, 'gte', {
    enumerable: true,
    get: function () {
      return _computed_macros.gte;
    }
  });
  Object.defineProperty(exports, 'lt', {
    enumerable: true,
    get: function () {
      return _computed_macros.lt;
    }
  });
  Object.defineProperty(exports, 'lte', {
    enumerable: true,
    get: function () {
      return _computed_macros.lte;
    }
  });
  Object.defineProperty(exports, 'oneWay', {
    enumerable: true,
    get: function () {
      return _computed_macros.oneWay;
    }
  });
  Object.defineProperty(exports, 'readOnly', {
    enumerable: true,
    get: function () {
      return _computed_macros.readOnly;
    }
  });
  Object.defineProperty(exports, 'deprecatingAlias', {
    enumerable: true,
    get: function () {
      return _computed_macros.deprecatingAlias;
    }
  });
  Object.defineProperty(exports, 'and', {
    enumerable: true,
    get: function () {
      return _computed_macros.and;
    }
  });
  Object.defineProperty(exports, 'or', {
    enumerable: true,
    get: function () {
      return _computed_macros.or;
    }
  });
  Object.defineProperty(exports, 'sum', {
    enumerable: true,
    get: function () {
      return _reduce_computed_macros.sum;
    }
  });
  Object.defineProperty(exports, 'min', {
    enumerable: true,
    get: function () {
      return _reduce_computed_macros.min;
    }
  });
  Object.defineProperty(exports, 'max', {
    enumerable: true,
    get: function () {
      return _reduce_computed_macros.max;
    }
  });
  Object.defineProperty(exports, 'map', {
    enumerable: true,
    get: function () {
      return _reduce_computed_macros.map;
    }
  });
  Object.defineProperty(exports, 'sort', {
    enumerable: true,
    get: function () {
      return _reduce_computed_macros.sort;
    }
  });
  Object.defineProperty(exports, 'setDiff', {
    enumerable: true,
    get: function () {
      return _reduce_computed_macros.setDiff;
    }
  });
  Object.defineProperty(exports, 'mapBy', {
    enumerable: true,
    get: function () {
      return _reduce_computed_macros.mapBy;
    }
  });
  Object.defineProperty(exports, 'filter', {
    enumerable: true,
    get: function () {
      return _reduce_computed_macros.filter;
    }
  });
  Object.defineProperty(exports, 'filterBy', {
    enumerable: true,
    get: function () {
      return _reduce_computed_macros.filterBy;
    }
  });
  Object.defineProperty(exports, 'uniq', {
    enumerable: true,
    get: function () {
      return _reduce_computed_macros.uniq;
    }
  });
  Object.defineProperty(exports, 'uniqBy', {
    enumerable: true,
    get: function () {
      return _reduce_computed_macros.uniqBy;
    }
  });
  Object.defineProperty(exports, 'union', {
    enumerable: true,
    get: function () {
      return _reduce_computed_macros.union;
    }
  });
  Object.defineProperty(exports, 'intersect', {
    enumerable: true,
    get: function () {
      return _reduce_computed_macros.intersect;
    }
  });
  Object.defineProperty(exports, 'collect', {
    enumerable: true,
    get: function () {
      return _reduce_computed_macros.collect;
    }
  });
});
enifed('@ember/object/lib/computed/computed_macros', ['exports', '@ember/-internals/metal', '@ember/debug'], function (exports, _metal, _debug) {
  'use strict';

  exports.or = exports.and = undefined;
  exports.empty = empty;
  exports.notEmpty = notEmpty;
  exports.none = none;
  exports.not = not;
  exports.bool = bool;
  exports.match = match;
  exports.equal = equal;
  exports.gt = gt;
  exports.gte = gte;
  exports.lt = lt;
  exports.lte = lte;
  exports.oneWay = oneWay;
  exports.readOnly = readOnly;
  exports.deprecatingAlias = deprecatingAlias;


  /**
  @module @ember/object
  */

  function expandPropertiesToArray(predicateName, properties) {
    var expandedProperties = [];

    function extractProperty(entry) {
      expandedProperties.push(entry);
    }

    for (var i = 0; i < properties.length; i++) {
      var property = properties[i];
      true && !(property.indexOf(' ') < 0) && (0, _debug.assert)('Dependent keys passed to computed.' + predicateName + '() can\'t have spaces.', property.indexOf(' ') < 0);

      (0, _metal.expandProperties)(property, extractProperty);
    }

    return expandedProperties;
  }

  function generateComputedWithPredicate(name, predicate) {
    return function () {
      for (var _len = arguments.length, properties = Array(_len), _key = 0; _key < _len; _key++) {
        properties[_key] = arguments[_key];
      }

      var dependentKeys = expandPropertiesToArray(name, properties);

      var computedFunc = new _metal.ComputedProperty(function () {
        var lastIdx = dependentKeys.length - 1;

        for (var i = 0; i < lastIdx; i++) {
          var value = (0, _metal.get)(this, dependentKeys[i]);
          if (!predicate(value)) {
            return value;
          }
        }

        return (0, _metal.get)(this, dependentKeys[lastIdx]);
      }, { dependentKeys: dependentKeys });

      return computedFunc;
    };
  }

  /**
    A computed property that returns true if the value of the dependent
    property is null, an empty string, empty array, or empty function.
  
    Example
  
    ```javascript
    import { empty } from '@ember/object/computed';
    import EmberObject from '@ember/object';
  
    let ToDoList = EmberObject.extend({
      isDone: empty('todos')
    });
  
    let todoList = ToDoList.create({
      todos: ['Unit Test', 'Documentation', 'Release']
    });
  
    todoList.get('isDone'); // false
    todoList.get('todos').clear();
    todoList.get('isDone'); // true
    ```
  
    @since 1.6.0
    @method empty
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @return {ComputedProperty} computed property which returns true if
    the value of the dependent property is null, an empty string, empty array,
    or empty function and false if the underlying value is not empty.
  
    @public
  */
  function empty(dependentKey) {
    return (0, _metal.computed)(dependentKey + '.length', function () {
      return (0, _metal.isEmpty)((0, _metal.get)(this, dependentKey));
    });
  }

  /**
    A computed property that returns true if the value of the dependent
    property is NOT null, an empty string, empty array, or empty function.
  
    Example
  
    ```javascript
    import { notEmpty } from '@ember/object/computed';
    import EmberObject from '@ember/object';
  
    let Hamster = EmberObject.extend({
      hasStuff: notEmpty('backpack')
    });
  
    let hamster = Hamster.create({ backpack: ['Food', 'Sleeping Bag', 'Tent'] });
  
    hamster.get('hasStuff');         // true
    hamster.get('backpack').clear(); // []
    hamster.get('hasStuff');         // false
    ```
  
    @method notEmpty
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @return {ComputedProperty} computed property which returns true if
    original value for property is not empty.
    @public
  */
  function notEmpty(dependentKey) {
    return (0, _metal.computed)(dependentKey + '.length', function () {
      return !(0, _metal.isEmpty)((0, _metal.get)(this, dependentKey));
    });
  }

  /**
    A computed property that returns true if the value of the dependent
    property is null or undefined. This avoids errors from JSLint complaining
    about use of ==, which can be technically confusing.
  
    Example
  
    ```javascript
    import { none } from '@ember/object/computed';
    import EmberObject from '@ember/object';
  
    let Hamster = EmberObject.extend({
      isHungry: none('food')
    });
  
    let hamster = Hamster.create();
  
    hamster.get('isHungry'); // true
    hamster.set('food', 'Banana');
    hamster.get('isHungry'); // false
    hamster.set('food', null);
    hamster.get('isHungry'); // true
    ```
  
    @method none
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @return {ComputedProperty} computed property which
    returns true if original value for property is null or undefined.
    @public
  */
  function none(dependentKey) {
    return (0, _metal.computed)(dependentKey, function () {
      return (0, _metal.isNone)((0, _metal.get)(this, dependentKey));
    });
  }

  /**
    A computed property that returns the inverse boolean value
    of the original value for the dependent property.
  
    Example
  
    ```javascript
    import { not } from '@ember/object/computed';
    import EmberObject from '@ember/object';
  
    let User = EmberObject.extend({
      isAnonymous: not('loggedIn')
    });
  
    let user = User.create({loggedIn: false});
  
    user.get('isAnonymous'); // true
    user.set('loggedIn', true);
    user.get('isAnonymous'); // false
    ```
  
    @method not
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @return {ComputedProperty} computed property which returns
    inverse of the original value for property
    @public
  */
  function not(dependentKey) {
    return (0, _metal.computed)(dependentKey, function () {
      return !(0, _metal.get)(this, dependentKey);
    });
  }

  /**
    A computed property that converts the provided dependent property
    into a boolean value.
  
    ```javascript
    import { bool } from '@ember/object/computed';
    import EmberObject from '@ember/object';
  
    let Hamster = EmberObject.extend({
      hasBananas: bool('numBananas')
    });
  
    let hamster = Hamster.create();
  
    hamster.get('hasBananas'); // false
    hamster.set('numBananas', 0);
    hamster.get('hasBananas'); // false
    hamster.set('numBananas', 1);
    hamster.get('hasBananas'); // true
    hamster.set('numBananas', null);
    hamster.get('hasBananas'); // false
    ```
  
    @method bool
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @return {ComputedProperty} computed property which converts
    to boolean the original value for property
    @public
  */
  function bool(dependentKey) {
    return (0, _metal.computed)(dependentKey, function () {
      return !!(0, _metal.get)(this, dependentKey);
    });
  }

  /**
    A computed property which matches the original value for the
    dependent property against a given RegExp, returning `true`
    if the value matches the RegExp and `false` if it does not.
  
    Example
  
    ```javascript
    import { match } from '@ember/object/computed';
    import EmberObject from '@ember/object';
  
    let User = EmberObject.extend({
      hasValidEmail: match('email', /^.+@.+\..+$/)
    });
  
    let user = User.create({loggedIn: false});
  
    user.get('hasValidEmail'); // false
    user.set('email', '');
    user.get('hasValidEmail'); // false
    user.set('email', 'ember_hamster@example.com');
    user.get('hasValidEmail'); // true
    ```
  
    @method match
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @param {RegExp} regexp
    @return {ComputedProperty} computed property which match
    the original value for property against a given RegExp
    @public
  */
  function match(dependentKey, regexp) {
    return (0, _metal.computed)(dependentKey, function () {
      var value = (0, _metal.get)(this, dependentKey);
      return regexp.test(value);
    });
  }

  /**
    A computed property that returns true if the provided dependent property
    is equal to the given value.
  
    Example
  
    ```javascript
    import { equal } from '@ember/object/computed';
    import EmberObject from '@ember/object';
  
    let Hamster = EmberObject.extend({
      satisfied: equal('percentCarrotsEaten', 100)
    });
  
    let hamster = Hamster.create();
  
    hamster.get('satisfied'); // false
    hamster.set('percentCarrotsEaten', 100);
    hamster.get('satisfied'); // true
    hamster.set('percentCarrotsEaten', 50);
    hamster.get('satisfied'); // false
    ```
  
    @method equal
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @param {String|Number|Object} value
    @return {ComputedProperty} computed property which returns true if
    the original value for property is equal to the given value.
    @public
  */
  function equal(dependentKey, value) {
    return (0, _metal.computed)(dependentKey, function () {
      return (0, _metal.get)(this, dependentKey) === value;
    });
  }

  /**
    A computed property that returns true if the provided dependent property
    is greater than the provided value.
  
    Example
  
    ```javascript
    import { gt } from '@ember/object/computed';
    import EmberObject from '@ember/object';
  
    let Hamster = EmberObject.extend({
      hasTooManyBananas: gt('numBananas', 10)
    });
  
    let hamster = Hamster.create();
  
    hamster.get('hasTooManyBananas'); // false
    hamster.set('numBananas', 3);
    hamster.get('hasTooManyBananas'); // false
    hamster.set('numBananas', 11);
    hamster.get('hasTooManyBananas'); // true
    ```
  
    @method gt
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @param {Number} value
    @return {ComputedProperty} computed property which returns true if
    the original value for property is greater than given value.
    @public
  */
  function gt(dependentKey, value) {
    return (0, _metal.computed)(dependentKey, function () {
      return (0, _metal.get)(this, dependentKey) > value;
    });
  }

  /**
    A computed property that returns true if the provided dependent property
    is greater than or equal to the provided value.
  
    Example
  
    ```javascript
    import { gte } from '@ember/object/computed';
    import EmberObject from '@ember/object';
  
    let Hamster = EmberObject.extend({
      hasTooManyBananas: gte('numBananas', 10)
    });
  
    let hamster = Hamster.create();
  
    hamster.get('hasTooManyBananas'); // false
    hamster.set('numBananas', 3);
    hamster.get('hasTooManyBananas'); // false
    hamster.set('numBananas', 10);
    hamster.get('hasTooManyBananas'); // true
    ```
  
    @method gte
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @param {Number} value
    @return {ComputedProperty} computed property which returns true if
    the original value for property is greater or equal then given value.
    @public
  */
  function gte(dependentKey, value) {
    return (0, _metal.computed)(dependentKey, function () {
      return (0, _metal.get)(this, dependentKey) >= value;
    });
  }

  /**
    A computed property that returns true if the provided dependent property
    is less than the provided value.
  
    Example
  
    ```javascript
    import { lt } from '@ember/object/computed';
    import EmberObject from '@ember/object';
  
    let Hamster = EmberObject.extend({
      needsMoreBananas: lt('numBananas', 3)
    });
  
    let hamster = Hamster.create();
  
    hamster.get('needsMoreBananas'); // true
    hamster.set('numBananas', 3);
    hamster.get('needsMoreBananas'); // false
    hamster.set('numBananas', 2);
    hamster.get('needsMoreBananas'); // true
    ```
  
    @method lt
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @param {Number} value
    @return {ComputedProperty} computed property which returns true if
    the original value for property is less then given value.
    @public
  */
  function lt(dependentKey, value) {
    return (0, _metal.computed)(dependentKey, function () {
      return (0, _metal.get)(this, dependentKey) < value;
    });
  }

  /**
    A computed property that returns true if the provided dependent property
    is less than or equal to the provided value.
  
    Example
  
    ```javascript
    import { lte } from '@ember/object/computed';
    import EmberObject from '@ember/object';
  
    let Hamster = EmberObject.extend({
      needsMoreBananas: lte('numBananas', 3)
    });
  
    let hamster = Hamster.create();
  
    hamster.get('needsMoreBananas'); // true
    hamster.set('numBananas', 5);
    hamster.get('needsMoreBananas'); // false
    hamster.set('numBananas', 3);
    hamster.get('needsMoreBananas'); // true
    ```
  
    @method lte
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @param {Number} value
    @return {ComputedProperty} computed property which returns true if
    the original value for property is less or equal than given value.
    @public
  */
  function lte(dependentKey, value) {
    return (0, _metal.computed)(dependentKey, function () {
      return (0, _metal.get)(this, dependentKey) <= value;
    });
  }

  /**
    A computed property that performs a logical `and` on the
    original values for the provided dependent properties.
  
    You may pass in more than two properties and even use
    property brace expansion.  The computed property will
    return the first falsy value or last truthy value
    just like JavaScript's `&&` operator.
  
    Example
  
    ```javascript
    import { and } from '@ember/object/computed';
    import EmberObject from '@ember/object';
  
    let Hamster = EmberObject.extend({
      readyForCamp: and('hasTent', 'hasBackpack'),
      readyForHike: and('hasWalkingStick', 'hasBackpack')
    });
  
    let tomster = Hamster.create();
  
    tomster.get('readyForCamp'); // false
    tomster.set('hasTent', true);
    tomster.get('readyForCamp'); // false
    tomster.set('hasBackpack', true);
    tomster.get('readyForCamp'); // true
    tomster.set('hasBackpack', 'Yes');
    tomster.get('readyForCamp'); // 'Yes'
    tomster.set('hasWalkingStick', null);
    tomster.get('readyForHike'); // null
    ```
  
    @method and
    @static
    @for @ember/object/computed
    @param {String} dependentKey*
    @return {ComputedProperty} computed property which performs
    a logical `and` on the values of all the original values for properties.
    @public
  */
  var and = exports.and = generateComputedWithPredicate('and', function (value) {
    return value;
  });

  /**
    A computed property which performs a logical `or` on the
    original values for the provided dependent properties.
  
    You may pass in more than two properties and even use
    property brace expansion.  The computed property will
    return the first truthy value or last falsy value just
    like JavaScript's `||` operator.
  
    Example
  
    ```javascript
    import { or } from '@ember/object/computed';
    import EmberObject from '@ember/object';
  
    let Hamster = EmberObject.extend({
      readyForRain: or('hasJacket', 'hasUmbrella'),
      readyForBeach: or('{hasSunscreen,hasUmbrella}')
    });
  
    let tomster = Hamster.create();
  
    tomster.get('readyForRain'); // undefined
    tomster.set('hasUmbrella', true);
    tomster.get('readyForRain'); // true
    tomster.set('hasJacket', 'Yes');
    tomster.get('readyForRain'); // 'Yes'
    tomster.set('hasSunscreen', 'Check');
    tomster.get('readyForBeach'); // 'Check'
    ```
  
    @method or
    @static
    @for @ember/object/computed
    @param {String} dependentKey*
    @return {ComputedProperty} computed property which performs
    a logical `or` on the values of all the original values for properties.
    @public
  */
  var or = exports.or = generateComputedWithPredicate('or', function (value) {
    return !value;
  });

  /**
    Creates a new property that is an alias for another property
    on an object. Calls to `get` or `set` this property behave as
    though they were called on the original property.
  
    ```javascript
    import { alias } from '@ember/object/computed';
    import EmberObject from '@ember/object';
  
    let Person = EmberObject.extend({
      name: 'Alex Matchneer',
      nomen: alias('name')
    });
  
    let alex = Person.create();
  
    alex.get('nomen'); // 'Alex Matchneer'
    alex.get('name');  // 'Alex Matchneer'
  
    alex.set('nomen', '@machty');
    alex.get('name');  // '@machty'
    ```
  
    @method alias
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @return {ComputedProperty} computed property which creates an
    alias to the original value for property.
    @public
  */

  /**
    Where `computed.alias` aliases `get` and `set`, and allows for bidirectional
    data flow, `computed.oneWay` only provides an aliased `get`. The `set` will
    not mutate the upstream property, rather causes the current property to
    become the value set. This causes the downstream property to permanently
    diverge from the upstream property.
  
    Example
  
    ```javascript
    import { oneWay } from '@ember/object/computed';
    import EmberObject from '@ember/object';
  
    let User = EmberObject.extend({
      firstName: null,
      lastName: null,
      nickName: oneWay('firstName')
    });
  
    let teddy = User.create({
      firstName: 'Teddy',
      lastName: 'Zeenny'
    });
  
    teddy.get('nickName');              // 'Teddy'
    teddy.set('nickName', 'TeddyBear'); // 'TeddyBear'
    teddy.get('firstName');             // 'Teddy'
    ```
  
    @method oneWay
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @return {ComputedProperty} computed property which creates a
    one way computed property to the original value for property.
    @public
  */
  function oneWay(dependentKey) {
    return (0, _metal.alias)(dependentKey).oneWay();
  }

  /**
    This is a more semantically meaningful alias of `computed.oneWay`,
    whose name is somewhat ambiguous as to which direction the data flows.
  
    @method reads
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @return {ComputedProperty} computed property which creates a
      one way computed property to the original value for property.
    @public
   */

  /**
    Where `computed.oneWay` provides oneWay bindings, `computed.readOnly` provides
    a readOnly one way binding. Very often when using `computed.oneWay` one does
    not also want changes to propagate back up, as they will replace the value.
  
    This prevents the reverse flow, and also throws an exception when it occurs.
  
    Example
  
    ```javascript
    import { readOnly } from '@ember/object/computed';
    import EmberObject from '@ember/object';
  
    let User = EmberObject.extend({
      firstName: null,
      lastName: null,
      nickName: readOnly('firstName')
    });
  
    let teddy = User.create({
      firstName: 'Teddy',
      lastName:  'Zeenny'
    });
  
    teddy.get('nickName');              // 'Teddy'
    teddy.set('nickName', 'TeddyBear'); // throws Exception
    // throw new EmberError('Cannot Set: nickName on: <User:ember27288>' );`
    teddy.get('firstName');             // 'Teddy'
    ```
  
    @method readOnly
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @return {ComputedProperty} computed property which creates a
    one way computed property to the original value for property.
    @since 1.5.0
    @public
  */
  function readOnly(dependentKey) {
    return (0, _metal.alias)(dependentKey).readOnly();
  }

  /**
    Creates a new property that is an alias for another property
    on an object. Calls to `get` or `set` this property behave as
    though they were called on the original property, but also
    print a deprecation warning.
  
    ```javascript
    import { deprecatingAlias } from '@ember/object/computed';
    import EmberObject from '@ember/object';
  
    let Hamster = EmberObject.extend({
      bananaCount: deprecatingAlias('cavendishCount', {
        id: 'hamster.deprecate-banana',
        until: '3.0.0'
      })
    });
  
    let hamster = Hamster.create();
  
    hamster.set('bananaCount', 5); // Prints a deprecation warning.
    hamster.get('cavendishCount'); // 5
    ```
  
    @method deprecatingAlias
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @param {Object} options Options for `deprecate`.
    @return {ComputedProperty} computed property which creates an
    alias with a deprecation to the original value for property.
    @since 1.7.0
    @public
  */
  function deprecatingAlias(dependentKey, options) {
    return (0, _metal.computed)(dependentKey, {
      get: function (key) {
        true && !false && (0, _debug.deprecate)('Usage of `' + key + '` is deprecated, use `' + dependentKey + '` instead.', false, options);

        return (0, _metal.get)(this, dependentKey);
      },
      set: function (key, value) {
        true && !false && (0, _debug.deprecate)('Usage of `' + key + '` is deprecated, use `' + dependentKey + '` instead.', false, options);

        (0, _metal.set)(this, dependentKey, value);
        return value;
      }
    });
  }
});
enifed('@ember/object/lib/computed/reduce_computed_macros', ['exports', '@ember/debug', '@ember/-internals/metal', '@ember/-internals/runtime'], function (exports, _debug, _metal, _runtime) {
  'use strict';

  exports.union = undefined;
  exports.sum = sum;
  exports.max = max;
  exports.min = min;
  exports.map = map;
  exports.mapBy = mapBy;
  exports.filter = filter;
  exports.filterBy = filterBy;
  exports.uniq = uniq;
  exports.uniqBy = uniqBy;
  exports.intersect = intersect;
  exports.setDiff = setDiff;
  exports.collect = collect;
  exports.sort = sort;


  function reduceMacro(dependentKey, callback, initialValue, name) {
    true && !!/[\[\]\{\}]/g.test(dependentKey) && (0, _debug.assert)('Dependent key passed to `computed.' + name + '` shouldn\'t contain brace expanding pattern.', !/[\[\]\{\}]/g.test(dependentKey));

    var cp = new _metal.ComputedProperty(function () {
      var arr = (0, _metal.get)(this, dependentKey);
      if (arr === null || typeof arr !== 'object') {
        return initialValue;
      }
      return arr.reduce(callback, initialValue, this);
    }, { dependentKeys: [dependentKey + '.[]'], readOnly: true });

    return cp;
  } /**
    @module @ember/object
    */


  function arrayMacro(dependentKey, callback) {
    // This is a bit ugly
    var propertyName = void 0;
    if (/@each/.test(dependentKey)) {
      propertyName = dependentKey.replace(/\.@each.*$/, '');
    } else {
      propertyName = dependentKey;
      dependentKey += '.[]';
    }

    var cp = new _metal.ComputedProperty(function () {
      var value = (0, _metal.get)(this, propertyName);
      if ((0, _runtime.isArray)(value)) {
        return (0, _runtime.A)(callback.call(this, value));
      } else {
        return (0, _runtime.A)();
      }
    }, { readOnly: true });

    cp.property(dependentKey); // this forces to expand properties GH #15855

    return cp;
  }

  function multiArrayMacro(_dependentKeys, callback, name) {
    true && !_dependentKeys.every(function (dependentKey) {
      return !/[\[\]\{\}]/g.test(dependentKey);
    }) && (0, _debug.assert)('Dependent keys passed to `computed.' + name + '` shouldn\'t contain brace expanding pattern.', _dependentKeys.every(function (dependentKey) {
      return !/[\[\]\{\}]/g.test(dependentKey);
    }));

    var dependentKeys = _dependentKeys.map(function (key) {
      return key + '.[]';
    });

    var cp = new _metal.ComputedProperty(function () {
      return (0, _runtime.A)(callback.call(this, _dependentKeys));
    }, { dependentKeys: dependentKeys, readOnly: true });

    return cp;
  }

  /**
    A computed property that returns the sum of the values
    in the dependent array.
  
    @method sum
    @for @ember/object/computed
    @static
    @param {String} dependentKey
    @return {ComputedProperty} computes the sum of all values in the dependentKey's array
    @since 1.4.0
    @public
  */
  function sum(dependentKey) {
    return reduceMacro(dependentKey, function (sum, item) {
      return sum + item;
    }, 0, 'sum');
  }

  /**
    A computed property that calculates the maximum value in the
    dependent array. This will return `-Infinity` when the dependent
    array is empty.
  
    ```javascript
    import { mapBy, max } from '@ember/object/computed';
    import EmberObject from '@ember/object';
  
    let Person = EmberObject.extend({
      childAges: mapBy('children', 'age'),
      maxChildAge: max('childAges')
    });
  
    let lordByron = Person.create({ children: [] });
  
    lordByron.get('maxChildAge'); // -Infinity
    lordByron.get('children').pushObject({
      name: 'Augusta Ada Byron', age: 7
    });
    lordByron.get('maxChildAge'); // 7
    lordByron.get('children').pushObjects([{
      name: 'Allegra Byron',
      age: 5
    }, {
      name: 'Elizabeth Medora Leigh',
      age: 8
    }]);
    lordByron.get('maxChildAge'); // 8
    ```
  
    If the types of the arguments are not numbers,
    they will be converted to numbers and the type
    of the return value will always be `Number`.
    For example, the max of a list of Date objects will be
    the highest timestamp as a `Number`.
    This behavior is consistent with `Math.max`.
  
    @method max
    @for @ember/object/computed
    @static
    @param {String} dependentKey
    @return {ComputedProperty} computes the largest value in the dependentKey's array
    @public
  */
  function max(dependentKey) {
    return reduceMacro(dependentKey, function (max, item) {
      return Math.max(max, item);
    }, -Infinity, 'max');
  }

  /**
    A computed property that calculates the minimum value in the
    dependent array. This will return `Infinity` when the dependent
    array is empty.
  
    ```javascript
    import { mapBy, min } from '@ember/object/computed';
    import EmberObject from '@ember/object';
  
    let Person = EmberObject.extend({
      childAges: mapBy('children', 'age'),
      minChildAge: min('childAges')
    });
  
    let lordByron = Person.create({ children: [] });
  
    lordByron.get('minChildAge'); // Infinity
    lordByron.get('children').pushObject({
      name: 'Augusta Ada Byron', age: 7
    });
    lordByron.get('minChildAge'); // 7
    lordByron.get('children').pushObjects([{
      name: 'Allegra Byron',
      age: 5
    }, {
      name: 'Elizabeth Medora Leigh',
      age: 8
    }]);
    lordByron.get('minChildAge'); // 5
    ```
  
    If the types of the arguments are not numbers,
    they will be converted to numbers and the type
    of the return value will always be `Number`.
    For example, the min of a list of Date objects will be
    the lowest timestamp as a `Number`.
    This behavior is consistent with `Math.min`.
  
    @method min
    @for @ember/object/computed
    @static
    @param {String} dependentKey
    @return {ComputedProperty} computes the smallest value in the dependentKey's array
    @public
  */
  function min(dependentKey) {
    return reduceMacro(dependentKey, function (min, item) {
      return Math.min(min, item);
    }, Infinity, 'min');
  }

  /**
    Returns an array mapped via the callback
  
    The callback method you provide should have the following signature.
    `item` is the current item in the iteration.
    `index` is the integer index of the current item in the iteration.
  
    ```javascript
    function(item, index);
    ```
  
    Example
  
    ```javascript
    import { map } from '@ember/object/computed';
    import EmberObject from '@ember/object';
  
    let Hamster = EmberObject.extend({
      excitingChores: map('chores', function(chore, index) {
        return chore.toUpperCase() + '!';
      })
    });
  
    let hamster = Hamster.create({
      chores: ['clean', 'write more unit tests']
    });
  
    hamster.get('excitingChores'); // ['CLEAN!', 'WRITE MORE UNIT TESTS!']
    ```
  
    @method map
    @for @ember/object/computed
    @static
    @param {String} dependentKey
    @param {Function} callback
    @return {ComputedProperty} an array mapped via the callback
    @public
  */
  function map(dependentKey, callback) {
    return arrayMacro(dependentKey, function (value) {
      return value.map(callback, this);
    });
  }

  /**
    Returns an array mapped to the specified key.
  
    ```javascript
    import { mapBy } from '@ember/object/computed';
    import EmberObject from '@ember/object';
  
    let Person = EmberObject.extend({
      childAges: mapBy('children', 'age')
    });
  
    let lordByron = Person.create({ children: [] });
  
    lordByron.get('childAges'); // []
    lordByron.get('children').pushObject({ name: 'Augusta Ada Byron', age: 7 });
    lordByron.get('childAges'); // [7]
    lordByron.get('children').pushObjects([{
      name: 'Allegra Byron',
      age: 5
    }, {
      name: 'Elizabeth Medora Leigh',
      age: 8
    }]);
    lordByron.get('childAges'); // [7, 5, 8]
    ```
  
    @method mapBy
    @for @ember/object/computed
    @static
    @param {String} dependentKey
    @param {String} propertyKey
    @return {ComputedProperty} an array mapped to the specified key
    @public
  */
  function mapBy(dependentKey, propertyKey) {
    true && !(typeof propertyKey === 'string') && (0, _debug.assert)('`computed.mapBy` expects a property string for its second argument, ' + 'perhaps you meant to use "map"', typeof propertyKey === 'string');
    true && !!/[\[\]\{\}]/g.test(dependentKey) && (0, _debug.assert)('Dependent key passed to `computed.mapBy` shouldn\'t contain brace expanding pattern.', !/[\[\]\{\}]/g.test(dependentKey));

    return map(dependentKey + '.@each.' + propertyKey, function (item) {
      return (0, _metal.get)(item, propertyKey);
    });
  }

  /**
    Filters the array by the callback.
  
    The callback method you provide should have the following signature.
    `item` is the current item in the iteration.
    `index` is the integer index of the current item in the iteration.
    `array` is the dependant array itself.
  
    ```javascript
    function(item, index, array);
    ```
  
    ```javascript
    import { filter } from '@ember/object/computed';
    import EmberObject from '@ember/object';
  
    let Hamster = EmberObject.extend({
      remainingChores: filter('chores', function(chore, index, array) {
        return !chore.done;
      })
    });
  
    let hamster = Hamster.create({
      chores: [
        { name: 'cook', done: true },
        { name: 'clean', done: true },
        { name: 'write more unit tests', done: false }
      ]
    });
  
    hamster.get('remainingChores'); // [{name: 'write more unit tests', done: false}]
    ```
  
    You can also use `@each.property` in your dependent key, the callback will still use the underlying array:
  
    ```javascript
    import { A } from '@ember/array';
    import { filter } from '@ember/object/computed';
    import EmberObject from '@ember/object';
  
    let Hamster = EmberObject.extend({
      remainingChores: filter('chores.@each.done', function(chore, index, array) {
        return !chore.get('done');
      })
    });
  
    let hamster = Hamster.create({
      chores: A([
        EmberObject.create({ name: 'cook', done: true }),
        EmberObject.create({ name: 'clean', done: true }),
        EmberObject.create({ name: 'write more unit tests', done: false })
      ])
    });
    hamster.get('remainingChores'); // [{name: 'write more unit tests', done: false}]
    hamster.get('chores').objectAt(2).set('done', true);
    hamster.get('remainingChores'); // []
    ```
  
  
    @method filter
    @for @ember/object/computed
    @static
    @param {String} dependentKey
    @param {Function} callback
    @return {ComputedProperty} the filtered array
    @public
  */
  function filter(dependentKey, callback) {
    return arrayMacro(dependentKey, function (value) {
      return value.filter(callback, this);
    });
  }

  /**
    Filters the array by the property and value
  
    ```javascript
    import { filterBy } from '@ember/object/computed';
    import EmberObject from '@ember/object';
  
    let Hamster = EmberObject.extend({
      remainingChores: filterBy('chores', 'done', false)
    });
  
    let hamster = Hamster.create({
      chores: [
        { name: 'cook', done: true },
        { name: 'clean', done: true },
        { name: 'write more unit tests', done: false }
      ]
    });
  
    hamster.get('remainingChores'); // [{ name: 'write more unit tests', done: false }]
    ```
  
    @method filterBy
    @for @ember/object/computed
    @static
    @param {String} dependentKey
    @param {String} propertyKey
    @param {*} value
    @return {ComputedProperty} the filtered array
    @public
  */
  function filterBy(dependentKey, propertyKey, value) {
    true && !!/[\[\]\{\}]/g.test(dependentKey) && (0, _debug.assert)('Dependent key passed to `computed.filterBy` shouldn\'t contain brace expanding pattern.', !/[\[\]\{\}]/g.test(dependentKey));

    var callback = void 0;
    if (arguments.length === 2) {
      callback = function (item) {
        return (0, _metal.get)(item, propertyKey);
      };
    } else {
      callback = function (item) {
        return (0, _metal.get)(item, propertyKey) === value;
      };
    }

    return filter(dependentKey + '.@each.' + propertyKey, callback);
  }

  /**
    A computed property which returns a new array with all the unique
    elements from one or more dependent arrays.
  
    Example
  
    ```javascript
    import { uniq } from '@ember/object/computed';
    import EmberObject from '@ember/object';
  
    let Hamster = EmberObject.extend({
      uniqueFruits: uniq('fruits')
    });
  
    let hamster = Hamster.create({
      fruits: [
        'banana',
        'grape',
        'kale',
        'banana'
      ]
    });
  
    hamster.get('uniqueFruits'); // ['banana', 'grape', 'kale']
    ```
  
    @method uniq
    @for @ember/object/computed
    @static
    @param {String} propertyKey*
    @return {ComputedProperty} computes a new array with all the
    unique elements from the dependent array
    @public
  */
  function uniq() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return multiArrayMacro(args, function (dependentKeys) {
      var _this = this;

      var uniq = (0, _runtime.A)();
      var seen = new Set();

      dependentKeys.forEach(function (dependentKey) {
        var value = (0, _metal.get)(_this, dependentKey);
        if ((0, _runtime.isArray)(value)) {
          value.forEach(function (item) {
            if (!seen.has(item)) {
              seen.add(item);
              uniq.push(item);
            }
          });
        }
      });

      return uniq;
    }, 'uniq');
  }

  /**
    A computed property which returns a new array with all the unique
    elements from an array, with uniqueness determined by specific key.
  
    Example
  
    ```javascript
    import { uniqBy } from '@ember/object/computed';
    import EmberObject from '@ember/object';
  
    let Hamster = EmberObject.extend({
      uniqueFruits: uniqBy('fruits', 'id')
    });
    let hamster = Hamster.create({
      fruits: [
        { id: 1, 'banana' },
        { id: 2, 'grape' },
        { id: 3, 'peach' },
        { id: 1, 'banana' }
      ]
    });
    hamster.get('uniqueFruits'); // [ { id: 1, 'banana' }, { id: 2, 'grape' }, { id: 3, 'peach' }]
    ```
  
    @method uniqBy
    @for @ember/object/computed
    @static
    @param {String} dependentKey
    @param {String} propertyKey
    @return {ComputedProperty} computes a new array with all the
    unique elements from the dependent array
    @public
  */
  function uniqBy(dependentKey, propertyKey) {
    true && !!/[\[\]\{\}]/g.test(dependentKey) && (0, _debug.assert)('Dependent key passed to `computed.uniqBy` shouldn\'t contain brace expanding pattern.', !/[\[\]\{\}]/g.test(dependentKey));

    var cp = new _metal.ComputedProperty(function () {
      var list = (0, _metal.get)(this, dependentKey);
      return (0, _runtime.isArray)(list) ? (0, _runtime.uniqBy)(list, propertyKey) : (0, _runtime.A)();
    }, { dependentKeys: [dependentKey + '.[]'], readOnly: true });

    return cp;
  }

  /**
    A computed property which returns a new array with all the unique
    elements from one or more dependent arrays.
  
    Example
  
    ```javascript
    import { union } from '@ember/object/computed';
    import EmberObject from '@ember/object';
  
    let Hamster = EmberObject.extend({
      uniqueFruits: union('fruits', 'vegetables')
    });
  
    let hamster = Hamster.create({
      fruits: [
        'banana',
        'grape',
        'kale',
        'banana',
        'tomato'
      ],
      vegetables: [
        'tomato',
        'carrot',
        'lettuce'
      ]
    });
  
    hamster.get('uniqueFruits'); // ['banana', 'grape', 'kale', 'tomato', 'carrot', 'lettuce']
    ```
  
    @method union
    @for @ember/object/computed
    @static
    @param {String} propertyKey*
    @return {ComputedProperty} computes a new array with all the
    unique elements from the dependent array
    @public
  */
  var union = exports.union = uniq;

  /**
    A computed property which returns a new array with all the elements
    two or more dependent arrays have in common.
  
    Example
  
    ```javascript
    import { intersect } from '@ember/object/computed';
    import EmberObject from '@ember/object';
  
    let obj = EmberObject.extend({
      friendsInCommon: intersect('adaFriends', 'charlesFriends')
    }).create({
      adaFriends: ['Charles Babbage', 'John Hobhouse', 'William King', 'Mary Somerville'],
      charlesFriends: ['William King', 'Mary Somerville', 'Ada Lovelace', 'George Peacock']
    });
  
    obj.get('friendsInCommon'); // ['William King', 'Mary Somerville']
    ```
  
    @method intersect
    @for @ember/object/computed
    @static
    @param {String} propertyKey*
    @return {ComputedProperty} computes a new array with all the
    duplicated elements from the dependent arrays
    @public
  */
  function intersect() {
    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return multiArrayMacro(args, function (dependentKeys) {
      var _this2 = this;

      var arrays = dependentKeys.map(function (dependentKey) {
        var array = (0, _metal.get)(_this2, dependentKey);
        return (0, _runtime.isArray)(array) ? array : [];
      });

      var results = arrays.pop().filter(function (candidate) {
        for (var i = 0; i < arrays.length; i++) {
          var found = false;
          var array = arrays[i];
          for (var j = 0; j < array.length; j++) {
            if (array[j] === candidate) {
              found = true;
              break;
            }
          }

          if (found === false) {
            return false;
          }
        }

        return true;
      }, 'intersect');

      return (0, _runtime.A)(results);
    });
  }

  /**
    A computed property which returns a new array with all the
    properties from the first dependent array that are not in the second
    dependent array.
  
    Example
  
    ```javascript
    import { setDiff } from '@ember/object/computed';
    import EmberObject from '@ember/object';
  
    let Hamster = EmberObject.extend({
      likes: ['banana', 'grape', 'kale'],
      wants: setDiff('likes', 'fruits')
    });
  
    let hamster = Hamster.create({
      fruits: [
        'grape',
        'kale',
      ]
    });
  
    hamster.get('wants'); // ['banana']
    ```
  
    @method setDiff
    @for @ember/object/computed
    @static
    @param {String} setAProperty
    @param {String} setBProperty
    @return {ComputedProperty} computes a new array with all the
    items from the first dependent array that are not in the second
    dependent array
    @public
  */
  function setDiff(setAProperty, setBProperty) {
    true && !(arguments.length === 2) && (0, _debug.assert)('`computed.setDiff` requires exactly two dependent arrays.', arguments.length === 2);
    true && !(!/[\[\]\{\}]/g.test(setAProperty) && !/[\[\]\{\}]/g.test(setBProperty)) && (0, _debug.assert)('Dependent keys passed to `computed.setDiff` shouldn\'t contain brace expanding pattern.', !/[\[\]\{\}]/g.test(setAProperty) && !/[\[\]\{\}]/g.test(setBProperty));

    var cp = new _metal.ComputedProperty(function () {
      var setA = this.get(setAProperty);
      var setB = this.get(setBProperty);

      if (!(0, _runtime.isArray)(setA)) {
        return (0, _runtime.A)();
      }
      if (!(0, _runtime.isArray)(setB)) {
        return (0, _runtime.A)(setA);
      }

      return setA.filter(function (x) {
        return setB.indexOf(x) === -1;
      });
    }, {
      dependentKeys: [setAProperty + '.[]', setBProperty + '.[]'],
      readOnly: true
    });

    return cp;
  }

  /**
    A computed property that returns the array of values
    for the provided dependent properties.
  
    Example
  
    ```javascript
    import { collect } from '@ember/object/computed';
    import EmberObject from '@ember/object';
  
    let Hamster = EmberObject.extend({
      clothes: collect('hat', 'shirt')
    });
  
    let hamster = Hamster.create();
  
    hamster.get('clothes'); // [null, null]
    hamster.set('hat', 'Camp Hat');
    hamster.set('shirt', 'Camp Shirt');
    hamster.get('clothes'); // ['Camp Hat', 'Camp Shirt']
    ```
  
    @method collect
    @for @ember/object/computed
    @static
    @param {String} dependentKey*
    @return {ComputedProperty} computed property which maps
    values of all passed in properties to an array.
    @public
  */
  function collect() {
    for (var _len3 = arguments.length, dependentKeys = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      dependentKeys[_key3] = arguments[_key3];
    }

    return multiArrayMacro(dependentKeys, function () {
      var properties = (0, _metal.getProperties)(this, dependentKeys);
      var res = (0, _runtime.A)();
      for (var key in properties) {
        if (properties.hasOwnProperty(key)) {
          if (properties[key] === undefined) {
            res.push(null);
          } else {
            res.push(properties[key]);
          }
        }
      }
      return res;
    }, 'collect');
  }

  /**
    A computed property which returns a new array with all the
    properties from the first dependent array sorted based on a property
    or sort function.
  
    The callback method you provide should have the following signature:
  
    ```javascript
    function(itemA, itemB);
    ```
  
    - `itemA` the first item to compare.
    - `itemB` the second item to compare.
  
    This function should return negative number (e.g. `-1`) when `itemA` should come before
    `itemB`. It should return positive number (e.g. `1`) when `itemA` should come after
    `itemB`. If the `itemA` and `itemB` are equal this function should return `0`.
  
    Therefore, if this function is comparing some numeric values, simple `itemA - itemB` or
    `itemA.get( 'foo' ) - itemB.get( 'foo' )` can be used instead of series of `if`.
  
    Example
  
    ```javascript
    import { sort } from '@ember/object/computed';
    import EmberObject from '@ember/object';
  
    let ToDoList = EmberObject.extend({
      // using standard ascending sort
      todosSorting: Object.freeze(['name']),
      sortedTodos: sort('todos', 'todosSorting'),
  
      // using descending sort
      todosSortingDesc: Object.freeze(['name:desc']),
      sortedTodosDesc: sort('todos', 'todosSortingDesc'),
  
      // using a custom sort function
      priorityTodos: sort('todos', function(a, b){
        if (a.priority > b.priority) {
          return 1;
        } else if (a.priority < b.priority) {
          return -1;
        }
  
        return 0;
      })
    });
  
    let todoList = ToDoList.create({todos: [
      { name: 'Unit Test', priority: 2 },
      { name: 'Documentation', priority: 3 },
      { name: 'Release', priority: 1 }
    ]});
  
    todoList.get('sortedTodos');      // [{ name:'Documentation', priority:3 }, { name:'Release', priority:1 }, { name:'Unit Test', priority:2 }]
    todoList.get('sortedTodosDesc');  // [{ name:'Unit Test', priority:2 }, { name:'Release', priority:1 }, { name:'Documentation', priority:3 }]
    todoList.get('priorityTodos');    // [{ name:'Release', priority:1 }, { name:'Unit Test', priority:2 }, { name:'Documentation', priority:3 }]
    ```
  
    @method sort
    @for @ember/object/computed
    @static
    @param {String} itemsKey
    @param {String or Function} sortDefinition a dependent key to an
    array of sort properties (add `:desc` to the arrays sort properties to sort descending) or a function to use when sorting
    @return {ComputedProperty} computes a new sorted array based
    on the sort property array or callback function
    @public
  */
  function sort(itemsKey, sortDefinition) {
    true && !(arguments.length === 2) && (0, _debug.assert)('`computed.sort` requires two arguments: an array key to sort and ' + 'either a sort properties key or sort function', arguments.length === 2);

    if (typeof sortDefinition === 'function') {
      return customSort(itemsKey, sortDefinition);
    } else {
      return propertySort(itemsKey, sortDefinition);
    }
  }

  function customSort(itemsKey, comparator) {
    return arrayMacro(itemsKey, function (value) {
      var _this3 = this;

      return value.slice().sort(function (x, y) {
        return comparator.call(_this3, x, y);
      });
    });
  }

  // This one needs to dynamically set up and tear down observers on the itemsKey
  // depending on the sortProperties
  function propertySort(itemsKey, sortPropertiesKey) {
    var cp = new _metal.ComputedProperty(function (key) {
      var _this4 = this;

      var sortProperties = (0, _metal.get)(this, sortPropertiesKey);

      true && !((0, _runtime.isArray)(sortProperties) && sortProperties.every(function (s) {
        return typeof s === 'string';
      })) && (0, _debug.assert)('The sort definition for \'' + key + '\' on ' + this + ' must be a function or an array of strings', (0, _runtime.isArray)(sortProperties) && sortProperties.every(function (s) {
        return typeof s === 'string';
      }));

      // Add/remove property observers as required.

      var activeObserversMap = cp._activeObserverMap || (cp._activeObserverMap = new WeakMap());
      var activeObservers = activeObserversMap.get(this);

      var sortPropertyDidChangeMap = cp._sortPropertyDidChangeMap || (cp._sortPropertyDidChangeMap = new WeakMap());

      if (!sortPropertyDidChangeMap.has(this)) {
        sortPropertyDidChangeMap.set(this, function () {
          this.notifyPropertyChange(key);
        });
      }

      var sortPropertyDidChange = sortPropertyDidChangeMap.get(this);

      if (activeObservers !== undefined) {
        activeObservers.forEach(function (path) {
          return (0, _metal.removeObserver)(_this4, path, sortPropertyDidChange);
        });
      }

      var itemsKeyIsAtThis = itemsKey === '@this';
      var normalizedSortProperties = normalizeSortProperties(sortProperties);
      if (normalizedSortProperties.length === 0) {
        var path = itemsKeyIsAtThis ? '[]' : itemsKey + '.[]';
        (0, _metal.addObserver)(this, path, sortPropertyDidChange);
        activeObservers = [path];
      } else {
        activeObservers = normalizedSortProperties.map(function (_ref) {
          var prop = _ref[0];

          var path = itemsKeyIsAtThis ? '@each.' + prop : itemsKey + '.@each.' + prop;
          (0, _metal.addObserver)(_this4, path, sortPropertyDidChange);
          return path;
        });
      }

      activeObserversMap.set(this, activeObservers);

      var items = itemsKeyIsAtThis ? this : (0, _metal.get)(this, itemsKey);
      if (!(0, _runtime.isArray)(items)) {
        return (0, _runtime.A)();
      }

      if (normalizedSortProperties.length === 0) {
        return (0, _runtime.A)(items.slice());
      } else {
        return sortByNormalizedSortProperties(items, normalizedSortProperties);
      }
    }, { dependentKeys: [sortPropertiesKey + '.[]'], readOnly: true });

    cp._activeObserverMap = undefined;
    cp._sortPropertyDidChangeMap = undefined;

    return cp;
  }

  function normalizeSortProperties(sortProperties) {
    return sortProperties.map(function (p) {
      var _p$split = p.split(':'),
          prop = _p$split[0],
          direction = _p$split[1];

      direction = direction || 'asc';

      return [prop, direction];
    });
  }

  function sortByNormalizedSortProperties(items, normalizedSortProperties) {
    return (0, _runtime.A)(items.slice().sort(function (itemA, itemB) {
      for (var i = 0; i < normalizedSortProperties.length; i++) {
        var _normalizedSortProper = normalizedSortProperties[i],
            prop = _normalizedSortProper[0],
            direction = _normalizedSortProper[1];

        var result = (0, _runtime.compare)((0, _metal.get)(itemA, prop), (0, _metal.get)(itemB, prop));
        if (result !== 0) {
          return direction === 'desc' ? -1 * result : result;
        }
      }
      return 0;
    }));
  }
});
enifed('@ember/polyfills/index', ['exports', '@ember/polyfills/lib/assign', '@ember/polyfills/lib/weak_set', '@ember/deprecated-features', '@ember/polyfills/lib/merge'], function (exports, _assign, _weak_set, _deprecatedFeatures, _merge) {
  'use strict';

  exports.merge = exports._WeakSet = exports.assignPolyfill = exports.assign = undefined;
  Object.defineProperty(exports, 'assign', {
    enumerable: true,
    get: function () {
      return _assign.default;
    }
  });
  Object.defineProperty(exports, 'assignPolyfill', {
    enumerable: true,
    get: function () {
      return _assign.assign;
    }
  });
  Object.defineProperty(exports, '_WeakSet', {
    enumerable: true,
    get: function () {
      return _weak_set.default;
    }
  });

  var merge = _deprecatedFeatures.MERGE ? _merge.default : undefined;
  // Export `assignPolyfill` for testing
  exports.merge = merge;
});
enifed("@ember/polyfills/lib/assign", ["exports"], function (exports) {
    "use strict";

    exports.assign = assign;
    /**
     @module @ember/polyfills
    */
    /**
      Copy properties from a source object to a target object.
    
      ```javascript
      import { assign } from '@ember/polyfills';
    
      var a = { first: 'Yehuda' };
      var b = { last: 'Katz' };
      var c = { company: 'Tilde Inc.' };
      assign(a, b, c); // a === { first: 'Yehuda', last: 'Katz', company: 'Tilde Inc.' }, b === { last: 'Katz' }, c === { company: 'Tilde Inc.' }
      ```
    
      @method assign
      @for @ember/polyfills
      @param {Object} target The object to assign into
      @param {Object} ...args The objects to copy properties from
      @return {Object}
      @public
      @static
    */
    function assign(target) {
        for (var i = 1; i < arguments.length; i++) {
            var arg = arguments[i];
            if (!arg) {
                continue;
            }
            var updates = Object.keys(arg);
            for (var _i = 0; _i < updates.length; _i++) {
                var prop = updates[_i];
                target[prop] = arg[prop];
            }
        }
        return target;
    }
    // Note: We use the bracket notation so
    //       that the babel plugin does not
    //       transform it.
    // https://www.npmjs.com/package/babel-plugin-transform-object-assign
    var _assign = Object.assign;

    exports.default = _assign || assign;
});
enifed('@ember/polyfills/lib/merge', ['exports', '@ember/debug'], function (exports, _debug) {
    'use strict';

    exports.default = merge;

    /**
      Merge the contents of two objects together into the first object.
    
      ```javascript
      import { merge } from '@ember/polyfills';
    
      merge({ first: 'Tom' }, { last: 'Dale' }); // { first: 'Tom', last: 'Dale' }
      var a = { first: 'Yehuda' };
      var b = { last: 'Katz' };
      merge(a, b); // a == { first: 'Yehuda', last: 'Katz' }, b == { last: 'Katz' }
      ```
    
      @method merge
      @static
      @for @ember/polyfills
      @param {Object} original The object to merge into
      @param {Object} updates The object to copy properties from
      @return {Object}
      @public
    */
    function merge(original, updates) {
        true && !false && (0, _debug.deprecate)('Use of `merge` has been deprecated. Please use `assign` instead.', false, {
            id: 'ember-polyfills.deprecate-merge',
            until: '4.0.0',
            url: 'https://emberjs.com/deprecations/v3.x/#toc_ember-polyfills-deprecate-merge'
        });

        if (updates === null || typeof updates !== 'object') {
            return original;
        }
        var props = Object.keys(updates);
        var prop = void 0;
        for (var i = 0; i < props.length; i++) {
            prop = props[i];
            original[prop] = updates[prop];
        }
        return original;
    }
});
enifed('@ember/polyfills/lib/weak_set', ['exports', 'ember-babel'], function (exports, _emberBabel) {
    'use strict';

    exports.default = typeof WeakSet === 'function' ? WeakSet : function () {
        function WeakSetPolyFill() {
            (0, _emberBabel.classCallCheck)(this, WeakSetPolyFill);

            this._map = new WeakMap();
        }

        WeakSetPolyFill.prototype.add = function add(val) {
            this._map.set(val, true);
            return this;
        };

        WeakSetPolyFill.prototype.delete = function _delete(val) {
            return this._map.delete(val);
        };

        WeakSetPolyFill.prototype.has = function has(val) {
            return this._map.has(val);
        };

        return WeakSetPolyFill;
    }();
});
enifed('@ember/runloop/index', ['exports', '@ember/debug', '@ember/-internals/error-handling', '@ember/-internals/metal', 'backburner', '@ember/deprecated-features'], function (exports, _debug, _errorHandling, _metal, _backburner, _deprecatedFeatures) {
  'use strict';

  exports.bind = exports._globalsRun = exports.backburner = exports.queues = exports._rsvpErrorQueue = undefined;
  exports.getCurrentRunLoop = getCurrentRunLoop;
  exports.run = run;
  exports.join = join;
  exports.begin = begin;
  exports.end = end;
  exports.schedule = schedule;
  exports.hasScheduledTimers = hasScheduledTimers;
  exports.cancelTimers = cancelTimers;
  exports.later = later;
  exports.once = once;
  exports.scheduleOnce = scheduleOnce;
  exports.next = next;
  exports.cancel = cancel;
  exports.debounce = debounce;
  exports.throttle = throttle;


  var currentRunLoop = null;
  function getCurrentRunLoop() {
    return currentRunLoop;
  }

  function onBegin(current) {
    currentRunLoop = current;
  }

  function onEnd(current, next) {
    currentRunLoop = next;
  }

  var _rsvpErrorQueue = exports._rsvpErrorQueue = ('' + Math.random() + Date.now()).replace('.', '');

  /**
    Array of named queues. This array determines the order in which queues
    are flushed at the end of the RunLoop. You can define your own queues by
    simply adding the queue name to this array. Normally you should not need
    to inspect or modify this property.
  
    @property queues
    @type Array
    @default ['actions', 'destroy']
    @private
  */
  var queues = exports.queues = ['actions',

  // used in router transitions to prevent unnecessary loading state entry
  // if all context promises resolve on the 'actions' queue first
  'routerTransitions', 'render', 'afterRender', 'destroy',

  // used to re-throw unhandled RSVP rejection errors specifically in this
  // position to avoid breaking anything rendered in the other sections
  _rsvpErrorQueue];

  var backburnerOptions = {
    defaultQueue: 'actions',
    onBegin: onBegin,
    onEnd: onEnd,
    onErrorTarget: _errorHandling.onErrorTarget,
    onErrorMethod: 'onerror'
  };

  if (_deprecatedFeatures.RUN_SYNC) {
    queues.unshift('sync');

    backburnerOptions.sync = {
      before: _metal.beginPropertyChanges,
      after: _metal.endPropertyChanges
    };
  }

  var backburner = exports.backburner = new _backburner.default(queues, backburnerOptions);

  /**
   @module @ember/runloop
  */
  // ..........................................................
  // run - this is ideally the only public API the dev sees
  //

  /**
    Runs the passed target and method inside of a RunLoop, ensuring any
    deferred actions including bindings and views updates are flushed at the
    end.
  
    Normally you should not need to invoke this method yourself. However if
    you are implementing raw event handlers when interfacing with other
    libraries or plugins, you should probably wrap all of your code inside this
    call.
  
    ```javascript
    import { run } from '@ember/runloop';
  
    run(function() {
      // code to be executed within a RunLoop
    });
    ```
    @method run
    @for @ember/runloop
    @static
    @param {Object} [target] target of method to call
    @param {Function|String} method Method to invoke.
      May be a function or a string. If you pass a string
      then it will be looked up on the passed target.
    @param {Object} [args*] Any additional arguments you wish to pass to the method.
    @return {Object} return value from invoking the passed function.
    @public
  */
  function run() {
    return backburner.run.apply(backburner, arguments);
  }

  // used for the Ember.run global only
  var _globalsRun = exports._globalsRun = run.bind(null);

  /**
    If no run-loop is present, it creates a new one. If a run loop is
    present it will queue itself to run on the existing run-loops action
    queue.
  
    Please note: This is not for normal usage, and should be used sparingly.
  
    If invoked when not within a run loop:
  
    ```javascript
    import { join } from '@ember/runloop';
  
    join(function() {
      // creates a new run-loop
    });
    ```
  
    Alternatively, if called within an existing run loop:
  
    ```javascript
    import { run, join } from '@ember/runloop';
  
    run(function() {
      // creates a new run-loop
  
      join(function() {
        // joins with the existing run-loop, and queues for invocation on
        // the existing run-loops action queue.
      });
    });
    ```
  
    @method join
    @static
    @for @ember/runloop
    @param {Object} [target] target of method to call
    @param {Function|String} method Method to invoke.
      May be a function or a string. If you pass a string
      then it will be looked up on the passed target.
    @param {Object} [args*] Any additional arguments you wish to pass to the method.
    @return {Object} Return value from invoking the passed function. Please note,
    when called within an existing loop, no return value is possible.
    @public
  */
  function join() {
    return backburner.join.apply(backburner, arguments);
  }

  /**
    Allows you to specify which context to call the specified function in while
    adding the execution of that function to the Ember run loop. This ability
    makes this method a great way to asynchronously integrate third-party libraries
    into your Ember application.
  
    `bind` takes two main arguments, the desired context and the function to
    invoke in that context. Any additional arguments will be supplied as arguments
    to the function that is passed in.
  
    Let's use the creation of a TinyMCE component as an example. Currently,
    TinyMCE provides a setup configuration option we can use to do some processing
    after the TinyMCE instance is initialized but before it is actually rendered.
    We can use that setup option to do some additional setup for our component.
    The component itself could look something like the following:
  
    ```app/components/rich-text-editor.js
    import Component from '@ember/component';
    import { on } from '@ember/object/evented';
    import { bind } from '@ember/runloop';
  
    export default Component.extend({
      initializeTinyMCE: on('didInsertElement', function() {
        tinymce.init({
          selector: '#' + this.$().prop('id'),
          setup: bind(this, this.setupEditor)
        });
      }),
  
      didInsertElement() {
        tinymce.init({
          selector: '#' + this.$().prop('id'),
          setup: bind(this, this.setupEditor)
        });
      }
  
      setupEditor(editor) {
        this.set('editor', editor);
  
        editor.on('change', function() {
          console.log('content changed!');
        });
      }
    });
    ```
  
    In this example, we use `bind` to bind the setupEditor method to the
    context of the RichTextEditor component and to have the invocation of that
    method be safely handled and executed by the Ember run loop.
  
    @method bind
    @static
    @for @ember/runloop
    @param {Object} [target] target of method to call
    @param {Function|String} method Method to invoke.
      May be a function or a string. If you pass a string
      then it will be looked up on the passed target.
    @param {Object} [args*] Any additional arguments you wish to pass to the method.
    @return {Function} returns a new function that will always have a particular context
    @since 1.4.0
    @public
  */
  var bind = exports.bind = function () {
    for (var _len = arguments.length, curried = Array(_len), _key = 0; _key < _len; _key++) {
      curried[_key] = arguments[_key];
    }

    true && !function (methodOrTarget, methodOrArg) {
      // Applies the same logic as backburner parseArgs for detecting if a method
      // is actually being passed.
      var length = arguments.length;

      if (length === 0) {
        return false;
      } else if (length === 1) {
        return typeof methodOrTarget === 'function';
      } else {
        var type = typeof methodOrArg;
        return type === 'function' || // second argument is a function
        methodOrTarget !== null && type === 'string' && methodOrArg in methodOrTarget || // second argument is the name of a method in first argument
        typeof methodOrTarget === 'function' //first argument is a function
        ;
      }
    }.apply(undefined, curried) && (0, _debug.assert)('could not find a suitable method to bind', function (methodOrTarget, methodOrArg) {
      var length = arguments.length;if (length === 0) {
        return false;
      } else if (length === 1) {
        return typeof methodOrTarget === 'function';
      } else {
        var type = typeof methodOrArg;return type === 'function' || methodOrTarget !== null && type === 'string' && methodOrArg in methodOrTarget || typeof methodOrTarget === 'function';
      }
    }.apply(undefined, curried));

    return function () {
      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return join.apply(undefined, curried.concat(args));
    };
  };

  /**
    Begins a new RunLoop. Any deferred actions invoked after the begin will
    be buffered until you invoke a matching call to `end()`. This is
    a lower-level way to use a RunLoop instead of using `run()`.
  
    ```javascript
    import { begin, end } from '@ember/runloop';
  
    begin();
    // code to be executed within a RunLoop
    end();
    ```
  
    @method begin
    @static
    @for @ember/runloop
    @return {void}
    @public
  */
  function begin() {
    backburner.begin();
  }

  /**
    Ends a RunLoop. This must be called sometime after you call
    `begin()` to flush any deferred actions. This is a lower-level way
    to use a RunLoop instead of using `run()`.
  
    ```javascript
    import { begin, end } from '@ember/runloop';
  
    begin();
    // code to be executed within a RunLoop
    end();
    ```
  
    @method end
    @static
    @for @ember/runloop
    @return {void}
    @public
  */
  function end() {
    backburner.end();
  }

  /**
    Adds the passed target/method and any optional arguments to the named
    queue to be executed at the end of the RunLoop. If you have not already
    started a RunLoop when calling this method one will be started for you
    automatically.
  
    At the end of a RunLoop, any methods scheduled in this way will be invoked.
    Methods will be invoked in an order matching the named queues defined in
    the `queues` property.
  
    ```javascript
    import { schedule } from '@ember/runloop';
  
    schedule('actions', this, function() {
      // this will be executed in the 'actions' queue, after bindings have synced.
      console.log('scheduled on actions queue');
    });
  
    // Note the functions will be run in order based on the run queues order.
    // Output would be:
    //   scheduled on sync queue
    //   scheduled on actions queue
    ```
  
    @method schedule
    @static
    @for @ember/runloop
    @param {String} queue The name of the queue to schedule against. Default queues is 'actions'
    @param {Object} [target] target object to use as the context when invoking a method.
    @param {String|Function} method The method to invoke. If you pass a string it
      will be resolved on the target object at the time the scheduled item is
      invoked allowing you to change the target function.
    @param {Object} [arguments*] Optional arguments to be passed to the queued method.
    @return {*} Timer information for use in canceling, see `cancel`.
    @public
  */
  function schedule(queue /*, target, method */) {
    true && !(queue !== 'sync') && (0, _debug.deprecate)('Scheduling into the \'' + queue + '\' run loop queue is deprecated.', queue !== 'sync', {
      id: 'ember-metal.run.sync',
      until: '3.5.0'
    });

    return backburner.schedule.apply(backburner, arguments);
  }

  // Used by global test teardown
  function hasScheduledTimers() {
    return backburner.hasTimers();
  }

  // Used by global test teardown
  function cancelTimers() {
    backburner.cancelTimers();
  }

  /**
    Invokes the passed target/method and optional arguments after a specified
    period of time. The last parameter of this method must always be a number
    of milliseconds.
  
    You should use this method whenever you need to run some action after a
    period of time instead of using `setTimeout()`. This method will ensure that
    items that expire during the same script execution cycle all execute
    together, which is often more efficient than using a real setTimeout.
  
    ```javascript
    import { later } from '@ember/runloop';
  
    later(myContext, function() {
      // code here will execute within a RunLoop in about 500ms with this == myContext
    }, 500);
    ```
  
    @method later
    @static
    @for @ember/runloop
    @param {Object} [target] target of method to invoke
    @param {Function|String} method The method to invoke.
      If you pass a string it will be resolved on the
      target at the time the method is invoked.
    @param {Object} [args*] Optional arguments to pass to the timeout.
    @param {Number} wait Number of milliseconds to wait.
    @return {*} Timer information for use in canceling, see `cancel`.
    @public
  */
  function later() /*target, method*/{
    return backburner.later.apply(backburner, arguments);
  }

  /**
   Schedule a function to run one time during the current RunLoop. This is equivalent
    to calling `scheduleOnce` with the "actions" queue.
  
    @method once
    @static
    @for @ember/runloop
    @param {Object} [target] The target of the method to invoke.
    @param {Function|String} method The method to invoke.
      If you pass a string it will be resolved on the
      target at the time the method is invoked.
    @param {Object} [args*] Optional arguments to pass to the timeout.
    @return {Object} Timer information for use in canceling, see `cancel`.
    @public
  */
  function once() {
    for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }

    args.unshift('actions');
    return backburner.scheduleOnce.apply(backburner, args);
  }

  /**
    Schedules a function to run one time in a given queue of the current RunLoop.
    Calling this method with the same queue/target/method combination will have
    no effect (past the initial call).
  
    Note that although you can pass optional arguments these will not be
    considered when looking for duplicates. New arguments will replace previous
    calls.
  
    ```javascript
    import { run, scheduleOnce } from '@ember/runloop';
  
    function sayHi() {
      console.log('hi');
    }
  
    run(function() {
      scheduleOnce('afterRender', myContext, sayHi);
      scheduleOnce('afterRender', myContext, sayHi);
      // sayHi will only be executed once, in the afterRender queue of the RunLoop
    });
    ```
  
    Also note that for `scheduleOnce` to prevent additional calls, you need to
    pass the same function instance. The following case works as expected:
  
    ```javascript
    function log() {
      console.log('Logging only once');
    }
  
    function scheduleIt() {
      scheduleOnce('actions', myContext, log);
    }
  
    scheduleIt();
    scheduleIt();
    ```
  
    But this other case will schedule the function multiple times:
  
    ```javascript
    import { scheduleOnce } from '@ember/runloop';
  
    function scheduleIt() {
      scheduleOnce('actions', myContext, function() {
        console.log('Closure');
      });
    }
  
    scheduleIt();
    scheduleIt();
  
    // "Closure" will print twice, even though we're using `scheduleOnce`,
    // because the function we pass to it won't match the
    // previously scheduled operation.
    ```
  
    Available queues, and their order, can be found at `queues`
  
    @method scheduleOnce
    @static
    @for @ember/runloop
    @param {String} [queue] The name of the queue to schedule against. Default queues is 'actions'.
    @param {Object} [target] The target of the method to invoke.
    @param {Function|String} method The method to invoke.
      If you pass a string it will be resolved on the
      target at the time the method is invoked.
    @param {Object} [args*] Optional arguments to pass to the timeout.
    @return {Object} Timer information for use in canceling, see `cancel`.
    @public
  */
  function scheduleOnce(queue /*, target, method*/) {
    true && !(queue !== 'sync') && (0, _debug.deprecate)('Scheduling into the \'' + queue + '\' run loop queue is deprecated.', queue !== 'sync', {
      id: 'ember-metal.run.sync',
      until: '3.5.0'
    });

    return backburner.scheduleOnce.apply(backburner, arguments);
  }

  /**
    Schedules an item to run from within a separate run loop, after
    control has been returned to the system. This is equivalent to calling
    `later` with a wait time of 1ms.
  
    ```javascript
    import { next } from '@ember/runloop';
  
    next(myContext, function() {
      // code to be executed in the next run loop,
      // which will be scheduled after the current one
    });
    ```
  
    Multiple operations scheduled with `next` will coalesce
    into the same later run loop, along with any other operations
    scheduled by `later` that expire right around the same
    time that `next` operations will fire.
  
    Note that there are often alternatives to using `next`.
    For instance, if you'd like to schedule an operation to happen
    after all DOM element operations have completed within the current
    run loop, you can make use of the `afterRender` run loop queue (added
    by the `ember-views` package, along with the preceding `render` queue
    where all the DOM element operations happen).
  
    Example:
  
    ```app/components/my-component.js
    import Component from '@ember/component';
    import { scheduleOnce } from '@ember/runloop';
  
    export Component.extend({
      didInsertElement() {
        this._super(...arguments);
        scheduleOnce('afterRender', this, 'processChildElements');
      },
  
      processChildElements() {
        // ... do something with component's child component
        // elements after they've finished rendering, which
        // can't be done within this component's
        // `didInsertElement` hook because that gets run
        // before the child elements have been added to the DOM.
      }
    });
    ```
  
    One benefit of the above approach compared to using `next` is
    that you will be able to perform DOM/CSS operations before unprocessed
    elements are rendered to the screen, which may prevent flickering or
    other artifacts caused by delaying processing until after rendering.
  
    The other major benefit to the above approach is that `next`
    introduces an element of non-determinism, which can make things much
    harder to test, due to its reliance on `setTimeout`; it's much harder
    to guarantee the order of scheduled operations when they are scheduled
    outside of the current run loop, i.e. with `next`.
  
    @method next
    @static
    @for @ember/runloop
    @param {Object} [target] target of method to invoke
    @param {Function|String} method The method to invoke.
      If you pass a string it will be resolved on the
      target at the time the method is invoked.
    @param {Object} [args*] Optional arguments to pass to the timeout.
    @return {Object} Timer information for use in canceling, see `cancel`.
    @public
  */
  function next() {
    for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }

    args.push(1);
    return backburner.later.apply(backburner, args);
  }

  /**
    Cancels a scheduled item. Must be a value returned by `later()`,
    `once()`, `scheduleOnce()`, `next()`, `debounce()`, or
    `throttle()`.
  
    ```javascript
    import {
      next,
      cancel,
      later,
      scheduleOnce,
      once,
      throttle,
      debounce
    } from '@ember/runloop';
  
    let runNext = next(myContext, function() {
      // will not be executed
    });
  
    cancel(runNext);
  
    let runLater = later(myContext, function() {
      // will not be executed
    }, 500);
  
    cancel(runLater);
  
    let runScheduleOnce = scheduleOnce('afterRender', myContext, function() {
      // will not be executed
    });
  
    cancel(runScheduleOnce);
  
    let runOnce = once(myContext, function() {
      // will not be executed
    });
  
    cancel(runOnce);
  
    let throttle = throttle(myContext, function() {
      // will not be executed
    }, 1, false);
  
    cancel(throttle);
  
    let debounce = debounce(myContext, function() {
      // will not be executed
    }, 1);
  
    cancel(debounce);
  
    let debounceImmediate = debounce(myContext, function() {
      // will be executed since we passed in true (immediate)
    }, 100, true);
  
    // the 100ms delay until this method can be called again will be canceled
    cancel(debounceImmediate);
    ```
  
    @method cancel
    @static
    @for @ember/runloop
    @param {Object} timer Timer object to cancel
    @return {Boolean} true if canceled or false/undefined if it wasn't found
    @public
  */
  function cancel(timer) {
    return backburner.cancel(timer);
  }

  /**
    Delay calling the target method until the debounce period has elapsed
    with no additional debounce calls. If `debounce` is called again before
    the specified time has elapsed, the timer is reset and the entire period
    must pass again before the target method is called.
  
    This method should be used when an event may be called multiple times
    but the action should only be called once when the event is done firing.
    A common example is for scroll events where you only want updates to
    happen once scrolling has ceased.
  
    ```javascript
    import { debounce } from '@ember/runloop';
  
    function whoRan() {
      console.log(this.name + ' ran.');
    }
  
    let myContext = { name: 'debounce' };
  
    debounce(myContext, whoRan, 150);
  
    // less than 150ms passes
    debounce(myContext, whoRan, 150);
  
    // 150ms passes
    // whoRan is invoked with context myContext
    // console logs 'debounce ran.' one time.
    ```
  
    Immediate allows you to run the function immediately, but debounce
    other calls for this function until the wait time has elapsed. If
    `debounce` is called again before the specified time has elapsed,
    the timer is reset and the entire period must pass again before
    the method can be called again.
  
    ```javascript
    import { debounce } from '@ember/runloop';
  
    function whoRan() {
      console.log(this.name + ' ran.');
    }
  
    let myContext = { name: 'debounce' };
  
    debounce(myContext, whoRan, 150, true);
  
    // console logs 'debounce ran.' one time immediately.
    // 100ms passes
    debounce(myContext, whoRan, 150, true);
  
    // 150ms passes and nothing else is logged to the console and
    // the debouncee is no longer being watched
    debounce(myContext, whoRan, 150, true);
  
    // console logs 'debounce ran.' one time immediately.
    // 150ms passes and nothing else is logged to the console and
    // the debouncee is no longer being watched
    ```
  
    @method debounce
    @static
    @for @ember/runloop
    @param {Object} [target] target of method to invoke
    @param {Function|String} method The method to invoke.
      May be a function or a string. If you pass a string
      then it will be looked up on the passed target.
    @param {Object} [args*] Optional arguments to pass to the timeout.
    @param {Number} wait Number of milliseconds to wait.
    @param {Boolean} immediate Trigger the function on the leading instead
      of the trailing edge of the wait interval. Defaults to false.
    @return {Array} Timer information for use in canceling, see `cancel`.
    @public
  */
  function debounce() {
    return backburner.debounce.apply(backburner, arguments);
  }

  /**
    Ensure that the target method is never called more frequently than
    the specified spacing period. The target method is called immediately.
  
    ```javascript
    import { throttle } from '@ember/runloop';
  
    function whoRan() {
      console.log(this.name + ' ran.');
    }
  
    let myContext = { name: 'throttle' };
  
    throttle(myContext, whoRan, 150);
    // whoRan is invoked with context myContext
    // console logs 'throttle ran.'
  
    // 50ms passes
    throttle(myContext, whoRan, 150);
  
    // 50ms passes
    throttle(myContext, whoRan, 150);
  
    // 150ms passes
    throttle(myContext, whoRan, 150);
    // whoRan is invoked with context myContext
    // console logs 'throttle ran.'
    ```
  
    @method throttle
    @static
    @for @ember/runloop
    @param {Object} [target] target of method to invoke
    @param {Function|String} method The method to invoke.
      May be a function or a string. If you pass a string
      then it will be looked up on the passed target.
    @param {Object} [args*] Optional arguments to pass to the timeout.
    @param {Number} spacing Number of milliseconds to space out requests.
    @param {Boolean} immediate Trigger the function on the leading instead
      of the trailing edge of the wait interval. Defaults to true.
    @return {Array} Timer information for use in canceling, see `cancel`.
    @public
  */
  function throttle() {
    return backburner.throttle.apply(backburner, arguments);
  }
});
enifed('@ember/service/index', ['exports', '@ember/-internals/runtime', '@ember/-internals/metal'], function (exports, _runtime, _metal) {
  'use strict';

  exports.inject = inject;


  /**
   @module @ember/service
   @public
   */

  /**
    Creates a property that lazily looks up a service in the container. There
    are no restrictions as to what objects a service can be injected into.
  
    Example:
  
    ```app/routes/application.js
    import Route from '@ember/routing/route';
    import { inject as service } from '@ember/service';
  
    export default Route.extend({
      authManager: service('auth'),
  
      model() {
        return this.get('authManager').findCurrentUser();
      }
    });
    ```
  
    This example will create an `authManager` property on the application route
    that looks up the `auth` service in the container, making it easily
    accessible in the `model` hook.
  
    @method inject
    @static
    @since 1.10.0
    @for @ember/service
    @param {String} name (optional) name of the service to inject, defaults to
           the property's name
    @return {Ember.InjectedProperty} injection descriptor instance
    @public
  */
  function inject(name, options) {
    return new _metal.InjectedProperty('service', name, options);
  }

  /**
    @class Service
    @extends EmberObject
    @since 1.10.0
    @public
  */
  var Service = _runtime.Object.extend();

  Service.reopenClass({
    isServiceFactory: true
  });

  exports.default = Service;
});
enifed('@ember/string/index', ['exports', '@ember/string/lib/string_registry', '@ember/-internals/environment', '@ember/-internals/utils'], function (exports, _string_registry, _environment, _utils) {
    'use strict';

    exports._setStrings = exports._getStrings = undefined;
    Object.defineProperty(exports, '_getStrings', {
        enumerable: true,
        get: function () {
            return _string_registry.getStrings;
        }
    });
    Object.defineProperty(exports, '_setStrings', {
        enumerable: true,
        get: function () {
            return _string_registry.setStrings;
        }
    });
    exports.loc = loc;
    exports.w = w;
    exports.decamelize = decamelize;
    exports.dasherize = dasherize;
    exports.camelize = camelize;
    exports.classify = classify;
    exports.underscore = underscore;
    exports.capitalize = capitalize;

    var STRING_DASHERIZE_REGEXP = /[ _]/g;
    var STRING_DASHERIZE_CACHE = new _utils.Cache(1000, function (key) {
        return decamelize(key).replace(STRING_DASHERIZE_REGEXP, '-');
    });
    var STRING_CAMELIZE_REGEXP_1 = /(\-|\_|\.|\s)+(.)?/g;
    var STRING_CAMELIZE_REGEXP_2 = /(^|\/)([A-Z])/g;
    var CAMELIZE_CACHE = new _utils.Cache(1000, function (key) {
        return key.replace(STRING_CAMELIZE_REGEXP_1, function (_match, _separator, chr) {
            return chr ? chr.toUpperCase() : '';
        }).replace(STRING_CAMELIZE_REGEXP_2, function (match /*, separator, chr */) {
            return match.toLowerCase();
        });
    });
    var STRING_CLASSIFY_REGEXP_1 = /^(\-|_)+(.)?/;
    var STRING_CLASSIFY_REGEXP_2 = /(.)(\-|\_|\.|\s)+(.)?/g;
    var STRING_CLASSIFY_REGEXP_3 = /(^|\/|\.)([a-z])/g;
    var CLASSIFY_CACHE = new _utils.Cache(1000, function (str) {
        var replace1 = function (_match, _separator, chr) {
            return chr ? '_' + chr.toUpperCase() : '';
        };
        var replace2 = function (_match, initialChar, _separator, chr) {
            return initialChar + (chr ? chr.toUpperCase() : '');
        };
        var parts = str.split('/');
        for (var i = 0; i < parts.length; i++) {
            parts[i] = parts[i].replace(STRING_CLASSIFY_REGEXP_1, replace1).replace(STRING_CLASSIFY_REGEXP_2, replace2);
        }
        return parts.join('/').replace(STRING_CLASSIFY_REGEXP_3, function (match /*, separator, chr */) {
            return match.toUpperCase();
        });
    });
    var STRING_UNDERSCORE_REGEXP_1 = /([a-z\d])([A-Z]+)/g;
    var STRING_UNDERSCORE_REGEXP_2 = /\-|\s+/g;
    var UNDERSCORE_CACHE = new _utils.Cache(1000, function (str) {
        return str.replace(STRING_UNDERSCORE_REGEXP_1, '$1_$2').replace(STRING_UNDERSCORE_REGEXP_2, '_').toLowerCase();
    });
    var STRING_CAPITALIZE_REGEXP = /(^|\/)([a-z\u00C0-\u024F])/g;
    var CAPITALIZE_CACHE = new _utils.Cache(1000, function (str) {
        return str.replace(STRING_CAPITALIZE_REGEXP, function (match /*, separator, chr */) {
            return match.toUpperCase();
        });
    });
    var STRING_DECAMELIZE_REGEXP = /([a-z\d])([A-Z])/g;
    var DECAMELIZE_CACHE = new _utils.Cache(1000, function (str) {
        return str.replace(STRING_DECAMELIZE_REGEXP, '$1_$2').toLowerCase();
    });
    /**
      Defines string helper methods including string formatting and localization.
      Unless `EmberENV.EXTEND_PROTOTYPES.String` is `false` these methods will also be
      added to the `String.prototype` as well.
    
      @class String
      @public
    */
    function _fmt(str, formats) {
        // first, replace any ORDERED replacements.
        var idx = 0; // the current index for non-numerical replacements
        return str.replace(/%@([0-9]+)?/g, function (_s, argIndex) {
            var i = argIndex ? parseInt(argIndex, 10) - 1 : idx++;
            var r = i < formats.length ? formats[i] : undefined;
            return typeof r === 'string' ? r : r === null ? '(null)' : r === undefined ? '' : '' + r;
        });
    }
    /**
      Formats the passed string, but first looks up the string in the localized
      strings hash. This is a convenient way to localize text.
    
      Note that it is traditional but not required to prefix localized string
      keys with an underscore or other character so you can easily identify
      localized strings.
    
      ```javascript
      import { loc } from '@ember/string';
    
      Ember.STRINGS = {
        '_Hello World': 'Bonjour le monde',
        '_Hello %@ %@': 'Bonjour %@ %@'
      };
    
      loc("_Hello World");  // 'Bonjour le monde';
      loc("_Hello %@ %@", ["John", "Smith"]);  // "Bonjour John Smith";
      ```
    
      @method loc
      @param {String} str The string to format
      @param {Array} formats Optional array of parameters to interpolate into string.
      @return {String} formatted string
      @public
    */
    function loc(str, formats) {
        if (!Array.isArray(formats) || arguments.length > 2) {
            formats = Array.prototype.slice.call(arguments, 1);
        }
        str = (0, _string_registry.getString)(str) || str;
        return _fmt(str, formats);
    }
    /**
      Splits a string into separate units separated by spaces, eliminating any
      empty strings in the process. This is a convenience method for split that
      is mostly useful when applied to the `String.prototype`.
    
      ```javascript
      import { w } from '@ember/string';
    
      w("alpha beta gamma").forEach(function(key) {
        console.log(key);
      });
    
      // > alpha
      // > beta
      // > gamma
      ```
    
      @method w
      @param {String} str The string to split
      @return {Array} array containing the split strings
      @public
    */
    function w(str) {
        return str.split(/\s+/);
    }
    /**
      Converts a camelized string into all lower case separated by underscores.
    
      ```javascript
      'innerHTML'.decamelize();           // 'inner_html'
      'action_name'.decamelize();        // 'action_name'
      'css-class-name'.decamelize();     // 'css-class-name'
      'my favorite items'.decamelize();  // 'my favorite items'
      ```
    
      @method decamelize
      @param {String} str The string to decamelize.
      @return {String} the decamelized string.
      @public
    */
    function decamelize(str) {
        return DECAMELIZE_CACHE.get(str);
    }
    /**
      Replaces underscores, spaces, or camelCase with dashes.
    
      ```javascript
      'innerHTML'.dasherize();          // 'inner-html'
      'action_name'.dasherize();        // 'action-name'
      'css-class-name'.dasherize();     // 'css-class-name'
      'my favorite items'.dasherize();  // 'my-favorite-items'
      'privateDocs/ownerInvoice'.dasherize(); // 'private-docs/owner-invoice'
      ```
    
      @method dasherize
      @param {String} str The string to dasherize.
      @return {String} the dasherized string.
      @public
    */
    function dasherize(str) {
        return STRING_DASHERIZE_CACHE.get(str);
    }
    /**
      Returns the lowerCamelCase form of a string.
    
      ```javascript
      'innerHTML'.camelize();          // 'innerHTML'
      'action_name'.camelize();        // 'actionName'
      'css-class-name'.camelize();     // 'cssClassName'
      'my favorite items'.camelize();  // 'myFavoriteItems'
      'My Favorite Items'.camelize();  // 'myFavoriteItems'
      'private-docs/owner-invoice'.camelize(); // 'privateDocs/ownerInvoice'
      ```
    
      @method camelize
      @param {String} str The string to camelize.
      @return {String} the camelized string.
      @public
    */
    function camelize(str) {
        return CAMELIZE_CACHE.get(str);
    }
    /**
      Returns the UpperCamelCase form of a string.
    
      ```javascript
      'innerHTML'.classify();          // 'InnerHTML'
      'action_name'.classify();        // 'ActionName'
      'css-class-name'.classify();     // 'CssClassName'
      'my favorite items'.classify();  // 'MyFavoriteItems'
      'private-docs/owner-invoice'.classify(); // 'PrivateDocs/OwnerInvoice'
      ```
    
      @method classify
      @param {String} str the string to classify
      @return {String} the classified string
      @public
    */
    function classify(str) {
        return CLASSIFY_CACHE.get(str);
    }
    /**
      More general than decamelize. Returns the lower\_case\_and\_underscored
      form of a string.
    
      ```javascript
      'innerHTML'.underscore();          // 'inner_html'
      'action_name'.underscore();        // 'action_name'
      'css-class-name'.underscore();     // 'css_class_name'
      'my favorite items'.underscore();  // 'my_favorite_items'
      'privateDocs/ownerInvoice'.underscore(); // 'private_docs/owner_invoice'
      ```
    
      @method underscore
      @param {String} str The string to underscore.
      @return {String} the underscored string.
      @public
    */
    function underscore(str) {
        return UNDERSCORE_CACHE.get(str);
    }
    /**
      Returns the Capitalized form of a string
    
      ```javascript
      'innerHTML'.capitalize()         // 'InnerHTML'
      'action_name'.capitalize()       // 'Action_name'
      'css-class-name'.capitalize()    // 'Css-class-name'
      'my favorite items'.capitalize() // 'My favorite items'
      'privateDocs/ownerInvoice'.capitalize(); // 'PrivateDocs/ownerInvoice'
      ```
    
      @method capitalize
      @param {String} str The string to capitalize.
      @return {String} The capitalized string.
      @public
    */
    function capitalize(str) {
        return CAPITALIZE_CACHE.get(str);
    }
    if (_environment.ENV.EXTEND_PROTOTYPES.String) {
        Object.defineProperties(String.prototype, {
            /**
              See [String.w](/api/ember/release/classes/String/methods/w?anchor=w).
                   @method w
              @for @ember/string
              @static
              @private
            */
            w: {
                configurable: true,
                enumerable: false,
                writeable: true,
                value: function () {
                    return w(this);
                }
            },
            /**
              See [String.loc](/api/ember/release/classes/String/methods/loc?anchor=loc).
                   @method loc
              @for @ember/string
              @static
              @private
            */
            loc: {
                configurable: true,
                enumerable: false,
                writeable: true,
                value: function () {
                    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                        args[_key] = arguments[_key];
                    }

                    return loc(this, args);
                }
            },
            /**
              See [String.camelize](/api/ember/release/classes/String/methods/camelize?anchor=camelize).
                   @method camelize
              @for @ember/string
              @static
              @private
            */
            camelize: {
                configurable: true,
                enumerable: false,
                writeable: true,
                value: function () {
                    return camelize(this);
                }
            },
            /**
              See [String.decamelize](/api/ember/release/classes/String/methods/decamelize?anchor=decamelize).
                   @method decamelize
              @for @ember/string
              @static
              @private
            */
            decamelize: {
                configurable: true,
                enumerable: false,
                writeable: true,
                value: function () {
                    return decamelize(this);
                }
            },
            /**
              See [String.dasherize](/api/ember/release/classes/String/methods/dasherize?anchor=dasherize).
                   @method dasherize
              @for @ember/string
              @static
              @private
            */
            dasherize: {
                configurable: true,
                enumerable: false,
                writeable: true,
                value: function () {
                    return dasherize(this);
                }
            },
            /**
              See [String.underscore](/api/ember/release/classes/String/methods/underscore?anchor=underscore).
                   @method underscore
              @for @ember/string
              @static
              @private
            */
            underscore: {
                configurable: true,
                enumerable: false,
                writeable: true,
                value: function () {
                    return underscore(this);
                }
            },
            /**
              See [String.classify](/api/ember/release/classes/String/methods/classify?anchor=classify).
                   @method classify
              @for @ember/string
              @static
              @private
            */
            classify: {
                configurable: true,
                enumerable: false,
                writeable: true,
                value: function () {
                    return classify(this);
                }
            },
            /**
              See [String.capitalize](/api/ember/release/classes/String/methods/capitalize?anchor=capitalize).
                   @method capitalize
              @for @ember/string
              @static
              @private
            */
            capitalize: {
                configurable: true,
                enumerable: false,
                writeable: true,
                value: function () {
                    return capitalize(this);
                }
            }
        });
    }
});
enifed("@ember/string/lib/string_registry", ["exports"], function (exports) {
    "use strict";

    exports.setStrings = setStrings;
    exports.getStrings = getStrings;
    exports.getString = getString;
    // STATE within a module is frowned upon, this exists
    // to support Ember.STRINGS but shield ember internals from this legacy global
    // API.
    var STRINGS = {};
    function setStrings(strings) {
        STRINGS = strings;
    }
    function getStrings() {
        return STRINGS;
    }
    function getString(name) {
        return STRINGS[name];
    }
});
enifed('@glimmer/encoder', ['exports', 'ember-babel'], function (exports, _emberBabel) {
    'use strict';

    exports.InstructionEncoder = undefined;


    var InstructionEncoder = function () {
        function InstructionEncoder(buffer) {
            (0, _emberBabel.classCallCheck)(this, InstructionEncoder);

            this.buffer = buffer;
            this.typePos = 0;
            this.size = 0;
        }

        InstructionEncoder.prototype.encode = function encode(type, machine) {
            if (type > 255 /* TYPE_SIZE */) {
                    throw new Error('Opcode type over 8-bits. Got ' + type + '.');
                }
            this.buffer.push(type | machine | arguments.length - 2 << 8 /* ARG_SHIFT */);
            this.typePos = this.buffer.length - 1;
            for (var i = 2; i < arguments.length; i++) {
                var op = arguments[i];
                if (typeof op === 'number' && op > 4294967295 /* MAX_SIZE */) {
                        throw new Error('Operand over 32-bits. Got ' + op + '.');
                    }
                this.buffer.push(op);
            }
            this.size = this.buffer.length;
        };

        InstructionEncoder.prototype.patch = function patch(position, target) {
            if (this.buffer[position + 1] === -1) {
                this.buffer[position + 1] = target;
            } else {
                throw new Error('Trying to patch operand in populated slot instead of a reserved slot.');
            }
        };

        InstructionEncoder.prototype.patchWith = function patchWith(position, target, operand) {
            if (this.buffer[position + 1] === -1) {
                this.buffer[position + 1] = target;
                this.buffer[position + 2] = operand;
            } else {
                throw new Error('Trying to patch operand in populated slot instead of a reserved slot.');
            }
        };

        return InstructionEncoder;
    }();

    exports.InstructionEncoder = InstructionEncoder;
});
enifed("@glimmer/low-level", ["exports", "ember-babel"], function (exports, _emberBabel) {
    "use strict";

    exports.Stack = exports.Storage = undefined;


    var Storage = function () {
        function Storage() {
            (0, _emberBabel.classCallCheck)(this, Storage);

            this.array = [];
            this.next = 0;
        }

        Storage.prototype.add = function add(element) {
            var slot = this.next,
                array = this.array;

            if (slot === array.length) {
                this.next++;
            } else {
                var prev = array[slot];
                this.next = prev;
            }
            this.array[slot] = element;
            return slot;
        };

        Storage.prototype.deref = function deref(pointer) {
            return this.array[pointer];
        };

        Storage.prototype.drop = function drop(pointer) {
            this.array[pointer] = this.next;
            this.next = pointer;
        };

        return Storage;
    }();

    var Stack = function () {
        function Stack() {
            var vec = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

            (0, _emberBabel.classCallCheck)(this, Stack);

            this.vec = vec;
        }

        Stack.prototype.clone = function clone() {
            return new Stack(this.vec.slice());
        };

        Stack.prototype.sliceFrom = function sliceFrom(start) {
            return new Stack(this.vec.slice(start));
        };

        Stack.prototype.slice = function slice(start, end) {
            return new Stack(this.vec.slice(start, end));
        };

        Stack.prototype.copy = function copy(from, to) {
            this.vec[to] = this.vec[from];
        };
        // TODO: how to model u64 argument?


        Stack.prototype.writeRaw = function writeRaw(pos, value) {
            // TODO: Grow?
            this.vec[pos] = value;
        };
        // TODO: partially decoded enum?


        Stack.prototype.getRaw = function getRaw(pos) {
            return this.vec[pos];
        };

        Stack.prototype.reset = function reset() {
            this.vec.length = 0;
        };

        Stack.prototype.len = function len() {
            return this.vec.length;
        };

        return Stack;
    }();

    exports.Storage = Storage;
    exports.Stack = Stack;
});
enifed('@glimmer/node', ['exports', 'ember-babel', '@glimmer/runtime'], function (exports, _emberBabel, _runtime) {
    'use strict';

    exports.serializeBuilder = exports.NodeDOMTreeConstruction = undefined;


    var NodeDOMTreeConstruction = function (_DOMTreeConstruction) {
        (0, _emberBabel.inherits)(NodeDOMTreeConstruction, _DOMTreeConstruction);

        function NodeDOMTreeConstruction(doc) {
            (0, _emberBabel.classCallCheck)(this, NodeDOMTreeConstruction);

            return (0, _emberBabel.possibleConstructorReturn)(this, _DOMTreeConstruction.call(this, doc));
        }
        // override to prevent usage of `this.document` until after the constructor


        NodeDOMTreeConstruction.prototype.setupUselessElement = function setupUselessElement() {};

        NodeDOMTreeConstruction.prototype.insertHTMLBefore = function insertHTMLBefore(parent, reference, html) {
            var prev = reference ? reference.previousSibling : parent.lastChild;
            var raw = this.document.createRawHTMLSection(html);
            parent.insertBefore(raw, reference);
            var first = prev ? prev.nextSibling : parent.firstChild;
            var last = reference ? reference.previousSibling : parent.lastChild;
            return new _runtime.ConcreteBounds(parent, first, last);
        };
        // override to avoid SVG detection/work when in node (this is not needed in SSR)


        NodeDOMTreeConstruction.prototype.createElement = function createElement(tag) {
            return this.document.createElement(tag);
        };
        // override to avoid namespace shenanigans when in node (this is not needed in SSR)


        NodeDOMTreeConstruction.prototype.setAttribute = function setAttribute(element, name, value) {
            element.setAttribute(name, value);
        };

        return NodeDOMTreeConstruction;
    }(_runtime.DOMTreeConstruction);

    var TEXT_NODE = 3;
    function currentNode(cursor) {
        var element = cursor.element,
            nextSibling = cursor.nextSibling;

        if (nextSibling === null) {
            return element.lastChild;
        } else {
            return nextSibling.previousSibling;
        }
    }

    var SerializeBuilder = function (_NewElementBuilder) {
        (0, _emberBabel.inherits)(SerializeBuilder, _NewElementBuilder);

        function SerializeBuilder() {
            (0, _emberBabel.classCallCheck)(this, SerializeBuilder);

            var _this2 = (0, _emberBabel.possibleConstructorReturn)(this, _NewElementBuilder.apply(this, arguments));

            _this2.serializeBlockDepth = 0;
            return _this2;
        }

        SerializeBuilder.prototype.__openBlock = function __openBlock() {
            var depth = this.serializeBlockDepth++;
            this.__appendComment('%+b:' + depth + '%');
            _NewElementBuilder.prototype.__openBlock.call(this);
        };

        SerializeBuilder.prototype.__closeBlock = function __closeBlock() {
            _NewElementBuilder.prototype.__closeBlock.call(this);
            this.__appendComment('%-b:' + --this.serializeBlockDepth + '%');
        };

        SerializeBuilder.prototype.__appendHTML = function __appendHTML(html) {
            // Do we need to run the html tokenizer here?
            var first = this.__appendComment('%glmr%');
            if (this.element.tagName === 'TABLE') {
                var openIndex = html.indexOf('<');
                if (openIndex > -1) {
                    var tr = html.slice(openIndex + 1, openIndex + 3);
                    if (tr === 'tr') {
                        html = '<tbody>' + html + '</tbody>';
                    }
                }
            }
            if (html === '') {
                this.__appendComment('% %');
            } else {
                _NewElementBuilder.prototype.__appendHTML.call(this, html);
            }
            var last = this.__appendComment('%glmr%');
            return new _runtime.ConcreteBounds(this.element, first, last);
        };

        SerializeBuilder.prototype.__appendText = function __appendText(string) {
            var current = currentNode(this);
            if (string === '') {
                return this.__appendComment('% %');
            } else if (current && current.nodeType === TEXT_NODE) {
                this.__appendComment('%|%');
            }
            return _NewElementBuilder.prototype.__appendText.call(this, string);
        };

        SerializeBuilder.prototype.closeElement = function closeElement() {
            if (this.element['needsExtraClose'] === true) {
                this.element['needsExtraClose'] = false;
                _NewElementBuilder.prototype.closeElement.call(this);
            }
            _NewElementBuilder.prototype.closeElement.call(this);
        };

        SerializeBuilder.prototype.openElement = function openElement(tag) {
            if (tag === 'tr') {
                if (this.element.tagName !== 'TBODY') {
                    this.openElement('tbody');
                    // This prevents the closeBlock comment from being re-parented
                    // under the auto inserted tbody. Rehydration builder needs to
                    // account for the insertion since it is injected here and not
                    // really in the template.
                    this.constructing['needsExtraClose'] = true;
                    this.flushElement();
                }
            }
            return _NewElementBuilder.prototype.openElement.call(this, tag);
        };

        SerializeBuilder.prototype.pushRemoteElement = function pushRemoteElement(element, cursorId) {
            var nextSibling = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
            var dom = this.dom;

            var script = dom.createElement('script');
            script.setAttribute('glmr', cursorId);
            dom.insertBefore(element, script, nextSibling);
            _NewElementBuilder.prototype.pushRemoteElement.call(this, element, cursorId, nextSibling);
        };

        return SerializeBuilder;
    }(_runtime.NewElementBuilder);

    function serializeBuilder(env, cursor) {
        return SerializeBuilder.forInitialRender(env, cursor);
    }

    exports.NodeDOMTreeConstruction = NodeDOMTreeConstruction;
    exports.serializeBuilder = serializeBuilder;
});
enifed('@glimmer/opcode-compiler', ['exports', '@ember/polyfills', 'ember-babel', '@glimmer/util', '@glimmer/vm', '@glimmer/wire-format', '@glimmer/encoder', '@glimmer/program'], function (exports, _polyfills, _emberBabel, _util, _vm, _wireFormat, _encoder, _program) {
    'use strict';

    exports.PLACEHOLDER_HANDLE = exports.WrappedBuilder = exports.logOpcode = exports.debugSlice = exports.debug = exports.templateFactory = exports.PartialDefinition = exports.StdOpcodeBuilder = exports.OpcodeBuilder = exports.EagerOpcodeBuilder = exports.LazyOpcodeBuilder = exports.CompilableProgram = exports.CompilableBlock = exports.debugCompiler = exports.AbstractCompiler = exports.compile = exports.LazyCompiler = exports.Macros = exports.ATTRS_BLOCK = undefined;


    var PLACEHOLDER_HANDLE = -1;

    var Ops$1;
    (function (Ops$$1) {
        Ops$$1[Ops$$1["OpenComponentElement"] = 0] = "OpenComponentElement";
        Ops$$1[Ops$$1["DidCreateElement"] = 1] = "DidCreateElement";
        Ops$$1[Ops$$1["SetComponentAttrs"] = 2] = "SetComponentAttrs";
        Ops$$1[Ops$$1["DidRenderLayout"] = 3] = "DidRenderLayout";
        Ops$$1[Ops$$1["Debugger"] = 4] = "Debugger";
    })(Ops$1 || (Ops$1 = {}));

    var Ops$2 = _wireFormat.Ops;
    var ATTRS_BLOCK = '&attrs';

    var Compilers = function () {
        function Compilers() {
            var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

            (0, _emberBabel.classCallCheck)(this, Compilers);

            this.offset = offset;
            this.names = (0, _util.dict)();
            this.funcs = [];
        }

        Compilers.prototype.add = function add(name, func) {
            this.funcs.push(func);
            this.names[name] = this.funcs.length - 1;
        };

        Compilers.prototype.compile = function compile(sexp, builder) {
            var name = sexp[this.offset];
            var index = this.names[name];
            var func = this.funcs[index];

            func(sexp, builder);
        };

        return Compilers;
    }();

    var _statementCompiler = void 0;
    function statementCompiler() {
        if (_statementCompiler) {
            return _statementCompiler;
        }
        var STATEMENTS = _statementCompiler = new Compilers();
        STATEMENTS.add(Ops$2.Text, function (sexp, builder) {
            builder.text(sexp[1]);
        });
        STATEMENTS.add(Ops$2.Comment, function (sexp, builder) {
            builder.comment(sexp[1]);
        });
        STATEMENTS.add(Ops$2.CloseElement, function (_sexp, builder) {
            builder.closeElement();
        });
        STATEMENTS.add(Ops$2.FlushElement, function (_sexp, builder) {
            builder.flushElement();
        });
        STATEMENTS.add(Ops$2.Modifier, function (sexp, builder) {
            var referrer = builder.referrer;
            var name = sexp[1],
                params = sexp[2],
                hash = sexp[3];

            var handle = builder.compiler.resolveModifier(name, referrer);
            if (handle !== null) {
                builder.modifier(handle, params, hash);
            } else {
                throw new Error('Compile Error ' + name + ' is not a modifier: Helpers may not be used in the element form.');
            }
        });
        STATEMENTS.add(Ops$2.StaticAttr, function (sexp, builder) {
            var name = sexp[1],
                value = sexp[2],
                namespace = sexp[3];

            builder.staticAttr(name, namespace, value);
        });
        STATEMENTS.add(Ops$2.DynamicAttr, function (sexp, builder) {
            dynamicAttr(sexp, false, builder);
        });
        STATEMENTS.add(Ops$2.TrustingAttr, function (sexp, builder) {
            dynamicAttr(sexp, true, builder);
        });
        STATEMENTS.add(Ops$2.OpenElement, function (sexp, builder) {
            builder.openPrimitiveElement(sexp[1]);
        });
        STATEMENTS.add(Ops$2.OpenSplattedElement, function (sexp, builder) {
            builder.setComponentAttrs(true);
            builder.putComponentOperations();
            builder.openPrimitiveElement(sexp[1]);
        });
        STATEMENTS.add(Ops$2.DynamicComponent, function (sexp, builder) {
            var definition = sexp[1],
                attrs = sexp[2],
                args = sexp[3],
                template = sexp[4];

            var block = builder.template(template);
            var attrsBlock = null;
            if (attrs.length > 0) {
                var wrappedAttrs = [[Ops$2.ClientSideStatement, Ops$1.SetComponentAttrs, true]].concat(attrs, [[Ops$2.ClientSideStatement, Ops$1.SetComponentAttrs, false]]);
                attrsBlock = builder.inlineBlock({ statements: wrappedAttrs, parameters: _util.EMPTY_ARRAY });
            }
            builder.dynamicComponent(definition, attrsBlock, null, args, false, block, null);
        });
        STATEMENTS.add(Ops$2.Component, function (sexp, builder) {
            var tag = sexp[1],
                _attrs = sexp[2],
                args = sexp[3],
                block = sexp[4];
            var referrer = builder.referrer;

            var _builder$compiler$res = builder.compiler.resolveLayoutForTag(tag, referrer),
                handle = _builder$compiler$res.handle,
                capabilities = _builder$compiler$res.capabilities,
                compilable = _builder$compiler$res.compilable;

            if (handle !== null && capabilities !== null) {
                var attrs = [[Ops$2.ClientSideStatement, Ops$1.SetComponentAttrs, true]].concat(_attrs, [[Ops$2.ClientSideStatement, Ops$1.SetComponentAttrs, false]]);
                var attrsBlock = builder.inlineBlock({ statements: attrs, parameters: _util.EMPTY_ARRAY });
                var child = builder.template(block);
                if (compilable) {
                    builder.pushComponentDefinition(handle);
                    builder.invokeStaticComponent(capabilities, compilable, attrsBlock, null, args, false, child && child);
                } else {
                    builder.pushComponentDefinition(handle);
                    builder.invokeComponent(capabilities, attrsBlock, null, args, false, child && child);
                }
            } else {
                throw new Error('Compile Error: Cannot find component ' + tag);
            }
        });
        STATEMENTS.add(Ops$2.Partial, function (sexp, builder) {
            var name = sexp[1],
                evalInfo = sexp[2];
            var referrer = builder.referrer;

            builder.replayableIf({
                args: function () {
                    builder.expr(name);
                    builder.dup();
                    return 2;
                },
                ifTrue: function () {
                    builder.invokePartial(referrer, builder.evalSymbols(), evalInfo);
                    builder.popScope();
                    builder.popFrame(); // FIXME: WAT
                }
            });
        });
        STATEMENTS.add(Ops$2.Yield, function (sexp, builder) {
            var to = sexp[1],
                params = sexp[2];

            builder.yield(to, params);
        });
        STATEMENTS.add(Ops$2.AttrSplat, function (sexp, builder) {
            var to = sexp[1];

            builder.yield(to, []);
            builder.setComponentAttrs(false);
        });
        STATEMENTS.add(Ops$2.Debugger, function (sexp, builder) {
            var evalInfo = sexp[1];

            builder.debugger(builder.evalSymbols(), evalInfo);
        });
        STATEMENTS.add(Ops$2.ClientSideStatement, function (sexp, builder) {
            CLIENT_SIDE.compile(sexp, builder);
        });
        STATEMENTS.add(Ops$2.Append, function (sexp, builder) {
            var value = sexp[1],
                trusting = sexp[2];

            var returned = builder.compileInline(sexp) || value;
            if (returned === true) return;
            builder.guardedAppend(value, trusting);
        });
        STATEMENTS.add(Ops$2.Block, function (sexp, builder) {
            var name = sexp[1],
                params = sexp[2],
                hash = sexp[3],
                _template = sexp[4],
                _inverse = sexp[5];

            var template = builder.template(_template);
            var inverse = builder.template(_inverse);
            var templateBlock = template && template;
            var inverseBlock = inverse && inverse;
            builder.compileBlock(name, params, hash, templateBlock, inverseBlock);
        });
        var CLIENT_SIDE = new Compilers(1);
        CLIENT_SIDE.add(Ops$1.OpenComponentElement, function (sexp, builder) {
            builder.putComponentOperations();
            builder.openPrimitiveElement(sexp[2]);
        });
        CLIENT_SIDE.add(Ops$1.DidCreateElement, function (_sexp, builder) {
            builder.didCreateElement(_vm.Register.s0);
        });
        CLIENT_SIDE.add(Ops$1.SetComponentAttrs, function (sexp, builder) {
            builder.setComponentAttrs(sexp[2]);
        });
        CLIENT_SIDE.add(Ops$1.Debugger, function () {
            // tslint:disable-next-line:no-debugger
            debugger;
        });
        CLIENT_SIDE.add(Ops$1.DidRenderLayout, function (_sexp, builder) {
            builder.didRenderLayout(_vm.Register.s0);
        });
        return STATEMENTS;
    }
    function dynamicAttr(sexp, trusting, builder) {
        var name = sexp[1],
            value = sexp[2],
            namespace = sexp[3];

        builder.expr(value);
        if (namespace) {
            builder.dynamicAttr(name, namespace, trusting);
        } else {
            builder.dynamicAttr(name, null, trusting);
        }
    }
    var _expressionCompiler = void 0;
    function expressionCompiler() {
        if (_expressionCompiler) {
            return _expressionCompiler;
        }
        var EXPRESSIONS = _expressionCompiler = new Compilers();
        EXPRESSIONS.add(Ops$2.Unknown, function (sexp, builder) {
            var compiler = builder.compiler,
                referrer = builder.referrer,
                asPartial = builder.containingLayout.asPartial;

            var name = sexp[1];
            var handle = compiler.resolveHelper(name, referrer);
            if (handle !== null) {
                builder.helper(handle, null, null);
            } else if (asPartial) {
                builder.resolveMaybeLocal(name);
            } else {
                builder.getVariable(0);
                builder.getProperty(name);
            }
        });
        EXPRESSIONS.add(Ops$2.Concat, function (sexp, builder) {
            var parts = sexp[1];
            for (var i = 0; i < parts.length; i++) {
                builder.expr(parts[i]);
            }
            builder.concat(parts.length);
        });
        EXPRESSIONS.add(Ops$2.Helper, function (sexp, builder) {
            var compiler = builder.compiler,
                referrer = builder.referrer;
            var name = sexp[1],
                params = sexp[2],
                hash = sexp[3];
            // TODO: triage this in the WF compiler

            if (name === 'component') {
                var definition = params[0],
                    restArgs = params.slice(1);

                builder.curryComponent(definition, restArgs, hash, true);
                return;
            }
            var handle = compiler.resolveHelper(name, referrer);
            if (handle !== null) {
                builder.helper(handle, params, hash);
            } else {
                throw new Error('Compile Error: ' + name + ' is not a helper');
            }
        });
        EXPRESSIONS.add(Ops$2.Get, function (sexp, builder) {
            var head = sexp[1],
                path = sexp[2];

            builder.getVariable(head);
            for (var i = 0; i < path.length; i++) {
                builder.getProperty(path[i]);
            }
        });
        EXPRESSIONS.add(Ops$2.MaybeLocal, function (sexp, builder) {
            var path = sexp[1];

            if (builder.containingLayout.asPartial) {
                var head = path[0];
                path = path.slice(1);
                builder.resolveMaybeLocal(head);
            } else {
                builder.getVariable(0);
            }
            for (var i = 0; i < path.length; i++) {
                builder.getProperty(path[i]);
            }
        });
        EXPRESSIONS.add(Ops$2.Undefined, function (_sexp, builder) {
            return builder.pushPrimitiveReference(undefined);
        });
        EXPRESSIONS.add(Ops$2.HasBlock, function (sexp, builder) {
            builder.hasBlock(sexp[1]);
        });
        EXPRESSIONS.add(Ops$2.HasBlockParams, function (sexp, builder) {
            builder.hasBlockParams(sexp[1]);
        });
        return EXPRESSIONS;
    }

    var Macros = function Macros() {
        (0, _emberBabel.classCallCheck)(this, Macros);

        var _populateBuiltins = populateBuiltins(),
            blocks = _populateBuiltins.blocks,
            inlines = _populateBuiltins.inlines;

        this.blocks = blocks;
        this.inlines = inlines;
    };

    var Blocks = function () {
        function Blocks() {
            (0, _emberBabel.classCallCheck)(this, Blocks);

            this.names = (0, _util.dict)();
            this.funcs = [];
        }

        Blocks.prototype.add = function add(name, func) {
            this.funcs.push(func);
            this.names[name] = this.funcs.length - 1;
        };

        Blocks.prototype.addMissing = function addMissing(func) {
            this.missing = func;
        };

        Blocks.prototype.compile = function compile(name, params, hash, template, inverse, builder) {
            var index = this.names[name];
            if (index === undefined) {

                var func = this.missing;
                var handled = func(name, params, hash, template, inverse, builder);
            } else {
                var _func = this.funcs[index];
                _func(params, hash, template, inverse, builder);
            }
        };

        return Blocks;
    }();

    var Inlines = function () {
        function Inlines() {
            (0, _emberBabel.classCallCheck)(this, Inlines);

            this.names = (0, _util.dict)();
            this.funcs = [];
        }

        Inlines.prototype.add = function add(name, func) {
            this.funcs.push(func);
            this.names[name] = this.funcs.length - 1;
        };

        Inlines.prototype.addMissing = function addMissing(func) {
            this.missing = func;
        };

        Inlines.prototype.compile = function compile(sexp, builder) {
            var value = sexp[1];
            // TODO: Fix this so that expression macros can return
            // things like components, so that {{component foo}}
            // is the same as {{(component foo)}}
            if (!Array.isArray(value)) return ['expr', value];
            var name = void 0;
            var params = void 0;
            var hash = void 0;
            if (value[0] === Ops$2.Helper) {
                name = value[1];
                params = value[2];
                hash = value[3];
            } else if (value[0] === Ops$2.Unknown) {
                name = value[1];
                params = hash = null;
            } else {
                return ['expr', value];
            }
            var index = this.names[name];
            if (index === undefined && this.missing) {
                var func = this.missing;
                var returned = func(name, params, hash, builder);
                return returned === false ? ['expr', value] : returned;
            } else if (index !== undefined) {
                var _func2 = this.funcs[index];
                var _returned = _func2(name, params, hash, builder);
                return _returned === false ? ['expr', value] : _returned;
            } else {
                return ['expr', value];
            }
        };

        return Inlines;
    }();

    function populateBuiltins() {
        var blocks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Blocks();
        var inlines = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Inlines();

        blocks.add('if', function (params, _hash, template, inverse, builder) {
            //        PutArgs
            //        Test(Environment)
            //        Enter(BEGIN, END)
            // BEGIN: Noop
            //        JumpUnless(ELSE)
            //        Evaluate(default)
            //        Jump(END)
            // ELSE:  Noop
            //        Evalulate(inverse)
            // END:   Noop
            //        Exit
            if (!params || params.length !== 1) {
                throw new Error('SYNTAX ERROR: #if requires a single argument');
            }
            builder.replayableIf({
                args: function () {
                    builder.expr(params[0]);
                    builder.toBoolean();
                    return 1;
                },
                ifTrue: function () {
                    builder.invokeStaticBlock(template);
                },
                ifFalse: function () {
                    if (inverse) {
                        builder.invokeStaticBlock(inverse);
                    }
                }
            });
        });
        blocks.add('unless', function (params, _hash, template, inverse, builder) {
            //        PutArgs
            //        Test(Environment)
            //        Enter(BEGIN, END)
            // BEGIN: Noop
            //        JumpUnless(ELSE)
            //        Evaluate(default)
            //        Jump(END)
            // ELSE:  Noop
            //        Evalulate(inverse)
            // END:   Noop
            //        Exit
            if (!params || params.length !== 1) {
                throw new Error('SYNTAX ERROR: #unless requires a single argument');
            }
            builder.replayableIf({
                args: function () {
                    builder.expr(params[0]);
                    builder.toBoolean();
                    return 1;
                },
                ifTrue: function () {
                    if (inverse) {
                        builder.invokeStaticBlock(inverse);
                    }
                },
                ifFalse: function () {
                    builder.invokeStaticBlock(template);
                }
            });
        });
        blocks.add('with', function (params, _hash, template, inverse, builder) {
            //        PutArgs
            //        Test(Environment)
            //        Enter(BEGIN, END)
            // BEGIN: Noop
            //        JumpUnless(ELSE)
            //        Evaluate(default)
            //        Jump(END)
            // ELSE:  Noop
            //        Evalulate(inverse)
            // END:   Noop
            //        Exit
            if (!params || params.length !== 1) {
                throw new Error('SYNTAX ERROR: #with requires a single argument');
            }
            builder.replayableIf({
                args: function () {
                    builder.expr(params[0]);
                    builder.dup();
                    builder.toBoolean();
                    return 2;
                },
                ifTrue: function () {
                    builder.invokeStaticBlock(template, 1);
                },
                ifFalse: function () {
                    if (inverse) {
                        builder.invokeStaticBlock(inverse);
                    }
                }
            });
        });
        blocks.add('each', function (params, hash, template, inverse, builder) {
            //         Enter(BEGIN, END)
            // BEGIN:  Noop
            //         PutArgs
            //         PutIterable
            //         JumpUnless(ELSE)
            //         EnterList(BEGIN2, END2)
            // ITER:   Noop
            //         NextIter(BREAK)
            // BEGIN2: Noop
            //         PushChildScope
            //         Evaluate(default)
            //         PopScope
            // END2:   Noop
            //         Exit
            //         Jump(ITER)
            // BREAK:  Noop
            //         ExitList
            //         Jump(END)
            // ELSE:   Noop
            //         Evalulate(inverse)
            // END:    Noop
            //         Exit
            builder.replayable({
                args: function () {
                    if (hash && hash[0][0] === 'key') {
                        builder.expr(hash[1][0]);
                    } else {
                        builder.pushPrimitiveReference(null);
                    }
                    builder.expr(params[0]);
                    return 2;
                },
                body: function () {
                    builder.putIterator();
                    builder.jumpUnless('ELSE');
                    builder.pushFrame();
                    builder.dup(_vm.Register.fp, 1);
                    builder.returnTo('ITER');
                    builder.enterList('BODY');
                    builder.label('ITER');
                    builder.iterate('BREAK');
                    builder.label('BODY');
                    builder.invokeStaticBlock(template, 2);
                    builder.pop(2);
                    builder.jump('FINALLY');
                    builder.label('BREAK');
                    builder.exitList();
                    builder.popFrame();
                    builder.jump('FINALLY');
                    builder.label('ELSE');
                    if (inverse) {
                        builder.invokeStaticBlock(inverse);
                    }
                }
            });
        });
        blocks.add('in-element', function (params, hash, template, _inverse, builder) {
            if (!params || params.length !== 1) {
                throw new Error('SYNTAX ERROR: #in-element requires a single argument');
            }
            builder.replayableIf({
                args: function () {
                    var keys = hash[0],
                        values = hash[1];

                    for (var i = 0; i < keys.length; i++) {
                        var key = keys[i];
                        if (key === 'nextSibling' || key === 'guid') {
                            builder.expr(values[i]);
                        } else {
                            throw new Error('SYNTAX ERROR: #in-element does not take a `' + keys[0] + '` option');
                        }
                    }
                    builder.expr(params[0]);
                    builder.dup();
                    return 4;
                },
                ifTrue: function () {
                    builder.pushRemoteElement();
                    builder.invokeStaticBlock(template);
                    builder.popRemoteElement();
                }
            });
        });
        blocks.add('-with-dynamic-vars', function (_params, hash, template, _inverse, builder) {
            if (hash) {
                var names = hash[0],
                    expressions = hash[1];

                builder.compileParams(expressions);
                builder.pushDynamicScope();
                builder.bindDynamicScope(names);
                builder.invokeStaticBlock(template);
                builder.popDynamicScope();
            } else {
                builder.invokeStaticBlock(template);
            }
        });
        blocks.add('component', function (_params, hash, template, inverse, builder) {

            var tag = _params[0];
            if (typeof tag === 'string') {
                var returned = builder.staticComponentHelper(_params[0], hash, template);
                if (returned) return;
            }

            var definition = _params[0],
                params = _params.slice(1);

            builder.dynamicComponent(definition, null, params, hash, true, template, inverse);
        });
        inlines.add('component', function (_name, _params, hash, builder) {

            var tag = _params && _params[0];
            if (typeof tag === 'string') {
                var returned = builder.staticComponentHelper(tag, hash, null);
                if (returned) return true;
            }

            var definition = _params[0],
                params = _params.slice(1);

            builder.dynamicComponent(definition, null, params, hash, true, null, null);
            return true;
        });
        return { blocks: blocks, inlines: inlines };
    }

    var PLACEHOLDER_HANDLE$1 = -1;

    var CompilableProgram = function () {
        function CompilableProgram(compiler, layout) {
            (0, _emberBabel.classCallCheck)(this, CompilableProgram);

            this.compiler = compiler;
            this.layout = layout;
            this.compiled = null;
        }

        CompilableProgram.prototype.compile = function compile() {
            if (this.compiled !== null) return this.compiled;
            this.compiled = PLACEHOLDER_HANDLE$1;
            var statements = this.layout.block.statements;

            return this.compiled = this.compiler.add(statements, this.layout);
        };

        (0, _emberBabel.createClass)(CompilableProgram, [{
            key: 'symbolTable',
            get: function () {
                return this.layout.block;
            }
        }]);

        return CompilableProgram;
    }();

    var CompilableBlock = function () {
        function CompilableBlock(compiler, parsed) {
            (0, _emberBabel.classCallCheck)(this, CompilableBlock);

            this.compiler = compiler;
            this.parsed = parsed;
            this.compiled = null;
        }

        CompilableBlock.prototype.compile = function compile() {
            if (this.compiled !== null) return this.compiled;
            // Track that compilation has started but not yet finished by temporarily
            // using a placeholder handle. In eager compilation mode, where compile()
            // may be called recursively, we use this as a signal that the handle cannot
            // be known synchronously and must be linked lazily.
            this.compiled = PLACEHOLDER_HANDLE$1;
            var _parsed = this.parsed,
                statements = _parsed.block.statements,
                containingLayout = _parsed.containingLayout;

            return this.compiled = this.compiler.add(statements, containingLayout);
        };

        (0, _emberBabel.createClass)(CompilableBlock, [{
            key: 'symbolTable',
            get: function () {
                return this.parsed.block;
            }
        }]);

        return CompilableBlock;
    }();

    function compile(statements, builder, compiler) {
        var sCompiler = statementCompiler();
        for (var i = 0; i < statements.length; i++) {
            sCompiler.compile(statements[i], builder);
        }
        var handle = builder.commit();
        return handle;
    }

    function debugSlice(program, start, end) {}
    function logOpcode(type, params) {
        var out = type;
        if (params) {
            var args = Object.keys(params).map(function (p) {
                return ' ' + p + '=' + json(params[p]);
            }).join('');
            out += args;
        }
        return '(' + out + ')';
    }
    function json(param) {}
    function debug(pos, c, op) {
        for (var _len = arguments.length, operands = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
            operands[_key - 3] = arguments[_key];
        }

        var metadata = null;
        if (!metadata) {
            throw (0, _util.unreachable)('Missing Opcode Metadata for ' + op);
        }
        var out = (0, _util.dict)();
        metadata.ops.forEach(function (operand, index) {
            var op = operands[index];
            switch (operand.type) {
                case 'to':
                    out[operand.name] = pos + op;
                    break;
                case 'i32':
                case 'symbol':
                case 'block':
                    out[operand.name] = op;
                    break;
                case 'handle':
                    out[operand.name] = c.resolveHandle(op);
                    break;
                case 'str':
                    out[operand.name] = c.getString(op);
                    break;
                case 'option-str':
                    out[operand.name] = op ? c.getString(op) : null;
                    break;
                case 'str-array':
                    out[operand.name] = c.getStringArray(op);
                    break;
                case 'array':
                    out[operand.name] = c.getArray(op);
                    break;
                case 'bool':
                    out[operand.name] = !!op;
                    break;
                case 'primitive':
                    out[operand.name] = decodePrimitive(op, c);
                    break;
                case 'register':
                    out[operand.name] = _vm.Register[op];
                    break;
                case 'serializable':
                    out[operand.name] = c.getSerializable(op);
                    break;
                case 'lazy-constant':
                    out[operand.name] = c.getOther(op);
                    break;
            }
        });
        return [metadata.name, out];
    }
    function decodePrimitive(primitive, constants) {
        var flag = primitive & 7; // 111
        var value = primitive >> 3;
        switch (flag) {
            case 0 /* NUMBER */:
                return value;
            case 1 /* FLOAT */:
                return constants.getNumber(value);
            case 2 /* STRING */:
                return constants.getString(value);
            case 3 /* BOOLEAN_OR_VOID */:
                switch (value) {
                    case 0:
                        return false;
                    case 1:
                        return true;
                    case 2:
                        return null;
                    case 3:
                        return undefined;
                }
            case 4 /* NEGATIVE */:
            case 5 /* BIG_NUM */:
                return constants.getNumber(value);
            default:
                throw (0, _util.unreachable)();
        }
    }

    var StdLib = function () {
        function StdLib(main, trustingGuardedAppend, cautiousGuardedAppend) {
            (0, _emberBabel.classCallCheck)(this, StdLib);

            this.main = main;
            this.trustingGuardedAppend = trustingGuardedAppend;
            this.cautiousGuardedAppend = cautiousGuardedAppend;
        }

        StdLib.compile = function compile(compiler) {
            var main = this.std(compiler, function (b) {
                return b.main();
            });
            var trustingGuardedAppend = this.std(compiler, function (b) {
                return b.stdAppend(true);
            });
            var cautiousGuardedAppend = this.std(compiler, function (b) {
                return b.stdAppend(false);
            });
            return new StdLib(main, trustingGuardedAppend, cautiousGuardedAppend);
        };

        StdLib.std = function std(compiler, callback) {
            return StdOpcodeBuilder.build(compiler, callback);
        };

        StdLib.prototype.getAppend = function getAppend(trusting) {
            return trusting ? this.trustingGuardedAppend : this.cautiousGuardedAppend;
        };

        return StdLib;
    }();

    var AbstractCompiler = function () {
        function AbstractCompiler(macros, program, resolver) {
            (0, _emberBabel.classCallCheck)(this, AbstractCompiler);

            this.macros = macros;
            this.program = program;
            this.resolver = resolver;
            this.initialize();
        }

        AbstractCompiler.prototype.initialize = function initialize() {
            this.stdLib = StdLib.compile(this);
        };

        AbstractCompiler.prototype.compileInline = function compileInline(sexp, builder) {
            var inlines = this.macros.inlines;

            return inlines.compile(sexp, builder);
        };

        AbstractCompiler.prototype.compileBlock = function compileBlock(name, params, hash, template, inverse, builder) {
            var blocks = this.macros.blocks;

            blocks.compile(name, params, hash, template, inverse, builder);
        };

        AbstractCompiler.prototype.add = function add(statements, containingLayout) {
            return compile(statements, this.builderFor(containingLayout), this);
        };

        AbstractCompiler.prototype.commit = function commit(scopeSize, buffer) {
            var heap = this.program.heap;
            // TODO: change the whole malloc API and do something more efficient
            var handle = heap.malloc();
            for (var i = 0; i < buffer.length; i++) {
                var value = buffer[i];
                if (typeof value === 'function') {
                    heap.pushPlaceholder(value);
                } else {
                    heap.push(value);
                }
            }
            heap.finishMalloc(handle, scopeSize);
            return handle;
        };

        AbstractCompiler.prototype.resolveLayoutForTag = function resolveLayoutForTag(tag, referrer) {
            var resolver = this.resolver;

            var handle = resolver.lookupComponentDefinition(tag, referrer);
            if (handle === null) return { handle: null, capabilities: null, compilable: null };
            return this.resolveLayoutForHandle(handle);
        };

        AbstractCompiler.prototype.resolveLayoutForHandle = function resolveLayoutForHandle(handle) {
            var resolver = this.resolver;

            var capabilities = resolver.getCapabilities(handle);
            var compilable = null;
            if (!capabilities.dynamicLayout) {
                compilable = resolver.getLayout(handle);
            }
            return {
                handle: handle,
                capabilities: capabilities,
                compilable: compilable
            };
        };

        AbstractCompiler.prototype.resolveModifier = function resolveModifier(name, referrer) {
            return this.resolver.lookupModifier(name, referrer);
        };

        AbstractCompiler.prototype.resolveHelper = function resolveHelper(name, referrer) {
            return this.resolver.lookupHelper(name, referrer);
        };

        (0, _emberBabel.createClass)(AbstractCompiler, [{
            key: 'constants',
            get: function () {
                return this.program.constants;
            }
        }]);

        return AbstractCompiler;
    }();

    var debugCompiler = void 0;

    var WrappedBuilder = function () {
        function WrappedBuilder(compiler, layout) {
            (0, _emberBabel.classCallCheck)(this, WrappedBuilder);

            this.compiler = compiler;
            this.layout = layout;
            this.compiled = null;
            var block = layout.block;

            var symbols = block.symbols.slice();
            // ensure ATTRS_BLOCK is always included (only once) in the list of symbols
            var attrsBlockIndex = symbols.indexOf(ATTRS_BLOCK);
            if (attrsBlockIndex === -1) {
                this.attrsBlockNumber = symbols.push(ATTRS_BLOCK);
            } else {
                this.attrsBlockNumber = attrsBlockIndex + 1;
            }
            this.symbolTable = {
                hasEval: block.hasEval,
                symbols: symbols
            };
        }

        WrappedBuilder.prototype.compile = function compile() {
            if (this.compiled !== null) return this.compiled;
            //========DYNAMIC
            //        PutValue(TagExpr)
            //        Test
            //        JumpUnless(BODY)
            //        PutComponentOperations
            //        OpenDynamicPrimitiveElement
            //        DidCreateElement
            //        ...attr statements...
            //        FlushElement
            // BODY:  Noop
            //        ...body statements...
            //        PutValue(TagExpr)
            //        Test
            //        JumpUnless(END)
            //        CloseElement
            // END:   Noop
            //        DidRenderLayout
            //        Exit
            //
            //========STATIC
            //        OpenPrimitiveElementOpcode
            //        DidCreateElement
            //        ...attr statements...
            //        FlushElement
            //        ...body statements...
            //        CloseElement
            //        DidRenderLayout
            //        Exit
            var compiler = this.compiler,
                layout = this.layout;

            var b = compiler.builderFor(layout);
            b.startLabels();
            b.fetch(_vm.Register.s1);
            b.getComponentTagName(_vm.Register.s0);
            b.primitiveReference();
            b.dup();
            b.load(_vm.Register.s1);
            b.jumpUnless('BODY');
            b.fetch(_vm.Register.s1);
            b.setComponentAttrs(true);
            b.putComponentOperations();
            b.openDynamicElement();
            b.didCreateElement(_vm.Register.s0);
            b.yield(this.attrsBlockNumber, []);
            b.setComponentAttrs(false);
            b.flushElement();
            b.label('BODY');
            b.invokeStaticBlock(blockFor(layout, compiler));
            b.fetch(_vm.Register.s1);
            b.jumpUnless('END');
            b.closeElement();
            b.label('END');
            b.load(_vm.Register.s1);
            b.stopLabels();
            var handle = b.commit();
            return this.compiled = handle;
        };

        return WrappedBuilder;
    }();

    function blockFor(layout, compiler) {
        return new CompilableBlock(compiler, {
            block: {
                statements: layout.block.statements,
                parameters: _util.EMPTY_ARRAY
            },
            containingLayout: layout
        });
    }

    var ComponentBuilder = function () {
        function ComponentBuilder(builder) {
            (0, _emberBabel.classCallCheck)(this, ComponentBuilder);

            this.builder = builder;
        }

        ComponentBuilder.prototype.static = function _static(handle, args) {
            var params = args[0],
                hash = args[1],
                _default = args[2],
                inverse = args[3];
            var builder = this.builder;

            if (handle !== null) {
                var _builder$compiler$res2 = builder.compiler.resolveLayoutForHandle(handle),
                    capabilities = _builder$compiler$res2.capabilities,
                    compilable = _builder$compiler$res2.compilable;

                if (compilable) {
                    builder.pushComponentDefinition(handle);
                    builder.invokeStaticComponent(capabilities, compilable, null, params, hash, false, _default, inverse);
                } else {
                    builder.pushComponentDefinition(handle);
                    builder.invokeComponent(capabilities, null, params, hash, false, _default, inverse);
                }
            }
        };

        return ComponentBuilder;
    }();

    var Labels = function () {
        function Labels() {
            (0, _emberBabel.classCallCheck)(this, Labels);

            this.labels = (0, _util.dict)();
            this.targets = [];
        }

        Labels.prototype.label = function label(name, index) {
            this.labels[name] = index;
        };

        Labels.prototype.target = function target(at, _target) {
            this.targets.push({ at: at, target: _target });
        };

        Labels.prototype.patch = function patch(encoder) {
            var targets = this.targets,
                labels = this.labels;

            for (var i = 0; i < targets.length; i++) {
                var _targets$i = targets[i],
                    at = _targets$i.at,
                    target = _targets$i.target;

                var address = labels[target] - at;
                encoder.patch(at, address);
            }
        };

        return Labels;
    }();

    var StdOpcodeBuilder = function () {
        function StdOpcodeBuilder(compiler) {
            var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

            (0, _emberBabel.classCallCheck)(this, StdOpcodeBuilder);

            this.size = size;
            this.encoder = new _encoder.InstructionEncoder([]);
            this.labelsStack = new _util.Stack();
            this.compiler = compiler;
        }

        StdOpcodeBuilder.build = function build(compiler, callback) {
            var builder = new StdOpcodeBuilder(compiler);
            callback(builder);
            return builder.commit();
        };

        StdOpcodeBuilder.prototype.push = function push(name) {
            switch (arguments.length) {
                case 1:
                    return this.encoder.encode(name, 0);
                case 2:
                    return this.encoder.encode(name, 0, arguments[1]);
                case 3:
                    return this.encoder.encode(name, 0, arguments[1], arguments[2]);
                default:
                    return this.encoder.encode(name, 0, arguments[1], arguments[2], arguments[3]);
            }
        };

        StdOpcodeBuilder.prototype.pushMachine = function pushMachine(name) {
            switch (arguments.length) {
                case 1:
                    return this.encoder.encode(name, 1024 /* MACHINE_MASK */);
                case 2:
                    return this.encoder.encode(name, 1024 /* MACHINE_MASK */, arguments[1]);
                case 3:
                    return this.encoder.encode(name, 1024 /* MACHINE_MASK */, arguments[1], arguments[2]);
                default:
                    return this.encoder.encode(name, 1024 /* MACHINE_MASK */, arguments[1], arguments[2], arguments[3]);
            }
        };

        StdOpcodeBuilder.prototype.commit = function commit() {
            this.pushMachine(24 /* Return */);
            return this.compiler.commit(this.size, this.encoder.buffer);
        };

        StdOpcodeBuilder.prototype.reserve = function reserve(name) {
            this.encoder.encode(name, 0, -1);
        };

        StdOpcodeBuilder.prototype.reserveWithOperand = function reserveWithOperand(name, operand) {
            this.encoder.encode(name, 0, -1, operand);
        };

        StdOpcodeBuilder.prototype.reserveMachine = function reserveMachine(name) {
            this.encoder.encode(name, 1024 /* MACHINE_MASK */, -1);
        };
        ///


        StdOpcodeBuilder.prototype.main = function main() {
            this.push(68 /* Main */, _vm.Register.s0);
            this.invokePreparedComponent(false, false, true);
        };

        StdOpcodeBuilder.prototype.appendHTML = function appendHTML() {
            this.push(28 /* AppendHTML */);
        };

        StdOpcodeBuilder.prototype.appendSafeHTML = function appendSafeHTML() {
            this.push(29 /* AppendSafeHTML */);
        };

        StdOpcodeBuilder.prototype.appendDocumentFragment = function appendDocumentFragment() {
            this.push(30 /* AppendDocumentFragment */);
        };

        StdOpcodeBuilder.prototype.appendNode = function appendNode() {
            this.push(31 /* AppendNode */);
        };

        StdOpcodeBuilder.prototype.appendText = function appendText() {
            this.push(32 /* AppendText */);
        };

        StdOpcodeBuilder.prototype.beginComponentTransaction = function beginComponentTransaction() {
            this.push(91 /* BeginComponentTransaction */);
        };

        StdOpcodeBuilder.prototype.commitComponentTransaction = function commitComponentTransaction() {
            this.push(92 /* CommitComponentTransaction */);
        };

        StdOpcodeBuilder.prototype.pushDynamicScope = function pushDynamicScope() {
            this.push(44 /* PushDynamicScope */);
        };

        StdOpcodeBuilder.prototype.popDynamicScope = function popDynamicScope() {
            this.push(45 /* PopDynamicScope */);
        };

        StdOpcodeBuilder.prototype.pushRemoteElement = function pushRemoteElement() {
            this.push(41 /* PushRemoteElement */);
        };

        StdOpcodeBuilder.prototype.popRemoteElement = function popRemoteElement() {
            this.push(42 /* PopRemoteElement */);
        };

        StdOpcodeBuilder.prototype.pushRootScope = function pushRootScope(symbols, bindCallerScope) {
            this.push(20 /* RootScope */, symbols, bindCallerScope ? 1 : 0);
        };

        StdOpcodeBuilder.prototype.pushVirtualRootScope = function pushVirtualRootScope(register) {
            this.push(21 /* VirtualRootScope */, register);
        };

        StdOpcodeBuilder.prototype.pushChildScope = function pushChildScope() {
            this.push(22 /* ChildScope */);
        };

        StdOpcodeBuilder.prototype.popScope = function popScope() {
            this.push(23 /* PopScope */);
        };

        StdOpcodeBuilder.prototype.prepareArgs = function prepareArgs(state) {
            this.push(79 /* PrepareArgs */, state);
        };

        StdOpcodeBuilder.prototype.createComponent = function createComponent(state, hasDefault) {
            var flag = hasDefault | 0;
            this.push(81 /* CreateComponent */, flag, state);
        };

        StdOpcodeBuilder.prototype.registerComponentDestructor = function registerComponentDestructor(state) {
            this.push(82 /* RegisterComponentDestructor */, state);
        };

        StdOpcodeBuilder.prototype.putComponentOperations = function putComponentOperations() {
            this.push(83 /* PutComponentOperations */);
        };

        StdOpcodeBuilder.prototype.getComponentSelf = function getComponentSelf(state) {
            this.push(84 /* GetComponentSelf */, state);
        };

        StdOpcodeBuilder.prototype.getComponentTagName = function getComponentTagName(state) {
            this.push(85 /* GetComponentTagName */, state);
        };

        StdOpcodeBuilder.prototype.getComponentLayout = function getComponentLayout(state) {
            this.push(86 /* GetComponentLayout */, state);
        };

        StdOpcodeBuilder.prototype.setupForEval = function setupForEval(state) {
            this.push(87 /* SetupForEval */, state);
        };

        StdOpcodeBuilder.prototype.invokeComponentLayout = function invokeComponentLayout(state) {
            this.push(90 /* InvokeComponentLayout */, state);
        };

        StdOpcodeBuilder.prototype.didCreateElement = function didCreateElement(state) {
            this.push(93 /* DidCreateElement */, state);
        };

        StdOpcodeBuilder.prototype.didRenderLayout = function didRenderLayout(state) {
            this.push(94 /* DidRenderLayout */, state);
        };

        StdOpcodeBuilder.prototype.pushFrame = function pushFrame() {
            this.pushMachine(57 /* PushFrame */);
        };

        StdOpcodeBuilder.prototype.popFrame = function popFrame() {
            this.pushMachine(58 /* PopFrame */);
        };

        StdOpcodeBuilder.prototype.pushSmallFrame = function pushSmallFrame() {
            this.pushMachine(59 /* PushSmallFrame */);
        };

        StdOpcodeBuilder.prototype.popSmallFrame = function popSmallFrame() {
            this.pushMachine(60 /* PopSmallFrame */);
        };

        StdOpcodeBuilder.prototype.invokeVirtual = function invokeVirtual() {
            this.pushMachine(49 /* InvokeVirtual */);
        };

        StdOpcodeBuilder.prototype.invokeYield = function invokeYield() {
            this.push(51 /* InvokeYield */);
        };

        StdOpcodeBuilder.prototype.toBoolean = function toBoolean() {
            this.push(63 /* ToBoolean */);
        };

        StdOpcodeBuilder.prototype.invokePreparedComponent = function invokePreparedComponent(hasBlock, bindableBlocks, bindableAtNames) {
            var populateLayout = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

            this.beginComponentTransaction();
            this.pushDynamicScope();
            this.createComponent(_vm.Register.s0, hasBlock);
            // this has to run after createComponent to allow
            // for late-bound layouts, but a caller is free
            // to populate the layout earlier if it wants to
            // and do nothing here.
            if (populateLayout) populateLayout();
            this.registerComponentDestructor(_vm.Register.s0);
            this.getComponentSelf(_vm.Register.s0);
            this.pushVirtualRootScope(_vm.Register.s0);
            this.setVariable(0);
            this.setupForEval(_vm.Register.s0);
            if (bindableAtNames) this.setNamedVariables(_vm.Register.s0);
            if (bindableBlocks) this.setBlocks(_vm.Register.s0);
            this.pop();
            this.invokeComponentLayout(_vm.Register.s0);
            this.didRenderLayout(_vm.Register.s0);
            this.popFrame();
            this.popScope();
            this.popDynamicScope();
            this.commitComponentTransaction();
        };

        ///
        StdOpcodeBuilder.prototype.compileInline = function compileInline(sexp) {
            return this.compiler.compileInline(sexp, this);
        };

        StdOpcodeBuilder.prototype.compileBlock = function compileBlock(name, params, hash, template, inverse) {
            this.compiler.compileBlock(name, params, hash, template, inverse, this);
        };

        StdOpcodeBuilder.prototype.label = function label(name) {
            this.labels.label(name, this.nextPos);
        };
        // helpers


        StdOpcodeBuilder.prototype.startLabels = function startLabels() {
            this.labelsStack.push(new Labels());
        };

        StdOpcodeBuilder.prototype.stopLabels = function stopLabels() {
            var label = this.labelsStack.pop();
            label.patch(this.encoder);
        };
        // components


        StdOpcodeBuilder.prototype.pushCurriedComponent = function pushCurriedComponent() {
            this.push(74 /* PushCurriedComponent */);
        };

        StdOpcodeBuilder.prototype.pushDynamicComponentInstance = function pushDynamicComponentInstance() {
            this.push(73 /* PushDynamicComponentInstance */);
        };
        // dom


        StdOpcodeBuilder.prototype.openDynamicElement = function openDynamicElement() {
            this.push(34 /* OpenDynamicElement */);
        };

        StdOpcodeBuilder.prototype.flushElement = function flushElement() {
            this.push(38 /* FlushElement */);
        };

        StdOpcodeBuilder.prototype.closeElement = function closeElement() {
            this.push(39 /* CloseElement */);
        };
        // lists


        StdOpcodeBuilder.prototype.putIterator = function putIterator() {
            this.push(66 /* PutIterator */);
        };

        StdOpcodeBuilder.prototype.enterList = function enterList(start) {
            this.reserve(64 /* EnterList */);
            this.labels.target(this.pos, start);
        };

        StdOpcodeBuilder.prototype.exitList = function exitList() {
            this.push(65 /* ExitList */);
        };

        StdOpcodeBuilder.prototype.iterate = function iterate(breaks) {
            this.reserve(67 /* Iterate */);
            this.labels.target(this.pos, breaks);
        };
        // expressions


        StdOpcodeBuilder.prototype.setNamedVariables = function setNamedVariables(state) {
            this.push(2 /* SetNamedVariables */, state);
        };

        StdOpcodeBuilder.prototype.setBlocks = function setBlocks(state) {
            this.push(3 /* SetBlocks */, state);
        };

        StdOpcodeBuilder.prototype.setVariable = function setVariable(symbol) {
            this.push(4 /* SetVariable */, symbol);
        };

        StdOpcodeBuilder.prototype.setBlock = function setBlock(symbol) {
            this.push(5 /* SetBlock */, symbol);
        };

        StdOpcodeBuilder.prototype.getVariable = function getVariable(symbol) {
            this.push(6 /* GetVariable */, symbol);
        };

        StdOpcodeBuilder.prototype.getBlock = function getBlock(symbol) {
            this.push(8 /* GetBlock */, symbol);
        };

        StdOpcodeBuilder.prototype.hasBlock = function hasBlock(symbol) {
            this.push(9 /* HasBlock */, symbol);
        };

        StdOpcodeBuilder.prototype.concat = function concat(size) {
            this.push(11 /* Concat */, size);
        };

        StdOpcodeBuilder.prototype.load = function load(register) {
            this.push(18 /* Load */, register);
        };

        StdOpcodeBuilder.prototype.fetch = function fetch(register) {
            this.push(19 /* Fetch */, register);
        };

        StdOpcodeBuilder.prototype.dup = function dup() {
            var register = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _vm.Register.sp;
            var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

            return this.push(16 /* Dup */, register, offset);
        };

        StdOpcodeBuilder.prototype.pop = function pop() {
            var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

            return this.push(17 /* Pop */, count);
        };
        // vm


        StdOpcodeBuilder.prototype.returnTo = function returnTo(label) {
            this.reserveMachine(25 /* ReturnTo */);
            this.labels.target(this.pos, label);
        };

        StdOpcodeBuilder.prototype.primitiveReference = function primitiveReference() {
            this.push(14 /* PrimitiveReference */);
        };

        StdOpcodeBuilder.prototype.reifyU32 = function reifyU32() {
            this.push(15 /* ReifyU32 */);
        };

        StdOpcodeBuilder.prototype.enter = function enter(args) {
            this.push(61 /* Enter */, args);
        };

        StdOpcodeBuilder.prototype.exit = function exit() {
            this.push(62 /* Exit */);
        };

        StdOpcodeBuilder.prototype.return = function _return() {
            this.pushMachine(24 /* Return */);
        };

        StdOpcodeBuilder.prototype.jump = function jump(target) {
            this.reserveMachine(52 /* Jump */);
            this.labels.target(this.pos, target);
        };

        StdOpcodeBuilder.prototype.jumpIf = function jumpIf(target) {
            this.reserve(53 /* JumpIf */);
            this.labels.target(this.pos, target);
        };

        StdOpcodeBuilder.prototype.jumpUnless = function jumpUnless(target) {
            this.reserve(54 /* JumpUnless */);
            this.labels.target(this.pos, target);
        };

        StdOpcodeBuilder.prototype.jumpEq = function jumpEq(value, target) {
            this.reserveWithOperand(55 /* JumpEq */, value);
            this.labels.target(this.pos, target);
        };

        StdOpcodeBuilder.prototype.assertSame = function assertSame() {
            this.push(56 /* AssertSame */);
        };

        StdOpcodeBuilder.prototype.pushEmptyArgs = function pushEmptyArgs() {
            this.push(77 /* PushEmptyArgs */);
        };

        StdOpcodeBuilder.prototype.switch = function _switch(_opcode, callback) {
            var _this = this;

            // Setup the switch DSL
            var clauses = [];
            var count = 0;
            function when(match, callback) {
                clauses.push({ match: match, callback: callback, label: 'CLAUSE' + count++ });
            }
            // Call the callback
            callback(when);
            // Emit the opcodes for the switch
            this.enter(2);
            this.assertSame();
            this.reifyU32();
            this.startLabels();
            // First, emit the jump opcodes. We don't need a jump for the last
            // opcode, since it bleeds directly into its clause.
            clauses.slice(0, -1).forEach(function (clause) {
                return _this.jumpEq(clause.match, clause.label);
            });
            // Enumerate the clauses in reverse order. Earlier matches will
            // require fewer checks.
            for (var i = clauses.length - 1; i >= 0; i--) {
                var clause = clauses[i];
                this.label(clause.label);
                this.pop(2);
                clause.callback();
                // The first match is special: it is placed directly before the END
                // label, so no additional jump is needed at the end of it.
                if (i !== 0) {
                    this.jump('END');
                }
            }
            this.label('END');
            this.stopLabels();
            this.exit();
        };

        StdOpcodeBuilder.prototype.stdAppend = function stdAppend(trusting) {
            var _this2 = this;

            this.switch(this.contentType(), function (when) {
                when(1 /* String */, function () {
                    if (trusting) {
                        _this2.assertSame();
                        _this2.appendHTML();
                    } else {
                        _this2.appendText();
                    }
                });
                when(0 /* Component */, function () {
                    _this2.pushCurriedComponent();
                    _this2.pushDynamicComponentInstance();
                    _this2.invokeBareComponent();
                });
                when(3 /* SafeString */, function () {
                    _this2.assertSame();
                    _this2.appendSafeHTML();
                });
                when(4 /* Fragment */, function () {
                    _this2.assertSame();
                    _this2.appendDocumentFragment();
                });
                when(5 /* Node */, function () {
                    _this2.assertSame();
                    _this2.appendNode();
                });
            });
        };

        StdOpcodeBuilder.prototype.populateLayout = function populateLayout(state) {
            this.push(89 /* PopulateLayout */, state);
        };

        StdOpcodeBuilder.prototype.invokeBareComponent = function invokeBareComponent() {
            var _this3 = this;

            this.fetch(_vm.Register.s0);
            this.dup(_vm.Register.sp, 1);
            this.load(_vm.Register.s0);
            this.pushFrame();
            this.pushEmptyArgs();
            this.prepareArgs(_vm.Register.s0);
            this.invokePreparedComponent(false, false, true, function () {
                _this3.getComponentLayout(_vm.Register.s0);
                _this3.populateLayout(_vm.Register.s0);
            });
            this.load(_vm.Register.s0);
        };

        StdOpcodeBuilder.prototype.isComponent = function isComponent() {
            this.push(69 /* IsComponent */);
        };

        StdOpcodeBuilder.prototype.contentType = function contentType() {
            this.push(70 /* ContentType */);
        };

        StdOpcodeBuilder.prototype.pushBlockScope = function pushBlockScope() {
            this.push(47 /* PushBlockScope */);
        };

        (0, _emberBabel.createClass)(StdOpcodeBuilder, [{
            key: 'pos',
            get: function () {
                return this.encoder.typePos;
            }
        }, {
            key: 'nextPos',
            get: function () {
                return this.encoder.size;
            }
        }, {
            key: 'labels',
            get: function () {
                return this.labelsStack.current;
            }
        }]);

        return StdOpcodeBuilder;
    }();

    var OpcodeBuilder = function (_StdOpcodeBuilder) {
        (0, _emberBabel.inherits)(OpcodeBuilder, _StdOpcodeBuilder);

        function OpcodeBuilder(compiler, containingLayout) {
            (0, _emberBabel.classCallCheck)(this, OpcodeBuilder);

            var _this4 = (0, _emberBabel.possibleConstructorReturn)(this, _StdOpcodeBuilder.call(this, compiler, containingLayout ? containingLayout.block.symbols.length : 0));

            _this4.containingLayout = containingLayout;
            _this4.component = new ComponentBuilder(_this4);
            _this4.expressionCompiler = expressionCompiler();
            _this4.isComponentAttrs = false;
            _this4.constants = compiler.constants;
            _this4.stdLib = compiler.stdLib;
            return _this4;
        }
        /// MECHANICS


        OpcodeBuilder.prototype.setComponentAttrs = function setComponentAttrs(enabled) {
            this.isComponentAttrs = enabled;
        };

        OpcodeBuilder.prototype.expr = function expr(expression) {
            if (Array.isArray(expression)) {
                this.expressionCompiler.compile(expression, this);
            } else {
                this.pushPrimitiveReference(expression);
            }
        };
        ///
        // args


        OpcodeBuilder.prototype.pushArgs = function pushArgs(names, flags) {
            var serialized = this.constants.stringArray(names);
            this.push(76 /* PushArgs */, serialized, flags);
        };

        OpcodeBuilder.prototype.pushYieldableBlock = function pushYieldableBlock(block) {
            this.pushSymbolTable(block && block.symbolTable);
            this.pushBlockScope();
            this.pushBlock(block);
        };

        OpcodeBuilder.prototype.curryComponent = function curryComponent(definition,
        /* TODO: attrs: Option<RawInlineBlock>, */params, hash, synthetic) {
            var referrer = this.containingLayout.referrer;
            this.pushFrame();
            this.compileArgs(params, hash, null, synthetic);
            this.push(80 /* CaptureArgs */);
            this.expr(definition);
            this.push(71 /* CurryComponent */, this.constants.serializable(referrer));
            this.popFrame();
            this.fetch(_vm.Register.v0);
        };

        OpcodeBuilder.prototype.pushSymbolTable = function pushSymbolTable(table) {
            if (table) {
                var constant = this.constants.serializable(table);
                this.push(48 /* PushSymbolTable */, constant);
            } else {
                this.primitive(null);
            }
        };

        OpcodeBuilder.prototype.invokeComponent = function invokeComponent(capabilities, attrs, params, hash, synthetic, block) {
            var _this5 = this;

            var inverse = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;
            var layout = arguments[7];

            this.fetch(_vm.Register.s0);
            this.dup(_vm.Register.sp, 1);
            this.load(_vm.Register.s0);
            this.pushFrame();
            var bindableBlocks = !!(block || inverse || attrs);
            var bindableAtNames = capabilities === true || capabilities.prepareArgs || !!(hash && hash[0].length !== 0);
            var blocks = { main: block, else: inverse, attrs: attrs };
            this.compileArgs(params, hash, blocks, synthetic);
            this.prepareArgs(_vm.Register.s0);
            this.invokePreparedComponent(block !== null, bindableBlocks, bindableAtNames, function () {
                if (layout) {
                    _this5.pushSymbolTable(layout.symbolTable);
                    _this5.pushLayout(layout);
                    _this5.resolveLayout();
                } else {
                    _this5.getComponentLayout(_vm.Register.s0);
                }
                _this5.populateLayout(_vm.Register.s0);
            });
            this.load(_vm.Register.s0);
        };

        OpcodeBuilder.prototype.invokeStaticComponent = function invokeStaticComponent(capabilities, layout, attrs, params, hash, synthetic, block) {
            var inverse = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;
            var symbolTable = layout.symbolTable;

            var bailOut = symbolTable.hasEval || capabilities.prepareArgs;
            if (bailOut) {
                this.invokeComponent(capabilities, attrs, params, hash, synthetic, block, inverse, layout);
                return;
            }
            this.fetch(_vm.Register.s0);
            this.dup(_vm.Register.sp, 1);
            this.load(_vm.Register.s0);
            var symbols = symbolTable.symbols;

            if (capabilities.createArgs) {
                this.pushFrame();
                this.compileArgs(params, hash, null, synthetic);
            }
            this.beginComponentTransaction();
            if (capabilities.dynamicScope) {
                this.pushDynamicScope();
            }
            if (capabilities.createInstance) {
                this.createComponent(_vm.Register.s0, block !== null);
            }
            if (capabilities.createArgs) {
                this.popFrame();
            }
            this.pushFrame();
            this.registerComponentDestructor(_vm.Register.s0);
            var bindings = [];
            this.getComponentSelf(_vm.Register.s0);
            bindings.push({ symbol: 0, isBlock: false });
            for (var i = 0; i < symbols.length; i++) {
                var symbol = symbols[i];
                switch (symbol.charAt(0)) {
                    case '&':
                        var callerBlock = null;
                        if (symbol === '&default') {
                            callerBlock = block;
                        } else if (symbol === '&inverse') {
                            callerBlock = inverse;
                        } else if (symbol === ATTRS_BLOCK) {
                            callerBlock = attrs;
                        } else {
                            throw (0, _util.unreachable)();
                        }
                        if (callerBlock) {
                            this.pushYieldableBlock(callerBlock);
                            bindings.push({ symbol: i + 1, isBlock: true });
                        } else {
                            this.pushYieldableBlock(null);
                            bindings.push({ symbol: i + 1, isBlock: true });
                        }
                        break;
                    case '@':
                        if (!hash) {
                            break;
                        }
                        var keys = hash[0],
                            values = hash[1];

                        var lookupName = symbol;
                        if (synthetic) {
                            lookupName = symbol.slice(1);
                        }
                        var index = keys.indexOf(lookupName);
                        if (index !== -1) {
                            this.expr(values[index]);
                            bindings.push({ symbol: i + 1, isBlock: false });
                        }
                        break;
                }
            }
            this.pushRootScope(symbols.length + 1, !!(block || inverse || attrs));
            for (var _i = bindings.length - 1; _i >= 0; _i--) {
                var _bindings$_i = bindings[_i],
                    _symbol = _bindings$_i.symbol,
                    isBlock = _bindings$_i.isBlock;

                if (isBlock) {
                    this.setBlock(_symbol);
                } else {
                    this.setVariable(_symbol);
                }
            }
            this.invokeStatic(layout);
            if (capabilities.createInstance) {
                this.didRenderLayout(_vm.Register.s0);
            }
            this.popFrame();
            this.popScope();
            if (capabilities.dynamicScope) {
                this.popDynamicScope();
            }
            this.commitComponentTransaction();
            this.load(_vm.Register.s0);
        };

        OpcodeBuilder.prototype.dynamicComponent = function dynamicComponent(definition, attrs, params, hash, synthetic, block) {
            var _this6 = this;

            var inverse = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;

            this.replayable({
                args: function () {
                    _this6.expr(definition);
                    _this6.dup();
                    return 2;
                },
                body: function () {
                    _this6.jumpUnless('ELSE');
                    _this6.resolveDynamicComponent(_this6.containingLayout.referrer);
                    _this6.pushDynamicComponentInstance();
                    _this6.invokeComponent(true, attrs, params, hash, synthetic, block, inverse);
                    _this6.label('ELSE');
                }
            });
        };

        OpcodeBuilder.prototype.yield = function _yield(to, params) {
            this.compileArgs(params, null, null, false);
            this.getBlock(to);
            this.resolveBlock();
            this.invokeYield();
            this.popScope();
            this.popFrame();
        };

        OpcodeBuilder.prototype.guardedAppend = function guardedAppend(expression, trusting) {
            this.pushFrame();
            this.expr(expression);
            this.pushMachine(50 /* InvokeStatic */, this.stdLib.getAppend(trusting));
            this.popFrame();
        };

        OpcodeBuilder.prototype.invokeStaticBlock = function invokeStaticBlock(block) {
            var callerCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            var parameters = block.symbolTable.parameters;

            var calleeCount = parameters.length;
            var count = Math.min(callerCount, calleeCount);
            this.pushFrame();
            if (count) {
                this.pushChildScope();
                for (var i = 0; i < count; i++) {
                    this.dup(_vm.Register.fp, callerCount - i);
                    this.setVariable(parameters[i]);
                }
            }
            this.pushBlock(block);
            this.resolveBlock();
            this.invokeVirtual();
            if (count) {
                this.popScope();
            }
            this.popFrame();
        };
        /// CONVENIENCE
        // internal helpers


        OpcodeBuilder.prototype.string = function string(_string) {
            return this.constants.string(_string);
        };

        OpcodeBuilder.prototype.names = function names(_names) {
            var names = [];
            for (var i = 0; i < _names.length; i++) {
                var n = _names[i];
                names[i] = this.constants.string(n);
            }
            return this.constants.array(names);
        };

        OpcodeBuilder.prototype.symbols = function symbols(_symbols2) {
            return this.constants.array(_symbols2);
        };
        // vm


        OpcodeBuilder.prototype.primitive = function primitive(_primitive) {
            var type = 0 /* NUMBER */;
            var primitive = void 0;
            switch (typeof _primitive) {
                case 'number':
                    if (_primitive % 1 === 0) {
                        if (_primitive > -1) {
                            primitive = _primitive;
                        } else {
                            primitive = this.constants.number(_primitive);
                            type = 4 /* NEGATIVE */;
                        }
                    } else {
                        primitive = this.constants.number(_primitive);
                        type = 1 /* FLOAT */;
                    }
                    break;
                case 'string':
                    primitive = this.string(_primitive);
                    type = 2 /* STRING */;
                    break;
                case 'boolean':
                    primitive = _primitive | 0;
                    type = 3 /* BOOLEAN_OR_VOID */;
                    break;
                case 'object':
                    // assume null
                    primitive = 2;
                    type = 3 /* BOOLEAN_OR_VOID */;
                    break;
                case 'undefined':
                    primitive = 3;
                    type = 3 /* BOOLEAN_OR_VOID */;
                    break;
                default:
                    throw new Error('Invalid primitive passed to pushPrimitive');
            }
            var immediate = this.sizeImmediate(primitive << 3 | type, primitive);
            this.push(13 /* Primitive */, immediate);
        };

        OpcodeBuilder.prototype.sizeImmediate = function sizeImmediate(shifted, primitive) {
            if (shifted >= 4294967295 /* MAX_SIZE */ || shifted < 0) {
                return this.constants.number(primitive) << 3 | 5 /* BIG_NUM */;
            }
            return shifted;
        };

        OpcodeBuilder.prototype.pushPrimitiveReference = function pushPrimitiveReference(primitive) {
            this.primitive(primitive);
            this.primitiveReference();
        };
        // components


        OpcodeBuilder.prototype.pushComponentDefinition = function pushComponentDefinition(handle) {
            this.push(72 /* PushComponentDefinition */, this.constants.handle(handle));
        };

        OpcodeBuilder.prototype.resolveDynamicComponent = function resolveDynamicComponent(referrer) {
            this.push(75 /* ResolveDynamicComponent */, this.constants.serializable(referrer));
        };

        OpcodeBuilder.prototype.staticComponentHelper = function staticComponentHelper(tag, hash, template) {
            var _compiler$resolveLayo = this.compiler.resolveLayoutForTag(tag, this.referrer),
                handle = _compiler$resolveLayo.handle,
                capabilities = _compiler$resolveLayo.capabilities,
                compilable = _compiler$resolveLayo.compilable;

            if (handle !== null && capabilities !== null) {
                if (compilable) {
                    if (hash) {
                        for (var i = 0; i < hash.length; i = i + 2) {
                            hash[i][0] = '@' + hash[i][0];
                        }
                    }
                    this.pushComponentDefinition(handle);
                    this.invokeStaticComponent(capabilities, compilable, null, null, hash, false, template && template);
                    return true;
                }
            }
            return false;
        };
        // partial


        OpcodeBuilder.prototype.invokePartial = function invokePartial(referrer, symbols, evalInfo) {
            var _meta = this.constants.serializable(referrer);
            var _symbols = this.constants.stringArray(symbols);
            var _evalInfo = this.constants.array(evalInfo);
            this.push(95 /* InvokePartial */, _meta, _symbols, _evalInfo);
        };

        OpcodeBuilder.prototype.resolveMaybeLocal = function resolveMaybeLocal(name) {
            this.push(96 /* ResolveMaybeLocal */, this.string(name));
        };
        // debugger


        OpcodeBuilder.prototype.debugger = function _debugger(symbols, evalInfo) {
            this.push(97 /* Debugger */, this.constants.stringArray(symbols), this.constants.array(evalInfo));
        };
        // dom


        OpcodeBuilder.prototype.text = function text(_text) {
            this.push(26 /* Text */, this.constants.string(_text));
        };

        OpcodeBuilder.prototype.openPrimitiveElement = function openPrimitiveElement(tag) {
            this.push(33 /* OpenElement */, this.constants.string(tag));
        };

        OpcodeBuilder.prototype.modifier = function modifier(locator, params, hash) {
            this.pushFrame();
            this.compileArgs(params, hash, null, true);
            this.push(40 /* Modifier */, this.constants.handle(locator));
            this.popFrame();
        };

        OpcodeBuilder.prototype.comment = function comment(_comment) {
            var comment = this.constants.string(_comment);
            this.push(27 /* Comment */, comment);
        };

        OpcodeBuilder.prototype.dynamicAttr = function dynamicAttr(_name, _namespace, trusting) {
            var name = this.constants.string(_name);
            var namespace = _namespace ? this.constants.string(_namespace) : 0;
            if (this.isComponentAttrs) {
                this.push(37 /* ComponentAttr */, name, trusting === true ? 1 : 0, namespace);
            } else {
                this.push(36 /* DynamicAttr */, name, trusting === true ? 1 : 0, namespace);
            }
        };

        OpcodeBuilder.prototype.staticAttr = function staticAttr(_name, _namespace, _value) {
            var name = this.constants.string(_name);
            var namespace = _namespace ? this.constants.string(_namespace) : 0;
            if (this.isComponentAttrs) {
                this.pushPrimitiveReference(_value);
                this.push(37 /* ComponentAttr */, name, 1, namespace);
            } else {
                var value = this.constants.string(_value);
                this.push(35 /* StaticAttr */, name, value, namespace);
            }
        };
        // expressions


        OpcodeBuilder.prototype.hasBlockParams = function hasBlockParams(to) {
            this.getBlock(to);
            this.resolveBlock();
            this.push(10 /* HasBlockParams */);
        };

        OpcodeBuilder.prototype.getProperty = function getProperty(key) {
            this.push(7 /* GetProperty */, this.string(key));
        };

        OpcodeBuilder.prototype.helper = function helper(_helper, params, hash) {
            this.pushFrame();
            this.compileArgs(params, hash, null, true);
            this.push(1 /* Helper */, this.constants.handle(_helper));
            this.popFrame();
            this.fetch(_vm.Register.v0);
        };

        OpcodeBuilder.prototype.bindDynamicScope = function bindDynamicScope(_names) {
            this.push(43 /* BindDynamicScope */, this.names(_names));
        };
        // convenience methods
        /**
         * A convenience for pushing some arguments on the stack and
         * running some code if the code needs to be re-executed during
         * updating execution if some of the arguments have changed.
         *
         * # Initial Execution
         *
         * The `args` function should push zero or more arguments onto
         * the stack and return the number of arguments pushed.
         *
         * The `body` function provides the instructions to execute both
         * during initial execution and during updating execution.
         *
         * Internally, this function starts by pushing a new frame, so
         * that the body can return and sets the return point ($ra) to
         * the ENDINITIAL label.
         *
         * It then executes the `args` function, which adds instructions
         * responsible for pushing the arguments for the block to the
         * stack. These arguments will be restored to the stack before
         * updating execution.
         *
         * Next, it adds the Enter opcode, which marks the current position
         * in the DOM, and remembers the current $pc (the next instruction)
         * as the first instruction to execute during updating execution.
         *
         * Next, it runs `body`, which adds the opcodes that should
         * execute both during initial execution and during updating execution.
         * If the `body` wishes to finish early, it should Jump to the
         * `FINALLY` label.
         *
         * Next, it adds the FINALLY label, followed by:
         *
         * - the Exit opcode, which finalizes the marked DOM started by the
         *   Enter opcode.
         * - the Return opcode, which returns to the current return point
         *   ($ra).
         *
         * Finally, it adds the ENDINITIAL label followed by the PopFrame
         * instruction, which restores $fp, $sp and $ra.
         *
         * # Updating Execution
         *
         * Updating execution for this `replayable` occurs if the `body` added an
         * assertion, via one of the `JumpIf`, `JumpUnless` or `AssertSame` opcodes.
         *
         * If, during updating executon, the assertion fails, the initial VM is
         * restored, and the stored arguments are pushed onto the stack. The DOM
         * between the starting and ending markers is cleared, and the VM's cursor
         * is set to the area just cleared.
         *
         * The return point ($ra) is set to -1, the exit instruction.
         *
         * Finally, the $pc is set to to the instruction saved off by the
         * Enter opcode during initial execution, and execution proceeds as
         * usual.
         *
         * The only difference is that when a `Return` instruction is
         * encountered, the program jumps to -1 rather than the END label,
         * and the PopFrame opcode is not needed.
         */

        OpcodeBuilder.prototype.replayable = function replayable(_ref) {
            var args = _ref.args,
                body = _ref.body;

            // Start a new label frame, to give END and RETURN
            // a unique meaning.
            this.startLabels();
            this.pushFrame();
            // If the body invokes a block, its return will return to
            // END. Otherwise, the return in RETURN will return to END.
            this.returnTo('ENDINITIAL');
            // Push the arguments onto the stack. The args() function
            // tells us how many stack elements to retain for re-execution
            // when updating.
            var count = args();
            // Start a new updating closure, remembering `count` elements
            // from the stack. Everything after this point, and before END,
            // will execute both initially and to update the block.
            //
            // The enter and exit opcodes also track the area of the DOM
            // associated with this block. If an assertion inside the block
            // fails (for example, the test value changes from true to false
            // in an #if), the DOM is cleared and the program is re-executed,
            // restoring `count` elements to the stack and executing the
            // instructions between the enter and exit.
            this.enter(count);
            // Evaluate the body of the block. The body of the block may
            // return, which will jump execution to END during initial
            // execution, and exit the updating routine.
            body();
            // All execution paths in the body should run the FINALLY once
            // they are done. It is executed both during initial execution
            // and during updating execution.
            this.label('FINALLY');
            // Finalize the DOM.
            this.exit();
            // In initial execution, this is a noop: it returns to the
            // immediately following opcode. In updating execution, this
            // exits the updating routine.
            this.return();
            // Cleanup code for the block. Runs on initial execution
            // but not on updating.
            this.label('ENDINITIAL');
            this.popFrame();
            this.stopLabels();
        };
        /**
         * A specialized version of the `replayable` convenience that allows the
         * caller to provide different code based upon whether the item at
         * the top of the stack is true or false.
         *
         * As in `replayable`, the `ifTrue` and `ifFalse` code can invoke `return`.
         *
         * During the initial execution, a `return` will continue execution
         * in the cleanup code, which finalizes the current DOM block and pops
         * the current frame.
         *
         * During the updating execution, a `return` will exit the updating
         * routine, as it can reuse the DOM block and is always only a single
         * frame deep.
         */

        OpcodeBuilder.prototype.replayableIf = function replayableIf(_ref2) {
            var _this7 = this;

            var args = _ref2.args,
                ifTrue = _ref2.ifTrue,
                ifFalse = _ref2.ifFalse;

            this.replayable({
                args: args,
                body: function () {
                    // If the conditional is false, jump to the ELSE label.
                    _this7.jumpUnless('ELSE');
                    // Otherwise, execute the code associated with the true branch.
                    ifTrue();
                    // We're done, so return. In the initial execution, this runs
                    // the cleanup code. In the updating VM, it exits the updating
                    // routine.
                    _this7.jump('FINALLY');
                    _this7.label('ELSE');
                    // If the conditional is false, and code associatied ith the
                    // false branch was provided, execute it. If there was no code
                    // associated with the false branch, jumping to the else statement
                    // has no other behavior.
                    if (ifFalse) {
                        ifFalse();
                    }
                }
            });
        };

        OpcodeBuilder.prototype.inlineBlock = function inlineBlock(block) {
            return new CompilableBlock(this.compiler, {
                block: block,
                containingLayout: this.containingLayout
            });
        };

        OpcodeBuilder.prototype.evalSymbols = function evalSymbols() {
            var block = this.containingLayout.block;

            return block.hasEval ? block.symbols : null;
        };

        OpcodeBuilder.prototype.compileParams = function compileParams(params) {
            if (!params) return 0;
            for (var i = 0; i < params.length; i++) {
                this.expr(params[i]);
            }
            return params.length;
        };

        OpcodeBuilder.prototype.compileArgs = function compileArgs(params, hash, blocks, synthetic) {
            if (blocks) {
                this.pushYieldableBlock(blocks.main);
                this.pushYieldableBlock(blocks.else);
                this.pushYieldableBlock(blocks.attrs);
            }
            var count = this.compileParams(params);
            var flags = count << 4;
            if (synthetic) flags |= 8;
            if (blocks) {
                flags |= 7;
            }
            var names = _util.EMPTY_ARRAY;
            if (hash) {
                names = hash[0];
                var val = hash[1];
                for (var i = 0; i < val.length; i++) {
                    this.expr(val[i]);
                }
            }
            this.pushArgs(names, flags);
        };

        OpcodeBuilder.prototype.template = function template(block) {
            if (!block) return null;
            return this.inlineBlock(block);
        };

        (0, _emberBabel.createClass)(OpcodeBuilder, [{
            key: 'referrer',
            get: function () {
                return this.containingLayout && this.containingLayout.referrer;
            }
        }]);

        return OpcodeBuilder;
    }(StdOpcodeBuilder);

    var LazyOpcodeBuilder = function (_OpcodeBuilder) {
        (0, _emberBabel.inherits)(LazyOpcodeBuilder, _OpcodeBuilder);

        function LazyOpcodeBuilder() {
            (0, _emberBabel.classCallCheck)(this, LazyOpcodeBuilder);

            return (0, _emberBabel.possibleConstructorReturn)(this, _OpcodeBuilder.apply(this, arguments));
        }

        LazyOpcodeBuilder.prototype.pushBlock = function pushBlock(block) {
            if (block) {
                this.pushOther(block);
            } else {
                this.primitive(null);
            }
        };

        LazyOpcodeBuilder.prototype.resolveBlock = function resolveBlock() {
            this.push(46 /* CompileBlock */);
        };

        LazyOpcodeBuilder.prototype.pushLayout = function pushLayout(layout) {
            if (layout) {
                this.pushOther(layout);
            } else {
                this.primitive(null);
            }
        };

        LazyOpcodeBuilder.prototype.resolveLayout = function resolveLayout() {
            this.push(46 /* CompileBlock */);
        };

        LazyOpcodeBuilder.prototype.invokeStatic = function invokeStatic(compilable) {
            this.pushOther(compilable);
            this.push(46 /* CompileBlock */);
            this.pushMachine(49 /* InvokeVirtual */);
        };

        LazyOpcodeBuilder.prototype.pushOther = function pushOther(value) {
            this.push(12 /* Constant */, this.other(value));
        };

        LazyOpcodeBuilder.prototype.other = function other(value) {
            return this.constants.other(value);
        };

        return LazyOpcodeBuilder;
    }(OpcodeBuilder);

    var EagerOpcodeBuilder = function (_OpcodeBuilder2) {
        (0, _emberBabel.inherits)(EagerOpcodeBuilder, _OpcodeBuilder2);

        function EagerOpcodeBuilder() {
            (0, _emberBabel.classCallCheck)(this, EagerOpcodeBuilder);

            return (0, _emberBabel.possibleConstructorReturn)(this, _OpcodeBuilder2.apply(this, arguments));
        }

        EagerOpcodeBuilder.prototype.pushBlock = function pushBlock(block) {
            var handle = block ? block.compile() : null;
            this.primitive(handle);
        };

        EagerOpcodeBuilder.prototype.resolveBlock = function resolveBlock() {
            return;
        };

        EagerOpcodeBuilder.prototype.pushLayout = function pushLayout(layout) {
            if (layout) {
                this.primitive(layout.compile());
            } else {
                this.primitive(null);
            }
        };

        EagerOpcodeBuilder.prototype.resolveLayout = function resolveLayout() {};

        EagerOpcodeBuilder.prototype.invokeStatic = function invokeStatic(compilable) {
            var handle = compilable.compile();
            // If the handle for the invoked component is not yet known (for example,
            // because this is a recursive invocation and we're still compiling), push a
            // function that will produce the correct handle when the heap is
            // serialized.
            if (handle === PLACEHOLDER_HANDLE$1) {
                this.pushMachine(50 /* InvokeStatic */, function () {
                    return compilable.compile();
                });
            } else {
                this.pushMachine(50 /* InvokeStatic */, handle);
            }
        };

        return EagerOpcodeBuilder;
    }(OpcodeBuilder);

    var LazyCompiler = function (_AbstractCompiler) {
        (0, _emberBabel.inherits)(LazyCompiler, _AbstractCompiler);

        // FIXME: turn to static method
        function LazyCompiler(lookup, resolver, macros) {
            (0, _emberBabel.classCallCheck)(this, LazyCompiler);

            var constants = new _program.LazyConstants(resolver);
            var program = new _program.Program(constants);
            return (0, _emberBabel.possibleConstructorReturn)(this, _AbstractCompiler.call(this, macros, program, lookup));
        }

        LazyCompiler.prototype.builderFor = function builderFor(containingLayout) {
            return new LazyOpcodeBuilder(this, containingLayout);
        };

        return LazyCompiler;
    }(AbstractCompiler);

    var PartialDefinition = function () {
        function PartialDefinition(name, // for debugging
        template) {
            (0, _emberBabel.classCallCheck)(this, PartialDefinition);

            this.name = name;
            this.template = template;
        }

        PartialDefinition.prototype.getPartial = function getPartial() {
            var partial = this.template.asPartial();
            var handle = partial.compile();
            return { symbolTable: partial.symbolTable, handle: handle };
        };

        return PartialDefinition;
    }();

    var clientId = 0;
    function templateFactory(_ref3) {
        var templateId = _ref3.id,
            meta = _ref3.meta,
            block = _ref3.block;

        var parsedBlock = void 0;
        var id = templateId || 'client-' + clientId++;
        var create = function (compiler, envMeta) {
            var newMeta = envMeta ? (0, _util.assign)({}, envMeta, meta) : meta;
            if (!parsedBlock) {
                parsedBlock = JSON.parse(block);
            }
            return new TemplateImpl(compiler, { id: id, block: parsedBlock, referrer: newMeta });
        };
        return { id: id, meta: meta, create: create };
    }

    var TemplateImpl = function () {
        function TemplateImpl(compiler, parsedLayout) {
            (0, _emberBabel.classCallCheck)(this, TemplateImpl);

            this.compiler = compiler;
            this.parsedLayout = parsedLayout;
            this.layout = null;
            this.partial = null;
            this.wrappedLayout = null;
            var block = parsedLayout.block;

            this.symbols = block.symbols;
            this.hasEval = block.hasEval;
            this.referrer = parsedLayout.referrer;
            this.id = parsedLayout.id || 'client-' + clientId++;
        }

        TemplateImpl.prototype.asLayout = function asLayout() {
            if (this.layout) return this.layout;
            return this.layout = new CompilableProgram(this.compiler, (0, _polyfills.assign)({}, this.parsedLayout, { asPartial: false }));
        };

        TemplateImpl.prototype.asPartial = function asPartial() {
            if (this.partial) return this.partial;
            return this.layout = new CompilableProgram(this.compiler, (0, _polyfills.assign)({}, this.parsedLayout, { asPartial: true }));
        };

        TemplateImpl.prototype.asWrappedLayout = function asWrappedLayout() {
            if (this.wrappedLayout) return this.wrappedLayout;
            return this.wrappedLayout = new WrappedBuilder(this.compiler, (0, _polyfills.assign)({}, this.parsedLayout, { asPartial: false }));
        };

        return TemplateImpl;
    }();

    exports.ATTRS_BLOCK = ATTRS_BLOCK;
    exports.Macros = Macros;
    exports.LazyCompiler = LazyCompiler;
    exports.compile = compile;
    exports.AbstractCompiler = AbstractCompiler;
    exports.debugCompiler = debugCompiler;
    exports.CompilableBlock = CompilableBlock;
    exports.CompilableProgram = CompilableProgram;
    exports.LazyOpcodeBuilder = LazyOpcodeBuilder;
    exports.EagerOpcodeBuilder = EagerOpcodeBuilder;
    exports.OpcodeBuilder = OpcodeBuilder;
    exports.StdOpcodeBuilder = StdOpcodeBuilder;
    exports.PartialDefinition = PartialDefinition;
    exports.templateFactory = templateFactory;
    exports.debug = debug;
    exports.debugSlice = debugSlice;
    exports.logOpcode = logOpcode;
    exports.WrappedBuilder = WrappedBuilder;
    exports.PLACEHOLDER_HANDLE = PLACEHOLDER_HANDLE;
});
enifed('@glimmer/program', ['exports', 'ember-babel', '@glimmer/util'], function (exports, _emberBabel) {
    'use strict';

    exports.Opcode = exports.Program = exports.RuntimeProgram = exports.WriteOnlyProgram = exports.Heap = exports.LazyConstants = exports.Constants = exports.RuntimeConstants = exports.WriteOnlyConstants = exports.WELL_KNOWN_EMPTY_ARRAY_POSITION = undefined;


    var UNRESOLVED = {};
    var WELL_KNOWN_EMPTY_ARRAY_POSITION = 0;
    var WELL_KNOW_EMPTY_ARRAY = Object.freeze([]);

    var WriteOnlyConstants = function () {
        function WriteOnlyConstants() {
            (0, _emberBabel.classCallCheck)(this, WriteOnlyConstants);

            // `0` means NULL
            this.strings = [];
            this.arrays = [WELL_KNOW_EMPTY_ARRAY];
            this.tables = [];
            this.handles = [];
            this.resolved = [];
            this.numbers = [];
        }

        WriteOnlyConstants.prototype.string = function string(value) {
            var index = this.strings.indexOf(value);
            if (index > -1) {
                return index;
            }
            return this.strings.push(value) - 1;
        };

        WriteOnlyConstants.prototype.stringArray = function stringArray(strings) {
            var _strings = new Array(strings.length);
            for (var i = 0; i < strings.length; i++) {
                _strings[i] = this.string(strings[i]);
            }
            return this.array(_strings);
        };

        WriteOnlyConstants.prototype.array = function array(values) {
            if (values.length === 0) {
                return WELL_KNOWN_EMPTY_ARRAY_POSITION;
            }
            var index = this.arrays.indexOf(values);
            if (index > -1) {
                return index;
            }
            return this.arrays.push(values) - 1;
        };

        WriteOnlyConstants.prototype.handle = function handle(_handle) {
            var index = this.handles.indexOf(_handle);
            if (index > -1) {
                return index;
            }
            this.resolved.push(UNRESOLVED);
            return this.handles.push(_handle) - 1;
        };

        WriteOnlyConstants.prototype.serializable = function serializable(value) {
            var str = JSON.stringify(value);
            var index = this.strings.indexOf(str);
            if (index > -1) {
                return index;
            }
            return this.strings.push(str) - 1;
        };

        WriteOnlyConstants.prototype.number = function number(_number) {
            var index = this.numbers.indexOf(_number);
            if (index > -1) {
                return index;
            }
            return this.numbers.push(_number) - 1;
        };

        WriteOnlyConstants.prototype.toPool = function toPool() {
            return {
                strings: this.strings,
                arrays: this.arrays,
                handles: this.handles,
                numbers: this.numbers
            };
        };

        return WriteOnlyConstants;
    }();

    var RuntimeConstants = function () {
        function RuntimeConstants(resolver, pool) {
            (0, _emberBabel.classCallCheck)(this, RuntimeConstants);

            this.resolver = resolver;
            this.strings = pool.strings;
            this.arrays = pool.arrays;
            this.handles = pool.handles;
            this.resolved = this.handles.map(function () {
                return UNRESOLVED;
            });
            this.numbers = pool.numbers;
        }

        RuntimeConstants.prototype.getString = function getString(value) {
            return this.strings[value];
        };

        RuntimeConstants.prototype.getNumber = function getNumber(value) {
            return this.numbers[value];
        };

        RuntimeConstants.prototype.getStringArray = function getStringArray(value) {
            var names = this.getArray(value);
            var _names = new Array(names.length);
            for (var i = 0; i < names.length; i++) {
                var n = names[i];
                _names[i] = this.getString(n);
            }
            return _names;
        };

        RuntimeConstants.prototype.getArray = function getArray(value) {
            return this.arrays[value];
        };

        RuntimeConstants.prototype.resolveHandle = function resolveHandle(index) {
            var resolved = this.resolved[index];
            if (resolved === UNRESOLVED) {
                var handle = this.handles[index];
                resolved = this.resolved[index] = this.resolver.resolve(handle);
            }
            return resolved;
        };

        RuntimeConstants.prototype.getSerializable = function getSerializable(s) {
            return JSON.parse(this.strings[s]);
        };

        return RuntimeConstants;
    }();

    var Constants = function (_WriteOnlyConstants) {
        (0, _emberBabel.inherits)(Constants, _WriteOnlyConstants);

        function Constants(resolver, pool) {
            (0, _emberBabel.classCallCheck)(this, Constants);

            var _this = (0, _emberBabel.possibleConstructorReturn)(this, _WriteOnlyConstants.call(this));

            _this.resolver = resolver;
            if (pool) {
                _this.strings = pool.strings;
                _this.arrays = pool.arrays;
                _this.handles = pool.handles;
                _this.resolved = _this.handles.map(function () {
                    return UNRESOLVED;
                });
                _this.numbers = pool.numbers;
            }
            return _this;
        }

        Constants.prototype.getNumber = function getNumber(value) {
            return this.numbers[value];
        };

        Constants.prototype.getString = function getString(value) {
            return this.strings[value];
        };

        Constants.prototype.getStringArray = function getStringArray(value) {
            var names = this.getArray(value);
            var _names = new Array(names.length);
            for (var i = 0; i < names.length; i++) {
                var n = names[i];
                _names[i] = this.getString(n);
            }
            return _names;
        };

        Constants.prototype.getArray = function getArray(value) {
            return this.arrays[value];
        };

        Constants.prototype.resolveHandle = function resolveHandle(index) {
            var resolved = this.resolved[index];
            if (resolved === UNRESOLVED) {
                var handle = this.handles[index];
                resolved = this.resolved[index] = this.resolver.resolve(handle);
            }
            return resolved;
        };

        Constants.prototype.getSerializable = function getSerializable(s) {
            return JSON.parse(this.strings[s]);
        };

        return Constants;
    }(WriteOnlyConstants);

    var LazyConstants = function (_Constants) {
        (0, _emberBabel.inherits)(LazyConstants, _Constants);

        function LazyConstants() {
            (0, _emberBabel.classCallCheck)(this, LazyConstants);

            var _this2 = (0, _emberBabel.possibleConstructorReturn)(this, _Constants.apply(this, arguments));

            _this2.others = [];
            _this2.serializables = [];
            return _this2;
        }

        LazyConstants.prototype.serializable = function serializable(value) {
            var index = this.serializables.indexOf(value);
            if (index > -1) {
                return index;
            }
            return this.serializables.push(value) - 1;
        };

        LazyConstants.prototype.getSerializable = function getSerializable(s) {
            return this.serializables[s];
        };

        LazyConstants.prototype.getOther = function getOther(value) {
            return this.others[value - 1];
        };

        LazyConstants.prototype.other = function other(_other) {
            return this.others.push(_other);
        };

        return LazyConstants;
    }(Constants);

    var Opcode = function () {
        function Opcode(heap) {
            (0, _emberBabel.classCallCheck)(this, Opcode);

            this.heap = heap;
            this.offset = 0;
        }

        (0, _emberBabel.createClass)(Opcode, [{
            key: 'size',
            get: function () {
                var rawType = this.heap.getbyaddr(this.offset);
                return ((rawType & 768 /* OPERAND_LEN_MASK */) >> 8 /* ARG_SHIFT */) + 1;
            }
        }, {
            key: 'isMachine',
            get: function () {
                var rawType = this.heap.getbyaddr(this.offset);
                return rawType & 1024 /* MACHINE_MASK */;
            }
        }, {
            key: 'type',
            get: function () {
                return this.heap.getbyaddr(this.offset) & 255 /* TYPE_MASK */;
            }
        }, {
            key: 'op1',
            get: function () {
                return this.heap.getbyaddr(this.offset + 1);
            }
        }, {
            key: 'op2',
            get: function () {
                return this.heap.getbyaddr(this.offset + 2);
            }
        }, {
            key: 'op3',
            get: function () {
                return this.heap.getbyaddr(this.offset + 3);
            }
        }]);

        return Opcode;
    }();

    function encodeTableInfo(scopeSize, state) {

        return state | scopeSize << 2;
    }
    function changeState(info, newState) {

        return info | newState << 30;
    }
    var PAGE_SIZE = 0x100000;
    /**
     * The Heap is responsible for dynamically allocating
     * memory in which we read/write the VM's instructions
     * from/to. When we malloc we pass out a VMHandle, which
     * is used as an indirect way of accessing the memory during
     * execution of the VM. Internally we track the different
     * regions of the memory in an int array known as the table.
     *
     * The table 32-bit aligned and has the following layout:
     *
     * | ... | hp (u32) |       info (u32)   | size (u32) |
     * | ... |  Handle  | Scope Size | State | Size       |
     * | ... | 32bits   | 30bits     | 2bits | 32bit      |
     *
     * With this information we effectively have the ability to
     * control when we want to free memory. That being said you
     * can not free during execution as raw address are only
     * valid during the execution. This means you cannot close
     * over them as you will have a bad memory access exception.
     */

    var Heap = function () {
        function Heap(serializedHeap) {
            (0, _emberBabel.classCallCheck)(this, Heap);

            this.placeholders = [];
            this.offset = 0;
            this.handle = 0;
            this.capacity = PAGE_SIZE;
            if (serializedHeap) {
                var buffer = serializedHeap.buffer,
                    table = serializedHeap.table,
                    handle = serializedHeap.handle;

                this.heap = new Uint32Array(buffer);
                this.table = table;
                this.offset = this.heap.length;
                this.handle = handle;
                this.capacity = 0;
            } else {
                this.heap = new Uint32Array(PAGE_SIZE);
                this.table = [];
            }
        }

        Heap.prototype.push = function push(item) {
            this.sizeCheck();
            this.heap[this.offset++] = item;
        };

        Heap.prototype.sizeCheck = function sizeCheck() {
            if (this.capacity === 0) {
                var heap = slice(this.heap, 0, this.offset);
                this.heap = new Uint32Array(heap.length + PAGE_SIZE);
                this.heap.set(heap, 0);
                this.capacity = PAGE_SIZE;
            }
            this.capacity--;
        };

        Heap.prototype.getbyaddr = function getbyaddr(address) {
            return this.heap[address];
        };

        Heap.prototype.setbyaddr = function setbyaddr(address, value) {
            this.heap[address] = value;
        };

        Heap.prototype.malloc = function malloc() {
            // push offset, info, size
            this.table.push(this.offset, 0, 0);
            var handle = this.handle;
            this.handle += 3 /* ENTRY_SIZE */;
            return handle;
        };

        Heap.prototype.finishMalloc = function finishMalloc(handle, scopeSize) {
            this.table[handle + 1 /* INFO_OFFSET */] = encodeTableInfo(scopeSize, 0 /* Allocated */);
        };

        Heap.prototype.size = function size() {
            return this.offset;
        };
        // It is illegal to close over this address, as compaction
        // may move it. However, it is legal to use this address
        // multiple times between compactions.


        Heap.prototype.getaddr = function getaddr(handle) {
            return this.table[handle];
        };

        Heap.prototype.gethandle = function gethandle(address) {
            this.table.push(address, encodeTableInfo(0, 3 /* Pointer */), 0);
            var handle = this.handle;
            this.handle += 3 /* ENTRY_SIZE */;
            return handle;
        };

        Heap.prototype.sizeof = function sizeof(handle) {
            return -1;
        };

        Heap.prototype.scopesizeof = function scopesizeof(handle) {
            var info = this.table[handle + 1 /* INFO_OFFSET */];
            return info >> 2;
        };

        Heap.prototype.free = function free(handle) {
            var info = this.table[handle + 1 /* INFO_OFFSET */];
            this.table[handle + 1 /* INFO_OFFSET */] = changeState(info, 1 /* Freed */);
        };

        Heap.prototype.pushPlaceholder = function pushPlaceholder(valueFunc) {
            this.sizeCheck();
            var address = this.offset++;
            this.heap[address] = 2147483647 /* MAX_SIZE */;
            this.placeholders.push([address, valueFunc]);
        };

        Heap.prototype.patchPlaceholders = function patchPlaceholders() {
            var placeholders = this.placeholders;

            for (var i = 0; i < placeholders.length; i++) {
                var _placeholders$i = placeholders[i],
                    address = _placeholders$i[0],
                    getValue = _placeholders$i[1];

                this.setbyaddr(address, getValue());
            }
        };

        Heap.prototype.capture = function capture() {
            var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.offset;

            this.patchPlaceholders();
            // Only called in eager mode
            var buffer = slice(this.heap, 0, offset).buffer;
            return {
                handle: this.handle,
                table: this.table,
                buffer: buffer
            };
        };

        return Heap;
    }();

    var WriteOnlyProgram = function () {
        function WriteOnlyProgram() {
            var constants = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new WriteOnlyConstants();
            var heap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Heap();

            (0, _emberBabel.classCallCheck)(this, WriteOnlyProgram);

            this.constants = constants;
            this.heap = heap;
            this._opcode = new Opcode(this.heap);
        }

        WriteOnlyProgram.prototype.opcode = function opcode(offset) {
            this._opcode.offset = offset;
            return this._opcode;
        };

        return WriteOnlyProgram;
    }();

    var RuntimeProgram = function () {
        function RuntimeProgram(constants, heap) {
            (0, _emberBabel.classCallCheck)(this, RuntimeProgram);

            this.constants = constants;
            this.heap = heap;
            this._opcode = new Opcode(this.heap);
        }

        RuntimeProgram.hydrate = function hydrate(rawHeap, pool, resolver) {
            var heap = new Heap(rawHeap);
            var constants = new RuntimeConstants(resolver, pool);
            return new RuntimeProgram(constants, heap);
        };

        RuntimeProgram.prototype.opcode = function opcode(offset) {
            this._opcode.offset = offset;
            return this._opcode;
        };

        return RuntimeProgram;
    }();

    var Program = function (_WriteOnlyProgram) {
        (0, _emberBabel.inherits)(Program, _WriteOnlyProgram);

        function Program() {
            (0, _emberBabel.classCallCheck)(this, Program);

            return (0, _emberBabel.possibleConstructorReturn)(this, _WriteOnlyProgram.apply(this, arguments));
        }

        return Program;
    }(WriteOnlyProgram);

    function slice(arr, start, end) {
        if (arr.slice !== undefined) {
            return arr.slice(start, end);
        }
        var ret = new Uint32Array(end);
        for (; start < end; start++) {
            ret[start] = arr[start];
        }
        return ret;
    }

    exports.WELL_KNOWN_EMPTY_ARRAY_POSITION = WELL_KNOWN_EMPTY_ARRAY_POSITION;
    exports.WriteOnlyConstants = WriteOnlyConstants;
    exports.RuntimeConstants = RuntimeConstants;
    exports.Constants = Constants;
    exports.LazyConstants = LazyConstants;
    exports.Heap = Heap;
    exports.WriteOnlyProgram = WriteOnlyProgram;
    exports.RuntimeProgram = RuntimeProgram;
    exports.Program = Program;
    exports.Opcode = Opcode;
});
enifed('@glimmer/reference', ['exports', 'ember-babel', '@glimmer/util'], function (exports, _emberBabel, _util) {
    'use strict';

    exports.isModified = exports.ReferenceCache = exports.map = exports.CachedReference = exports.UpdatableTag = exports.CachedTag = exports.combine = exports.combineSlice = exports.combineTagged = exports.DirtyableTag = exports.bump = exports.isConstTag = exports.isConst = exports.CURRENT_TAG = exports.VOLATILE_TAG = exports.CONSTANT_TAG = exports.TagWrapper = exports.RevisionTag = exports.VOLATILE = exports.INITIAL = exports.CONSTANT = exports.IteratorSynchronizer = exports.ReferenceIterator = exports.IterationArtifacts = exports.ListItem = exports.ConstReference = undefined;


    var CONSTANT = 0;
    var INITIAL = 1;
    var VOLATILE = NaN;

    var RevisionTag = function () {
        function RevisionTag() {
            (0, _emberBabel.classCallCheck)(this, RevisionTag);
        }

        RevisionTag.prototype.validate = function validate(snapshot) {
            return this.value() === snapshot;
        };

        return RevisionTag;
    }();

    RevisionTag.id = 0;
    var VALUE = [];
    var VALIDATE = [];

    var TagWrapper = function () {
        function TagWrapper(type, inner) {
            (0, _emberBabel.classCallCheck)(this, TagWrapper);

            this.type = type;
            this.inner = inner;
        }

        TagWrapper.prototype.value = function value() {
            var func = VALUE[this.type];
            return func(this.inner);
        };

        TagWrapper.prototype.validate = function validate(snapshot) {
            var func = VALIDATE[this.type];
            return func(this.inner, snapshot);
        };

        return TagWrapper;
    }();

    function register(Type) {
        var type = VALUE.length;
        VALUE.push(function (tag) {
            return tag.value();
        });
        VALIDATE.push(function (tag, snapshot) {
            return tag.validate(snapshot);
        });
        Type.id = type;
    }
    ///
    // CONSTANT: 0
    VALUE.push(function () {
        return CONSTANT;
    });
    VALIDATE.push(function (_tag, snapshot) {
        return snapshot === CONSTANT;
    });
    var CONSTANT_TAG = new TagWrapper(0, null);
    // VOLATILE: 1
    VALUE.push(function () {
        return VOLATILE;
    });
    VALIDATE.push(function (_tag, snapshot) {
        return snapshot === VOLATILE;
    });
    var VOLATILE_TAG = new TagWrapper(1, null);
    // CURRENT: 2
    VALUE.push(function () {
        return $REVISION;
    });
    VALIDATE.push(function (_tag, snapshot) {
        return snapshot === $REVISION;
    });
    var CURRENT_TAG = new TagWrapper(2, null);
    function isConst(_ref) {
        var tag = _ref.tag;

        return tag === CONSTANT_TAG;
    }
    function isConstTag(tag) {
        return tag === CONSTANT_TAG;
    }
    ///
    var $REVISION = INITIAL;
    function bump() {
        $REVISION++;
    }

    var DirtyableTag = function (_RevisionTag) {
        (0, _emberBabel.inherits)(DirtyableTag, _RevisionTag);

        DirtyableTag.create = function create() {
            var revision = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : $REVISION;

            return new TagWrapper(this.id, new DirtyableTag(revision));
        };

        function DirtyableTag() {
            var revision = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : $REVISION;

            (0, _emberBabel.classCallCheck)(this, DirtyableTag);

            var _this = (0, _emberBabel.possibleConstructorReturn)(this, _RevisionTag.call(this));

            _this.revision = revision;
            return _this;
        }

        DirtyableTag.prototype.value = function value() {
            return this.revision;
        };

        DirtyableTag.prototype.dirty = function dirty() {
            this.revision = ++$REVISION;
        };

        return DirtyableTag;
    }(RevisionTag);

    register(DirtyableTag);
    function combineTagged(tagged) {
        var optimized = [];
        for (var i = 0, l = tagged.length; i < l; i++) {
            var tag = tagged[i].tag;
            if (tag === VOLATILE_TAG) return VOLATILE_TAG;
            if (tag === CONSTANT_TAG) continue;
            optimized.push(tag);
        }
        return _combine(optimized);
    }
    function combineSlice(slice) {
        var optimized = [];
        var node = slice.head();
        while (node !== null) {
            var tag = node.tag;
            if (tag === VOLATILE_TAG) return VOLATILE_TAG;
            if (tag !== CONSTANT_TAG) optimized.push(tag);
            node = slice.nextNode(node);
        }
        return _combine(optimized);
    }
    function combine(tags) {
        var optimized = [];
        for (var i = 0, l = tags.length; i < l; i++) {
            var tag = tags[i];
            if (tag === VOLATILE_TAG) return VOLATILE_TAG;
            if (tag === CONSTANT_TAG) continue;
            optimized.push(tag);
        }
        return _combine(optimized);
    }
    function _combine(tags) {
        switch (tags.length) {
            case 0:
                return CONSTANT_TAG;
            case 1:
                return tags[0];
            case 2:
                return TagsPair.create(tags[0], tags[1]);
            default:
                return TagsCombinator.create(tags);
        }
    }

    var CachedTag = function (_RevisionTag2) {
        (0, _emberBabel.inherits)(CachedTag, _RevisionTag2);

        function CachedTag() {
            (0, _emberBabel.classCallCheck)(this, CachedTag);

            var _this2 = (0, _emberBabel.possibleConstructorReturn)(this, _RevisionTag2.apply(this, arguments));

            _this2.lastChecked = null;
            _this2.lastValue = null;
            return _this2;
        }

        CachedTag.prototype.value = function value() {
            var lastChecked = this.lastChecked,
                lastValue = this.lastValue;

            if (lastChecked !== $REVISION) {
                this.lastChecked = $REVISION;
                this.lastValue = lastValue = this.compute();
            }
            return this.lastValue;
        };

        CachedTag.prototype.invalidate = function invalidate() {
            this.lastChecked = null;
        };

        return CachedTag;
    }(RevisionTag);

    var TagsPair = function (_CachedTag) {
        (0, _emberBabel.inherits)(TagsPair, _CachedTag);

        TagsPair.create = function create(first, second) {
            return new TagWrapper(this.id, new TagsPair(first, second));
        };

        function TagsPair(first, second) {
            (0, _emberBabel.classCallCheck)(this, TagsPair);

            var _this3 = (0, _emberBabel.possibleConstructorReturn)(this, _CachedTag.call(this));

            _this3.first = first;
            _this3.second = second;
            return _this3;
        }

        TagsPair.prototype.compute = function compute() {
            return Math.max(this.first.value(), this.second.value());
        };

        return TagsPair;
    }(CachedTag);

    register(TagsPair);

    var TagsCombinator = function (_CachedTag2) {
        (0, _emberBabel.inherits)(TagsCombinator, _CachedTag2);

        TagsCombinator.create = function create(tags) {
            return new TagWrapper(this.id, new TagsCombinator(tags));
        };

        function TagsCombinator(tags) {
            (0, _emberBabel.classCallCheck)(this, TagsCombinator);

            var _this4 = (0, _emberBabel.possibleConstructorReturn)(this, _CachedTag2.call(this));

            _this4.tags = tags;
            return _this4;
        }

        TagsCombinator.prototype.compute = function compute() {
            var tags = this.tags;

            var max = -1;
            for (var i = 0; i < tags.length; i++) {
                var value = tags[i].value();
                max = Math.max(value, max);
            }
            return max;
        };

        return TagsCombinator;
    }(CachedTag);

    register(TagsCombinator);

    var UpdatableTag = function (_CachedTag3) {
        (0, _emberBabel.inherits)(UpdatableTag, _CachedTag3);

        UpdatableTag.create = function create(tag) {
            return new TagWrapper(this.id, new UpdatableTag(tag));
        };

        function UpdatableTag(tag) {
            (0, _emberBabel.classCallCheck)(this, UpdatableTag);

            var _this5 = (0, _emberBabel.possibleConstructorReturn)(this, _CachedTag3.call(this));

            _this5.tag = tag;
            _this5.lastUpdated = INITIAL;
            return _this5;
        }

        UpdatableTag.prototype.compute = function compute() {
            return Math.max(this.lastUpdated, this.tag.value());
        };

        UpdatableTag.prototype.update = function update(tag) {
            if (tag !== this.tag) {
                this.tag = tag;
                this.lastUpdated = $REVISION;
                this.invalidate();
            }
        };

        return UpdatableTag;
    }(CachedTag);

    register(UpdatableTag);

    var CachedReference = function () {
        function CachedReference() {
            (0, _emberBabel.classCallCheck)(this, CachedReference);

            this.lastRevision = null;
            this.lastValue = null;
        }

        CachedReference.prototype.value = function value() {
            var tag = this.tag,
                lastRevision = this.lastRevision,
                lastValue = this.lastValue;

            if (lastRevision === null || !tag.validate(lastRevision)) {
                lastValue = this.lastValue = this.compute();
                this.lastRevision = tag.value();
            }
            return lastValue;
        };

        CachedReference.prototype.invalidate = function invalidate() {
            this.lastRevision = null;
        };

        return CachedReference;
    }();

    var MapperReference = function (_CachedReference) {
        (0, _emberBabel.inherits)(MapperReference, _CachedReference);

        function MapperReference(reference, mapper) {
            (0, _emberBabel.classCallCheck)(this, MapperReference);

            var _this6 = (0, _emberBabel.possibleConstructorReturn)(this, _CachedReference.call(this));

            _this6.tag = reference.tag;
            _this6.reference = reference;
            _this6.mapper = mapper;
            return _this6;
        }

        MapperReference.prototype.compute = function compute() {
            var reference = this.reference,
                mapper = this.mapper;

            return mapper(reference.value());
        };

        return MapperReference;
    }(CachedReference);

    function map(reference, mapper) {
        return new MapperReference(reference, mapper);
    }
    //////////

    var ReferenceCache = function () {
        function ReferenceCache(reference) {
            (0, _emberBabel.classCallCheck)(this, ReferenceCache);

            this.lastValue = null;
            this.lastRevision = null;
            this.initialized = false;
            this.tag = reference.tag;
            this.reference = reference;
        }

        ReferenceCache.prototype.peek = function peek() {
            if (!this.initialized) {
                return this.initialize();
            }
            return this.lastValue;
        };

        ReferenceCache.prototype.revalidate = function revalidate() {
            if (!this.initialized) {
                return this.initialize();
            }
            var reference = this.reference,
                lastRevision = this.lastRevision;

            var tag = reference.tag;
            if (tag.validate(lastRevision)) return NOT_MODIFIED;
            this.lastRevision = tag.value();
            var lastValue = this.lastValue;

            var value = reference.value();
            if (value === lastValue) return NOT_MODIFIED;
            this.lastValue = value;
            return value;
        };

        ReferenceCache.prototype.initialize = function initialize() {
            var reference = this.reference;

            var value = this.lastValue = reference.value();
            this.lastRevision = reference.tag.value();
            this.initialized = true;
            return value;
        };

        return ReferenceCache;
    }();

    var NOT_MODIFIED = 'adb3b78e-3d22-4e4b-877a-6317c2c5c145';
    function isModified(value) {
        return value !== NOT_MODIFIED;
    }

    var ConstReference = function () {
        function ConstReference(inner) {
            (0, _emberBabel.classCallCheck)(this, ConstReference);

            this.inner = inner;
            this.tag = CONSTANT_TAG;
        }

        ConstReference.prototype.value = function value() {
            return this.inner;
        };

        return ConstReference;
    }();

    var ListItem = function (_ListNode) {
        (0, _emberBabel.inherits)(ListItem, _ListNode);

        function ListItem(iterable, result) {
            (0, _emberBabel.classCallCheck)(this, ListItem);

            var _this7 = (0, _emberBabel.possibleConstructorReturn)(this, _ListNode.call(this, iterable.valueReferenceFor(result)));

            _this7.retained = false;
            _this7.seen = false;
            _this7.key = result.key;
            _this7.iterable = iterable;
            _this7.memo = iterable.memoReferenceFor(result);
            return _this7;
        }

        ListItem.prototype.update = function update(item) {
            this.retained = true;
            this.iterable.updateValueReference(this.value, item);
            this.iterable.updateMemoReference(this.memo, item);
        };

        ListItem.prototype.shouldRemove = function shouldRemove() {
            return !this.retained;
        };

        ListItem.prototype.reset = function reset() {
            this.retained = false;
            this.seen = false;
        };

        return ListItem;
    }(_util.ListNode);

    var IterationArtifacts = function () {
        function IterationArtifacts(iterable) {
            (0, _emberBabel.classCallCheck)(this, IterationArtifacts);

            this.iterator = null;
            this.map = (0, _util.dict)();
            this.list = new _util.LinkedList();
            this.tag = iterable.tag;
            this.iterable = iterable;
        }

        IterationArtifacts.prototype.isEmpty = function isEmpty() {
            var iterator = this.iterator = this.iterable.iterate();
            return iterator.isEmpty();
        };

        IterationArtifacts.prototype.iterate = function iterate() {
            var iterator = void 0;
            if (this.iterator === null) {
                iterator = this.iterable.iterate();
            } else {
                iterator = this.iterator;
            }
            this.iterator = null;
            return iterator;
        };

        IterationArtifacts.prototype.has = function has(key) {
            return !!this.map[key];
        };

        IterationArtifacts.prototype.get = function get(key) {
            return this.map[key];
        };

        IterationArtifacts.prototype.wasSeen = function wasSeen(key) {
            var node = this.map[key];
            return node !== undefined && node.seen;
        };

        IterationArtifacts.prototype.append = function append(item) {
            var map = this.map,
                list = this.list,
                iterable = this.iterable;

            var node = map[item.key] = new ListItem(iterable, item);
            list.append(node);
            return node;
        };

        IterationArtifacts.prototype.insertBefore = function insertBefore(item, reference) {
            var map = this.map,
                list = this.list,
                iterable = this.iterable;

            var node = map[item.key] = new ListItem(iterable, item);
            node.retained = true;
            list.insertBefore(node, reference);
            return node;
        };

        IterationArtifacts.prototype.move = function move(item, reference) {
            var list = this.list;

            item.retained = true;
            list.remove(item);
            list.insertBefore(item, reference);
        };

        IterationArtifacts.prototype.remove = function remove(item) {
            var list = this.list;

            list.remove(item);
            delete this.map[item.key];
        };

        IterationArtifacts.prototype.nextNode = function nextNode(item) {
            return this.list.nextNode(item);
        };

        IterationArtifacts.prototype.head = function head() {
            return this.list.head();
        };

        return IterationArtifacts;
    }();

    var ReferenceIterator = function () {
        // if anyone needs to construct this object with something other than
        // an iterable, let @wycats know.
        function ReferenceIterator(iterable) {
            (0, _emberBabel.classCallCheck)(this, ReferenceIterator);

            this.iterator = null;
            var artifacts = new IterationArtifacts(iterable);
            this.artifacts = artifacts;
        }

        ReferenceIterator.prototype.next = function next() {
            var artifacts = this.artifacts;

            var iterator = this.iterator = this.iterator || artifacts.iterate();
            var item = iterator.next();
            if (item === null) return null;
            return artifacts.append(item);
        };

        return ReferenceIterator;
    }();

    var Phase;
    (function (Phase) {
        Phase[Phase["Append"] = 0] = "Append";
        Phase[Phase["Prune"] = 1] = "Prune";
        Phase[Phase["Done"] = 2] = "Done";
    })(Phase || (Phase = {}));

    var IteratorSynchronizer = function () {
        function IteratorSynchronizer(_ref2) {
            var target = _ref2.target,
                artifacts = _ref2.artifacts;

            (0, _emberBabel.classCallCheck)(this, IteratorSynchronizer);

            this.target = target;
            this.artifacts = artifacts;
            this.iterator = artifacts.iterate();
            this.current = artifacts.head();
        }

        IteratorSynchronizer.prototype.sync = function sync() {
            var phase = Phase.Append;
            while (true) {
                switch (phase) {
                    case Phase.Append:
                        phase = this.nextAppend();
                        break;
                    case Phase.Prune:
                        phase = this.nextPrune();
                        break;
                    case Phase.Done:
                        this.nextDone();
                        return;
                }
            }
        };

        IteratorSynchronizer.prototype.advanceToKey = function advanceToKey(key) {
            var current = this.current,
                artifacts = this.artifacts;

            var seek = current;
            while (seek !== null && seek.key !== key) {
                seek.seen = true;
                seek = artifacts.nextNode(seek);
            }
            if (seek !== null) {
                this.current = artifacts.nextNode(seek);
            }
        };

        IteratorSynchronizer.prototype.nextAppend = function nextAppend() {
            var iterator = this.iterator,
                current = this.current,
                artifacts = this.artifacts;

            var item = iterator.next();
            if (item === null) {
                return this.startPrune();
            }
            var key = item.key;

            if (current !== null && current.key === key) {
                this.nextRetain(item);
            } else if (artifacts.has(key)) {
                this.nextMove(item);
            } else {
                this.nextInsert(item);
            }
            return Phase.Append;
        };

        IteratorSynchronizer.prototype.nextRetain = function nextRetain(item) {
            var artifacts = this.artifacts,
                current = this.current;

            current = current;
            current.update(item);
            this.current = artifacts.nextNode(current);
            this.target.retain(item.key, current.value, current.memo);
        };

        IteratorSynchronizer.prototype.nextMove = function nextMove(item) {
            var current = this.current,
                artifacts = this.artifacts,
                target = this.target;
            var key = item.key;

            var found = artifacts.get(item.key);
            found.update(item);
            if (artifacts.wasSeen(item.key)) {
                artifacts.move(found, current);
                target.move(found.key, found.value, found.memo, current ? current.key : null);
            } else {
                this.advanceToKey(key);
            }
        };

        IteratorSynchronizer.prototype.nextInsert = function nextInsert(item) {
            var artifacts = this.artifacts,
                target = this.target,
                current = this.current;

            var node = artifacts.insertBefore(item, current);
            target.insert(node.key, node.value, node.memo, current ? current.key : null);
        };

        IteratorSynchronizer.prototype.startPrune = function startPrune() {
            this.current = this.artifacts.head();
            return Phase.Prune;
        };

        IteratorSynchronizer.prototype.nextPrune = function nextPrune() {
            var artifacts = this.artifacts,
                target = this.target,
                current = this.current;

            if (current === null) {
                return Phase.Done;
            }
            var node = current;
            this.current = artifacts.nextNode(node);
            if (node.shouldRemove()) {
                artifacts.remove(node);
                target.delete(node.key);
            } else {
                node.reset();
            }
            return Phase.Prune;
        };

        IteratorSynchronizer.prototype.nextDone = function nextDone() {
            this.target.done();
        };

        return IteratorSynchronizer;
    }();

    exports.ConstReference = ConstReference;
    exports.ListItem = ListItem;
    exports.IterationArtifacts = IterationArtifacts;
    exports.ReferenceIterator = ReferenceIterator;
    exports.IteratorSynchronizer = IteratorSynchronizer;
    exports.CONSTANT = CONSTANT;
    exports.INITIAL = INITIAL;
    exports.VOLATILE = VOLATILE;
    exports.RevisionTag = RevisionTag;
    exports.TagWrapper = TagWrapper;
    exports.CONSTANT_TAG = CONSTANT_TAG;
    exports.VOLATILE_TAG = VOLATILE_TAG;
    exports.CURRENT_TAG = CURRENT_TAG;
    exports.isConst = isConst;
    exports.isConstTag = isConstTag;
    exports.bump = bump;
    exports.DirtyableTag = DirtyableTag;
    exports.combineTagged = combineTagged;
    exports.combineSlice = combineSlice;
    exports.combine = combine;
    exports.CachedTag = CachedTag;
    exports.UpdatableTag = UpdatableTag;
    exports.CachedReference = CachedReference;
    exports.map = map;
    exports.ReferenceCache = ReferenceCache;
    exports.isModified = isModified;
});
enifed('@glimmer/runtime', ['exports', 'ember-babel', '@glimmer/util', '@glimmer/reference', '@glimmer/vm', '@glimmer/low-level'], function (exports, _emberBabel, _util, _reference, _vm2, _lowLevel) {
    'use strict';

    exports.hasCapability = exports.capabilityFlagsFrom = exports.Cursor = exports.ConcreteBounds = exports.RehydrateBuilder = exports.rehydrationBuilder = exports.clientBuilder = exports.NewElementBuilder = exports.normalizeProperty = exports.insertHTMLBefore = exports.isWhitespace = exports.DOMTreeConstruction = exports.IDOMChanges = exports.SVG_NAMESPACE = exports.DOMChanges = exports.curry = exports.isCurriedComponentDefinition = exports.CurriedComponentDefinition = exports.MINIMAL_CAPABILITIES = exports.DEFAULT_CAPABILITIES = exports.DefaultEnvironment = exports.Environment = exports.Scope = exports.EMPTY_ARGS = exports.DynamicAttribute = exports.SimpleDynamicAttribute = exports.RenderResult = exports.UpdatingVM = exports.LowLevelVM = exports.getDynamicVar = exports.resetDebuggerCallback = exports.setDebuggerCallback = exports.ConditionalReference = exports.PrimitiveReference = exports.UNDEFINED_REFERENCE = exports.NULL_REFERENCE = exports.renderComponent = exports.renderMain = undefined;


    // these import bindings will be stripped from build

    var AppendOpcodes = function () {
        function AppendOpcodes() {
            (0, _emberBabel.classCallCheck)(this, AppendOpcodes);

            this.evaluateOpcode = (0, _util.fillNulls)(98 /* Size */).slice();
        }

        AppendOpcodes.prototype.add = function add(name, evaluate) {
            var kind = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'syscall';

            this.evaluateOpcode[name] = { syscall: kind === 'syscall', evaluate: evaluate };
        };

        AppendOpcodes.prototype.debugBefore = function debugBefore(vm, opcode, type) {
            var sp = void 0;
            var state = void 0;

            return { sp: sp, state: state };
        };

        AppendOpcodes.prototype.debugAfter = function debugAfter(vm, opcode, type, pre) {
            var expectedChange = void 0;
            var sp = pre.sp,
                state = pre.state;

            var metadata = null;
            if (metadata !== null) {
                if (typeof metadata.stackChange === 'number') {
                    expectedChange = metadata.stackChange;
                } else {
                    expectedChange = metadata.stackChange({ opcode: opcode, constants: vm.constants, state: state });
                    if (isNaN(expectedChange)) throw (0, _util.unreachable)();
                }
            }
        };

        AppendOpcodes.prototype.evaluate = function evaluate(vm, opcode, type) {
            var operation = this.evaluateOpcode[type];
            if (operation.syscall) {

                operation.evaluate(vm, opcode);
            } else {

                operation.evaluate(vm.inner, opcode);
            }
        };

        return AppendOpcodes;
    }();

    var APPEND_OPCODES = new AppendOpcodes();

    var AbstractOpcode = function AbstractOpcode() {
        (0, _emberBabel.classCallCheck)(this, AbstractOpcode);

        (0, _util.initializeGuid)(this);
    };

    var UpdatingOpcode = function (_AbstractOpcode) {
        (0, _emberBabel.inherits)(UpdatingOpcode, _AbstractOpcode);

        function UpdatingOpcode() {
            (0, _emberBabel.classCallCheck)(this, UpdatingOpcode);

            var _this = (0, _emberBabel.possibleConstructorReturn)(this, _AbstractOpcode.apply(this, arguments));

            _this.next = null;
            _this.prev = null;
            return _this;
        }

        return UpdatingOpcode;
    }(AbstractOpcode);

    var PrimitiveReference = function (_ConstReference) {
        (0, _emberBabel.inherits)(PrimitiveReference, _ConstReference);

        function PrimitiveReference(value) {
            (0, _emberBabel.classCallCheck)(this, PrimitiveReference);

            return (0, _emberBabel.possibleConstructorReturn)(this, _ConstReference.call(this, value));
        }

        PrimitiveReference.create = function create(value) {
            if (value === undefined) {
                return UNDEFINED_REFERENCE;
            } else if (value === null) {
                return NULL_REFERENCE;
            } else if (value === true) {
                return TRUE_REFERENCE;
            } else if (value === false) {
                return FALSE_REFERENCE;
            } else if (typeof value === 'number') {
                return new ValueReference(value);
            } else {
                return new StringReference(value);
            }
        };

        PrimitiveReference.prototype.get = function get(_key) {
            return UNDEFINED_REFERENCE;
        };

        return PrimitiveReference;
    }(_reference.ConstReference);

    var StringReference = function (_PrimitiveReference) {
        (0, _emberBabel.inherits)(StringReference, _PrimitiveReference);

        function StringReference() {
            (0, _emberBabel.classCallCheck)(this, StringReference);

            var _this3 = (0, _emberBabel.possibleConstructorReturn)(this, _PrimitiveReference.apply(this, arguments));

            _this3.lengthReference = null;
            return _this3;
        }

        StringReference.prototype.get = function get(key) {
            if (key === 'length') {
                var lengthReference = this.lengthReference;

                if (lengthReference === null) {
                    lengthReference = this.lengthReference = new ValueReference(this.inner.length);
                }
                return lengthReference;
            } else {
                return _PrimitiveReference.prototype.get.call(this, key);
            }
        };

        return StringReference;
    }(PrimitiveReference);

    var ValueReference = function (_PrimitiveReference2) {
        (0, _emberBabel.inherits)(ValueReference, _PrimitiveReference2);

        function ValueReference(value) {
            (0, _emberBabel.classCallCheck)(this, ValueReference);

            return (0, _emberBabel.possibleConstructorReturn)(this, _PrimitiveReference2.call(this, value));
        }

        return ValueReference;
    }(PrimitiveReference);

    var UNDEFINED_REFERENCE = new ValueReference(undefined);
    var NULL_REFERENCE = new ValueReference(null);
    var TRUE_REFERENCE = new ValueReference(true);
    var FALSE_REFERENCE = new ValueReference(false);

    var ConditionalReference = function () {
        function ConditionalReference(inner) {
            (0, _emberBabel.classCallCheck)(this, ConditionalReference);

            this.inner = inner;
            this.tag = inner.tag;
        }

        ConditionalReference.prototype.value = function value() {
            return this.toBool(this.inner.value());
        };

        ConditionalReference.prototype.toBool = function toBool(value) {
            return !!value;
        };

        return ConditionalReference;
    }();

    var ConcatReference = function (_CachedReference) {
        (0, _emberBabel.inherits)(ConcatReference, _CachedReference);

        function ConcatReference(parts) {
            (0, _emberBabel.classCallCheck)(this, ConcatReference);

            var _this5 = (0, _emberBabel.possibleConstructorReturn)(this, _CachedReference.call(this));

            _this5.parts = parts;
            _this5.tag = (0, _reference.combineTagged)(parts);
            return _this5;
        }

        ConcatReference.prototype.compute = function compute() {
            var parts = new Array();
            for (var i = 0; i < this.parts.length; i++) {
                var value = this.parts[i].value();
                if (value !== null && value !== undefined) {
                    parts[i] = castToString(value);
                }
            }
            if (parts.length > 0) {
                return parts.join('');
            }
            return null;
        };

        return ConcatReference;
    }(_reference.CachedReference);

    function castToString(value) {
        if (typeof value.toString !== 'function') {
            return '';
        }
        return String(value);
    }

    APPEND_OPCODES.add(1 /* Helper */, function (vm, _ref) {
        var handle = _ref.op1;

        var stack = vm.stack;
        var helper = vm.constants.resolveHandle(handle);
        var args = stack.pop();
        var value = helper(vm, args);
        vm.loadValue(_vm2.Register.v0, value);
    });
    APPEND_OPCODES.add(6 /* GetVariable */, function (vm, _ref2) {
        var symbol = _ref2.op1;

        var expr = vm.referenceForSymbol(symbol);
        vm.stack.push(expr);
    });
    APPEND_OPCODES.add(4 /* SetVariable */, function (vm, _ref3) {
        var symbol = _ref3.op1;

        var expr = vm.stack.pop();
        vm.scope().bindSymbol(symbol, expr);
    });
    APPEND_OPCODES.add(5 /* SetBlock */, function (vm, _ref4) {
        var symbol = _ref4.op1;

        var handle = vm.stack.pop();
        var scope = vm.stack.pop(); // FIXME(mmun): shouldn't need to cast this
        var table = vm.stack.pop();
        var block = table ? [handle, scope, table] : null;
        vm.scope().bindBlock(symbol, block);
    });
    APPEND_OPCODES.add(96 /* ResolveMaybeLocal */, function (vm, _ref5) {
        var _name = _ref5.op1;

        var name = vm.constants.getString(_name);
        var locals = vm.scope().getPartialMap();
        var ref = locals[name];
        if (ref === undefined) {
            ref = vm.getSelf().get(name);
        }
        vm.stack.push(ref);
    });
    APPEND_OPCODES.add(20 /* RootScope */, function (vm, _ref6) {
        var symbols = _ref6.op1,
            bindCallerScope = _ref6.op2;

        vm.pushRootScope(symbols, !!bindCallerScope);
    });
    APPEND_OPCODES.add(7 /* GetProperty */, function (vm, _ref7) {
        var _key = _ref7.op1;

        var key = vm.constants.getString(_key);
        var expr = vm.stack.pop();
        vm.stack.push(expr.get(key));
    });
    APPEND_OPCODES.add(8 /* GetBlock */, function (vm, _ref8) {
        var _block = _ref8.op1;
        var stack = vm.stack;

        var block = vm.scope().getBlock(_block);
        if (block) {
            stack.push(block[2]);
            stack.push(block[1]);
            stack.push(block[0]);
        } else {
            stack.push(null);
            stack.push(null);
            stack.push(null);
        }
    });
    APPEND_OPCODES.add(9 /* HasBlock */, function (vm, _ref9) {
        var _block = _ref9.op1;

        var hasBlock = !!vm.scope().getBlock(_block);
        vm.stack.push(hasBlock ? TRUE_REFERENCE : FALSE_REFERENCE);
    });
    APPEND_OPCODES.add(10 /* HasBlockParams */, function (vm) {
        // FIXME(mmun): should only need to push the symbol table
        var block = vm.stack.pop();
        var scope = vm.stack.pop();

        var table = vm.stack.pop();

        var hasBlockParams = table && table.parameters.length;
        vm.stack.push(hasBlockParams ? TRUE_REFERENCE : FALSE_REFERENCE);
    });
    APPEND_OPCODES.add(11 /* Concat */, function (vm, _ref10) {
        var count = _ref10.op1;

        var out = new Array(count);
        for (var i = count; i > 0; i--) {
            var offset = i - 1;
            out[offset] = vm.stack.pop();
        }
        vm.stack.push(new ConcatReference(out));
    });

    var CURRIED_COMPONENT_DEFINITION_BRAND = 'CURRIED COMPONENT DEFINITION [id=6f00feb9-a0ef-4547-99ea-ac328f80acea]';
    function isCurriedComponentDefinition(definition) {
        return !!(definition && definition[CURRIED_COMPONENT_DEFINITION_BRAND]);
    }
    function isComponentDefinition(definition) {
        return definition && definition[CURRIED_COMPONENT_DEFINITION_BRAND];
    }

    var CurriedComponentDefinition = function () {
        /** @internal */
        function CurriedComponentDefinition(inner, args) {
            (0, _emberBabel.classCallCheck)(this, CurriedComponentDefinition);

            this.inner = inner;
            this.args = args;
            this[CURRIED_COMPONENT_DEFINITION_BRAND] = true;
        }

        CurriedComponentDefinition.prototype.unwrap = function unwrap(args) {
            args.realloc(this.offset);
            var definition = this;
            while (true) {
                var _definition = definition,
                    curriedArgs = _definition.args,
                    inner = _definition.inner;

                if (curriedArgs) {
                    args.positional.prepend(curriedArgs.positional);
                    args.named.merge(curriedArgs.named);
                }
                if (!isCurriedComponentDefinition(inner)) {
                    return inner;
                }
                definition = inner;
            }
        };
        /** @internal */

        (0, _emberBabel.createClass)(CurriedComponentDefinition, [{
            key: 'offset',
            get: function () {
                var inner = this.inner,
                    args = this.args;

                var length = args ? args.positional.length : 0;
                return isCurriedComponentDefinition(inner) ? length + inner.offset : length;
            }
        }]);

        return CurriedComponentDefinition;
    }();

    function curry(spec) {
        var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

        return new CurriedComponentDefinition(spec, args);
    }

    function normalizeStringValue(value) {
        if (isEmpty(value)) {
            return '';
        }
        return String(value);
    }
    function shouldCoerce(value) {
        return isString(value) || isEmpty(value) || typeof value === 'boolean' || typeof value === 'number';
    }
    function isEmpty(value) {
        return value === null || value === undefined || typeof value.toString !== 'function';
    }
    function isSafeString(value) {
        return typeof value === 'object' && value !== null && typeof value.toHTML === 'function';
    }
    function isNode(value) {
        return typeof value === 'object' && value !== null && typeof value.nodeType === 'number';
    }
    function isFragment(value) {
        return isNode(value) && value.nodeType === 11;
    }
    function isString(value) {
        return typeof value === 'string';
    }

    var DynamicTextContent = function (_UpdatingOpcode) {
        (0, _emberBabel.inherits)(DynamicTextContent, _UpdatingOpcode);

        function DynamicTextContent(node, reference, lastValue) {
            (0, _emberBabel.classCallCheck)(this, DynamicTextContent);

            var _this6 = (0, _emberBabel.possibleConstructorReturn)(this, _UpdatingOpcode.call(this));

            _this6.node = node;
            _this6.reference = reference;
            _this6.lastValue = lastValue;
            _this6.type = 'dynamic-text';
            _this6.tag = reference.tag;
            _this6.lastRevision = _this6.tag.value();
            return _this6;
        }

        DynamicTextContent.prototype.evaluate = function evaluate() {
            var reference = this.reference,
                tag = this.tag;

            if (!tag.validate(this.lastRevision)) {
                this.lastRevision = tag.value();
                this.update(reference.value());
            }
        };

        DynamicTextContent.prototype.update = function update(value) {
            var lastValue = this.lastValue;

            if (value === lastValue) return;
            var normalized = void 0;
            if (isEmpty(value)) {
                normalized = '';
            } else if (isString(value)) {
                normalized = value;
            } else {
                normalized = String(value);
            }
            if (normalized !== lastValue) {
                var textNode = this.node;
                textNode.nodeValue = this.lastValue = normalized;
            }
        };

        return DynamicTextContent;
    }(UpdatingOpcode);

    var IsCurriedComponentDefinitionReference = function (_ConditionalReference) {
        (0, _emberBabel.inherits)(IsCurriedComponentDefinitionReference, _ConditionalReference);

        function IsCurriedComponentDefinitionReference() {
            (0, _emberBabel.classCallCheck)(this, IsCurriedComponentDefinitionReference);

            return (0, _emberBabel.possibleConstructorReturn)(this, _ConditionalReference.apply(this, arguments));
        }

        IsCurriedComponentDefinitionReference.create = function create(inner) {
            return new IsCurriedComponentDefinitionReference(inner);
        };

        IsCurriedComponentDefinitionReference.prototype.toBool = function toBool(value) {
            return isCurriedComponentDefinition(value);
        };

        return IsCurriedComponentDefinitionReference;
    }(ConditionalReference);

    var ContentTypeReference = function () {
        function ContentTypeReference(inner) {
            (0, _emberBabel.classCallCheck)(this, ContentTypeReference);

            this.inner = inner;
            this.tag = inner.tag;
        }

        ContentTypeReference.prototype.value = function value() {
            var value = this.inner.value();
            if (shouldCoerce(value)) {
                return 1 /* String */;
            } else if (isComponentDefinition(value)) {
                return 0 /* Component */;
            } else if (isSafeString(value)) {
                return 3 /* SafeString */;
            } else if (isFragment(value)) {
                return 4 /* Fragment */;
            } else if (isNode(value)) {
                return 5 /* Node */;
            } else {
                    return 1 /* String */;
                }
        };

        return ContentTypeReference;
    }();

    APPEND_OPCODES.add(28 /* AppendHTML */, function (vm) {
        var reference = vm.stack.pop();
        var rawValue = reference.value();
        var value = isEmpty(rawValue) ? '' : String(rawValue);
        vm.elements().appendDynamicHTML(value);
    });
    APPEND_OPCODES.add(29 /* AppendSafeHTML */, function (vm) {
        var reference = vm.stack.pop();
        var rawValue = reference.value().toHTML();
        var value = isEmpty(rawValue) ? '' : rawValue;
        vm.elements().appendDynamicHTML(value);
    });
    APPEND_OPCODES.add(32 /* AppendText */, function (vm) {
        var reference = vm.stack.pop();
        var rawValue = reference.value();
        var value = isEmpty(rawValue) ? '' : String(rawValue);
        var node = vm.elements().appendDynamicText(value);
        if (!(0, _reference.isConst)(reference)) {
            vm.updateWith(new DynamicTextContent(node, reference, value));
        }
    });
    APPEND_OPCODES.add(30 /* AppendDocumentFragment */, function (vm) {
        var reference = vm.stack.pop();
        var value = reference.value();
        vm.elements().appendDynamicFragment(value);
    });
    APPEND_OPCODES.add(31 /* AppendNode */, function (vm) {
        var reference = vm.stack.pop();
        var value = reference.value();
        vm.elements().appendDynamicNode(value);
    });

    APPEND_OPCODES.add(22 /* ChildScope */, function (vm) {
        return vm.pushChildScope();
    });
    APPEND_OPCODES.add(23 /* PopScope */, function (vm) {
        return vm.popScope();
    });
    APPEND_OPCODES.add(44 /* PushDynamicScope */, function (vm) {
        return vm.pushDynamicScope();
    });
    APPEND_OPCODES.add(45 /* PopDynamicScope */, function (vm) {
        return vm.popDynamicScope();
    });
    APPEND_OPCODES.add(12 /* Constant */, function (vm, _ref11) {
        var other = _ref11.op1;

        vm.stack.push(vm.constants.getOther(other));
    });
    APPEND_OPCODES.add(13 /* Primitive */, function (vm, _ref12) {
        var primitive = _ref12.op1;

        var stack = vm.stack;
        var flag = primitive & 7; // 111
        var value = primitive >> 3;
        switch (flag) {
            case 0 /* NUMBER */:
                stack.push(value);
                break;
            case 1 /* FLOAT */:
                stack.push(vm.constants.getNumber(value));
                break;
            case 2 /* STRING */:
                stack.push(vm.constants.getString(value));
                break;
            case 3 /* BOOLEAN_OR_VOID */:
                stack.pushEncodedImmediate(primitive);
                break;
            case 4 /* NEGATIVE */:
                stack.push(vm.constants.getNumber(value));
                break;
            case 5 /* BIG_NUM */:
                stack.push(vm.constants.getNumber(value));
                break;
        }
    });
    APPEND_OPCODES.add(14 /* PrimitiveReference */, function (vm) {
        var stack = vm.stack;
        stack.push(PrimitiveReference.create(stack.pop()));
    });
    APPEND_OPCODES.add(15 /* ReifyU32 */, function (vm) {
        var stack = vm.stack;
        stack.push(stack.peek().value());
    });
    APPEND_OPCODES.add(16 /* Dup */, function (vm, _ref13) {
        var register = _ref13.op1,
            offset = _ref13.op2;

        var position = vm.fetchValue(register) - offset;
        vm.stack.dup(position);
    });
    APPEND_OPCODES.add(17 /* Pop */, function (vm, _ref14) {
        var count = _ref14.op1;

        vm.stack.pop(count);
    });
    APPEND_OPCODES.add(18 /* Load */, function (vm, _ref15) {
        var register = _ref15.op1;

        vm.load(register);
    });
    APPEND_OPCODES.add(19 /* Fetch */, function (vm, _ref16) {
        var register = _ref16.op1;

        vm.fetch(register);
    });
    APPEND_OPCODES.add(43 /* BindDynamicScope */, function (vm, _ref17) {
        var _names = _ref17.op1;

        var names = vm.constants.getArray(_names);
        vm.bindDynamicScope(names);
    });
    APPEND_OPCODES.add(61 /* Enter */, function (vm, _ref18) {
        var args = _ref18.op1;

        vm.enter(args);
    });
    APPEND_OPCODES.add(62 /* Exit */, function (vm) {
        vm.exit();
    });
    APPEND_OPCODES.add(48 /* PushSymbolTable */, function (vm, _ref19) {
        var _table = _ref19.op1;

        var stack = vm.stack;
        stack.push(vm.constants.getSerializable(_table));
    });
    APPEND_OPCODES.add(47 /* PushBlockScope */, function (vm) {
        var stack = vm.stack;
        stack.push(vm.scope());
    });
    APPEND_OPCODES.add(46 /* CompileBlock */, function (vm) {
        var stack = vm.stack;
        var block = stack.pop();
        if (block) {
            stack.push(block.compile());
        } else {
            stack.pushNull();
        }
    });
    APPEND_OPCODES.add(51 /* InvokeYield */, function (vm) {
        var stack = vm.stack;

        var handle = stack.pop();
        var scope = stack.pop(); // FIXME(mmun): shouldn't need to cast this
        var table = stack.pop();

        var args = stack.pop();
        if (table === null) {
            // To balance the pop{Frame,Scope}
            vm.pushFrame();
            vm.pushScope(scope); // Could be null but it doesnt matter as it is immediatelly popped.
            return;
        }
        var invokingScope = scope;
        // If necessary, create a child scope
        {
            var locals = table.parameters;
            var localsCount = locals.length;
            if (localsCount > 0) {
                invokingScope = invokingScope.child();
                for (var i = 0; i < localsCount; i++) {
                    invokingScope.bindSymbol(locals[i], args.at(i));
                }
            }
        }
        vm.pushFrame();
        vm.pushScope(invokingScope);
        vm.call(handle);
    });
    APPEND_OPCODES.add(53 /* JumpIf */, function (vm, _ref20) {
        var target = _ref20.op1;

        var reference = vm.stack.pop();
        if ((0, _reference.isConst)(reference)) {
            if (reference.value()) {
                vm.goto(target);
            }
        } else {
            var cache = new _reference.ReferenceCache(reference);
            if (cache.peek()) {
                vm.goto(target);
            }
            vm.updateWith(new Assert(cache));
        }
    });
    APPEND_OPCODES.add(54 /* JumpUnless */, function (vm, _ref21) {
        var target = _ref21.op1;

        var reference = vm.stack.pop();
        if ((0, _reference.isConst)(reference)) {
            if (!reference.value()) {
                vm.goto(target);
            }
        } else {
            var cache = new _reference.ReferenceCache(reference);
            if (!cache.peek()) {
                vm.goto(target);
            }
            vm.updateWith(new Assert(cache));
        }
    });
    APPEND_OPCODES.add(55 /* JumpEq */, function (vm, _ref22) {
        var target = _ref22.op1,
            comparison = _ref22.op2;

        var other = vm.stack.peek();
        if (other === comparison) {
            vm.goto(target);
        }
    });
    APPEND_OPCODES.add(56 /* AssertSame */, function (vm) {
        var reference = vm.stack.peek();
        if (!(0, _reference.isConst)(reference)) {
            vm.updateWith(Assert.initialize(new _reference.ReferenceCache(reference)));
        }
    });
    APPEND_OPCODES.add(63 /* ToBoolean */, function (vm) {
        var env = vm.env,
            stack = vm.stack;

        stack.push(env.toConditionalReference(stack.pop()));
    });

    var Assert = function (_UpdatingOpcode2) {
        (0, _emberBabel.inherits)(Assert, _UpdatingOpcode2);

        function Assert(cache) {
            (0, _emberBabel.classCallCheck)(this, Assert);

            var _this8 = (0, _emberBabel.possibleConstructorReturn)(this, _UpdatingOpcode2.call(this));

            _this8.type = 'assert';
            _this8.tag = cache.tag;
            _this8.cache = cache;
            return _this8;
        }

        Assert.initialize = function initialize(cache) {
            var assert = new Assert(cache);
            cache.peek();
            return assert;
        };

        Assert.prototype.evaluate = function evaluate(vm) {
            var cache = this.cache;

            if ((0, _reference.isModified)(cache.revalidate())) {
                vm.throw();
            }
        };

        return Assert;
    }(UpdatingOpcode);

    var JumpIfNotModifiedOpcode = function (_UpdatingOpcode3) {
        (0, _emberBabel.inherits)(JumpIfNotModifiedOpcode, _UpdatingOpcode3);

        function JumpIfNotModifiedOpcode(tag, target) {
            (0, _emberBabel.classCallCheck)(this, JumpIfNotModifiedOpcode);

            var _this9 = (0, _emberBabel.possibleConstructorReturn)(this, _UpdatingOpcode3.call(this));

            _this9.target = target;
            _this9.type = 'jump-if-not-modified';
            _this9.tag = tag;
            _this9.lastRevision = tag.value();
            return _this9;
        }

        JumpIfNotModifiedOpcode.prototype.evaluate = function evaluate(vm) {
            var tag = this.tag,
                target = this.target,
                lastRevision = this.lastRevision;

            if (!vm.alwaysRevalidate && tag.validate(lastRevision)) {
                vm.goto(target);
            }
        };

        JumpIfNotModifiedOpcode.prototype.didModify = function didModify() {
            this.lastRevision = this.tag.value();
        };

        return JumpIfNotModifiedOpcode;
    }(UpdatingOpcode);

    var DidModifyOpcode = function (_UpdatingOpcode4) {
        (0, _emberBabel.inherits)(DidModifyOpcode, _UpdatingOpcode4);

        function DidModifyOpcode(target) {
            (0, _emberBabel.classCallCheck)(this, DidModifyOpcode);

            var _this10 = (0, _emberBabel.possibleConstructorReturn)(this, _UpdatingOpcode4.call(this));

            _this10.target = target;
            _this10.type = 'did-modify';
            _this10.tag = _reference.CONSTANT_TAG;
            return _this10;
        }

        DidModifyOpcode.prototype.evaluate = function evaluate() {
            this.target.didModify();
        };

        return DidModifyOpcode;
    }(UpdatingOpcode);

    var LabelOpcode = function () {
        function LabelOpcode(label) {
            (0, _emberBabel.classCallCheck)(this, LabelOpcode);

            this.tag = _reference.CONSTANT_TAG;
            this.type = 'label';
            this.label = null;
            this.prev = null;
            this.next = null;
            (0, _util.initializeGuid)(this);
            this.label = label;
        }

        LabelOpcode.prototype.evaluate = function evaluate() {};

        LabelOpcode.prototype.inspect = function inspect() {
            return this.label + ' [' + this._guid + ']';
        };

        return LabelOpcode;
    }();

    APPEND_OPCODES.add(26 /* Text */, function (vm, _ref23) {
        var text = _ref23.op1;

        vm.elements().appendText(vm.constants.getString(text));
    });
    APPEND_OPCODES.add(27 /* Comment */, function (vm, _ref24) {
        var text = _ref24.op1;

        vm.elements().appendComment(vm.constants.getString(text));
    });
    APPEND_OPCODES.add(33 /* OpenElement */, function (vm, _ref25) {
        var tag = _ref25.op1;

        vm.elements().openElement(vm.constants.getString(tag));
    });
    APPEND_OPCODES.add(34 /* OpenDynamicElement */, function (vm) {
        var tagName = vm.stack.pop().value();
        vm.elements().openElement(tagName);
    });
    APPEND_OPCODES.add(41 /* PushRemoteElement */, function (vm) {
        var elementRef = vm.stack.pop();
        var nextSiblingRef = vm.stack.pop();
        var guidRef = vm.stack.pop();
        var element = void 0;
        var nextSibling = void 0;
        var guid = guidRef.value();
        if ((0, _reference.isConst)(elementRef)) {
            element = elementRef.value();
        } else {
            var cache = new _reference.ReferenceCache(elementRef);
            element = cache.peek();
            vm.updateWith(new Assert(cache));
        }
        if ((0, _reference.isConst)(nextSiblingRef)) {
            nextSibling = nextSiblingRef.value();
        } else {
            var _cache = new _reference.ReferenceCache(nextSiblingRef);
            nextSibling = _cache.peek();
            vm.updateWith(new Assert(_cache));
        }
        vm.elements().pushRemoteElement(element, guid, nextSibling);
    });
    APPEND_OPCODES.add(42 /* PopRemoteElement */, function (vm) {
        vm.elements().popRemoteElement();
    });
    APPEND_OPCODES.add(38 /* FlushElement */, function (vm) {
        var operations = vm.fetchValue(_vm2.Register.t0);
        if (operations) {
            operations.flush(vm);
            vm.loadValue(_vm2.Register.t0, null);
        }
        vm.elements().flushElement();
    });
    APPEND_OPCODES.add(39 /* CloseElement */, function (vm) {
        vm.elements().closeElement();
    });
    APPEND_OPCODES.add(40 /* Modifier */, function (vm, _ref26) {
        var handle = _ref26.op1;

        var _vm$constants$resolve = vm.constants.resolveHandle(handle),
            manager = _vm$constants$resolve.manager,
            state = _vm$constants$resolve.state;

        var stack = vm.stack;
        var args = stack.pop();

        var _vm$elements = vm.elements(),
            element = _vm$elements.element,
            updateOperations = _vm$elements.updateOperations;

        var dynamicScope = vm.dynamicScope();
        var modifier = manager.create(element, state, args, dynamicScope, updateOperations);
        vm.env.scheduleInstallModifier(modifier, manager);
        var destructor = manager.getDestructor(modifier);
        if (destructor) {
            vm.newDestroyable(destructor);
        }
        var tag = manager.getTag(modifier);
        if (!(0, _reference.isConstTag)(tag)) {
            vm.updateWith(new UpdateModifierOpcode(tag, manager, modifier));
        }
    });

    var UpdateModifierOpcode = function (_UpdatingOpcode5) {
        (0, _emberBabel.inherits)(UpdateModifierOpcode, _UpdatingOpcode5);

        function UpdateModifierOpcode(tag, manager, modifier) {
            (0, _emberBabel.classCallCheck)(this, UpdateModifierOpcode);

            var _this11 = (0, _emberBabel.possibleConstructorReturn)(this, _UpdatingOpcode5.call(this));

            _this11.tag = tag;
            _this11.manager = manager;
            _this11.modifier = modifier;
            _this11.type = 'update-modifier';
            _this11.lastUpdated = tag.value();
            return _this11;
        }

        UpdateModifierOpcode.prototype.evaluate = function evaluate(vm) {
            var manager = this.manager,
                modifier = this.modifier,
                tag = this.tag,
                lastUpdated = this.lastUpdated;

            if (!tag.validate(lastUpdated)) {
                vm.env.scheduleUpdateModifier(modifier, manager);
                this.lastUpdated = tag.value();
            }
        };

        return UpdateModifierOpcode;
    }(UpdatingOpcode);

    APPEND_OPCODES.add(35 /* StaticAttr */, function (vm, _ref27) {
        var _name = _ref27.op1,
            _value = _ref27.op2,
            _namespace = _ref27.op3;

        var name = vm.constants.getString(_name);
        var value = vm.constants.getString(_value);
        var namespace = _namespace ? vm.constants.getString(_namespace) : null;
        vm.elements().setStaticAttribute(name, value, namespace);
    });
    APPEND_OPCODES.add(36 /* DynamicAttr */, function (vm, _ref28) {
        var _name = _ref28.op1,
            trusting = _ref28.op2,
            _namespace = _ref28.op3;

        var name = vm.constants.getString(_name);
        var reference = vm.stack.pop();
        var value = reference.value();
        var namespace = _namespace ? vm.constants.getString(_namespace) : null;
        var attribute = vm.elements().setDynamicAttribute(name, value, !!trusting, namespace);
        if (!(0, _reference.isConst)(reference)) {
            vm.updateWith(new UpdateDynamicAttributeOpcode(reference, attribute));
        }
    });

    var UpdateDynamicAttributeOpcode = function (_UpdatingOpcode6) {
        (0, _emberBabel.inherits)(UpdateDynamicAttributeOpcode, _UpdatingOpcode6);

        function UpdateDynamicAttributeOpcode(reference, attribute) {
            (0, _emberBabel.classCallCheck)(this, UpdateDynamicAttributeOpcode);

            var _this12 = (0, _emberBabel.possibleConstructorReturn)(this, _UpdatingOpcode6.call(this));

            _this12.reference = reference;
            _this12.attribute = attribute;
            _this12.type = 'patch-element';
            _this12.tag = reference.tag;
            _this12.lastRevision = _this12.tag.value();
            return _this12;
        }

        UpdateDynamicAttributeOpcode.prototype.evaluate = function evaluate(vm) {
            var attribute = this.attribute,
                reference = this.reference,
                tag = this.tag;

            if (!tag.validate(this.lastRevision)) {
                this.lastRevision = tag.value();
                attribute.update(reference.value(), vm.env);
            }
        };

        return UpdateDynamicAttributeOpcode;
    }(UpdatingOpcode);

    function resolveComponent(resolver, name, meta) {
        var definition = resolver.lookupComponentDefinition(name, meta);

        return definition;
    }

    var CurryComponentReference = function () {
        function CurryComponentReference(inner, resolver, meta, args) {
            (0, _emberBabel.classCallCheck)(this, CurryComponentReference);

            this.inner = inner;
            this.resolver = resolver;
            this.meta = meta;
            this.args = args;
            this.tag = inner.tag;
            this.lastValue = null;
            this.lastDefinition = null;
        }

        CurryComponentReference.prototype.value = function value() {
            var inner = this.inner,
                lastValue = this.lastValue;

            var value = inner.value();
            if (value === lastValue) {
                return this.lastDefinition;
            }
            var definition = null;
            if (isCurriedComponentDefinition(value)) {
                definition = value;
            } else if (typeof value === 'string' && value) {
                var resolver = this.resolver,
                    meta = this.meta;

                definition = resolveComponent(resolver, value, meta);
            }
            definition = this.curry(definition);
            this.lastValue = value;
            this.lastDefinition = definition;
            return definition;
        };

        CurryComponentReference.prototype.get = function get() {
            return UNDEFINED_REFERENCE;
        };

        CurryComponentReference.prototype.curry = function curry(definition) {
            var args = this.args;

            if (!args && isCurriedComponentDefinition(definition)) {
                return definition;
            } else if (!definition) {
                return null;
            } else {
                return new CurriedComponentDefinition(definition, args);
            }
        };

        return CurryComponentReference;
    }();

    var ClassListReference = function () {
        function ClassListReference(list) {
            (0, _emberBabel.classCallCheck)(this, ClassListReference);

            this.list = list;
            this.tag = (0, _reference.combineTagged)(list);
            this.list = list;
        }

        ClassListReference.prototype.value = function value() {
            var ret = [];
            var list = this.list;

            for (var i = 0; i < list.length; i++) {
                var value = normalizeStringValue(list[i].value());
                if (value) ret.push(value);
            }
            return ret.length === 0 ? null : ret.join(' ');
        };

        return ClassListReference;
    }();

    /**
     * Converts a ComponentCapabilities object into a 32-bit integer representation.
     */

    function capabilityFlagsFrom(capabilities) {
        return 0 | (capabilities.dynamicLayout ? 1 /* DynamicLayout */ : 0) | (capabilities.dynamicTag ? 2 /* DynamicTag */ : 0) | (capabilities.prepareArgs ? 4 /* PrepareArgs */ : 0) | (capabilities.createArgs ? 8 /* CreateArgs */ : 0) | (capabilities.attributeHook ? 16 /* AttributeHook */ : 0) | (capabilities.elementHook ? 32 /* ElementHook */ : 0) | (capabilities.dynamicScope ? 64 /* DynamicScope */ : 0) | (capabilities.createCaller ? 128 /* CreateCaller */ : 0) | (capabilities.updateHook ? 256 /* UpdateHook */ : 0) | (capabilities.createInstance ? 512 /* CreateInstance */ : 0);
    }
    function hasCapability(capabilities, capability) {
        return !!(capabilities & capability);
    }

    APPEND_OPCODES.add(69 /* IsComponent */, function (vm) {
        var stack = vm.stack;
        var ref = stack.pop();
        stack.push(IsCurriedComponentDefinitionReference.create(ref));
    });
    APPEND_OPCODES.add(70 /* ContentType */, function (vm) {
        var stack = vm.stack;
        var ref = stack.peek();
        stack.push(new ContentTypeReference(ref));
    });
    APPEND_OPCODES.add(71 /* CurryComponent */, function (vm, _ref29) {
        var _meta = _ref29.op1;

        var stack = vm.stack;
        var definition = stack.pop();
        var capturedArgs = stack.pop();
        var meta = vm.constants.getSerializable(_meta);
        var resolver = vm.constants.resolver;
        vm.loadValue(_vm2.Register.v0, new CurryComponentReference(definition, resolver, meta, capturedArgs));
        // expectStackChange(vm.stack, -args.length - 1, 'CurryComponent');
    });
    APPEND_OPCODES.add(72 /* PushComponentDefinition */, function (vm, _ref30) {
        var handle = _ref30.op1;

        var definition = vm.constants.resolveHandle(handle);

        var manager = definition.manager;

        var capabilities = capabilityFlagsFrom(manager.getCapabilities(definition.state));
        var instance = {
            definition: definition,
            manager: manager,
            capabilities: capabilities,
            state: null,
            handle: null,
            table: null,
            lookup: null
        };
        vm.stack.push(instance);
    });
    APPEND_OPCODES.add(75 /* ResolveDynamicComponent */, function (vm, _ref31) {
        var _meta = _ref31.op1;

        var stack = vm.stack;
        var component = stack.pop().value();
        var meta = vm.constants.getSerializable(_meta);
        vm.loadValue(_vm2.Register.t1, null); // Clear the temp register
        var definition = void 0;
        if (typeof component === 'string') {
            var resolver = vm.constants.resolver;

            var resolvedDefinition = resolveComponent(resolver, component, meta);
            definition = resolvedDefinition;
        } else if (isCurriedComponentDefinition(component)) {
            definition = component;
        } else {
            throw (0, _util.unreachable)();
        }
        stack.push(definition);
    });
    APPEND_OPCODES.add(73 /* PushDynamicComponentInstance */, function (vm) {
        var stack = vm.stack;

        var definition = stack.pop();
        var capabilities = void 0,
            manager = void 0;
        if (isCurriedComponentDefinition(definition)) {
            manager = capabilities = null;
        } else {
            manager = definition.manager;
            capabilities = capabilityFlagsFrom(manager.getCapabilities(definition.state));
        }
        stack.push({ definition: definition, capabilities: capabilities, manager: manager, state: null, handle: null, table: null });
    });
    APPEND_OPCODES.add(74 /* PushCurriedComponent */, function (vm, _ref32) {
        var _meta = _ref32.op1;

        var stack = vm.stack;
        var component = stack.pop().value();
        var definition = void 0;
        if (isCurriedComponentDefinition(component)) {
            definition = component;
        } else {
            throw (0, _util.unreachable)();
        }
        stack.push(definition);
    });
    APPEND_OPCODES.add(76 /* PushArgs */, function (vm, _ref33) {
        var _names = _ref33.op1,
            flags = _ref33.op2;

        var stack = vm.stack;
        var names = vm.constants.getStringArray(_names);
        var positionalCount = flags >> 4;
        var synthetic = flags & 8;
        var blockNames = [];
        if (flags & 4) blockNames.push('main');
        if (flags & 2) blockNames.push('else');
        if (flags & 1) blockNames.push('attrs');
        vm.args.setup(stack, names, blockNames, positionalCount, !!synthetic);
        stack.push(vm.args);
    });
    APPEND_OPCODES.add(77 /* PushEmptyArgs */, function (vm) {
        var stack = vm.stack;

        stack.push(vm.args.empty(stack));
    });
    APPEND_OPCODES.add(80 /* CaptureArgs */, function (vm) {
        var stack = vm.stack;
        var args = stack.pop();
        var capturedArgs = args.capture();
        stack.push(capturedArgs);
    });
    APPEND_OPCODES.add(79 /* PrepareArgs */, function (vm, _ref34) {
        var _state = _ref34.op1;

        var stack = vm.stack;
        var instance = vm.fetchValue(_state);
        var args = stack.pop();
        var definition = instance.definition;

        if (isCurriedComponentDefinition(definition)) {

            definition = resolveCurriedComponentDefinition(instance, definition, args);
        }
        var _definition2 = definition,
            manager = _definition2.manager,
            state = _definition2.state;

        var capabilities = instance.capabilities;
        if (hasCapability(capabilities, 4 /* PrepareArgs */) !== true) {
            stack.push(args);
            return;
        }
        var blocks = args.blocks.values;
        var blockNames = args.blocks.names;
        var preparedArgs = manager.prepareArgs(state, args);
        if (preparedArgs) {
            args.clear();
            for (var i = 0; i < blocks.length; i++) {
                stack.push(blocks[i]);
            }
            var positional = preparedArgs.positional,
                named = preparedArgs.named;

            var positionalCount = positional.length;
            for (var _i = 0; _i < positionalCount; _i++) {
                stack.push(positional[_i]);
            }
            var names = Object.keys(named);
            for (var _i2 = 0; _i2 < names.length; _i2++) {
                stack.push(named[names[_i2]]);
            }
            args.setup(stack, names, blockNames, positionalCount, true);
        }
        stack.push(args);
    });
    function resolveCurriedComponentDefinition(instance, definition, args) {
        var unwrappedDefinition = instance.definition = definition.unwrap(args);
        var manager = unwrappedDefinition.manager,
            state = unwrappedDefinition.state;

        instance.manager = manager;
        instance.capabilities = capabilityFlagsFrom(manager.getCapabilities(state));
        return unwrappedDefinition;
    }
    APPEND_OPCODES.add(81 /* CreateComponent */, function (vm, _ref35) {
        var flags = _ref35.op1,
            _state = _ref35.op2;

        var instance = vm.fetchValue(_state);
        var definition = instance.definition,
            manager = instance.manager;

        var capabilities = instance.capabilities = capabilityFlagsFrom(manager.getCapabilities(definition.state));
        var dynamicScope = null;
        if (hasCapability(capabilities, 64 /* DynamicScope */)) {
            dynamicScope = vm.dynamicScope();
        }
        var hasDefaultBlock = flags & 1;
        var args = null;
        if (hasCapability(capabilities, 8 /* CreateArgs */)) {
            args = vm.stack.peek();
        }
        var self = null;
        if (hasCapability(capabilities, 128 /* CreateCaller */)) {
            self = vm.getSelf();
        }
        var state = manager.create(vm.env, definition.state, args, dynamicScope, self, !!hasDefaultBlock);
        // We want to reuse the `state` POJO here, because we know that the opcodes
        // only transition at exactly one place.
        instance.state = state;
        var tag = manager.getTag(state);
        if (hasCapability(capabilities, 256 /* UpdateHook */) && !(0, _reference.isConstTag)(tag)) {
            vm.updateWith(new UpdateComponentOpcode(tag, state, manager, dynamicScope));
        }
    });
    APPEND_OPCODES.add(82 /* RegisterComponentDestructor */, function (vm, _ref36) {
        var _state = _ref36.op1;

        var _vm$fetchValue = vm.fetchValue(_state),
            manager = _vm$fetchValue.manager,
            state = _vm$fetchValue.state;

        var destructor = manager.getDestructor(state);
        if (destructor) vm.newDestroyable(destructor);
    });
    APPEND_OPCODES.add(91 /* BeginComponentTransaction */, function (vm) {
        vm.beginCacheGroup();
        vm.elements().pushSimpleBlock();
    });
    APPEND_OPCODES.add(83 /* PutComponentOperations */, function (vm) {
        vm.loadValue(_vm2.Register.t0, new ComponentElementOperations());
    });
    APPEND_OPCODES.add(37 /* ComponentAttr */, function (vm, _ref37) {
        var _name = _ref37.op1,
            trusting = _ref37.op2,
            _namespace = _ref37.op3;

        var name = vm.constants.getString(_name);
        var reference = vm.stack.pop();
        var namespace = _namespace ? vm.constants.getString(_namespace) : null;
        vm.fetchValue(_vm2.Register.t0).setAttribute(name, reference, !!trusting, namespace);
    });

    var ComponentElementOperations = function () {
        function ComponentElementOperations() {
            (0, _emberBabel.classCallCheck)(this, ComponentElementOperations);

            this.attributes = (0, _util.dict)();
            this.classes = [];
        }

        ComponentElementOperations.prototype.setAttribute = function setAttribute(name, value, trusting, namespace) {
            var deferred = { value: value, namespace: namespace, trusting: trusting };
            if (name === 'class') {
                this.classes.push(value);
            }
            this.attributes[name] = deferred;
        };

        ComponentElementOperations.prototype.flush = function flush(vm) {
            for (var name in this.attributes) {
                var attr = this.attributes[name];
                var reference = attr.value,
                    namespace = attr.namespace,
                    trusting = attr.trusting;

                if (name === 'class') {
                    reference = new ClassListReference(this.classes);
                }
                if (name === 'type') {
                    continue;
                }
                var attribute = vm.elements().setDynamicAttribute(name, reference.value(), trusting, namespace);
                if (!(0, _reference.isConst)(reference)) {
                    vm.updateWith(new UpdateDynamicAttributeOpcode(reference, attribute));
                }
            }
            if ('type' in this.attributes) {
                var type = this.attributes.type;
                var reference = type.value,
                    namespace = type.namespace,
                    trusting = type.trusting;

                var _attribute = vm.elements().setDynamicAttribute('type', reference.value(), trusting, namespace);
                if (!(0, _reference.isConst)(reference)) {
                    vm.updateWith(new UpdateDynamicAttributeOpcode(reference, _attribute));
                }
            }
        };

        return ComponentElementOperations;
    }();

    APPEND_OPCODES.add(93 /* DidCreateElement */, function (vm, _ref38) {
        var _state = _ref38.op1;

        var _vm$fetchValue2 = vm.fetchValue(_state),
            definition = _vm$fetchValue2.definition,
            state = _vm$fetchValue2.state;

        var manager = definition.manager;

        var operations = vm.fetchValue(_vm2.Register.t0);
        var action = 'DidCreateElementOpcode#evaluate';
        manager.didCreateElement(state, vm.elements().expectConstructing(action), operations);
    });
    APPEND_OPCODES.add(84 /* GetComponentSelf */, function (vm, _ref39) {
        var _state = _ref39.op1;

        var _vm$fetchValue3 = vm.fetchValue(_state),
            definition = _vm$fetchValue3.definition,
            state = _vm$fetchValue3.state;

        var manager = definition.manager;

        vm.stack.push(manager.getSelf(state));
    });
    APPEND_OPCODES.add(85 /* GetComponentTagName */, function (vm, _ref40) {
        var _state = _ref40.op1;

        var _vm$fetchValue4 = vm.fetchValue(_state),
            definition = _vm$fetchValue4.definition,
            state = _vm$fetchValue4.state;

        var manager = definition.manager;

        vm.stack.push(manager.getTagName(state));
    });
    // Dynamic Invocation Only
    APPEND_OPCODES.add(86 /* GetComponentLayout */, function (vm, _ref41) {
        var _state = _ref41.op1;

        var instance = vm.fetchValue(_state);
        var manager = instance.manager,
            definition = instance.definition;
        var resolver = vm.constants.resolver,
            stack = vm.stack;
        var instanceState = instance.state,
            capabilities = instance.capabilities;
        var definitionState = definition.state;

        var invoke = void 0;
        if (hasStaticLayoutCapability(capabilities, manager)) {
            invoke = manager.getLayout(definitionState, resolver);
        } else if (hasDynamicLayoutCapability(capabilities, manager)) {
            invoke = manager.getDynamicLayout(instanceState, resolver);
        } else {
            throw (0, _util.unreachable)();
        }
        stack.push(invoke.symbolTable);
        stack.push(invoke.handle);
    });
    function hasStaticLayoutCapability(capabilities, _manager) {
        return hasCapability(capabilities, 1 /* DynamicLayout */) === false;
    }
    function hasDynamicLayoutCapability(capabilities, _manager) {
        return hasCapability(capabilities, 1 /* DynamicLayout */) === true;
    }
    APPEND_OPCODES.add(68 /* Main */, function (vm, _ref42) {
        var register = _ref42.op1;

        var definition = vm.stack.pop();
        var invocation = vm.stack.pop();
        var manager = definition.manager;

        var capabilities = capabilityFlagsFrom(manager.getCapabilities(definition.state));
        var state = {
            definition: definition,
            manager: manager,
            capabilities: capabilities,
            state: null,
            handle: invocation.handle,
            table: invocation.symbolTable,
            lookup: null
        };
        vm.loadValue(register, state);
    });
    APPEND_OPCODES.add(89 /* PopulateLayout */, function (vm, _ref43) {
        var _state = _ref43.op1;
        var stack = vm.stack;

        var handle = stack.pop();
        var table = stack.pop();
        var state = vm.fetchValue(_state);
        state.handle = handle;
        state.table = table;
    });
    APPEND_OPCODES.add(21 /* VirtualRootScope */, function (vm, _ref44) {
        var _state = _ref44.op1;
        var symbols = vm.fetchValue(_state).table.symbols;

        vm.pushRootScope(symbols.length + 1, true);
    });
    APPEND_OPCODES.add(87 /* SetupForEval */, function (vm, _ref45) {
        var _state = _ref45.op1;

        var state = vm.fetchValue(_state);
        if (state.table.hasEval) {
            var lookup = state.lookup = (0, _util.dict)();
            vm.scope().bindEvalScope(lookup);
        }
    });
    APPEND_OPCODES.add(2 /* SetNamedVariables */, function (vm, _ref46) {
        var _state = _ref46.op1;

        var state = vm.fetchValue(_state);
        var scope = vm.scope();
        var args = vm.stack.peek();
        var callerNames = args.named.atNames;
        for (var i = callerNames.length - 1; i >= 0; i--) {
            var atName = callerNames[i];
            var symbol = state.table.symbols.indexOf(callerNames[i]);
            var value = args.named.get(atName, false);
            if (symbol !== -1) scope.bindSymbol(symbol + 1, value);
            if (state.lookup) state.lookup[atName] = value;
        }
    });
    function bindBlock(symbolName, blockName, state, blocks, vm) {
        var symbol = state.table.symbols.indexOf(symbolName);
        var block = blocks.get(blockName);
        if (symbol !== -1) {
            vm.scope().bindBlock(symbol + 1, block);
        }
        if (state.lookup) state.lookup[symbolName] = block;
    }
    APPEND_OPCODES.add(3 /* SetBlocks */, function (vm, _ref47) {
        var _state = _ref47.op1;

        var state = vm.fetchValue(_state);

        var _vm$stack$peek = vm.stack.peek(),
            blocks = _vm$stack$peek.blocks;

        bindBlock('&attrs', 'attrs', state, blocks, vm);
        bindBlock('&inverse', 'else', state, blocks, vm);
        bindBlock('&default', 'main', state, blocks, vm);
    });
    // Dynamic Invocation Only
    APPEND_OPCODES.add(90 /* InvokeComponentLayout */, function (vm, _ref48) {
        var _state = _ref48.op1;

        var state = vm.fetchValue(_state);
        vm.call(state.handle);
    });
    APPEND_OPCODES.add(94 /* DidRenderLayout */, function (vm, _ref49) {
        var _state = _ref49.op1;

        var _vm$fetchValue5 = vm.fetchValue(_state),
            manager = _vm$fetchValue5.manager,
            state = _vm$fetchValue5.state;

        var bounds = vm.elements().popBlock();
        var mgr = manager;
        mgr.didRenderLayout(state, bounds);
        vm.env.didCreate(state, manager);
        vm.updateWith(new DidUpdateLayoutOpcode(manager, state, bounds));
    });
    APPEND_OPCODES.add(92 /* CommitComponentTransaction */, function (vm) {
        vm.commitCacheGroup();
    });

    var UpdateComponentOpcode = function (_UpdatingOpcode7) {
        (0, _emberBabel.inherits)(UpdateComponentOpcode, _UpdatingOpcode7);

        function UpdateComponentOpcode(tag, component, manager, dynamicScope) {
            (0, _emberBabel.classCallCheck)(this, UpdateComponentOpcode);

            var _this13 = (0, _emberBabel.possibleConstructorReturn)(this, _UpdatingOpcode7.call(this));

            _this13.tag = tag;
            _this13.component = component;
            _this13.manager = manager;
            _this13.dynamicScope = dynamicScope;
            _this13.type = 'update-component';
            return _this13;
        }

        UpdateComponentOpcode.prototype.evaluate = function evaluate(_vm) {
            var component = this.component,
                manager = this.manager,
                dynamicScope = this.dynamicScope;

            manager.update(component, dynamicScope);
        };

        return UpdateComponentOpcode;
    }(UpdatingOpcode);

    var DidUpdateLayoutOpcode = function (_UpdatingOpcode8) {
        (0, _emberBabel.inherits)(DidUpdateLayoutOpcode, _UpdatingOpcode8);

        function DidUpdateLayoutOpcode(manager, component, bounds) {
            (0, _emberBabel.classCallCheck)(this, DidUpdateLayoutOpcode);

            var _this14 = (0, _emberBabel.possibleConstructorReturn)(this, _UpdatingOpcode8.call(this));

            _this14.manager = manager;
            _this14.component = component;
            _this14.bounds = bounds;
            _this14.type = 'did-update-layout';
            _this14.tag = _reference.CONSTANT_TAG;
            return _this14;
        }

        DidUpdateLayoutOpcode.prototype.evaluate = function evaluate(vm) {
            var manager = this.manager,
                component = this.component,
                bounds = this.bounds;

            manager.didUpdateLayout(component, bounds);
            vm.env.didUpdate(component, manager);
        };

        return DidUpdateLayoutOpcode;
    }(UpdatingOpcode);

    /* tslint:disable */

    function debugCallback(context, get) {
        console.info('Use `context`, and `get(<path>)` to debug this template.');
        // for example...
        context === get('this');
        debugger;
    }
    /* tslint:enable */
    var callback = debugCallback;
    // For testing purposes
    function setDebuggerCallback(cb) {
        callback = cb;
    }
    function resetDebuggerCallback() {
        callback = debugCallback;
    }

    var ScopeInspector = function () {
        function ScopeInspector(scope, symbols, evalInfo) {
            (0, _emberBabel.classCallCheck)(this, ScopeInspector);

            this.scope = scope;
            this.locals = (0, _util.dict)();
            for (var i = 0; i < evalInfo.length; i++) {
                var slot = evalInfo[i];
                var name = symbols[slot - 1];
                var ref = scope.getSymbol(slot);
                this.locals[name] = ref;
            }
        }

        ScopeInspector.prototype.get = function get(path) {
            var scope = this.scope,
                locals = this.locals;

            var parts = path.split('.');

            var _path$split = path.split('.'),
                head = _path$split[0],
                tail = _path$split.slice(1);

            var evalScope = scope.getEvalScope();
            var ref = void 0;
            if (head === 'this') {
                ref = scope.getSelf();
            } else if (locals[head]) {
                ref = locals[head];
            } else if (head.indexOf('@') === 0 && evalScope[head]) {
                ref = evalScope[head];
            } else {
                ref = this.scope.getSelf();
                tail = parts;
            }
            return tail.reduce(function (r, part) {
                return r.get(part);
            }, ref);
        };

        return ScopeInspector;
    }();

    APPEND_OPCODES.add(97 /* Debugger */, function (vm, _ref50) {
        var _symbols = _ref50.op1,
            _evalInfo = _ref50.op2;

        var symbols = vm.constants.getStringArray(_symbols);
        var evalInfo = vm.constants.getArray(_evalInfo);
        var inspector = new ScopeInspector(vm.scope(), symbols, evalInfo);
        callback(vm.getSelf().value(), function (path) {
            return inspector.get(path).value();
        });
    });

    APPEND_OPCODES.add(95 /* InvokePartial */, function (vm, _ref51) {
        var _meta = _ref51.op1,
            _symbols = _ref51.op2,
            _evalInfo = _ref51.op3;
        var constants = vm.constants,
            resolver = vm.constants.resolver,
            stack = vm.stack;

        var name = stack.pop().value();

        var meta = constants.getSerializable(_meta);
        var outerSymbols = constants.getStringArray(_symbols);
        var evalInfo = constants.getArray(_evalInfo);
        var handle = resolver.lookupPartial(name, meta);

        var definition = resolver.resolve(handle);

        var _definition$getPartia = definition.getPartial(),
            symbolTable = _definition$getPartia.symbolTable,
            vmHandle = _definition$getPartia.handle;

        {
            var partialSymbols = symbolTable.symbols;
            var outerScope = vm.scope();
            var partialScope = vm.pushRootScope(partialSymbols.length, false);
            var evalScope = outerScope.getEvalScope();
            partialScope.bindCallerScope(outerScope.getCallerScope());
            partialScope.bindEvalScope(evalScope);
            partialScope.bindSelf(outerScope.getSelf());
            var locals = Object.create(outerScope.getPartialMap());
            for (var i = 0; i < evalInfo.length; i++) {
                var slot = evalInfo[i];
                var _name2 = outerSymbols[slot - 1];
                var ref = outerScope.getSymbol(slot);
                locals[_name2] = ref;
            }
            if (evalScope) {
                for (var _i3 = 0; _i3 < partialSymbols.length; _i3++) {
                    var _name3 = partialSymbols[_i3];
                    var symbol = _i3 + 1;
                    var value = evalScope[_name3];
                    if (value !== undefined) partialScope.bind(symbol, value);
                }
            }
            partialScope.bindPartialMap(locals);
            vm.pushFrame(); // sp += 2
            vm.call(vmHandle);
        }
    });

    var IterablePresenceReference = function () {
        function IterablePresenceReference(artifacts) {
            (0, _emberBabel.classCallCheck)(this, IterablePresenceReference);

            this.tag = artifacts.tag;
            this.artifacts = artifacts;
        }

        IterablePresenceReference.prototype.value = function value() {
            return !this.artifacts.isEmpty();
        };

        return IterablePresenceReference;
    }();

    APPEND_OPCODES.add(66 /* PutIterator */, function (vm) {
        var stack = vm.stack;
        var listRef = stack.pop();
        var key = stack.pop();
        var iterable = vm.env.iterableFor(listRef, key.value());
        var iterator = new _reference.ReferenceIterator(iterable);
        stack.push(iterator);
        stack.push(new IterablePresenceReference(iterator.artifacts));
    });
    APPEND_OPCODES.add(64 /* EnterList */, function (vm, _ref52) {
        var relativeStart = _ref52.op1;

        vm.enterList(relativeStart);
    });
    APPEND_OPCODES.add(65 /* ExitList */, function (vm) {
        vm.exitList();
    });
    APPEND_OPCODES.add(67 /* Iterate */, function (vm, _ref53) {
        var breaks = _ref53.op1;

        var stack = vm.stack;
        var item = stack.peek().next();
        if (item) {
            var tryOpcode = vm.iterate(item.memo, item.value);
            vm.enterItem(item.key, tryOpcode);
        } else {
            vm.goto(breaks);
        }
    });

    var Cursor = function Cursor(element, nextSibling) {
        (0, _emberBabel.classCallCheck)(this, Cursor);

        this.element = element;
        this.nextSibling = nextSibling;
    };

    var ConcreteBounds = function () {
        function ConcreteBounds(parentNode, first, last) {
            (0, _emberBabel.classCallCheck)(this, ConcreteBounds);

            this.parentNode = parentNode;
            this.first = first;
            this.last = last;
        }

        ConcreteBounds.prototype.parentElement = function parentElement() {
            return this.parentNode;
        };

        ConcreteBounds.prototype.firstNode = function firstNode() {
            return this.first;
        };

        ConcreteBounds.prototype.lastNode = function lastNode() {
            return this.last;
        };

        return ConcreteBounds;
    }();

    var SingleNodeBounds = function () {
        function SingleNodeBounds(parentNode, node) {
            (0, _emberBabel.classCallCheck)(this, SingleNodeBounds);

            this.parentNode = parentNode;
            this.node = node;
        }

        SingleNodeBounds.prototype.parentElement = function parentElement() {
            return this.parentNode;
        };

        SingleNodeBounds.prototype.firstNode = function firstNode() {
            return this.node;
        };

        SingleNodeBounds.prototype.lastNode = function lastNode() {
            return this.node;
        };

        return SingleNodeBounds;
    }();

    function bounds(parent, first, last) {
        return new ConcreteBounds(parent, first, last);
    }
    function single(parent, node) {
        return new SingleNodeBounds(parent, node);
    }
    function _move(bounds, reference) {
        var parent = bounds.parentElement();
        var first = bounds.firstNode();
        var last = bounds.lastNode();
        var node = first;
        while (node) {
            var next = node.nextSibling;
            parent.insertBefore(node, reference);
            if (node === last) return next;
            node = next;
        }
        return null;
    }
    function clear(bounds) {
        var parent = bounds.parentElement();
        var first = bounds.firstNode();
        var last = bounds.lastNode();
        var node = first;
        while (node) {
            var next = node.nextSibling;
            parent.removeChild(node);
            if (node === last) return next;
            node = next;
        }
        return null;
    }

    var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
    // Patch:    insertAdjacentHTML on SVG Fix
    // Browsers: Safari, IE, Edge, Firefox ~33-34
    // Reason:   insertAdjacentHTML does not exist on SVG elements in Safari. It is
    //           present but throws an exception on IE and Edge. Old versions of
    //           Firefox create nodes in the incorrect namespace.
    // Fix:      Since IE and Edge silently fail to create SVG nodes using
    //           innerHTML, and because Firefox may create nodes in the incorrect
    //           namespace using innerHTML on SVG elements, an HTML-string wrapping
    //           approach is used. A pre/post SVG tag is added to the string, then
    //           that whole string is added to a div. The created nodes are plucked
    //           out and applied to the target location on DOM.
    function applySVGInnerHTMLFix(document, DOMClass, svgNamespace) {
        if (!document) return DOMClass;
        if (!shouldApplyFix(document, svgNamespace)) {
            return DOMClass;
        }
        var div = document.createElement('div');
        return function (_DOMClass) {
            (0, _emberBabel.inherits)(DOMChangesWithSVGInnerHTMLFix, _DOMClass);

            function DOMChangesWithSVGInnerHTMLFix() {
                (0, _emberBabel.classCallCheck)(this, DOMChangesWithSVGInnerHTMLFix);

                return (0, _emberBabel.possibleConstructorReturn)(this, _DOMClass.apply(this, arguments));
            }

            DOMChangesWithSVGInnerHTMLFix.prototype.insertHTMLBefore = function insertHTMLBefore(parent, nextSibling, html) {
                if (parent.namespaceURI !== svgNamespace) {
                    return _DOMClass.prototype.insertHTMLBefore.call(this, parent, nextSibling, html);
                }
                return fixSVG(parent, div, html, nextSibling);
            };

            return DOMChangesWithSVGInnerHTMLFix;
        }(DOMClass);
    }
    function fixSVG(parent, div, html, reference) {
        var source = void 0;
        // This is important, because decendants of the <foreignObject> integration
        // point are parsed in the HTML namespace
        if (parent.tagName.toUpperCase() === 'FOREIGNOBJECT') {
            // IE, Edge: also do not correctly support using `innerHTML` on SVG
            // namespaced elements. So here a wrapper is used.
            var wrappedHtml = '<svg><foreignObject>' + (html || '<!---->') + '</foreignObject></svg>';
            div.innerHTML = wrappedHtml;
            source = div.firstChild.firstChild;
        } else {
            // IE, Edge: also do not correctly support using `innerHTML` on SVG
            // namespaced elements. So here a wrapper is used.
            var _wrappedHtml = '<svg>' + (html || '<!---->') + '</svg>';
            div.innerHTML = _wrappedHtml;
            source = div.firstChild;
        }

        var _moveNodesBefore = moveNodesBefore(source, parent, reference),
            first = _moveNodesBefore[0],
            last = _moveNodesBefore[1];

        return new ConcreteBounds(parent, first, last);
    }
    function shouldApplyFix(document, svgNamespace) {
        var svg = document.createElementNS(svgNamespace, 'svg');
        try {
            svg['insertAdjacentHTML']('beforeend', '<circle></circle>');
        } catch (e) {
            // IE, Edge: Will throw, insertAdjacentHTML is unsupported on SVG
            // Safari: Will throw, insertAdjacentHTML is not present on SVG
        } finally {
            // FF: Old versions will create a node in the wrong namespace
            if (svg.childNodes.length === 1 && svg.firstChild.namespaceURI === SVG_NAMESPACE) {
                // The test worked as expected, no fix required
                return false;
            }
            return true;
        }
    }

    // Patch:    Adjacent text node merging fix
    // Browsers: IE, Edge, Firefox w/o inspector open
    // Reason:   These browsers will merge adjacent text nodes. For exmaple given
    //           <div>Hello</div> with div.insertAdjacentHTML(' world') browsers
    //           with proper behavior will populate div.childNodes with two items.
    //           These browsers will populate it with one merged node instead.
    // Fix:      Add these nodes to a wrapper element, then iterate the childNodes
    //           of that wrapper and move the nodes to their target location. Note
    //           that potential SVG bugs will have been handled before this fix.
    //           Note that this fix must only apply to the previous text node, as
    //           the base implementation of `insertHTMLBefore` already handles
    //           following text nodes correctly.
    function applyTextNodeMergingFix(document, DOMClass) {
        if (!document) return DOMClass;
        if (!shouldApplyFix$1(document)) {
            return DOMClass;
        }
        return function (_DOMClass2) {
            (0, _emberBabel.inherits)(DOMChangesWithTextNodeMergingFix, _DOMClass2);

            function DOMChangesWithTextNodeMergingFix(document) {
                (0, _emberBabel.classCallCheck)(this, DOMChangesWithTextNodeMergingFix);

                var _this16 = (0, _emberBabel.possibleConstructorReturn)(this, _DOMClass2.call(this, document));

                _this16.uselessComment = document.createComment('');
                return _this16;
            }

            DOMChangesWithTextNodeMergingFix.prototype.insertHTMLBefore = function insertHTMLBefore(parent, nextSibling, html) {
                var didSetUselessComment = false;
                var nextPrevious = nextSibling ? nextSibling.previousSibling : parent.lastChild;
                if (nextPrevious && nextPrevious instanceof Text) {
                    didSetUselessComment = true;
                    parent.insertBefore(this.uselessComment, nextSibling);
                }
                var bounds = _DOMClass2.prototype.insertHTMLBefore.call(this, parent, nextSibling, html);
                if (didSetUselessComment) {
                    parent.removeChild(this.uselessComment);
                }
                return bounds;
            };

            return DOMChangesWithTextNodeMergingFix;
        }(DOMClass);
    }
    function shouldApplyFix$1(document) {
        var mergingTextDiv = document.createElement('div');
        mergingTextDiv.innerHTML = 'first';
        mergingTextDiv.insertAdjacentHTML('beforeend', 'second');
        if (mergingTextDiv.childNodes.length === 2) {
            // It worked as expected, no fix required
            return false;
        }
        return true;
    }

    var SVG_NAMESPACE$1 = 'http://www.w3.org/2000/svg';
    // http://www.w3.org/TR/html/syntax.html#html-integration-point
    var SVG_INTEGRATION_POINTS = { foreignObject: 1, desc: 1, title: 1 };
    // http://www.w3.org/TR/html/syntax.html#adjust-svg-attributes
    // TODO: Adjust SVG attributes
    // http://www.w3.org/TR/html/syntax.html#parsing-main-inforeign
    // TODO: Adjust SVG elements
    // http://www.w3.org/TR/html/syntax.html#parsing-main-inforeign
    var BLACKLIST_TABLE = Object.create(null);
    ['b', 'big', 'blockquote', 'body', 'br', 'center', 'code', 'dd', 'div', 'dl', 'dt', 'em', 'embed', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'hr', 'i', 'img', 'li', 'listing', 'main', 'meta', 'nobr', 'ol', 'p', 'pre', 'ruby', 's', 'small', 'span', 'strong', 'strike', 'sub', 'sup', 'table', 'tt', 'u', 'ul', 'var'].forEach(function (tag) {
        return BLACKLIST_TABLE[tag] = 1;
    });
    var WHITESPACE = /[\t-\r \xA0\u1680\u180E\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]/;
    var doc = typeof document === 'undefined' ? null : document;
    function isWhitespace(string) {
        return WHITESPACE.test(string);
    }
    function moveNodesBefore(source, target, nextSibling) {
        var first = source.firstChild;
        var last = null;
        var current = first;
        while (current) {
            last = current;
            current = current.nextSibling;
            target.insertBefore(last, nextSibling);
        }
        return [first, last];
    }

    var DOMOperations = function () {
        function DOMOperations(document) {
            (0, _emberBabel.classCallCheck)(this, DOMOperations);

            this.document = document;
            this.setupUselessElement();
        }
        // split into seperate method so that NodeDOMTreeConstruction
        // can override it.


        DOMOperations.prototype.setupUselessElement = function setupUselessElement() {
            this.uselessElement = this.document.createElement('div');
        };

        DOMOperations.prototype.createElement = function createElement(tag, context) {
            var isElementInSVGNamespace = void 0,
                isHTMLIntegrationPoint = void 0;
            if (context) {
                isElementInSVGNamespace = context.namespaceURI === SVG_NAMESPACE$1 || tag === 'svg';
                isHTMLIntegrationPoint = SVG_INTEGRATION_POINTS[context.tagName];
            } else {
                isElementInSVGNamespace = tag === 'svg';
                isHTMLIntegrationPoint = false;
            }
            if (isElementInSVGNamespace && !isHTMLIntegrationPoint) {
                // FIXME: This does not properly handle <font> with color, face, or
                // size attributes, which is also disallowed by the spec. We should fix
                // this.
                if (BLACKLIST_TABLE[tag]) {
                    throw new Error('Cannot create a ' + tag + ' inside an SVG context');
                }
                return this.document.createElementNS(SVG_NAMESPACE$1, tag);
            } else {
                return this.document.createElement(tag);
            }
        };

        DOMOperations.prototype.insertBefore = function insertBefore(parent, node, reference) {
            parent.insertBefore(node, reference);
        };

        DOMOperations.prototype.insertHTMLBefore = function insertHTMLBefore(_parent, nextSibling, html) {
            return _insertHTMLBefore(this.uselessElement, _parent, nextSibling, html);
        };

        DOMOperations.prototype.createTextNode = function createTextNode(text) {
            return this.document.createTextNode(text);
        };

        DOMOperations.prototype.createComment = function createComment(data) {
            return this.document.createComment(data);
        };

        return DOMOperations;
    }();

    var DOM;
    (function (DOM) {
        var TreeConstruction = function (_DOMOperations) {
            (0, _emberBabel.inherits)(TreeConstruction, _DOMOperations);

            function TreeConstruction() {
                (0, _emberBabel.classCallCheck)(this, TreeConstruction);

                return (0, _emberBabel.possibleConstructorReturn)(this, _DOMOperations.apply(this, arguments));
            }

            TreeConstruction.prototype.createElementNS = function createElementNS(namespace, tag) {
                return this.document.createElementNS(namespace, tag);
            };

            TreeConstruction.prototype.setAttribute = function setAttribute(element, name, value) {
                var namespace = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

                if (namespace) {
                    element.setAttributeNS(namespace, name, value);
                } else {
                    element.setAttribute(name, value);
                }
            };

            return TreeConstruction;
        }(DOMOperations);

        DOM.TreeConstruction = TreeConstruction;
        var appliedTreeContruction = TreeConstruction;
        appliedTreeContruction = applyTextNodeMergingFix(doc, appliedTreeContruction);
        appliedTreeContruction = applySVGInnerHTMLFix(doc, appliedTreeContruction, SVG_NAMESPACE$1);
        DOM.DOMTreeConstruction = appliedTreeContruction;
    })(DOM || (DOM = {}));

    var DOMChanges = function (_DOMOperations2) {
        (0, _emberBabel.inherits)(DOMChanges, _DOMOperations2);

        function DOMChanges(document) {
            (0, _emberBabel.classCallCheck)(this, DOMChanges);

            var _this18 = (0, _emberBabel.possibleConstructorReturn)(this, _DOMOperations2.call(this, document));

            _this18.document = document;
            _this18.namespace = null;
            return _this18;
        }

        DOMChanges.prototype.setAttribute = function setAttribute(element, name, value) {
            element.setAttribute(name, value);
        };

        DOMChanges.prototype.removeAttribute = function removeAttribute(element, name) {
            element.removeAttribute(name);
        };

        DOMChanges.prototype.insertAfter = function insertAfter(element, node, reference) {
            this.insertBefore(element, node, reference.nextSibling);
        };

        return DOMChanges;
    }(DOMOperations);

    function _insertHTMLBefore(useless, _parent, _nextSibling, _html) {
        var parent = _parent;
        var nextSibling = _nextSibling;
        var prev = nextSibling ? nextSibling.previousSibling : parent.lastChild;
        var last = void 0;
        var html = _html || '<!---->';
        if (nextSibling === null) {
            parent.insertAdjacentHTML('beforeend', html);
            last = parent.lastChild;
        } else if (nextSibling instanceof HTMLElement) {
            nextSibling.insertAdjacentHTML('beforebegin', html);
            last = nextSibling.previousSibling;
        } else {
            // Non-element nodes do not support insertAdjacentHTML, so add an
            // element and call it on that element. Then remove the element.
            //
            // This also protects Edge, IE and Firefox w/o the inspector open
            // from merging adjacent text nodes. See ./compat/text-node-merging-fix.ts
            parent.insertBefore(useless, nextSibling);
            useless.insertAdjacentHTML('beforebegin', html);
            last = useless.previousSibling;
            parent.removeChild(useless);
        }
        var first = prev ? prev.nextSibling : parent.firstChild;
        return new ConcreteBounds(parent, first, last);
    }
    var helper = DOMChanges;
    helper = applyTextNodeMergingFix(doc, helper);
    helper = applySVGInnerHTMLFix(doc, helper, SVG_NAMESPACE$1);
    var helper$1 = helper;
    var DOMTreeConstruction = DOM.DOMTreeConstruction;

    var badProtocols = ['javascript:', 'vbscript:'];
    var badTags = ['A', 'BODY', 'LINK', 'IMG', 'IFRAME', 'BASE', 'FORM'];
    var badTagsForDataURI = ['EMBED'];
    var badAttributes = ['href', 'src', 'background', 'action'];
    var badAttributesForDataURI = ['src'];
    function has(array, item) {
        return array.indexOf(item) !== -1;
    }
    function checkURI(tagName, attribute) {
        return (tagName === null || has(badTags, tagName)) && has(badAttributes, attribute);
    }
    function checkDataURI(tagName, attribute) {
        if (tagName === null) return false;
        return has(badTagsForDataURI, tagName) && has(badAttributesForDataURI, attribute);
    }
    function requiresSanitization(tagName, attribute) {
        return checkURI(tagName, attribute) || checkDataURI(tagName, attribute);
    }
    function sanitizeAttributeValue(env, element, attribute, value) {
        var tagName = null;
        if (value === null || value === undefined) {
            return value;
        }
        if (isSafeString(value)) {
            return value.toHTML();
        }
        if (!element) {
            tagName = null;
        } else {
            tagName = element.tagName.toUpperCase();
        }
        var str = normalizeStringValue(value);
        if (checkURI(tagName, attribute)) {
            var protocol = env.protocolForURL(str);
            if (has(badProtocols, protocol)) {
                return 'unsafe:' + str;
            }
        }
        if (checkDataURI(tagName, attribute)) {
            return 'unsafe:' + str;
        }
        return str;
    }

    /*
     * @method normalizeProperty
     * @param element {HTMLElement}
     * @param slotName {String}
     * @returns {Object} { name, type }
     */
    function normalizeProperty(element, slotName) {
        var type = void 0,
            normalized = void 0;
        if (slotName in element) {
            normalized = slotName;
            type = 'prop';
        } else {
            var lower = slotName.toLowerCase();
            if (lower in element) {
                type = 'prop';
                normalized = lower;
            } else {
                type = 'attr';
                normalized = slotName;
            }
        }
        if (type === 'prop' && (normalized.toLowerCase() === 'style' || preferAttr(element.tagName, normalized))) {
            type = 'attr';
        }
        return { normalized: normalized, type: type };
    }
    // properties that MUST be set as attributes, due to:
    // * browser bug
    // * strange spec outlier
    var ATTR_OVERRIDES = {
        INPUT: {
            form: true,
            // Chrome 46.0.2464.0: 'autocorrect' in document.createElement('input') === false
            // Safari 8.0.7: 'autocorrect' in document.createElement('input') === false
            // Mobile Safari (iOS 8.4 simulator): 'autocorrect' in document.createElement('input') === true
            autocorrect: true,
            // Chrome 54.0.2840.98: 'list' in document.createElement('input') === true
            // Safari 9.1.3: 'list' in document.createElement('input') === false
            list: true
        },
        // element.form is actually a legitimate readOnly property, that is to be
        // mutated, but must be mutated by setAttribute...
        SELECT: { form: true },
        OPTION: { form: true },
        TEXTAREA: { form: true },
        LABEL: { form: true },
        FIELDSET: { form: true },
        LEGEND: { form: true },
        OBJECT: { form: true },
        BUTTON: { form: true }
    };
    function preferAttr(tagName, propName) {
        var tag = ATTR_OVERRIDES[tagName.toUpperCase()];
        return tag && tag[propName.toLowerCase()] || false;
    }

    function dynamicAttribute(element, attr, namespace) {
        var tagName = element.tagName,
            namespaceURI = element.namespaceURI;

        var attribute = { element: element, name: attr, namespace: namespace };
        if (namespaceURI === SVG_NAMESPACE$1) {
            return buildDynamicAttribute(tagName, attr, attribute);
        }

        var _normalizeProperty = normalizeProperty(element, attr),
            type = _normalizeProperty.type,
            normalized = _normalizeProperty.normalized;

        if (type === 'attr') {
            return buildDynamicAttribute(tagName, normalized, attribute);
        } else {
            return buildDynamicProperty(tagName, normalized, attribute);
        }
    }
    function buildDynamicAttribute(tagName, name, attribute) {
        if (requiresSanitization(tagName, name)) {
            return new SafeDynamicAttribute(attribute);
        } else {
            return new SimpleDynamicAttribute(attribute);
        }
    }
    function buildDynamicProperty(tagName, name, attribute) {
        if (requiresSanitization(tagName, name)) {
            return new SafeDynamicProperty(name, attribute);
        }
        if (isUserInputValue(tagName, name)) {
            return new InputValueDynamicAttribute(name, attribute);
        }
        if (isOptionSelected(tagName, name)) {
            return new OptionSelectedDynamicAttribute(name, attribute);
        }
        return new DefaultDynamicProperty(name, attribute);
    }

    var DynamicAttribute = function DynamicAttribute(attribute) {
        (0, _emberBabel.classCallCheck)(this, DynamicAttribute);

        this.attribute = attribute;
    };

    var SimpleDynamicAttribute = function (_DynamicAttribute) {
        (0, _emberBabel.inherits)(SimpleDynamicAttribute, _DynamicAttribute);

        function SimpleDynamicAttribute() {
            (0, _emberBabel.classCallCheck)(this, SimpleDynamicAttribute);

            return (0, _emberBabel.possibleConstructorReturn)(this, _DynamicAttribute.apply(this, arguments));
        }

        SimpleDynamicAttribute.prototype.set = function set(dom, value, _env) {
            var normalizedValue = normalizeValue(value);
            if (normalizedValue !== null) {
                var _attribute2 = this.attribute,
                    name = _attribute2.name,
                    namespace = _attribute2.namespace;

                dom.__setAttribute(name, normalizedValue, namespace);
            }
        };

        SimpleDynamicAttribute.prototype.update = function update(value, _env) {
            var normalizedValue = normalizeValue(value);
            var _attribute3 = this.attribute,
                element = _attribute3.element,
                name = _attribute3.name;

            if (normalizedValue === null) {
                element.removeAttribute(name);
            } else {
                element.setAttribute(name, normalizedValue);
            }
        };

        return SimpleDynamicAttribute;
    }(DynamicAttribute);

    var DefaultDynamicProperty = function (_DynamicAttribute2) {
        (0, _emberBabel.inherits)(DefaultDynamicProperty, _DynamicAttribute2);

        function DefaultDynamicProperty(normalizedName, attribute) {
            (0, _emberBabel.classCallCheck)(this, DefaultDynamicProperty);

            var _this20 = (0, _emberBabel.possibleConstructorReturn)(this, _DynamicAttribute2.call(this, attribute));

            _this20.normalizedName = normalizedName;
            return _this20;
        }

        DefaultDynamicProperty.prototype.set = function set(dom, value, _env) {
            if (value !== null && value !== undefined) {
                this.value = value;
                dom.__setProperty(this.normalizedName, value);
            }
        };

        DefaultDynamicProperty.prototype.update = function update(value, _env) {
            var element = this.attribute.element;

            if (this.value !== value) {
                element[this.normalizedName] = this.value = value;
                if (value === null || value === undefined) {
                    this.removeAttribute();
                }
            }
        };

        DefaultDynamicProperty.prototype.removeAttribute = function removeAttribute() {
            // TODO this sucks but to preserve properties first and to meet current
            // semantics we must do this.
            var _attribute4 = this.attribute,
                element = _attribute4.element,
                namespace = _attribute4.namespace;

            if (namespace) {
                element.removeAttributeNS(namespace, this.normalizedName);
            } else {
                element.removeAttribute(this.normalizedName);
            }
        };

        return DefaultDynamicProperty;
    }(DynamicAttribute);

    var SafeDynamicProperty = function (_DefaultDynamicProper) {
        (0, _emberBabel.inherits)(SafeDynamicProperty, _DefaultDynamicProper);

        function SafeDynamicProperty() {
            (0, _emberBabel.classCallCheck)(this, SafeDynamicProperty);

            return (0, _emberBabel.possibleConstructorReturn)(this, _DefaultDynamicProper.apply(this, arguments));
        }

        SafeDynamicProperty.prototype.set = function set(dom, value, env) {
            var _attribute5 = this.attribute,
                element = _attribute5.element,
                name = _attribute5.name;

            var sanitized = sanitizeAttributeValue(env, element, name, value);
            _DefaultDynamicProper.prototype.set.call(this, dom, sanitized, env);
        };

        SafeDynamicProperty.prototype.update = function update(value, env) {
            var _attribute6 = this.attribute,
                element = _attribute6.element,
                name = _attribute6.name;

            var sanitized = sanitizeAttributeValue(env, element, name, value);
            _DefaultDynamicProper.prototype.update.call(this, sanitized, env);
        };

        return SafeDynamicProperty;
    }(DefaultDynamicProperty);

    var SafeDynamicAttribute = function (_SimpleDynamicAttribu) {
        (0, _emberBabel.inherits)(SafeDynamicAttribute, _SimpleDynamicAttribu);

        function SafeDynamicAttribute() {
            (0, _emberBabel.classCallCheck)(this, SafeDynamicAttribute);

            return (0, _emberBabel.possibleConstructorReturn)(this, _SimpleDynamicAttribu.apply(this, arguments));
        }

        SafeDynamicAttribute.prototype.set = function set(dom, value, env) {
            var _attribute7 = this.attribute,
                element = _attribute7.element,
                name = _attribute7.name;

            var sanitized = sanitizeAttributeValue(env, element, name, value);
            _SimpleDynamicAttribu.prototype.set.call(this, dom, sanitized, env);
        };

        SafeDynamicAttribute.prototype.update = function update(value, env) {
            var _attribute8 = this.attribute,
                element = _attribute8.element,
                name = _attribute8.name;

            var sanitized = sanitizeAttributeValue(env, element, name, value);
            _SimpleDynamicAttribu.prototype.update.call(this, sanitized, env);
        };

        return SafeDynamicAttribute;
    }(SimpleDynamicAttribute);

    var InputValueDynamicAttribute = function (_DefaultDynamicProper2) {
        (0, _emberBabel.inherits)(InputValueDynamicAttribute, _DefaultDynamicProper2);

        function InputValueDynamicAttribute() {
            (0, _emberBabel.classCallCheck)(this, InputValueDynamicAttribute);

            return (0, _emberBabel.possibleConstructorReturn)(this, _DefaultDynamicProper2.apply(this, arguments));
        }

        InputValueDynamicAttribute.prototype.set = function set(dom, value) {
            dom.__setProperty('value', normalizeStringValue(value));
        };

        InputValueDynamicAttribute.prototype.update = function update(value) {
            var input = this.attribute.element;
            var currentValue = input.value;
            var normalizedValue = normalizeStringValue(value);
            if (currentValue !== normalizedValue) {
                input.value = normalizedValue;
            }
        };

        return InputValueDynamicAttribute;
    }(DefaultDynamicProperty);

    var OptionSelectedDynamicAttribute = function (_DefaultDynamicProper3) {
        (0, _emberBabel.inherits)(OptionSelectedDynamicAttribute, _DefaultDynamicProper3);

        function OptionSelectedDynamicAttribute() {
            (0, _emberBabel.classCallCheck)(this, OptionSelectedDynamicAttribute);

            return (0, _emberBabel.possibleConstructorReturn)(this, _DefaultDynamicProper3.apply(this, arguments));
        }

        OptionSelectedDynamicAttribute.prototype.set = function set(dom, value) {
            if (value !== null && value !== undefined && value !== false) {
                dom.__setProperty('selected', true);
            }
        };

        OptionSelectedDynamicAttribute.prototype.update = function update(value) {
            var option = this.attribute.element;
            if (value) {
                option.selected = true;
            } else {
                option.selected = false;
            }
        };

        return OptionSelectedDynamicAttribute;
    }(DefaultDynamicProperty);

    function isOptionSelected(tagName, attribute) {
        return tagName === 'OPTION' && attribute === 'selected';
    }
    function isUserInputValue(tagName, attribute) {
        return (tagName === 'INPUT' || tagName === 'TEXTAREA') && attribute === 'value';
    }
    function normalizeValue(value) {
        if (value === false || value === undefined || value === null || typeof value.toString === 'undefined') {
            return null;
        }
        if (value === true) {
            return '';
        }
        // onclick function etc in SSR
        if (typeof value === 'function') {
            return null;
        }
        return String(value);
    }

    var Scope = function () {
        function Scope(
        // the 0th slot is `self`
        slots, callerScope,
        // named arguments and blocks passed to a layout that uses eval
        evalScope,
        // locals in scope when the partial was invoked
        partialMap) {
            (0, _emberBabel.classCallCheck)(this, Scope);

            this.slots = slots;
            this.callerScope = callerScope;
            this.evalScope = evalScope;
            this.partialMap = partialMap;
        }

        Scope.root = function root(self) {
            var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

            var refs = new Array(size + 1);
            for (var i = 0; i <= size; i++) {
                refs[i] = UNDEFINED_REFERENCE;
            }
            return new Scope(refs, null, null, null).init({ self: self });
        };

        Scope.sized = function sized() {
            var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

            var refs = new Array(size + 1);
            for (var i = 0; i <= size; i++) {
                refs[i] = UNDEFINED_REFERENCE;
            }
            return new Scope(refs, null, null, null);
        };

        Scope.prototype.init = function init(_ref54) {
            var self = _ref54.self;

            this.slots[0] = self;
            return this;
        };

        Scope.prototype.getSelf = function getSelf() {
            return this.get(0);
        };

        Scope.prototype.getSymbol = function getSymbol(symbol) {
            return this.get(symbol);
        };

        Scope.prototype.getBlock = function getBlock(symbol) {
            var block = this.get(symbol);
            return block === UNDEFINED_REFERENCE ? null : block;
        };

        Scope.prototype.getEvalScope = function getEvalScope() {
            return this.evalScope;
        };

        Scope.prototype.getPartialMap = function getPartialMap() {
            return this.partialMap;
        };

        Scope.prototype.bind = function bind(symbol, value) {
            this.set(symbol, value);
        };

        Scope.prototype.bindSelf = function bindSelf(self) {
            this.set(0, self);
        };

        Scope.prototype.bindSymbol = function bindSymbol(symbol, value) {
            this.set(symbol, value);
        };

        Scope.prototype.bindBlock = function bindBlock(symbol, value) {
            this.set(symbol, value);
        };

        Scope.prototype.bindEvalScope = function bindEvalScope(map) {
            this.evalScope = map;
        };

        Scope.prototype.bindPartialMap = function bindPartialMap(map) {
            this.partialMap = map;
        };

        Scope.prototype.bindCallerScope = function bindCallerScope(scope) {
            this.callerScope = scope;
        };

        Scope.prototype.getCallerScope = function getCallerScope() {
            return this.callerScope;
        };

        Scope.prototype.child = function child() {
            return new Scope(this.slots.slice(), this.callerScope, this.evalScope, this.partialMap);
        };

        Scope.prototype.get = function get(index) {
            if (index >= this.slots.length) {
                throw new RangeError('BUG: cannot get $' + index + ' from scope; length=' + this.slots.length);
            }
            return this.slots[index];
        };

        Scope.prototype.set = function set(index, value) {
            if (index >= this.slots.length) {
                throw new RangeError('BUG: cannot get $' + index + ' from scope; length=' + this.slots.length);
            }
            this.slots[index] = value;
        };

        return Scope;
    }();

    var Transaction = function () {
        function Transaction() {
            (0, _emberBabel.classCallCheck)(this, Transaction);

            this.scheduledInstallManagers = [];
            this.scheduledInstallModifiers = [];
            this.scheduledUpdateModifierManagers = [];
            this.scheduledUpdateModifiers = [];
            this.createdComponents = [];
            this.createdManagers = [];
            this.updatedComponents = [];
            this.updatedManagers = [];
            this.destructors = [];
        }

        Transaction.prototype.didCreate = function didCreate(component, manager) {
            this.createdComponents.push(component);
            this.createdManagers.push(manager);
        };

        Transaction.prototype.didUpdate = function didUpdate(component, manager) {
            this.updatedComponents.push(component);
            this.updatedManagers.push(manager);
        };

        Transaction.prototype.scheduleInstallModifier = function scheduleInstallModifier(modifier, manager) {
            this.scheduledInstallManagers.push(manager);
            this.scheduledInstallModifiers.push(modifier);
        };

        Transaction.prototype.scheduleUpdateModifier = function scheduleUpdateModifier(modifier, manager) {
            this.scheduledUpdateModifierManagers.push(manager);
            this.scheduledUpdateModifiers.push(modifier);
        };

        Transaction.prototype.didDestroy = function didDestroy(d) {
            this.destructors.push(d);
        };

        Transaction.prototype.commit = function commit() {
            var createdComponents = this.createdComponents,
                createdManagers = this.createdManagers;

            for (var i = 0; i < createdComponents.length; i++) {
                var component = createdComponents[i];
                var manager = createdManagers[i];
                manager.didCreate(component);
            }
            var updatedComponents = this.updatedComponents,
                updatedManagers = this.updatedManagers;

            for (var _i4 = 0; _i4 < updatedComponents.length; _i4++) {
                var _component = updatedComponents[_i4];
                var _manager2 = updatedManagers[_i4];
                _manager2.didUpdate(_component);
            }
            var destructors = this.destructors;

            for (var _i5 = 0; _i5 < destructors.length; _i5++) {
                destructors[_i5].destroy();
            }
            var scheduledInstallManagers = this.scheduledInstallManagers,
                scheduledInstallModifiers = this.scheduledInstallModifiers;

            for (var _i6 = 0; _i6 < scheduledInstallManagers.length; _i6++) {
                var _manager3 = scheduledInstallManagers[_i6];
                var modifier = scheduledInstallModifiers[_i6];
                _manager3.install(modifier);
            }
            var scheduledUpdateModifierManagers = this.scheduledUpdateModifierManagers,
                scheduledUpdateModifiers = this.scheduledUpdateModifiers;

            for (var _i7 = 0; _i7 < scheduledUpdateModifierManagers.length; _i7++) {
                var _manager4 = scheduledUpdateModifierManagers[_i7];
                var _modifier = scheduledUpdateModifiers[_i7];
                _manager4.update(_modifier);
            }
        };

        return Transaction;
    }();

    var Environment = function () {
        function Environment(_ref55) {
            var appendOperations = _ref55.appendOperations,
                updateOperations = _ref55.updateOperations;

            (0, _emberBabel.classCallCheck)(this, Environment);

            this._transaction = null;
            this.appendOperations = appendOperations;
            this.updateOperations = updateOperations;
        }

        Environment.prototype.toConditionalReference = function toConditionalReference(reference) {
            return new ConditionalReference(reference);
        };

        Environment.prototype.getAppendOperations = function getAppendOperations() {
            return this.appendOperations;
        };

        Environment.prototype.getDOM = function getDOM() {
            return this.updateOperations;
        };

        Environment.prototype.begin = function begin() {

            this._transaction = new Transaction();
        };

        Environment.prototype.didCreate = function didCreate(component, manager) {
            this.transaction.didCreate(component, manager);
        };

        Environment.prototype.didUpdate = function didUpdate(component, manager) {
            this.transaction.didUpdate(component, manager);
        };

        Environment.prototype.scheduleInstallModifier = function scheduleInstallModifier(modifier, manager) {
            this.transaction.scheduleInstallModifier(modifier, manager);
        };

        Environment.prototype.scheduleUpdateModifier = function scheduleUpdateModifier(modifier, manager) {
            this.transaction.scheduleUpdateModifier(modifier, manager);
        };

        Environment.prototype.didDestroy = function didDestroy(d) {
            this.transaction.didDestroy(d);
        };

        Environment.prototype.commit = function commit() {
            var transaction = this.transaction;
            this._transaction = null;
            transaction.commit();
        };

        Environment.prototype.attributeFor = function attributeFor(element, attr, _isTrusting) {
            var namespace = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

            return dynamicAttribute(element, attr, namespace);
        };

        (0, _emberBabel.createClass)(Environment, [{
            key: 'transaction',
            get: function () {
                return this._transaction;
            }
        }]);

        return Environment;
    }();

    var DefaultEnvironment = function (_Environment) {
        (0, _emberBabel.inherits)(DefaultEnvironment, _Environment);

        function DefaultEnvironment(options) {
            (0, _emberBabel.classCallCheck)(this, DefaultEnvironment);

            if (!options) {
                var _document = window.document;
                var appendOperations = new DOMTreeConstruction(_document);
                var updateOperations = new DOMChanges(_document);
                options = { appendOperations: appendOperations, updateOperations: updateOperations };
            }
            return (0, _emberBabel.possibleConstructorReturn)(this, _Environment.call(this, options));
        }

        return DefaultEnvironment;
    }(Environment);

    var LowLevelVM = function () {
        function LowLevelVM(stack, heap, program, externs) {
            var pc = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : -1;
            var ra = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : -1;

            (0, _emberBabel.classCallCheck)(this, LowLevelVM);

            this.stack = stack;
            this.heap = heap;
            this.program = program;
            this.externs = externs;
            this.pc = pc;
            this.ra = ra;
            this.currentOpSize = 0;
        }
        // Start a new frame and save $ra and $fp on the stack


        LowLevelVM.prototype.pushFrame = function pushFrame() {
            this.stack.push(this.ra);
            this.stack.push(this.stack.fp);
            this.stack.fp = this.stack.sp - 1;
        };
        // Restore $ra, $sp and $fp


        LowLevelVM.prototype.popFrame = function popFrame() {
            this.stack.sp = this.stack.fp - 1;
            this.ra = this.stack.get(0);
            this.stack.fp = this.stack.get(1);
        };

        LowLevelVM.prototype.pushSmallFrame = function pushSmallFrame() {
            this.stack.push(this.ra);
        };

        LowLevelVM.prototype.popSmallFrame = function popSmallFrame() {
            this.ra = this.stack.popSmi();
        };
        // Jump to an address in `program`


        LowLevelVM.prototype.goto = function goto(offset) {
            var addr = this.pc + offset - this.currentOpSize;
            this.pc = addr;
        };
        // Save $pc into $ra, then jump to a new address in `program` (jal in MIPS)


        LowLevelVM.prototype.call = function call(handle) {
            this.ra = this.pc;
            this.pc = this.heap.getaddr(handle);
        };
        // Put a specific `program` address in $ra


        LowLevelVM.prototype.returnTo = function returnTo(offset) {
            var addr = this.pc + offset - this.currentOpSize;
            this.ra = addr;
        };
        // Return to the `program` address stored in $ra


        LowLevelVM.prototype.return = function _return() {
            this.pc = this.ra;
        };

        LowLevelVM.prototype.nextStatement = function nextStatement() {
            var pc = this.pc,
                program = this.program;

            if (pc === -1) {
                return null;
            }
            // We have to save off the current operations size so that
            // when we do a jump we can calculate the correct offset
            // to where we are going. We can't simply ask for the size
            // in a jump because we have have already incremented the
            // program counter to the next instruction prior to executing.

            var _program$opcode = this.program.opcode(pc),
                size = _program$opcode.size;

            var operationSize = this.currentOpSize = size;
            this.pc += operationSize;
            return program.opcode(pc);
        };

        LowLevelVM.prototype.evaluateOuter = function evaluateOuter(opcode, vm) {
            {
                this.evaluateInner(opcode, vm);
            }
        };

        LowLevelVM.prototype.evaluateInner = function evaluateInner(opcode, vm) {
            if (opcode.isMachine) {
                this.evaluateMachine(opcode);
            } else {
                this.evaluateSyscall(opcode, vm);
            }
        };

        LowLevelVM.prototype.evaluateMachine = function evaluateMachine(opcode) {
            switch (opcode.type) {
                case 57 /* PushFrame */:
                    return this.pushFrame();
                case 58 /* PopFrame */:
                    return this.popFrame();
                case 59 /* PushSmallFrame */:
                    return this.pushSmallFrame();
                case 60 /* PopSmallFrame */:
                    return this.popSmallFrame();
                case 50 /* InvokeStatic */:
                    return this.call(opcode.op1);
                case 49 /* InvokeVirtual */:
                    return this.call(this.stack.popSmi());
                case 52 /* Jump */:
                    return this.goto(opcode.op1);
                case 24 /* Return */:
                    return this.return();
                case 25 /* ReturnTo */:
                    return this.returnTo(opcode.op1);
            }
        };

        LowLevelVM.prototype.evaluateSyscall = function evaluateSyscall(opcode, vm) {
            APPEND_OPCODES.evaluate(vm, opcode, opcode.type);
        };

        return LowLevelVM;
    }();

    var First = function () {
        function First(node) {
            (0, _emberBabel.classCallCheck)(this, First);

            this.node = node;
        }

        First.prototype.firstNode = function firstNode() {
            return this.node;
        };

        return First;
    }();

    var Last = function () {
        function Last(node) {
            (0, _emberBabel.classCallCheck)(this, Last);

            this.node = node;
        }

        Last.prototype.lastNode = function lastNode() {
            return this.node;
        };

        return Last;
    }();

    var NewElementBuilder = function () {
        function NewElementBuilder(env, parentNode, nextSibling) {
            (0, _emberBabel.classCallCheck)(this, NewElementBuilder);

            this.constructing = null;
            this.operations = null;
            this.cursorStack = new _util.Stack();
            this.blockStack = new _util.Stack();
            this.pushElement(parentNode, nextSibling);
            this.env = env;
            this.dom = env.getAppendOperations();
            this.updateOperations = env.getDOM();
        }

        NewElementBuilder.forInitialRender = function forInitialRender(env, cursor) {
            var builder = new this(env, cursor.element, cursor.nextSibling);
            builder.pushSimpleBlock();
            return builder;
        };

        NewElementBuilder.resume = function resume(env, tracker, nextSibling) {
            var parentNode = tracker.parentElement();
            var stack = new this(env, parentNode, nextSibling);
            stack.pushSimpleBlock();
            stack.pushBlockTracker(tracker);
            return stack;
        };

        NewElementBuilder.prototype.expectConstructing = function expectConstructing(method) {
            return this.constructing;
        };

        NewElementBuilder.prototype.block = function block() {
            return this.blockStack.current;
        };

        NewElementBuilder.prototype.popElement = function popElement() {
            this.cursorStack.pop();
            this.cursorStack.current;
        };

        NewElementBuilder.prototype.pushSimpleBlock = function pushSimpleBlock() {
            return this.pushBlockTracker(new SimpleBlockTracker(this.element));
        };

        NewElementBuilder.prototype.pushUpdatableBlock = function pushUpdatableBlock() {
            return this.pushBlockTracker(new UpdatableBlockTracker(this.element));
        };

        NewElementBuilder.prototype.pushBlockList = function pushBlockList(list) {
            return this.pushBlockTracker(new BlockListTracker(this.element, list));
        };

        NewElementBuilder.prototype.pushBlockTracker = function pushBlockTracker(tracker) {
            var isRemote = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            var current = this.blockStack.current;
            if (current !== null) {
                current.newDestroyable(tracker);
                if (!isRemote) {
                    current.didAppendBounds(tracker);
                }
            }
            this.__openBlock();
            this.blockStack.push(tracker);
            return tracker;
        };

        NewElementBuilder.prototype.popBlock = function popBlock() {
            this.block().finalize(this);
            this.__closeBlock();
            return this.blockStack.pop();
        };

        NewElementBuilder.prototype.__openBlock = function __openBlock() {};

        NewElementBuilder.prototype.__closeBlock = function __closeBlock() {};
        // todo return seems unused


        NewElementBuilder.prototype.openElement = function openElement(tag) {
            var element = this.__openElement(tag);
            this.constructing = element;
            return element;
        };

        NewElementBuilder.prototype.__openElement = function __openElement(tag) {
            return this.dom.createElement(tag, this.element);
        };

        NewElementBuilder.prototype.flushElement = function flushElement() {
            var parent = this.element;
            var element = this.constructing;
            this.__flushElement(parent, element);
            this.constructing = null;
            this.operations = null;
            this.pushElement(element, null);
            this.didOpenElement(element);
        };

        NewElementBuilder.prototype.__flushElement = function __flushElement(parent, constructing) {
            this.dom.insertBefore(parent, constructing, this.nextSibling);
        };

        NewElementBuilder.prototype.closeElement = function closeElement() {
            this.willCloseElement();
            this.popElement();
        };

        NewElementBuilder.prototype.pushRemoteElement = function pushRemoteElement(element, guid) {
            var nextSibling = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

            this.__pushRemoteElement(element, guid, nextSibling);
        };

        NewElementBuilder.prototype.__pushRemoteElement = function __pushRemoteElement(element, _guid, nextSibling) {
            this.pushElement(element, nextSibling);
            var tracker = new RemoteBlockTracker(element);
            this.pushBlockTracker(tracker, true);
        };

        NewElementBuilder.prototype.popRemoteElement = function popRemoteElement() {
            this.popBlock();
            this.popElement();
        };

        NewElementBuilder.prototype.pushElement = function pushElement(element, nextSibling) {
            this.cursorStack.push(new Cursor(element, nextSibling));
        };

        NewElementBuilder.prototype.didAddDestroyable = function didAddDestroyable(d) {
            this.block().newDestroyable(d);
        };

        NewElementBuilder.prototype.didAppendBounds = function didAppendBounds(bounds$$1) {
            this.block().didAppendBounds(bounds$$1);
            return bounds$$1;
        };

        NewElementBuilder.prototype.didAppendNode = function didAppendNode(node) {
            this.block().didAppendNode(node);
            return node;
        };

        NewElementBuilder.prototype.didOpenElement = function didOpenElement(element) {
            this.block().openElement(element);
            return element;
        };

        NewElementBuilder.prototype.willCloseElement = function willCloseElement() {
            this.block().closeElement();
        };

        NewElementBuilder.prototype.appendText = function appendText(string) {
            return this.didAppendNode(this.__appendText(string));
        };

        NewElementBuilder.prototype.__appendText = function __appendText(text) {
            var dom = this.dom,
                element = this.element,
                nextSibling = this.nextSibling;

            var node = dom.createTextNode(text);
            dom.insertBefore(element, node, nextSibling);
            return node;
        };

        NewElementBuilder.prototype.__appendNode = function __appendNode(node) {
            this.dom.insertBefore(this.element, node, this.nextSibling);
            return node;
        };

        NewElementBuilder.prototype.__appendFragment = function __appendFragment(fragment) {
            var first = fragment.firstChild;
            if (first) {
                var ret = bounds(this.element, first, fragment.lastChild);
                this.dom.insertBefore(this.element, fragment, this.nextSibling);
                return ret;
            } else {
                return single(this.element, this.__appendComment(''));
            }
        };

        NewElementBuilder.prototype.__appendHTML = function __appendHTML(html) {
            return this.dom.insertHTMLBefore(this.element, this.nextSibling, html);
        };

        NewElementBuilder.prototype.appendDynamicHTML = function appendDynamicHTML(value) {
            var bounds$$1 = this.trustedContent(value);
            this.didAppendBounds(bounds$$1);
        };

        NewElementBuilder.prototype.appendDynamicText = function appendDynamicText(value) {
            var node = this.untrustedContent(value);
            this.didAppendNode(node);
            return node;
        };

        NewElementBuilder.prototype.appendDynamicFragment = function appendDynamicFragment(value) {
            var bounds$$1 = this.__appendFragment(value);
            this.didAppendBounds(bounds$$1);
        };

        NewElementBuilder.prototype.appendDynamicNode = function appendDynamicNode(value) {
            var node = this.__appendNode(value);
            var bounds$$1 = single(this.element, node);
            this.didAppendBounds(bounds$$1);
        };

        NewElementBuilder.prototype.trustedContent = function trustedContent(value) {
            return this.__appendHTML(value);
        };

        NewElementBuilder.prototype.untrustedContent = function untrustedContent(value) {
            return this.__appendText(value);
        };

        NewElementBuilder.prototype.appendComment = function appendComment(string) {
            return this.didAppendNode(this.__appendComment(string));
        };

        NewElementBuilder.prototype.__appendComment = function __appendComment(string) {
            var dom = this.dom,
                element = this.element,
                nextSibling = this.nextSibling;

            var node = dom.createComment(string);
            dom.insertBefore(element, node, nextSibling);
            return node;
        };

        NewElementBuilder.prototype.__setAttribute = function __setAttribute(name, value, namespace) {
            this.dom.setAttribute(this.constructing, name, value, namespace);
        };

        NewElementBuilder.prototype.__setProperty = function __setProperty(name, value) {
            this.constructing[name] = value;
        };

        NewElementBuilder.prototype.setStaticAttribute = function setStaticAttribute(name, value, namespace) {
            this.__setAttribute(name, value, namespace);
        };

        NewElementBuilder.prototype.setDynamicAttribute = function setDynamicAttribute(name, value, trusting, namespace) {
            var element = this.constructing;
            var attribute = this.env.attributeFor(element, name, trusting, namespace);
            attribute.set(this, value, this.env);
            return attribute;
        };

        (0, _emberBabel.createClass)(NewElementBuilder, [{
            key: 'element',
            get: function () {
                return this.cursorStack.current.element;
            }
        }, {
            key: 'nextSibling',
            get: function () {
                return this.cursorStack.current.nextSibling;
            }
        }]);

        return NewElementBuilder;
    }();

    var SimpleBlockTracker = function () {
        function SimpleBlockTracker(parent) {
            (0, _emberBabel.classCallCheck)(this, SimpleBlockTracker);

            this.parent = parent;
            this.first = null;
            this.last = null;
            this.destroyables = null;
            this.nesting = 0;
        }

        SimpleBlockTracker.prototype.destroy = function destroy() {
            var destroyables = this.destroyables;

            if (destroyables && destroyables.length) {
                for (var i = 0; i < destroyables.length; i++) {
                    destroyables[i].destroy();
                }
            }
        };

        SimpleBlockTracker.prototype.parentElement = function parentElement() {
            return this.parent;
        };

        SimpleBlockTracker.prototype.firstNode = function firstNode() {
            return this.first && this.first.firstNode();
        };

        SimpleBlockTracker.prototype.lastNode = function lastNode() {
            return this.last && this.last.lastNode();
        };

        SimpleBlockTracker.prototype.openElement = function openElement(element) {
            this.didAppendNode(element);
            this.nesting++;
        };

        SimpleBlockTracker.prototype.closeElement = function closeElement() {
            this.nesting--;
        };

        SimpleBlockTracker.prototype.didAppendNode = function didAppendNode(node) {
            if (this.nesting !== 0) return;
            if (!this.first) {
                this.first = new First(node);
            }
            this.last = new Last(node);
        };

        SimpleBlockTracker.prototype.didAppendBounds = function didAppendBounds(bounds$$1) {
            if (this.nesting !== 0) return;
            if (!this.first) {
                this.first = bounds$$1;
            }
            this.last = bounds$$1;
        };

        SimpleBlockTracker.prototype.newDestroyable = function newDestroyable(d) {
            this.destroyables = this.destroyables || [];
            this.destroyables.push(d);
        };

        SimpleBlockTracker.prototype.finalize = function finalize(stack) {
            if (this.first === null) {
                stack.appendComment('');
            }
        };

        return SimpleBlockTracker;
    }();

    var RemoteBlockTracker = function (_SimpleBlockTracker) {
        (0, _emberBabel.inherits)(RemoteBlockTracker, _SimpleBlockTracker);

        function RemoteBlockTracker() {
            (0, _emberBabel.classCallCheck)(this, RemoteBlockTracker);

            return (0, _emberBabel.possibleConstructorReturn)(this, _SimpleBlockTracker.apply(this, arguments));
        }

        RemoteBlockTracker.prototype.destroy = function destroy() {
            _SimpleBlockTracker.prototype.destroy.call(this);
            clear(this);
        };

        return RemoteBlockTracker;
    }(SimpleBlockTracker);

    var UpdatableBlockTracker = function (_SimpleBlockTracker2) {
        (0, _emberBabel.inherits)(UpdatableBlockTracker, _SimpleBlockTracker2);

        function UpdatableBlockTracker() {
            (0, _emberBabel.classCallCheck)(this, UpdatableBlockTracker);

            return (0, _emberBabel.possibleConstructorReturn)(this, _SimpleBlockTracker2.apply(this, arguments));
        }

        UpdatableBlockTracker.prototype.reset = function reset(env) {
            var destroyables = this.destroyables;

            if (destroyables && destroyables.length) {
                for (var i = 0; i < destroyables.length; i++) {
                    env.didDestroy(destroyables[i]);
                }
            }
            var nextSibling = clear(this);
            this.first = null;
            this.last = null;
            this.destroyables = null;
            this.nesting = 0;
            return nextSibling;
        };

        return UpdatableBlockTracker;
    }(SimpleBlockTracker);

    var BlockListTracker = function () {
        function BlockListTracker(parent, boundList) {
            (0, _emberBabel.classCallCheck)(this, BlockListTracker);

            this.parent = parent;
            this.boundList = boundList;
            this.parent = parent;
            this.boundList = boundList;
        }

        BlockListTracker.prototype.destroy = function destroy() {
            this.boundList.forEachNode(function (node) {
                return node.destroy();
            });
        };

        BlockListTracker.prototype.parentElement = function parentElement() {
            return this.parent;
        };

        BlockListTracker.prototype.firstNode = function firstNode() {
            var head = this.boundList.head();
            return head && head.firstNode();
        };

        BlockListTracker.prototype.lastNode = function lastNode() {
            var tail = this.boundList.tail();
            return tail && tail.lastNode();
        };

        BlockListTracker.prototype.openElement = function openElement(_element) {};

        BlockListTracker.prototype.closeElement = function closeElement() {};

        BlockListTracker.prototype.didAppendNode = function didAppendNode(_node) {};

        BlockListTracker.prototype.didAppendBounds = function didAppendBounds(_bounds) {};

        BlockListTracker.prototype.newDestroyable = function newDestroyable(_d) {};

        BlockListTracker.prototype.finalize = function finalize(_stack) {};

        return BlockListTracker;
    }();

    function clientBuilder(env, cursor) {
        return NewElementBuilder.forInitialRender(env, cursor);
    }

    var MAX_SMI = 0xfffffff;

    var InnerStack = function () {
        function InnerStack() {
            var inner = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new _lowLevel.Stack();
            var js = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

            (0, _emberBabel.classCallCheck)(this, InnerStack);

            this.inner = inner;
            this.js = js;
        }

        InnerStack.prototype.slice = function slice(start, end) {
            var inner = void 0;
            if (typeof start === 'number' && typeof end === 'number') {
                inner = this.inner.slice(start, end);
            } else if (typeof start === 'number' && end === undefined) {
                inner = this.inner.sliceFrom(start);
            } else {
                inner = this.inner.clone();
            }
            return new InnerStack(inner, this.js.slice(start, end));
        };

        InnerStack.prototype.sliceInner = function sliceInner(start, end) {
            var out = [];
            for (var i = start; i < end; i++) {
                out.push(this.get(i));
            }
            return out;
        };

        InnerStack.prototype.copy = function copy(from, to) {
            this.inner.copy(from, to);
        };

        InnerStack.prototype.write = function write(pos, value) {
            if (isImmediate(value)) {
                this.inner.writeRaw(pos, encodeImmediate(value));
            } else {
                var idx = this.js.length;
                this.js.push(value);
                this.inner.writeRaw(pos, ~idx);
            }
        };

        InnerStack.prototype.writeRaw = function writeRaw(pos, value) {
            this.inner.writeRaw(pos, value);
        };

        InnerStack.prototype.get = function get(pos) {
            var value = this.inner.getRaw(pos);
            if (value < 0) {
                return this.js[~value];
            } else {
                return decodeImmediate(value);
            }
        };

        InnerStack.prototype.reset = function reset() {
            this.inner.reset();
            this.js.length = 0;
        };

        (0, _emberBabel.createClass)(InnerStack, [{
            key: 'length',
            get: function () {
                return this.inner.len();
            }
        }]);

        return InnerStack;
    }();

    var EvaluationStack = function () {
        function EvaluationStack(stack, fp, sp) {
            (0, _emberBabel.classCallCheck)(this, EvaluationStack);

            this.stack = stack;
            this.fp = fp;
            this.sp = sp;
        }

        EvaluationStack.empty = function empty() {
            return new this(new InnerStack(), 0, -1);
        };

        EvaluationStack.restore = function restore(snapshot) {
            var stack = new InnerStack();
            for (var i = 0; i < snapshot.length; i++) {
                stack.write(i, snapshot[i]);
            }
            return new this(stack, 0, snapshot.length - 1);
        };

        EvaluationStack.prototype.push = function push(value) {
            this.stack.write(++this.sp, value);
        };

        EvaluationStack.prototype.pushEncodedImmediate = function pushEncodedImmediate(value) {
            this.stack.writeRaw(++this.sp, value);
        };

        EvaluationStack.prototype.pushNull = function pushNull() {
            this.stack.write(++this.sp, null);
        };

        EvaluationStack.prototype.dup = function dup() {
            var position = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.sp;

            this.stack.copy(position, ++this.sp);
        };

        EvaluationStack.prototype.copy = function copy(from, to) {
            this.stack.copy(from, to);
        };

        EvaluationStack.prototype.pop = function pop() {
            var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

            var top = this.stack.get(this.sp);
            this.sp -= n;
            return top;
        };

        EvaluationStack.prototype.popSmi = function popSmi() {
            return this.stack.get(this.sp--);
        };

        EvaluationStack.prototype.peek = function peek() {
            var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

            return this.stack.get(this.sp - offset);
        };

        EvaluationStack.prototype.get = function get(offset) {
            var base = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.fp;

            return this.stack.get(base + offset);
        };

        EvaluationStack.prototype.set = function set(value, offset) {
            var base = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.fp;

            this.stack.write(base + offset, value);
        };

        EvaluationStack.prototype.slice = function slice(start, end) {
            return this.stack.slice(start, end);
        };

        EvaluationStack.prototype.sliceArray = function sliceArray(start, end) {
            return this.stack.sliceInner(start, end);
        };

        EvaluationStack.prototype.capture = function capture(items) {
            var end = this.sp + 1;
            var start = end - items;
            return this.stack.sliceInner(start, end);
        };

        EvaluationStack.prototype.reset = function reset() {
            this.stack.reset();
        };

        EvaluationStack.prototype.toArray = function toArray() {
            return this.stack.sliceInner(this.fp, this.sp + 1);
        };

        return EvaluationStack;
    }();

    function isImmediate(value) {
        var type = typeof value;
        if (value === null || value === undefined) return true;
        switch (type) {
            case 'boolean':
            case 'undefined':
                return true;
            case 'number':
                // not an integer
                if (value % 1 !== 0) return false;
                var abs = Math.abs(value);
                if (abs > MAX_SMI) return false;
                return true;
            default:
                return false;
        }
    }
    function encodeSmi(primitive) {
        if (primitive < 0) {
            var abs = Math.abs(primitive);
            if (abs > MAX_SMI) throw new Error('not smi');
            return Math.abs(primitive) << 3 | 4 /* NEGATIVE */;
        } else {
            if (primitive > MAX_SMI) throw new Error('not smi');
            return primitive << 3 | 0 /* NUMBER */;
        }
    }
    function encodeImmediate(primitive) {
        switch (typeof primitive) {
            case 'number':
                return encodeSmi(primitive);
            case 'boolean':
                return primitive ? 11 /* True */ : 3 /* False */;
            case 'object':
                // assume null
                return 19 /* Null */;
            case 'undefined':
                return 27 /* Undef */;
            default:
                throw (0, _util.unreachable)();
        }
    }
    function decodeSmi(smi) {
        switch (smi & 7) {
            case 0 /* NUMBER */:
                return smi >> 3;
            case 4 /* NEGATIVE */:
                return -(smi >> 3);
            default:
                throw (0, _util.unreachable)();
        }
    }
    function decodeImmediate(immediate) {
        switch (immediate) {
            case 3 /* False */:
                return false;
            case 11 /* True */:
                return true;
            case 19 /* Null */:
                return null;
            case 27 /* Undef */:
                return undefined;
            default:
                return decodeSmi(immediate);
        }
    }

    var UpdatingVM = function () {
        function UpdatingVM(env, program, _ref56) {
            var _ref56$alwaysRevalida = _ref56.alwaysRevalidate,
                alwaysRevalidate = _ref56$alwaysRevalida === undefined ? false : _ref56$alwaysRevalida;

            (0, _emberBabel.classCallCheck)(this, UpdatingVM);

            this.frameStack = new _util.Stack();
            this.env = env;
            this.constants = program.constants;
            this.dom = env.getDOM();
            this.alwaysRevalidate = alwaysRevalidate;
        }

        UpdatingVM.prototype.execute = function execute(opcodes, handler) {
            var frameStack = this.frameStack;

            this.try(opcodes, handler);
            while (true) {
                if (frameStack.isEmpty()) break;
                var opcode = this.frame.nextStatement();
                if (opcode === null) {
                    this.frameStack.pop();
                    continue;
                }
                opcode.evaluate(this);
            }
        };

        UpdatingVM.prototype.goto = function goto(op) {
            this.frame.goto(op);
        };

        UpdatingVM.prototype.try = function _try(ops, handler) {
            this.frameStack.push(new UpdatingVMFrame(ops, handler));
        };

        UpdatingVM.prototype.throw = function _throw() {
            this.frame.handleException();
            this.frameStack.pop();
        };

        (0, _emberBabel.createClass)(UpdatingVM, [{
            key: 'frame',
            get: function () {
                return this.frameStack.current;
            }
        }]);

        return UpdatingVM;
    }();

    var BlockOpcode = function (_UpdatingOpcode9) {
        (0, _emberBabel.inherits)(BlockOpcode, _UpdatingOpcode9);

        function BlockOpcode(start, state, runtime, bounds$$1, children) {
            (0, _emberBabel.classCallCheck)(this, BlockOpcode);

            var _this28 = (0, _emberBabel.possibleConstructorReturn)(this, _UpdatingOpcode9.call(this));

            _this28.start = start;
            _this28.state = state;
            _this28.runtime = runtime;
            _this28.type = 'block';
            _this28.next = null;
            _this28.prev = null;
            _this28.children = children;
            _this28.bounds = bounds$$1;
            return _this28;
        }

        BlockOpcode.prototype.parentElement = function parentElement() {
            return this.bounds.parentElement();
        };

        BlockOpcode.prototype.firstNode = function firstNode() {
            return this.bounds.firstNode();
        };

        BlockOpcode.prototype.lastNode = function lastNode() {
            return this.bounds.lastNode();
        };

        BlockOpcode.prototype.evaluate = function evaluate(vm) {
            vm.try(this.children, null);
        };

        BlockOpcode.prototype.destroy = function destroy() {
            this.bounds.destroy();
        };

        BlockOpcode.prototype.didDestroy = function didDestroy() {
            this.runtime.env.didDestroy(this.bounds);
        };

        return BlockOpcode;
    }(UpdatingOpcode);

    var TryOpcode = function (_BlockOpcode) {
        (0, _emberBabel.inherits)(TryOpcode, _BlockOpcode);

        function TryOpcode(start, state, runtime, bounds$$1, children) {
            (0, _emberBabel.classCallCheck)(this, TryOpcode);

            var _this29 = (0, _emberBabel.possibleConstructorReturn)(this, _BlockOpcode.call(this, start, state, runtime, bounds$$1, children));

            _this29.type = 'try';
            _this29.tag = _this29._tag = _reference.UpdatableTag.create(_reference.CONSTANT_TAG);
            return _this29;
        }

        TryOpcode.prototype.didInitializeChildren = function didInitializeChildren() {
            this._tag.inner.update((0, _reference.combineSlice)(this.children));
        };

        TryOpcode.prototype.evaluate = function evaluate(vm) {
            vm.try(this.children, this);
        };

        TryOpcode.prototype.handleException = function handleException() {
            var _this30 = this;

            var state = this.state,
                bounds$$1 = this.bounds,
                children = this.children,
                start = this.start,
                prev = this.prev,
                next = this.next,
                runtime = this.runtime;

            children.clear();
            var elementStack = NewElementBuilder.resume(runtime.env, bounds$$1, bounds$$1.reset(runtime.env));
            var vm = VM.resume(state, runtime, elementStack);
            var updating = new _util.LinkedList();
            vm.execute(start, function (vm) {
                vm.stack = EvaluationStack.restore(state.stack);
                vm.updatingOpcodeStack.push(updating);
                vm.updateWith(_this30);
                vm.updatingOpcodeStack.push(children);
            });
            this.prev = prev;
            this.next = next;
        };

        return TryOpcode;
    }(BlockOpcode);

    var ListRevalidationDelegate = function () {
        function ListRevalidationDelegate(opcode, marker) {
            (0, _emberBabel.classCallCheck)(this, ListRevalidationDelegate);

            this.opcode = opcode;
            this.marker = marker;
            this.didInsert = false;
            this.didDelete = false;
            this.map = opcode.map;
            this.updating = opcode['children'];
        }

        ListRevalidationDelegate.prototype.insert = function insert(key, item, memo, before) {
            var map = this.map,
                opcode = this.opcode,
                updating = this.updating;

            var nextSibling = null;
            var reference = null;
            if (typeof before === 'string') {
                reference = map[before];
                nextSibling = reference['bounds'].firstNode();
            } else {
                nextSibling = this.marker;
            }
            var vm = opcode.vmForInsertion(nextSibling);
            var tryOpcode = null;
            var start = opcode.start;

            vm.execute(start, function (vm) {
                map[key] = tryOpcode = vm.iterate(memo, item);
                vm.updatingOpcodeStack.push(new _util.LinkedList());
                vm.updateWith(tryOpcode);
                vm.updatingOpcodeStack.push(tryOpcode.children);
            });
            updating.insertBefore(tryOpcode, reference);
            this.didInsert = true;
        };

        ListRevalidationDelegate.prototype.retain = function retain(_key, _item, _memo) {};

        ListRevalidationDelegate.prototype.move = function move(key, _item, _memo, before) {
            var map = this.map,
                updating = this.updating;

            var entry = map[key];
            var reference = map[before] || null;
            if (typeof before === 'string') {
                _move(entry, reference.firstNode());
            } else {
                _move(entry, this.marker);
            }
            updating.remove(entry);
            updating.insertBefore(entry, reference);
        };

        ListRevalidationDelegate.prototype.delete = function _delete(key) {
            var map = this.map;

            var opcode = map[key];
            opcode.didDestroy();
            clear(opcode);
            this.updating.remove(opcode);
            delete map[key];
            this.didDelete = true;
        };

        ListRevalidationDelegate.prototype.done = function done() {
            this.opcode.didInitializeChildren(this.didInsert || this.didDelete);
        };

        return ListRevalidationDelegate;
    }();

    var ListBlockOpcode = function (_BlockOpcode2) {
        (0, _emberBabel.inherits)(ListBlockOpcode, _BlockOpcode2);

        function ListBlockOpcode(start, state, runtime, bounds$$1, children, artifacts) {
            (0, _emberBabel.classCallCheck)(this, ListBlockOpcode);

            var _this31 = (0, _emberBabel.possibleConstructorReturn)(this, _BlockOpcode2.call(this, start, state, runtime, bounds$$1, children));

            _this31.type = 'list-block';
            _this31.map = (0, _util.dict)();
            _this31.lastIterated = _reference.INITIAL;
            _this31.artifacts = artifacts;
            var _tag = _this31._tag = _reference.UpdatableTag.create(_reference.CONSTANT_TAG);
            _this31.tag = (0, _reference.combine)([artifacts.tag, _tag]);
            return _this31;
        }

        ListBlockOpcode.prototype.didInitializeChildren = function didInitializeChildren() {
            var listDidChange = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

            this.lastIterated = this.artifacts.tag.value();
            if (listDidChange) {
                this._tag.inner.update((0, _reference.combineSlice)(this.children));
            }
        };

        ListBlockOpcode.prototype.evaluate = function evaluate(vm) {
            var artifacts = this.artifacts,
                lastIterated = this.lastIterated;

            if (!artifacts.tag.validate(lastIterated)) {
                var bounds$$1 = this.bounds;
                var dom = vm.dom;

                var marker = dom.createComment('');
                dom.insertAfter(bounds$$1.parentElement(), marker, bounds$$1.lastNode());
                var target = new ListRevalidationDelegate(this, marker);
                var synchronizer = new _reference.IteratorSynchronizer({ target: target, artifacts: artifacts });
                synchronizer.sync();
                this.parentElement().removeChild(marker);
            }
            // Run now-updated updating opcodes
            _BlockOpcode2.prototype.evaluate.call(this, vm);
        };

        ListBlockOpcode.prototype.vmForInsertion = function vmForInsertion(nextSibling) {
            var bounds$$1 = this.bounds,
                state = this.state,
                runtime = this.runtime;

            var elementStack = NewElementBuilder.forInitialRender(runtime.env, {
                element: bounds$$1.parentElement(),
                nextSibling: nextSibling
            });
            return VM.resume(state, runtime, elementStack);
        };

        return ListBlockOpcode;
    }(BlockOpcode);

    var UpdatingVMFrame = function () {
        function UpdatingVMFrame(ops, exceptionHandler) {
            (0, _emberBabel.classCallCheck)(this, UpdatingVMFrame);

            this.ops = ops;
            this.exceptionHandler = exceptionHandler;
            this.current = ops.head();
        }

        UpdatingVMFrame.prototype.goto = function goto(op) {
            this.current = op;
        };

        UpdatingVMFrame.prototype.nextStatement = function nextStatement() {
            var current = this.current,
                ops = this.ops;

            if (current) this.current = ops.nextNode(current);
            return current;
        };

        UpdatingVMFrame.prototype.handleException = function handleException() {
            if (this.exceptionHandler) {
                this.exceptionHandler.handleException();
            }
        };

        return UpdatingVMFrame;
    }();

    var RenderResult = function () {
        function RenderResult(env, program, updating, bounds$$1) {
            (0, _emberBabel.classCallCheck)(this, RenderResult);

            this.env = env;
            this.program = program;
            this.updating = updating;
            this.bounds = bounds$$1;
        }

        RenderResult.prototype.rerender = function rerender() {
            var _ref57 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { alwaysRevalidate: false },
                _ref57$alwaysRevalida = _ref57.alwaysRevalidate,
                alwaysRevalidate = _ref57$alwaysRevalida === undefined ? false : _ref57$alwaysRevalida;

            var env = this.env,
                program = this.program,
                updating = this.updating;

            var vm = new UpdatingVM(env, program, { alwaysRevalidate: alwaysRevalidate });
            vm.execute(updating, this);
        };

        RenderResult.prototype.parentElement = function parentElement() {
            return this.bounds.parentElement();
        };

        RenderResult.prototype.firstNode = function firstNode() {
            return this.bounds.firstNode();
        };

        RenderResult.prototype.lastNode = function lastNode() {
            return this.bounds.lastNode();
        };

        RenderResult.prototype.handleException = function handleException() {
            throw 'this should never happen';
        };

        RenderResult.prototype.destroy = function destroy() {
            this.bounds.destroy();
            clear(this.bounds);
        };

        return RenderResult;
    }();

    var Arguments = function () {
        function Arguments() {
            (0, _emberBabel.classCallCheck)(this, Arguments);

            this.stack = null;
            this.positional = new PositionalArguments();
            this.named = new NamedArguments();
            this.blocks = new BlockArguments();
        }

        Arguments.prototype.empty = function empty(stack) {
            var base = stack.sp + 1;
            this.named.empty(stack, base);
            this.positional.empty(stack, base);
            this.blocks.empty(stack, base);
            return this;
        };

        Arguments.prototype.setup = function setup(stack, names, blockNames, positionalCount, synthetic) {
            this.stack = stack;
            /*
                   | ... | blocks      | positional  | named |
                   | ... | b0    b1    | p0 p1 p2 p3 | n0 n1 |
             index | ... | 4/5/6 7/8/9 | 10 11 12 13 | 14 15 |
                           ^             ^             ^  ^
                         bbase         pbase       nbase  sp
            */
            var named = this.named;
            var namedCount = names.length;
            var namedBase = stack.sp - namedCount + 1;
            named.setup(stack, namedBase, namedCount, names, synthetic);
            var positional = this.positional;
            var positionalBase = namedBase - positionalCount;
            positional.setup(stack, positionalBase, positionalCount);
            var blocks = this.blocks;
            var blocksCount = blockNames.length;
            var blocksBase = positionalBase - blocksCount * 3;
            blocks.setup(stack, blocksBase, blocksCount, blockNames);
        };

        Arguments.prototype.at = function at(pos) {
            return this.positional.at(pos);
        };

        Arguments.prototype.realloc = function realloc(offset) {
            var stack = this.stack;

            if (offset > 0 && stack !== null) {
                var positional = this.positional,
                    named = this.named;

                var newBase = positional.base + offset;
                var length = positional.length + named.length;
                for (var i = length - 1; i >= 0; i--) {
                    stack.copy(i + positional.base, i + newBase);
                }
                positional.base += offset;
                named.base += offset;
                stack.sp += offset;
            }
        };

        Arguments.prototype.capture = function capture() {
            var positional = this.positional.length === 0 ? EMPTY_POSITIONAL : this.positional.capture();
            var named = this.named.length === 0 ? EMPTY_NAMED : this.named.capture();
            return {
                tag: this.tag,
                length: this.length,
                positional: positional,
                named: named
            };
        };

        Arguments.prototype.clear = function clear() {
            var stack = this.stack,
                length = this.length;

            if (length > 0 && stack !== null) stack.pop(length);
        };

        (0, _emberBabel.createClass)(Arguments, [{
            key: 'tag',
            get: function () {
                return (0, _reference.combineTagged)([this.positional, this.named]);
            }
        }, {
            key: 'base',
            get: function () {
                return this.blocks.base;
            }
        }, {
            key: 'length',
            get: function () {
                return this.positional.length + this.named.length + this.blocks.length * 3;
            }
        }]);

        return Arguments;
    }();

    var PositionalArguments = function () {
        function PositionalArguments() {
            (0, _emberBabel.classCallCheck)(this, PositionalArguments);

            this.base = 0;
            this.length = 0;
            this.stack = null;
            this._tag = null;
            this._references = null;
        }

        PositionalArguments.prototype.empty = function empty(stack, base) {
            this.stack = stack;
            this.base = base;
            this.length = 0;
            this._tag = _reference.CONSTANT_TAG;
            this._references = _util.EMPTY_ARRAY;
        };

        PositionalArguments.prototype.setup = function setup(stack, base, length) {
            this.stack = stack;
            this.base = base;
            this.length = length;
            if (length === 0) {
                this._tag = _reference.CONSTANT_TAG;
                this._references = _util.EMPTY_ARRAY;
            } else {
                this._tag = null;
                this._references = null;
            }
        };

        PositionalArguments.prototype.at = function at(position) {
            var base = this.base,
                length = this.length,
                stack = this.stack;

            if (position < 0 || position >= length) {
                return UNDEFINED_REFERENCE;
            }
            return stack.get(position, base);
        };

        PositionalArguments.prototype.capture = function capture() {
            return new CapturedPositionalArguments(this.tag, this.references);
        };

        PositionalArguments.prototype.prepend = function prepend(other) {
            var additions = other.length;
            if (additions > 0) {
                var base = this.base,
                    length = this.length,
                    stack = this.stack;

                this.base = base = base - additions;
                this.length = length + additions;
                for (var i = 0; i < additions; i++) {
                    stack.set(other.at(i), i, base);
                }
                this._tag = null;
                this._references = null;
            }
        };

        (0, _emberBabel.createClass)(PositionalArguments, [{
            key: 'tag',
            get: function () {
                var tag = this._tag;
                if (!tag) {
                    tag = this._tag = (0, _reference.combineTagged)(this.references);
                }
                return tag;
            }
        }, {
            key: 'references',
            get: function () {
                var references = this._references;
                if (!references) {
                    var stack = this.stack,
                        base = this.base,
                        length = this.length;

                    references = this._references = stack.sliceArray(base, base + length);
                }
                return references;
            }
        }]);

        return PositionalArguments;
    }();

    var CapturedPositionalArguments = function () {
        function CapturedPositionalArguments(tag, references) {
            var length = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : references.length;

            (0, _emberBabel.classCallCheck)(this, CapturedPositionalArguments);

            this.tag = tag;
            this.references = references;
            this.length = length;
        }

        CapturedPositionalArguments.empty = function empty() {
            return new CapturedPositionalArguments(_reference.CONSTANT_TAG, _util.EMPTY_ARRAY, 0);
        };

        CapturedPositionalArguments.prototype.at = function at(position) {
            return this.references[position];
        };

        CapturedPositionalArguments.prototype.value = function value() {
            return this.references.map(this.valueOf);
        };

        CapturedPositionalArguments.prototype.get = function get(name) {
            var references = this.references,
                length = this.length;

            if (name === 'length') {
                return PrimitiveReference.create(length);
            } else {
                var idx = parseInt(name, 10);
                if (idx < 0 || idx >= length) {
                    return UNDEFINED_REFERENCE;
                } else {
                    return references[idx];
                }
            }
        };

        CapturedPositionalArguments.prototype.valueOf = function valueOf(reference) {
            return reference.value();
        };

        return CapturedPositionalArguments;
    }();

    var NamedArguments = function () {
        function NamedArguments() {
            (0, _emberBabel.classCallCheck)(this, NamedArguments);

            this.base = 0;
            this.length = 0;
            this._references = null;
            this._names = _util.EMPTY_ARRAY;
            this._atNames = _util.EMPTY_ARRAY;
        }

        NamedArguments.prototype.empty = function empty(stack, base) {
            this.stack = stack;
            this.base = base;
            this.length = 0;
            this._references = _util.EMPTY_ARRAY;
            this._names = _util.EMPTY_ARRAY;
            this._atNames = _util.EMPTY_ARRAY;
        };

        NamedArguments.prototype.setup = function setup(stack, base, length, names, synthetic) {
            this.stack = stack;
            this.base = base;
            this.length = length;
            if (length === 0) {
                this._references = _util.EMPTY_ARRAY;
                this._names = _util.EMPTY_ARRAY;
                this._atNames = _util.EMPTY_ARRAY;
            } else {
                this._references = null;
                if (synthetic) {
                    this._names = names;
                    this._atNames = null;
                } else {
                    this._names = null;
                    this._atNames = names;
                }
            }
        };

        NamedArguments.prototype.has = function has(name) {
            return this.names.indexOf(name) !== -1;
        };

        NamedArguments.prototype.get = function get(name) {
            var synthetic = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
            var base = this.base,
                stack = this.stack;

            var names = synthetic ? this.names : this.atNames;
            var idx = names.indexOf(name);
            if (idx === -1) {
                return UNDEFINED_REFERENCE;
            }
            return stack.get(idx, base);
        };

        NamedArguments.prototype.capture = function capture() {
            return new CapturedNamedArguments(this.tag, this.names, this.references);
        };

        NamedArguments.prototype.merge = function merge(other) {
            var extras = other.length;

            if (extras > 0) {
                var names = this.names,
                    length = this.length,
                    stack = this.stack;
                var extraNames = other.names;

                if (Object.isFrozen(names) && names.length === 0) {
                    names = [];
                }
                for (var i = 0; i < extras; i++) {
                    var name = extraNames[i];
                    var idx = names.indexOf(name);
                    if (idx === -1) {
                        length = names.push(name);
                        stack.push(other.references[i]);
                    }
                }
                this.length = length;
                this._references = null;
                this._names = names;
                this._atNames = null;
            }
        };

        NamedArguments.prototype.toSyntheticName = function toSyntheticName(name) {
            return name.slice(1);
        };

        NamedArguments.prototype.toAtName = function toAtName(name) {
            return '@' + name;
        };

        (0, _emberBabel.createClass)(NamedArguments, [{
            key: 'tag',
            get: function () {
                return (0, _reference.combineTagged)(this.references);
            }
        }, {
            key: 'names',
            get: function () {
                var names = this._names;
                if (!names) {
                    names = this._names = this._atNames.map(this.toSyntheticName);
                }
                return names;
            }
        }, {
            key: 'atNames',
            get: function () {
                var atNames = this._atNames;
                if (!atNames) {
                    atNames = this._atNames = this._names.map(this.toAtName);
                }
                return atNames;
            }
        }, {
            key: 'references',
            get: function () {
                var references = this._references;
                if (!references) {
                    var base = this.base,
                        length = this.length,
                        stack = this.stack;

                    references = this._references = stack.sliceArray(base, base + length);
                }
                return references;
            }
        }]);

        return NamedArguments;
    }();

    var CapturedNamedArguments = function () {
        function CapturedNamedArguments(tag, names, references) {
            (0, _emberBabel.classCallCheck)(this, CapturedNamedArguments);

            this.tag = tag;
            this.names = names;
            this.references = references;
            this.length = names.length;
            this._map = null;
        }

        CapturedNamedArguments.prototype.has = function has(name) {
            return this.names.indexOf(name) !== -1;
        };

        CapturedNamedArguments.prototype.get = function get(name) {
            var names = this.names,
                references = this.references;

            var idx = names.indexOf(name);
            if (idx === -1) {
                return UNDEFINED_REFERENCE;
            } else {
                return references[idx];
            }
        };

        CapturedNamedArguments.prototype.value = function value() {
            var names = this.names,
                references = this.references;

            var out = (0, _util.dict)();
            for (var i = 0; i < names.length; i++) {
                var name = names[i];
                out[name] = references[i].value();
            }
            return out;
        };

        (0, _emberBabel.createClass)(CapturedNamedArguments, [{
            key: 'map',
            get: function () {
                var map = this._map;
                if (!map) {
                    var names = this.names,
                        references = this.references;

                    map = this._map = (0, _util.dict)();
                    for (var i = 0; i < names.length; i++) {
                        var name = names[i];
                        map[name] = references[i];
                    }
                }
                return map;
            }
        }]);

        return CapturedNamedArguments;
    }();

    var BlockArguments = function () {
        function BlockArguments() {
            (0, _emberBabel.classCallCheck)(this, BlockArguments);

            this.internalValues = null;
            this.internalTag = null;
            this.names = _util.EMPTY_ARRAY;
            this.length = 0;
            this.base = 0;
        }

        BlockArguments.prototype.empty = function empty(stack, base) {
            this.stack = stack;
            this.names = _util.EMPTY_ARRAY;
            this.base = base;
            this.length = 0;
            this.internalTag = _reference.CONSTANT_TAG;
            this.internalValues = _util.EMPTY_ARRAY;
        };

        BlockArguments.prototype.setup = function setup(stack, base, length, names) {
            this.stack = stack;
            this.names = names;
            this.base = base;
            this.length = length;
            if (length === 0) {
                this.internalTag = _reference.CONSTANT_TAG;
                this.internalValues = _util.EMPTY_ARRAY;
            } else {
                this.internalTag = null;
                this.internalValues = null;
            }
        };

        BlockArguments.prototype.has = function has(name) {
            return this.names.indexOf(name) !== -1;
        };

        BlockArguments.prototype.get = function get(name) {
            var base = this.base,
                stack = this.stack,
                names = this.names;

            var idx = names.indexOf(name);
            if (names.indexOf(name) === -1) {
                return null;
            }
            var table = stack.get(idx * 3, base);
            var scope = stack.get(idx * 3 + 1, base); // FIXME(mmun): shouldn't need to cast this
            var handle = stack.get(idx * 3 + 2, base);
            return handle === null ? null : [handle, scope, table];
        };

        BlockArguments.prototype.capture = function capture() {
            return new CapturedBlockArguments(this.names, this.values);
        };

        (0, _emberBabel.createClass)(BlockArguments, [{
            key: 'values',
            get: function () {
                var values = this.internalValues;
                if (!values) {
                    var base = this.base,
                        length = this.length,
                        stack = this.stack;

                    values = this.internalValues = stack.sliceArray(base, base + length * 3);
                }
                return values;
            }
        }]);

        return BlockArguments;
    }();

    var CapturedBlockArguments = function () {
        function CapturedBlockArguments(names, values) {
            (0, _emberBabel.classCallCheck)(this, CapturedBlockArguments);

            this.names = names;
            this.values = values;
            this.length = names.length;
        }

        CapturedBlockArguments.prototype.has = function has(name) {
            return this.names.indexOf(name) !== -1;
        };

        CapturedBlockArguments.prototype.get = function get(name) {
            var idx = this.names.indexOf(name);
            if (idx === -1) return null;
            return [this.values[idx * 3 + 2], this.values[idx * 3 + 1], this.values[idx * 3]];
        };

        return CapturedBlockArguments;
    }();

    var EMPTY_NAMED = new CapturedNamedArguments(_reference.CONSTANT_TAG, _util.EMPTY_ARRAY, _util.EMPTY_ARRAY);
    var EMPTY_POSITIONAL = new CapturedPositionalArguments(_reference.CONSTANT_TAG, _util.EMPTY_ARRAY);
    var EMPTY_ARGS = {
        tag: _reference.CONSTANT_TAG,
        length: 0,
        positional: EMPTY_POSITIONAL,
        named: EMPTY_NAMED
    };

    var VM = function () {
        function VM(runtime, scope, dynamicScope, elementStack) {
            var _this32 = this;

            (0, _emberBabel.classCallCheck)(this, VM);

            this.runtime = runtime;
            this.elementStack = elementStack;
            this.dynamicScopeStack = new _util.Stack();
            this.scopeStack = new _util.Stack();
            this.updatingOpcodeStack = new _util.Stack();
            this.cacheGroups = new _util.Stack();
            this.listBlockStack = new _util.Stack();
            this.s0 = null;
            this.s1 = null;
            this.t0 = null;
            this.t1 = null;
            this.v0 = null;
            this.heap = this.program.heap;
            this.constants = this.program.constants;
            this.elementStack = elementStack;
            this.scopeStack.push(scope);
            this.dynamicScopeStack.push(dynamicScope);
            this.args = new Arguments();
            this.inner = new LowLevelVM(EvaluationStack.empty(), this.heap, runtime.program, {
                debugBefore: function (opcode) {
                    return APPEND_OPCODES.debugBefore(_this32, opcode, opcode.type);
                },
                debugAfter: function (opcode, state) {
                    APPEND_OPCODES.debugAfter(_this32, opcode, opcode.type, state);
                }
            });
        }

        // Fetch a value from a register onto the stack
        VM.prototype.fetch = function fetch(register) {
            this.stack.push(this[_vm2.Register[register]]);
        };
        // Load a value from the stack into a register


        VM.prototype.load = function load(register) {
            this[_vm2.Register[register]] = this.stack.pop();
        };
        // Fetch a value from a register


        VM.prototype.fetchValue = function fetchValue(register) {
            return this[_vm2.Register[register]];
        };
        // Load a value into a register


        VM.prototype.loadValue = function loadValue(register, value) {
            this[_vm2.Register[register]] = value;
        };
        /**
         * Migrated to Inner
         */
        // Start a new frame and save $ra and $fp on the stack


        VM.prototype.pushFrame = function pushFrame() {
            this.inner.pushFrame();
        };
        // Restore $ra, $sp and $fp


        VM.prototype.popFrame = function popFrame() {
            this.inner.popFrame();
        };
        // Jump to an address in `program`


        VM.prototype.goto = function goto(offset) {
            this.inner.goto(offset);
        };
        // Save $pc into $ra, then jump to a new address in `program` (jal in MIPS)


        VM.prototype.call = function call(handle) {
            this.inner.call(handle);
        };
        // Put a specific `program` address in $ra


        VM.prototype.returnTo = function returnTo(offset) {
            this.inner.returnTo(offset);
        };
        // Return to the `program` address stored in $ra


        VM.prototype.return = function _return() {
            this.inner.return();
        };
        /**
         * End of migrated.
         */

        VM.initial = function initial(program, env, self, dynamicScope, elementStack, handle) {
            var scopeSize = program.heap.scopesizeof(handle);
            var scope = Scope.root(self, scopeSize);
            var vm = new VM({ program: program, env: env }, scope, dynamicScope, elementStack);
            vm.pc = vm.heap.getaddr(handle);
            vm.updatingOpcodeStack.push(new _util.LinkedList());
            return vm;
        };

        VM.empty = function empty(program, env, elementStack, handle) {
            var dynamicScope = {
                get: function () {
                    return UNDEFINED_REFERENCE;
                },
                set: function () {
                    return UNDEFINED_REFERENCE;
                },
                child: function () {
                    return dynamicScope;
                }
            };
            var vm = new VM({ program: program, env: env }, Scope.root(UNDEFINED_REFERENCE, 0), dynamicScope, elementStack);
            vm.updatingOpcodeStack.push(new _util.LinkedList());
            vm.pc = vm.heap.getaddr(handle);
            return vm;
        };

        VM.resume = function resume(_ref58, runtime, stack) {
            var scope = _ref58.scope,
                dynamicScope = _ref58.dynamicScope;

            return new VM(runtime, scope, dynamicScope, stack);
        };

        VM.prototype.capture = function capture(args) {
            return {
                dynamicScope: this.dynamicScope(),
                scope: this.scope(),
                stack: this.stack.capture(args)
            };
        };

        VM.prototype.beginCacheGroup = function beginCacheGroup() {
            this.cacheGroups.push(this.updating().tail());
        };

        VM.prototype.commitCacheGroup = function commitCacheGroup() {
            //        JumpIfNotModified(END)
            //        (head)
            //        (....)
            //        (tail)
            //        DidModify
            // END:   Noop
            var END = new LabelOpcode('END');
            var opcodes = this.updating();
            var marker = this.cacheGroups.pop();
            var head = marker ? opcodes.nextNode(marker) : opcodes.head();
            var tail = opcodes.tail();
            var tag = (0, _reference.combineSlice)(new _util.ListSlice(head, tail));
            var guard = new JumpIfNotModifiedOpcode(tag, END);
            opcodes.insertBefore(guard, head);
            opcodes.append(new DidModifyOpcode(guard));
            opcodes.append(END);
        };

        VM.prototype.enter = function enter(args) {
            var updating = new _util.LinkedList();
            var state = this.capture(args);
            var tracker = this.elements().pushUpdatableBlock();
            var tryOpcode = new TryOpcode(this.heap.gethandle(this.pc), state, this.runtime, tracker, updating);
            this.didEnter(tryOpcode);
        };

        VM.prototype.iterate = function iterate(memo, value) {
            var stack = this.stack;
            stack.push(value);
            stack.push(memo);
            var state = this.capture(2);
            var tracker = this.elements().pushUpdatableBlock();
            // let ip = this.ip;
            // this.ip = end + 4;
            // this.frames.push(ip);
            return new TryOpcode(this.heap.gethandle(this.pc), state, this.runtime, tracker, new _util.LinkedList());
        };

        VM.prototype.enterItem = function enterItem(key, opcode) {
            this.listBlock().map[key] = opcode;
            this.didEnter(opcode);
        };

        VM.prototype.enterList = function enterList(relativeStart) {
            var updating = new _util.LinkedList();
            var state = this.capture(0);
            var tracker = this.elements().pushBlockList(updating);
            var artifacts = this.stack.peek().artifacts;
            var addr = this.pc + relativeStart - this.currentOpSize;
            var start = this.heap.gethandle(addr);
            var opcode = new ListBlockOpcode(start, state, this.runtime, tracker, updating, artifacts);
            this.listBlockStack.push(opcode);
            this.didEnter(opcode);
        };

        VM.prototype.didEnter = function didEnter(opcode) {
            this.updateWith(opcode);
            this.updatingOpcodeStack.push(opcode.children);
        };

        VM.prototype.exit = function exit() {
            this.elements().popBlock();
            this.updatingOpcodeStack.pop();
            var parent = this.updating().tail();
            parent.didInitializeChildren();
        };

        VM.prototype.exitList = function exitList() {
            this.exit();
            this.listBlockStack.pop();
        };

        VM.prototype.updateWith = function updateWith(opcode) {
            this.updating().append(opcode);
        };

        VM.prototype.listBlock = function listBlock() {
            return this.listBlockStack.current;
        };

        VM.prototype.updating = function updating() {
            return this.updatingOpcodeStack.current;
        };

        VM.prototype.elements = function elements() {
            return this.elementStack;
        };

        VM.prototype.scope = function scope() {
            return this.scopeStack.current;
        };

        VM.prototype.dynamicScope = function dynamicScope() {
            return this.dynamicScopeStack.current;
        };

        VM.prototype.pushChildScope = function pushChildScope() {
            this.scopeStack.push(this.scope().child());
        };

        VM.prototype.pushDynamicScope = function pushDynamicScope() {
            var child = this.dynamicScope().child();
            this.dynamicScopeStack.push(child);
            return child;
        };

        VM.prototype.pushRootScope = function pushRootScope(size, bindCaller) {
            var scope = Scope.sized(size);
            if (bindCaller) scope.bindCallerScope(this.scope());
            this.scopeStack.push(scope);
            return scope;
        };

        VM.prototype.pushScope = function pushScope(scope) {
            this.scopeStack.push(scope);
        };

        VM.prototype.popScope = function popScope() {
            this.scopeStack.pop();
        };

        VM.prototype.popDynamicScope = function popDynamicScope() {
            this.dynamicScopeStack.pop();
        };

        VM.prototype.newDestroyable = function newDestroyable(d) {
            this.elements().didAddDestroyable(d);
        };
        /// SCOPE HELPERS


        VM.prototype.getSelf = function getSelf() {
            return this.scope().getSelf();
        };

        VM.prototype.referenceForSymbol = function referenceForSymbol(symbol) {
            return this.scope().getSymbol(symbol);
        };
        /// EXECUTION


        VM.prototype.execute = function execute(start, initialize) {
            this.pc = this.heap.getaddr(start);
            if (initialize) initialize(this);
            var result = void 0;
            while (true) {
                result = this.next();
                if (result.done) break;
            }
            return result.value;
        };

        VM.prototype.next = function next() {
            var env = this.env,
                program = this.program,
                updatingOpcodeStack = this.updatingOpcodeStack,
                elementStack = this.elementStack;

            var opcode = this.inner.nextStatement();
            var result = void 0;
            if (opcode !== null) {
                this.inner.evaluateOuter(opcode, this);
                result = { done: false, value: null };
            } else {
                // Unload the stack
                this.stack.reset();
                result = {
                    done: true,
                    value: new RenderResult(env, program, updatingOpcodeStack.pop(), elementStack.popBlock())
                };
            }
            return result;
        };

        VM.prototype.bindDynamicScope = function bindDynamicScope(names) {
            var scope = this.dynamicScope();
            for (var i = names.length - 1; i >= 0; i--) {
                var name = this.constants.getString(names[i]);
                scope.set(name, this.stack.pop());
            }
        };

        (0, _emberBabel.createClass)(VM, [{
            key: 'stack',
            get: function () {
                return this.inner.stack;
            },
            set: function (value) {
                this.inner.stack = value;
            }
            /* Registers */

        }, {
            key: 'currentOpSize',
            set: function (value) {
                this.inner.currentOpSize = value;
            },
            get: function () {
                return this.inner.currentOpSize;
            }
        }, {
            key: 'pc',
            get: function () {
                return this.inner.pc;
            },
            set: function (value) {

                this.inner.pc = value;
            }
        }, {
            key: 'ra',
            get: function () {
                return this.inner.ra;
            },
            set: function (value) {
                this.inner.ra = value;
            }
        }, {
            key: 'fp',
            get: function () {
                return this.stack.fp;
            },
            set: function (fp) {
                this.stack.fp = fp;
            }
        }, {
            key: 'sp',
            get: function () {
                return this.stack.sp;
            },
            set: function (sp) {
                this.stack.sp = sp;
            }
        }, {
            key: 'program',
            get: function () {
                return this.runtime.program;
            }
        }, {
            key: 'env',
            get: function () {
                return this.runtime.env;
            }
        }]);

        return VM;
    }();

    var TemplateIteratorImpl = function () {
        function TemplateIteratorImpl(vm) {
            (0, _emberBabel.classCallCheck)(this, TemplateIteratorImpl);

            this.vm = vm;
        }

        TemplateIteratorImpl.prototype.next = function next() {
            return this.vm.next();
        };

        return TemplateIteratorImpl;
    }();

    function renderMain(program, env, self, dynamicScope, builder, handle) {
        var vm = VM.initial(program, env, self, dynamicScope, builder, handle);
        return new TemplateIteratorImpl(vm);
    }
    /**
     * Returns a TemplateIterator configured to render a root component.
     */
    function renderComponent(program, env, builder, main, name) {
        var args = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};

        var vm = VM.empty(program, env, builder, main);
        var resolver = vm.constants.resolver;

        var definition = resolveComponent(resolver, name, null);
        var manager = definition.manager,
            state = definition.state;

        var capabilities = capabilityFlagsFrom(manager.getCapabilities(state));
        var invocation = void 0;
        if (hasStaticLayoutCapability(capabilities, manager)) {
            invocation = manager.getLayout(state, resolver);
        } else {
            throw new Error('Cannot invoke components with dynamic layouts as a root component.');
        }
        // Get a list of tuples of argument names and references, like
        // [['title', reference], ['name', reference]]
        var argList = Object.keys(args).map(function (key) {
            return [key, args[key]];
        });
        var blockNames = ['main', 'else', 'attrs'];
        // Prefix argument names with `@` symbol
        var argNames = argList.map(function (_ref59) {
            var name = _ref59[0];
            return '@' + name;
        });
        vm.pushFrame();
        // Push blocks on to the stack, three stack values per block
        for (var i = 0; i < 3 * blockNames.length; i++) {
            vm.stack.push(null);
        }
        vm.stack.push(null);
        // For each argument, push its backing reference on to the stack
        argList.forEach(function (_ref60) {
            var reference = _ref60[1];

            vm.stack.push(reference);
        });
        // Configure VM based on blocks and args just pushed on to the stack.
        vm.args.setup(vm.stack, argNames, blockNames, 0, false);
        // Needed for the Op.Main opcode: arguments, component invocation object, and
        // component definition.
        vm.stack.push(vm.args);
        vm.stack.push(invocation);
        vm.stack.push(definition);
        return new TemplateIteratorImpl(vm);
    }

    var DynamicVarReference = function () {
        function DynamicVarReference(scope, nameRef) {
            (0, _emberBabel.classCallCheck)(this, DynamicVarReference);

            this.scope = scope;
            this.nameRef = nameRef;
            var varTag = this.varTag = _reference.UpdatableTag.create(_reference.CONSTANT_TAG);
            this.tag = (0, _reference.combine)([nameRef.tag, varTag]);
        }

        DynamicVarReference.prototype.value = function value() {
            return this.getVar().value();
        };

        DynamicVarReference.prototype.get = function get(key) {
            return this.getVar().get(key);
        };

        DynamicVarReference.prototype.getVar = function getVar() {
            var name = String(this.nameRef.value());
            var ref = this.scope.get(name);
            this.varTag.inner.update(ref.tag);
            return ref;
        };

        return DynamicVarReference;
    }();

    function getDynamicVar(vm, args) {
        var scope = vm.dynamicScope();
        var nameRef = args.positional.at(0);
        return new DynamicVarReference(scope, nameRef);
    }

    /** @internal */
    var DEFAULT_CAPABILITIES = {
        dynamicLayout: true,
        dynamicTag: true,
        prepareArgs: true,
        createArgs: true,
        attributeHook: false,
        elementHook: false,
        dynamicScope: true,
        createCaller: false,
        updateHook: true,
        createInstance: true
    };
    var MINIMAL_CAPABILITIES = {
        dynamicLayout: false,
        dynamicTag: false,
        prepareArgs: false,
        createArgs: false,
        attributeHook: false,
        elementHook: false,
        dynamicScope: false,
        createCaller: false,
        updateHook: false,
        createInstance: false
    };

    var RehydratingCursor = function (_Cursor) {
        (0, _emberBabel.inherits)(RehydratingCursor, _Cursor);

        function RehydratingCursor(element, nextSibling, startingBlockDepth) {
            (0, _emberBabel.classCallCheck)(this, RehydratingCursor);

            var _this33 = (0, _emberBabel.possibleConstructorReturn)(this, _Cursor.call(this, element, nextSibling));

            _this33.startingBlockDepth = startingBlockDepth;
            _this33.candidate = null;
            _this33.injectedOmittedNode = false;
            _this33.openBlockDepth = startingBlockDepth - 1;
            return _this33;
        }

        return RehydratingCursor;
    }(Cursor);

    var RehydrateBuilder = function (_NewElementBuilder) {
        (0, _emberBabel.inherits)(RehydrateBuilder, _NewElementBuilder);

        // private candidate: Option<Simple.Node> = null;
        function RehydrateBuilder(env, parentNode, nextSibling) {
            (0, _emberBabel.classCallCheck)(this, RehydrateBuilder);

            var _this34 = (0, _emberBabel.possibleConstructorReturn)(this, _NewElementBuilder.call(this, env, parentNode, nextSibling));

            _this34.unmatchedAttributes = null;
            _this34.blockDepth = 0;
            if (nextSibling) throw new Error('Rehydration with nextSibling not supported');
            var node = _this34.currentCursor.element.firstChild;
            while (node !== null) {
                if (isComment(node) && (0, _util.isSerializationFirstNode)(node)) {
                    break;
                }
                node = node.nextSibling;
            }

            _this34.candidate = node;
            return _this34;
        }

        RehydrateBuilder.prototype.pushElement = function pushElement(element, nextSibling) {
            var _blockDepth = this.blockDepth,
                blockDepth = _blockDepth === undefined ? 0 : _blockDepth;

            var cursor = new RehydratingCursor(element, nextSibling, blockDepth);
            var currentCursor = this.currentCursor;
            if (currentCursor) {
                if (currentCursor.candidate) {
                    /**
                     * <div>   <---------------  currentCursor.element
                     *   <!--%+b:1%-->
                     *   <div> <---------------  currentCursor.candidate -> cursor.element
                     *     <!--%+b:2%--> <-  currentCursor.candidate.firstChild -> cursor.candidate
                     *     Foo
                     *     <!--%-b:2%-->
                     *   </div>
                     *   <!--%-b:1%-->  <--  becomes currentCursor.candidate
                     */
                    // where to rehydrate from if we are in rehydration mode
                    cursor.candidate = element.firstChild;
                    // where to continue when we pop
                    currentCursor.candidate = element.nextSibling;
                }
            }
            this.cursorStack.push(cursor);
        };

        RehydrateBuilder.prototype.clearMismatch = function clearMismatch(candidate) {
            var current = candidate;
            var currentCursor = this.currentCursor;
            if (currentCursor !== null) {
                var openBlockDepth = currentCursor.openBlockDepth;
                if (openBlockDepth >= currentCursor.startingBlockDepth) {
                    while (current && !(isComment(current) && getCloseBlockDepth(current) === openBlockDepth)) {
                        current = this.remove(current);
                    }
                } else {
                    while (current !== null) {
                        current = this.remove(current);
                    }
                }
                // current cursor parentNode should be openCandidate if element
                // or openCandidate.parentNode if comment
                currentCursor.nextSibling = current;
                // disable rehydration until we popElement or closeBlock for openBlockDepth
                currentCursor.candidate = null;
            }
        };

        RehydrateBuilder.prototype.__openBlock = function __openBlock() {
            var currentCursor = this.currentCursor;

            if (currentCursor === null) return;
            var blockDepth = this.blockDepth;
            this.blockDepth++;
            var candidate = currentCursor.candidate;

            if (candidate === null) return;
            if (isComment(candidate) && getOpenBlockDepth(candidate) === blockDepth) {
                currentCursor.candidate = this.remove(candidate);
                currentCursor.openBlockDepth = blockDepth;
            } else {
                this.clearMismatch(candidate);
            }
        };

        RehydrateBuilder.prototype.__closeBlock = function __closeBlock() {
            var currentCursor = this.currentCursor;

            if (currentCursor === null) return;
            // openBlock is the last rehydrated open block
            var openBlockDepth = currentCursor.openBlockDepth;
            // this currently is the expected next open block depth
            this.blockDepth--;
            var candidate = currentCursor.candidate;
            // rehydrating

            if (candidate !== null) {

                if (isComment(candidate) && getCloseBlockDepth(candidate) === openBlockDepth) {
                    currentCursor.candidate = this.remove(candidate);
                    currentCursor.openBlockDepth--;
                } else {
                    this.clearMismatch(candidate);
                }
                // if the openBlockDepth matches the blockDepth we just closed to
                // then restore rehydration
            }
            if (currentCursor.openBlockDepth === this.blockDepth) {

                currentCursor.candidate = this.remove(currentCursor.nextSibling);
                currentCursor.openBlockDepth--;
            }
        };

        RehydrateBuilder.prototype.__appendNode = function __appendNode(node) {
            var candidate = this.candidate;
            // This code path is only used when inserting precisely one node. It needs more
            // comparison logic, but we can probably lean on the cases where this code path
            // is actually used.

            if (candidate) {
                return candidate;
            } else {
                return _NewElementBuilder.prototype.__appendNode.call(this, node);
            }
        };

        RehydrateBuilder.prototype.__appendHTML = function __appendHTML(html) {
            var candidateBounds = this.markerBounds();
            if (candidateBounds) {
                var first = candidateBounds.firstNode();
                var last = candidateBounds.lastNode();
                var newBounds = bounds(this.element, first.nextSibling, last.previousSibling);
                var possibleEmptyMarker = this.remove(first);
                this.remove(last);
                if (possibleEmptyMarker !== null && isEmpty$1(possibleEmptyMarker)) {
                    this.candidate = this.remove(possibleEmptyMarker);
                    if (this.candidate !== null) {
                        this.clearMismatch(this.candidate);
                    }
                }
                return newBounds;
            } else {
                return _NewElementBuilder.prototype.__appendHTML.call(this, html);
            }
        };

        RehydrateBuilder.prototype.remove = function remove(node) {
            var element = node.parentNode;
            var next = node.nextSibling;
            element.removeChild(node);
            return next;
        };

        RehydrateBuilder.prototype.markerBounds = function markerBounds() {
            var _candidate = this.candidate;
            if (_candidate && isMarker(_candidate)) {
                var first = _candidate;
                var last = first.nextSibling;
                while (last && !isMarker(last)) {
                    last = last.nextSibling;
                }
                return bounds(this.element, first, last);
            } else {
                return null;
            }
        };

        RehydrateBuilder.prototype.__appendText = function __appendText(string) {
            var candidate = this.candidate;

            if (candidate) {
                if (isTextNode(candidate)) {
                    if (candidate.nodeValue !== string) {
                        candidate.nodeValue = string;
                    }
                    this.candidate = candidate.nextSibling;
                    return candidate;
                } else if (candidate && (isSeparator(candidate) || isEmpty$1(candidate))) {
                    this.candidate = candidate.nextSibling;
                    this.remove(candidate);
                    return this.__appendText(string);
                } else if (isEmpty$1(candidate)) {
                    var next = this.remove(candidate);
                    this.candidate = next;
                    var text = this.dom.createTextNode(string);
                    this.dom.insertBefore(this.element, text, next);
                    return text;
                } else {
                    this.clearMismatch(candidate);
                    return _NewElementBuilder.prototype.__appendText.call(this, string);
                }
            } else {
                return _NewElementBuilder.prototype.__appendText.call(this, string);
            }
        };

        RehydrateBuilder.prototype.__appendComment = function __appendComment(string) {
            var _candidate = this.candidate;
            if (_candidate && isComment(_candidate)) {
                if (_candidate.nodeValue !== string) {
                    _candidate.nodeValue = string;
                }
                this.candidate = _candidate.nextSibling;
                return _candidate;
            } else if (_candidate) {
                this.clearMismatch(_candidate);
            }
            return _NewElementBuilder.prototype.__appendComment.call(this, string);
        };

        RehydrateBuilder.prototype.__openElement = function __openElement(tag) {
            var _candidate = this.candidate;
            if (_candidate && isElement(_candidate) && isSameNodeType(_candidate, tag)) {
                this.unmatchedAttributes = [].slice.call(_candidate.attributes);
                return _candidate;
            } else if (_candidate) {
                if (isElement(_candidate) && _candidate.tagName === 'TBODY') {
                    this.pushElement(_candidate, null);
                    this.currentCursor.injectedOmittedNode = true;
                    return this.__openElement(tag);
                }
                this.clearMismatch(_candidate);
            }
            return _NewElementBuilder.prototype.__openElement.call(this, tag);
        };

        RehydrateBuilder.prototype.__setAttribute = function __setAttribute(name, value, namespace) {
            var unmatched = this.unmatchedAttributes;
            if (unmatched) {
                var attr = findByName(unmatched, name);
                if (attr) {
                    if (attr.value !== value) {
                        attr.value = value;
                    }
                    unmatched.splice(unmatched.indexOf(attr), 1);
                    return;
                }
            }
            return _NewElementBuilder.prototype.__setAttribute.call(this, name, value, namespace);
        };

        RehydrateBuilder.prototype.__setProperty = function __setProperty(name, value) {
            var unmatched = this.unmatchedAttributes;
            if (unmatched) {
                var attr = findByName(unmatched, name);
                if (attr) {
                    if (attr.value !== value) {
                        attr.value = value;
                    }
                    unmatched.splice(unmatched.indexOf(attr), 1);
                    return;
                }
            }
            return _NewElementBuilder.prototype.__setProperty.call(this, name, value);
        };

        RehydrateBuilder.prototype.__flushElement = function __flushElement(parent, constructing) {
            var unmatched = this.unmatchedAttributes;

            if (unmatched) {
                for (var i = 0; i < unmatched.length; i++) {
                    this.constructing.removeAttribute(unmatched[i].name);
                }
                this.unmatchedAttributes = null;
            } else {
                _NewElementBuilder.prototype.__flushElement.call(this, parent, constructing);
            }
        };

        RehydrateBuilder.prototype.willCloseElement = function willCloseElement() {
            var candidate = this.candidate,
                currentCursor = this.currentCursor;

            if (candidate !== null) {
                this.clearMismatch(candidate);
            }
            if (currentCursor && currentCursor.injectedOmittedNode) {
                this.popElement();
            }
            _NewElementBuilder.prototype.willCloseElement.call(this);
        };

        RehydrateBuilder.prototype.getMarker = function getMarker(element, guid) {
            var marker = element.querySelector('script[glmr="' + guid + '"]');
            if (marker) {
                return marker;
            }
            throw new Error('Cannot find serialized cursor for `in-element`');
        };

        RehydrateBuilder.prototype.__pushRemoteElement = function __pushRemoteElement(element, cursorId) {
            var nextSibling = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

            var marker = this.getMarker(element, cursorId);
            if (marker.parentNode === element) {
                var currentCursor = this.currentCursor;
                var candidate = currentCursor.candidate;
                this.pushElement(element, nextSibling);
                currentCursor.candidate = candidate;
                this.candidate = this.remove(marker);
                var tracker = new RemoteBlockTracker(element);
                this.pushBlockTracker(tracker, true);
            }
        };

        RehydrateBuilder.prototype.didAppendBounds = function didAppendBounds(bounds$$1) {
            _NewElementBuilder.prototype.didAppendBounds.call(this, bounds$$1);
            if (this.candidate) {
                var last = bounds$$1.lastNode();
                this.candidate = last && last.nextSibling;
            }
            return bounds$$1;
        };

        (0, _emberBabel.createClass)(RehydrateBuilder, [{
            key: 'currentCursor',
            get: function () {
                return this.cursorStack.current;
            }
        }, {
            key: 'candidate',
            get: function () {
                if (this.currentCursor) {
                    return this.currentCursor.candidate;
                }
                return null;
            },
            set: function (node) {
                this.currentCursor.candidate = node;
            }
        }]);

        return RehydrateBuilder;
    }(NewElementBuilder);

    function isTextNode(node) {
        return node.nodeType === 3;
    }
    function isComment(node) {
        return node.nodeType === 8;
    }
    function getOpenBlockDepth(node) {
        var boundsDepth = node.nodeValue.match(/^%\+b:(\d+)%$/);
        if (boundsDepth && boundsDepth[1]) {
            return Number(boundsDepth[1]);
        } else {
            return null;
        }
    }
    function getCloseBlockDepth(node) {
        var boundsDepth = node.nodeValue.match(/^%\-b:(\d+)%$/);
        if (boundsDepth && boundsDepth[1]) {
            return Number(boundsDepth[1]);
        } else {
            return null;
        }
    }
    function isElement(node) {
        return node.nodeType === 1;
    }
    function isMarker(node) {
        return node.nodeType === 8 && node.nodeValue === '%glmr%';
    }
    function isSeparator(node) {
        return node.nodeType === 8 && node.nodeValue === '%|%';
    }
    function isEmpty$1(node) {
        return node.nodeType === 8 && node.nodeValue === '% %';
    }
    function isSameNodeType(candidate, tag) {
        if (candidate.namespaceURI === SVG_NAMESPACE$1) {
            return candidate.tagName === tag;
        }
        return candidate.tagName === tag.toUpperCase();
    }
    function findByName(array, name) {
        for (var i = 0; i < array.length; i++) {
            var attr = array[i];
            if (attr.name === name) return attr;
        }
        return undefined;
    }
    function rehydrationBuilder(env, cursor) {
        return RehydrateBuilder.forInitialRender(env, cursor);
    }

    exports.renderMain = renderMain;
    exports.renderComponent = renderComponent;
    exports.NULL_REFERENCE = NULL_REFERENCE;
    exports.UNDEFINED_REFERENCE = UNDEFINED_REFERENCE;
    exports.PrimitiveReference = PrimitiveReference;
    exports.ConditionalReference = ConditionalReference;
    exports.setDebuggerCallback = setDebuggerCallback;
    exports.resetDebuggerCallback = resetDebuggerCallback;
    exports.getDynamicVar = getDynamicVar;
    exports.LowLevelVM = VM;
    exports.UpdatingVM = UpdatingVM;
    exports.RenderResult = RenderResult;
    exports.SimpleDynamicAttribute = SimpleDynamicAttribute;
    exports.DynamicAttribute = DynamicAttribute;
    exports.EMPTY_ARGS = EMPTY_ARGS;
    exports.Scope = Scope;
    exports.Environment = Environment;
    exports.DefaultEnvironment = DefaultEnvironment;
    exports.DEFAULT_CAPABILITIES = DEFAULT_CAPABILITIES;
    exports.MINIMAL_CAPABILITIES = MINIMAL_CAPABILITIES;
    exports.CurriedComponentDefinition = CurriedComponentDefinition;
    exports.isCurriedComponentDefinition = isCurriedComponentDefinition;
    exports.curry = curry;
    exports.DOMChanges = helper$1;
    exports.SVG_NAMESPACE = SVG_NAMESPACE$1;
    exports.IDOMChanges = DOMChanges;
    exports.DOMTreeConstruction = DOMTreeConstruction;
    exports.isWhitespace = isWhitespace;
    exports.insertHTMLBefore = _insertHTMLBefore;
    exports.normalizeProperty = normalizeProperty;
    exports.NewElementBuilder = NewElementBuilder;
    exports.clientBuilder = clientBuilder;
    exports.rehydrationBuilder = rehydrationBuilder;
    exports.RehydrateBuilder = RehydrateBuilder;
    exports.ConcreteBounds = ConcreteBounds;
    exports.Cursor = Cursor;
    exports.capabilityFlagsFrom = capabilityFlagsFrom;
    exports.hasCapability = hasCapability;
});
enifed('@glimmer/util', ['exports', 'ember-babel'], function (exports, _emberBabel) {
    'use strict';

    exports.unreachable = exports.expect = exports.unwrap = exports.EMPTY_ARRAY = exports.ListSlice = exports.ListNode = exports.LinkedList = exports.EMPTY_SLICE = exports.dict = exports.DictSet = exports.Stack = exports.SERIALIZATION_FIRST_NODE_STRING = exports.isSerializationFirstNode = exports.initializeGuid = exports.ensureGuid = exports.fillNulls = exports.assign = exports.assert = undefined;

    function unwrap(val) {
        if (val === null || val === undefined) throw new Error('Expected value to be present');
        return val;
    }
    function expect(val, message) {
        if (val === null || val === undefined) throw new Error(message);
        return val;
    }
    function unreachable() {
        var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'unreachable';

        return new Error(message);
    }

    // import Logger from './logger';
    // let alreadyWarned = false;
    function debugAssert(test, msg) {
        // if (!alreadyWarned) {
        //   alreadyWarned = true;
        //   Logger.warn("Don't leave debug assertions on in public builds");
        // }
        if (!test) {
            throw new Error(msg || 'assertion failure');
        }
    }

    var objKeys = Object.keys;

    function assign(obj) {
        for (var i = 1; i < arguments.length; i++) {
            var assignment = arguments[i];
            if (assignment === null || typeof assignment !== 'object') continue;
            var keys = objKeys(assignment);
            for (var j = 0; j < keys.length; j++) {
                var key = keys[j];
                obj[key] = assignment[key];
            }
        }
        return obj;
    }
    function fillNulls(count) {
        var arr = new Array(count);
        for (var i = 0; i < count; i++) {
            arr[i] = null;
        }
        return arr;
    }

    var GUID = 0;
    function initializeGuid(object) {
        return object._guid = ++GUID;
    }
    function ensureGuid(object) {
        return object._guid || initializeGuid(object);
    }

    var SERIALIZATION_FIRST_NODE_STRING = '%+b:0%';
    function isSerializationFirstNode(node) {
        return node.nodeValue === SERIALIZATION_FIRST_NODE_STRING;
    }

    function dict() {
        return Object.create(null);
    }

    var DictSet = function () {
        function DictSet() {
            (0, _emberBabel.classCallCheck)(this, DictSet);

            this.dict = dict();
        }

        DictSet.prototype.add = function add(obj) {
            if (typeof obj === 'string') this.dict[obj] = obj;else this.dict[ensureGuid(obj)] = obj;
            return this;
        };

        DictSet.prototype.delete = function _delete(obj) {
            if (typeof obj === 'string') delete this.dict[obj];else if (obj._guid) delete this.dict[obj._guid];
        };

        return DictSet;
    }();

    var Stack = function () {
        function Stack() {
            (0, _emberBabel.classCallCheck)(this, Stack);

            this.stack = [];
            this.current = null;
        }

        Stack.prototype.push = function push(item) {
            this.current = item;
            this.stack.push(item);
        };

        Stack.prototype.pop = function pop() {
            var item = this.stack.pop();
            var len = this.stack.length;
            this.current = len === 0 ? null : this.stack[len - 1];
            return item === undefined ? null : item;
        };

        Stack.prototype.isEmpty = function isEmpty() {
            return this.stack.length === 0;
        };

        (0, _emberBabel.createClass)(Stack, [{
            key: 'size',
            get: function () {
                return this.stack.length;
            }
        }]);

        return Stack;
    }();

    var ListNode = function ListNode(value) {
        (0, _emberBabel.classCallCheck)(this, ListNode);

        this.next = null;
        this.prev = null;
        this.value = value;
    };

    var LinkedList = function () {
        function LinkedList() {
            (0, _emberBabel.classCallCheck)(this, LinkedList);

            this.clear();
        }

        LinkedList.prototype.head = function head() {
            return this._head;
        };

        LinkedList.prototype.tail = function tail() {
            return this._tail;
        };

        LinkedList.prototype.clear = function clear() {
            this._head = this._tail = null;
        };

        LinkedList.prototype.toArray = function toArray() {
            var out = [];
            this.forEachNode(function (n) {
                return out.push(n);
            });
            return out;
        };

        LinkedList.prototype.nextNode = function nextNode(node) {
            return node.next;
        };

        LinkedList.prototype.forEachNode = function forEachNode(callback) {
            var node = this._head;
            while (node !== null) {
                callback(node);
                node = node.next;
            }
        };

        LinkedList.prototype.insertBefore = function insertBefore(node) {
            var reference = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            if (reference === null) return this.append(node);
            if (reference.prev) reference.prev.next = node;else this._head = node;
            node.prev = reference.prev;
            node.next = reference;
            reference.prev = node;
            return node;
        };

        LinkedList.prototype.append = function append(node) {
            var tail = this._tail;
            if (tail) {
                tail.next = node;
                node.prev = tail;
                node.next = null;
            } else {
                this._head = node;
            }
            return this._tail = node;
        };

        LinkedList.prototype.remove = function remove(node) {
            if (node.prev) node.prev.next = node.next;else this._head = node.next;
            if (node.next) node.next.prev = node.prev;else this._tail = node.prev;
            return node;
        };

        return LinkedList;
    }();

    var ListSlice = function () {
        function ListSlice(head, tail) {
            (0, _emberBabel.classCallCheck)(this, ListSlice);

            this._head = head;
            this._tail = tail;
        }

        ListSlice.prototype.forEachNode = function forEachNode(callback) {
            var node = this._head;
            while (node !== null) {
                callback(node);
                node = this.nextNode(node);
            }
        };

        ListSlice.prototype.head = function head() {
            return this._head;
        };

        ListSlice.prototype.tail = function tail() {
            return this._tail;
        };

        ListSlice.prototype.toArray = function toArray() {
            var out = [];
            this.forEachNode(function (n) {
                return out.push(n);
            });
            return out;
        };

        ListSlice.prototype.nextNode = function nextNode(node) {
            if (node === this._tail) return null;
            return node.next;
        };

        return ListSlice;
    }();

    var EMPTY_SLICE = new ListSlice(null, null);

    var EMPTY_ARRAY = Object.freeze([]);

    exports.assert = debugAssert;
    exports.assign = assign;
    exports.fillNulls = fillNulls;
    exports.ensureGuid = ensureGuid;
    exports.initializeGuid = initializeGuid;
    exports.isSerializationFirstNode = isSerializationFirstNode;
    exports.SERIALIZATION_FIRST_NODE_STRING = SERIALIZATION_FIRST_NODE_STRING;
    exports.Stack = Stack;
    exports.DictSet = DictSet;
    exports.dict = dict;
    exports.EMPTY_SLICE = EMPTY_SLICE;
    exports.LinkedList = LinkedList;
    exports.ListNode = ListNode;
    exports.ListSlice = ListSlice;
    exports.EMPTY_ARRAY = EMPTY_ARRAY;
    exports.unwrap = unwrap;
    exports.expect = expect;
    exports.unreachable = unreachable;
});
enifed("@glimmer/vm", ["exports"], function (exports) {
    "use strict";

    /**
     * Registers
     *
     * For the most part, these follows MIPS naming conventions, however the
     * register numbers are different.
     */
    var Register;
    (function (Register) {
        // $0 or $pc (program counter): pointer into `program` for the next insturction; -1 means exit
        Register[Register["pc"] = 0] = "pc";
        // $1 or $ra (return address): pointer into `program` for the return
        Register[Register["ra"] = 1] = "ra";
        // $2 or $fp (frame pointer): pointer into the `evalStack` for the base of the stack
        Register[Register["fp"] = 2] = "fp";
        // $3 or $sp (stack pointer): pointer into the `evalStack` for the top of the stack
        Register[Register["sp"] = 3] = "sp";
        // $4-$5 or $s0-$s1 (saved): callee saved general-purpose registers
        Register[Register["s0"] = 4] = "s0";
        Register[Register["s1"] = 5] = "s1";
        // $6-$7 or $t0-$t1 (temporaries): caller saved general-purpose registers
        Register[Register["t0"] = 6] = "t0";
        Register[Register["t1"] = 7] = "t1";
        // $8 or $v0 (return value)
        Register[Register["v0"] = 8] = "v0";
    })(Register || (exports.Register = Register = {}));

    exports.Register = Register;
});
enifed("@glimmer/wire-format", ["exports"], function (exports) {
    "use strict";

    var Opcodes;
    (function (Opcodes) {
        // Statements
        Opcodes[Opcodes["Text"] = 0] = "Text";
        Opcodes[Opcodes["Append"] = 1] = "Append";
        Opcodes[Opcodes["Comment"] = 2] = "Comment";
        Opcodes[Opcodes["Modifier"] = 3] = "Modifier";
        Opcodes[Opcodes["Block"] = 4] = "Block";
        Opcodes[Opcodes["Component"] = 5] = "Component";
        Opcodes[Opcodes["DynamicComponent"] = 6] = "DynamicComponent";
        Opcodes[Opcodes["OpenElement"] = 7] = "OpenElement";
        Opcodes[Opcodes["OpenSplattedElement"] = 8] = "OpenSplattedElement";
        Opcodes[Opcodes["FlushElement"] = 9] = "FlushElement";
        Opcodes[Opcodes["CloseElement"] = 10] = "CloseElement";
        Opcodes[Opcodes["StaticAttr"] = 11] = "StaticAttr";
        Opcodes[Opcodes["DynamicAttr"] = 12] = "DynamicAttr";
        Opcodes[Opcodes["AttrSplat"] = 13] = "AttrSplat";
        Opcodes[Opcodes["Yield"] = 14] = "Yield";
        Opcodes[Opcodes["Partial"] = 15] = "Partial";
        Opcodes[Opcodes["DynamicArg"] = 16] = "DynamicArg";
        Opcodes[Opcodes["StaticArg"] = 17] = "StaticArg";
        Opcodes[Opcodes["TrustingAttr"] = 18] = "TrustingAttr";
        Opcodes[Opcodes["Debugger"] = 19] = "Debugger";
        Opcodes[Opcodes["ClientSideStatement"] = 20] = "ClientSideStatement";
        // Expressions
        Opcodes[Opcodes["Unknown"] = 21] = "Unknown";
        Opcodes[Opcodes["Get"] = 22] = "Get";
        Opcodes[Opcodes["MaybeLocal"] = 23] = "MaybeLocal";
        Opcodes[Opcodes["HasBlock"] = 24] = "HasBlock";
        Opcodes[Opcodes["HasBlockParams"] = 25] = "HasBlockParams";
        Opcodes[Opcodes["Undefined"] = 26] = "Undefined";
        Opcodes[Opcodes["Helper"] = 27] = "Helper";
        Opcodes[Opcodes["Concat"] = 28] = "Concat";
        Opcodes[Opcodes["ClientSideExpression"] = 29] = "ClientSideExpression";
    })(Opcodes || (exports.Ops = Opcodes = {}));

    function is(variant) {
        return function (value) {
            return Array.isArray(value) && value[0] === variant;
        };
    }
    // Statements
    var isFlushElement = is(Opcodes.FlushElement);
    var isAttrSplat = is(Opcodes.AttrSplat);
    function isAttribute(val) {
        return val[0] === Opcodes.StaticAttr || val[0] === Opcodes.DynamicAttr || val[0] === Opcodes.TrustingAttr;
    }
    function isArgument(val) {
        return val[0] === Opcodes.StaticArg || val[0] === Opcodes.DynamicArg;
    }
    // Expressions
    var isGet = is(Opcodes.Get);
    var isMaybeLocal = is(Opcodes.MaybeLocal);

    exports.is = is;
    exports.isFlushElement = isFlushElement;
    exports.isAttrSplat = isAttrSplat;
    exports.isAttribute = isAttribute;
    exports.isArgument = isArgument;
    exports.isGet = isGet;
    exports.isMaybeLocal = isMaybeLocal;
    exports.Ops = Opcodes;
});
enifed('backburner', ['exports', 'ember-babel'], function (exports, _emberBabel) {
    'use strict';

    exports.buildPlatform = undefined;

    var SET_TIMEOUT = setTimeout;
    var NOOP = function () {};
    function buildPlatform(flush) {
        var next = void 0;
        var clearNext = NOOP;
        if (typeof MutationObserver === 'function') {
            var iterations = 0;
            var observer = new MutationObserver(flush);
            var node = document.createTextNode('');
            observer.observe(node, { characterData: true });
            next = function () {
                iterations = ++iterations % 2;
                node.data = '' + iterations;
                return iterations;
            };
        } else if (typeof Promise === 'function') {
            var autorunPromise = Promise.resolve();
            next = function () {
                return autorunPromise.then(flush);
            };
        } else {
            next = function () {
                return SET_TIMEOUT(flush, 0);
            };
        }
        return {
            setTimeout: function (fn, ms) {
                return setTimeout(fn, ms);
            },
            clearTimeout: function (timerId) {
                return clearTimeout(timerId);
            },
            now: function () {
                return Date.now();
            },

            next: next,
            clearNext: clearNext
        };
    }

    var NUMBER = /\d+/;
    var TIMERS_OFFSET = 6;
    function isCoercableNumber(suspect) {
        var type = typeof suspect;
        return type === 'number' && suspect === suspect || type === 'string' && NUMBER.test(suspect);
    }
    function getOnError(options) {
        return options.onError || options.onErrorTarget && options.onErrorTarget[options.onErrorMethod];
    }
    function findItem(target, method, collection) {
        var index = -1;
        for (var i = 0, l = collection.length; i < l; i += 4) {
            if (collection[i] === target && collection[i + 1] === method) {
                index = i;
                break;
            }
        }
        return index;
    }
    function findTimerItem(target, method, collection) {
        var index = -1;
        for (var i = 2, l = collection.length; i < l; i += 6) {
            if (collection[i] === target && collection[i + 1] === method) {
                index = i - 2;
                break;
            }
        }
        return index;
    }
    function getQueueItems(items, queueItemLength) {
        var queueItemPositionOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

        var queueItems = [];
        for (var i = 0; i < items.length; i += queueItemLength) {
            var maybeError = items[i + 3 /* stack */ + queueItemPositionOffset];
            var queueItem = {
                target: items[i + 0 /* target */ + queueItemPositionOffset],
                method: items[i + 1 /* method */ + queueItemPositionOffset],
                args: items[i + 2 /* args */ + queueItemPositionOffset],
                stack: maybeError !== undefined && 'stack' in maybeError ? maybeError.stack : ''
            };
            queueItems.push(queueItem);
        }
        return queueItems;
    }

    function binarySearch(time, timers) {
        var start = 0;
        var end = timers.length - TIMERS_OFFSET;
        var middle = void 0;
        var l = void 0;
        while (start < end) {
            // since timers is an array of pairs 'l' will always
            // be an integer
            l = (end - start) / TIMERS_OFFSET;
            // compensate for the index in case even number
            // of pairs inside timers
            middle = start + l - l % TIMERS_OFFSET;
            if (time >= timers[middle]) {
                start = middle + TIMERS_OFFSET;
            } else {
                end = middle;
            }
        }
        return time >= timers[start] ? start + TIMERS_OFFSET : start;
    }

    var QUEUE_ITEM_LENGTH = 4;

    var Queue = function () {
        function Queue(name) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            var globalOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

            (0, _emberBabel.classCallCheck)(this, Queue);

            this._queueBeingFlushed = [];
            this.targetQueues = new Map();
            this.index = 0;
            this._queue = [];
            this.name = name;
            this.options = options;
            this.globalOptions = globalOptions;
        }

        Queue.prototype.stackFor = function stackFor(index) {
            if (index < this._queue.length) {
                var entry = this._queue[index * 3 + QUEUE_ITEM_LENGTH];
                if (entry) {
                    return entry.stack;
                } else {
                    return null;
                }
            }
        };

        Queue.prototype.flush = function flush(sync) {
            var _options = this.options,
                before = _options.before,
                after = _options.after;

            var target = void 0;
            var method = void 0;
            var args = void 0;
            var errorRecordedForStack = void 0;
            this.targetQueues.clear();
            if (this._queueBeingFlushed.length === 0) {
                this._queueBeingFlushed = this._queue;
                this._queue = [];
            }
            if (before !== undefined) {
                before();
            }
            var invoke = void 0;
            var queueItems = this._queueBeingFlushed;
            if (queueItems.length > 0) {
                var onError = getOnError(this.globalOptions);
                invoke = onError ? this.invokeWithOnError : this.invoke;
                for (var i = this.index; i < queueItems.length; i += QUEUE_ITEM_LENGTH) {
                    this.index += QUEUE_ITEM_LENGTH;
                    method = queueItems[i + 1];
                    // method could have been nullified / canceled during flush
                    if (method !== null) {
                        //
                        //    ** Attention intrepid developer **
                        //
                        //    To find out the stack of this task when it was scheduled onto
                        //    the run loop, add the following to your app.js:
                        //
                        //    Ember.run.backburner.DEBUG = true; // NOTE: This slows your app, don't leave it on in production.
                        //
                        //    Once that is in place, when you are at a breakpoint and navigate
                        //    here in the stack explorer, you can look at `errorRecordedForStack.stack`,
                        //    which will be the captured stack when this job was scheduled.
                        //
                        //    One possible long-term solution is the following Chrome issue:
                        //       https://bugs.chromium.org/p/chromium/issues/detail?id=332624
                        //
                        target = queueItems[i];
                        args = queueItems[i + 2];
                        errorRecordedForStack = queueItems[i + 3]; // Debugging assistance
                        invoke(target, method, args, onError, errorRecordedForStack);
                    }
                    if (this.index !== this._queueBeingFlushed.length && this.globalOptions.mustYield && this.globalOptions.mustYield()) {
                        return 1 /* Pause */;
                    }
                }
            }
            if (after !== undefined) {
                after();
            }
            this._queueBeingFlushed.length = 0;
            this.index = 0;
            if (sync !== false && this._queue.length > 0) {
                // check if new items have been added
                this.flush(true);
            }
        };

        Queue.prototype.hasWork = function hasWork() {
            return this._queueBeingFlushed.length > 0 || this._queue.length > 0;
        };

        Queue.prototype.cancel = function cancel(_ref) {
            var target = _ref.target,
                method = _ref.method;

            var queue = this._queue;
            var targetQueueMap = this.targetQueues.get(target);
            if (targetQueueMap !== undefined) {
                targetQueueMap.delete(method);
            }
            var index = findItem(target, method, queue);
            if (index > -1) {
                queue.splice(index, QUEUE_ITEM_LENGTH);
                return true;
            }
            // if not found in current queue
            // could be in the queue that is being flushed
            queue = this._queueBeingFlushed;
            index = findItem(target, method, queue);
            if (index > -1) {
                queue[index + 1] = null;
                return true;
            }
            return false;
        };

        Queue.prototype.push = function push(target, method, args, stack) {
            this._queue.push(target, method, args, stack);
            return {
                queue: this,
                target: target,
                method: method
            };
        };

        Queue.prototype.pushUnique = function pushUnique(target, method, args, stack) {
            var localQueueMap = this.targetQueues.get(target);
            if (localQueueMap === undefined) {
                localQueueMap = new Map();
                this.targetQueues.set(target, localQueueMap);
            }
            var index = localQueueMap.get(method);
            if (index === undefined) {
                var queueIndex = this._queue.push(target, method, args, stack) - QUEUE_ITEM_LENGTH;
                localQueueMap.set(method, queueIndex);
            } else {
                var queue = this._queue;
                queue[index + 2] = args; // replace args
                queue[index + 3] = stack; // replace stack
            }
            return {
                queue: this,
                target: target,
                method: method
            };
        };

        Queue.prototype._getDebugInfo = function _getDebugInfo(debugEnabled) {
            if (debugEnabled) {
                var debugInfo = getQueueItems(this._queue, QUEUE_ITEM_LENGTH);
                return debugInfo;
            }
            return undefined;
        };

        Queue.prototype.invoke = function invoke(target, method, args /*, onError, errorRecordedForStack */) {
            if (args === undefined) {
                method.call(target);
            } else {
                method.apply(target, args);
            }
        };

        Queue.prototype.invokeWithOnError = function invokeWithOnError(target, method, args, onError, errorRecordedForStack) {
            try {
                if (args === undefined) {
                    method.call(target);
                } else {
                    method.apply(target, args);
                }
            } catch (error) {
                onError(error, errorRecordedForStack);
            }
        };

        return Queue;
    }();

    var DeferredActionQueues = function () {
        function DeferredActionQueues() {
            var queueNames = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
            var options = arguments[1];

            (0, _emberBabel.classCallCheck)(this, DeferredActionQueues);

            this.queues = {};
            this.queueNameIndex = 0;
            this.queueNames = queueNames;
            queueNames.reduce(function (queues, queueName) {
                queues[queueName] = new Queue(queueName, options[queueName], options);
                return queues;
            }, this.queues);
        }
        /**
         * @method schedule
         * @param {String} queueName
         * @param {Any} target
         * @param {Any} method
         * @param {Any} args
         * @param {Boolean} onceFlag
         * @param {Any} stack
         * @return queue
         */

        DeferredActionQueues.prototype.schedule = function schedule(queueName, target, method, args, onceFlag, stack) {
            var queues = this.queues;
            var queue = queues[queueName];
            if (queue === undefined) {
                throw new Error('You attempted to schedule an action in a queue (' + queueName + ') that doesn\'t exist');
            }
            if (method === undefined || method === null) {
                throw new Error('You attempted to schedule an action in a queue (' + queueName + ') for a method that doesn\'t exist');
            }
            this.queueNameIndex = 0;
            if (onceFlag) {
                return queue.pushUnique(target, method, args, stack);
            } else {
                return queue.push(target, method, args, stack);
            }
        };
        /**
         * DeferredActionQueues.flush() calls Queue.flush()
         *
         * @method flush
         * @param {Boolean} fromAutorun
         */

        DeferredActionQueues.prototype.flush = function flush() {
            var fromAutorun = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

            var queue = void 0;
            var queueName = void 0;
            var numberOfQueues = this.queueNames.length;
            while (this.queueNameIndex < numberOfQueues) {
                queueName = this.queueNames[this.queueNameIndex];
                queue = this.queues[queueName];
                if (queue.hasWork() === false) {
                    this.queueNameIndex++;
                    if (fromAutorun && this.queueNameIndex < numberOfQueues) {
                        return 1 /* Pause */;
                    }
                } else {
                    if (queue.flush(false /* async */) === 1 /* Pause */) {
                            return 1 /* Pause */;
                        }
                }
            }
        };
        /**
         * Returns debug information for the current queues.
         *
         * @method _getDebugInfo
         * @param {Boolean} debugEnabled
         * @returns {IDebugInfo | undefined}
         */

        DeferredActionQueues.prototype._getDebugInfo = function _getDebugInfo(debugEnabled) {
            if (debugEnabled) {
                var debugInfo = {};
                var queue = void 0;
                var queueName = void 0;
                var numberOfQueues = this.queueNames.length;
                var i = 0;
                while (i < numberOfQueues) {
                    queueName = this.queueNames[i];
                    queue = this.queues[queueName];
                    debugInfo[queueName] = queue._getDebugInfo(debugEnabled);
                    i++;
                }
                return debugInfo;
            }
            return;
        };

        return DeferredActionQueues;
    }();

    function iteratorDrain(fn) {
        var iterator = fn();
        var result = iterator.next();
        while (result.done === false) {
            result.value();
            result = iterator.next();
        }
    }

    var noop = function () {};
    var DISABLE_SCHEDULE = Object.freeze([]);
    function parseArgs() {
        var length = arguments.length;
        var args = void 0;
        var method = void 0;
        var target = void 0;
        if (length === 0) {} else if (length === 1) {
            target = null;
            method = arguments[0];
        } else {
            var argsIndex = 2;
            var methodOrTarget = arguments[0];
            var methodOrArgs = arguments[1];
            var type = typeof methodOrArgs;
            if (type === 'function') {
                target = methodOrTarget;
                method = methodOrArgs;
            } else if (methodOrTarget !== null && type === 'string' && methodOrArgs in methodOrTarget) {
                target = methodOrTarget;
                method = target[methodOrArgs];
            } else if (typeof methodOrTarget === 'function') {
                argsIndex = 1;
                target = null;
                method = methodOrTarget;
            }
            if (length > argsIndex) {
                var len = length - argsIndex;
                args = new Array(len);
                for (var i = 0; i < len; i++) {
                    args[i] = arguments[i + argsIndex];
                }
            }
        }
        return [target, method, args];
    }
    function parseTimerArgs() {
        var _parseArgs = parseArgs.apply(undefined, arguments),
            target = _parseArgs[0],
            method = _parseArgs[1],
            args = _parseArgs[2];

        var wait = 0;
        var length = args !== undefined ? args.length : 0;
        if (length > 0) {
            var last = args[length - 1];
            if (isCoercableNumber(last)) {
                wait = parseInt(args.pop(), 10);
            }
        }
        return [target, method, args, wait];
    }
    function parseDebounceArgs() {
        var target = void 0;
        var method = void 0;
        var isImmediate = void 0;
        var args = void 0;
        var wait = void 0;
        if (arguments.length === 2) {
            method = arguments[0];
            wait = arguments[1];
            target = null;
        } else {
            var _parseArgs2 = parseArgs.apply(undefined, arguments);

            target = _parseArgs2[0];
            method = _parseArgs2[1];
            args = _parseArgs2[2];

            if (args === undefined) {
                wait = 0;
            } else {
                wait = args.pop();
                if (!isCoercableNumber(wait)) {
                    isImmediate = wait === true;
                    wait = args.pop();
                }
            }
        }
        wait = parseInt(wait, 10);
        return [target, method, args, wait, isImmediate];
    }
    var UUID = 0;
    var beginCount = 0;
    var endCount = 0;
    var beginEventCount = 0;
    var endEventCount = 0;
    var runCount = 0;
    var joinCount = 0;
    var deferCount = 0;
    var scheduleCount = 0;
    var scheduleIterableCount = 0;
    var deferOnceCount = 0;
    var scheduleOnceCount = 0;
    var setTimeoutCount = 0;
    var laterCount = 0;
    var throttleCount = 0;
    var debounceCount = 0;
    var cancelTimersCount = 0;
    var cancelCount = 0;
    var autorunsCreatedCount = 0;
    var autorunsCompletedCount = 0;
    var deferredActionQueuesCreatedCount = 0;
    var nestedDeferredActionQueuesCreated = 0;

    var Backburner = function () {
        function Backburner(queueNames, options) {
            var _this = this;

            (0, _emberBabel.classCallCheck)(this, Backburner);

            this.DEBUG = false;
            this.currentInstance = null;
            this.instanceStack = [];
            this._eventCallbacks = {
                end: [],
                begin: []
            };
            this._timerTimeoutId = null;
            this._timers = [];
            this._autorun = null;
            this._autorunStack = null;
            this.queueNames = queueNames;
            this.options = options || {};
            if (typeof this.options.defaultQueue === 'string') {
                this._defaultQueue = this.options.defaultQueue;
            } else {
                this._defaultQueue = this.queueNames[0];
            }
            this._onBegin = this.options.onBegin || noop;
            this._onEnd = this.options.onEnd || noop;
            this._boundRunExpiredTimers = this._runExpiredTimers.bind(this);
            this._boundAutorunEnd = function () {
                autorunsCompletedCount++;
                // if the autorun was already flushed, do nothing
                if (_this._autorun === null) {
                    return;
                }
                _this._autorun = null;
                _this._autorunStack = null;
                _this._end(true /* fromAutorun */);
            };
            var builder = this.options._buildPlatform || buildPlatform;
            this._platform = builder(this._boundAutorunEnd);
        }

        /*
          @method begin
          @return instantiated class DeferredActionQueues
        */
        Backburner.prototype.begin = function begin() {
            beginCount++;
            var options = this.options;
            var previousInstance = this.currentInstance;
            var current = void 0;
            if (this._autorun !== null) {
                current = previousInstance;
                this._cancelAutorun();
            } else {
                if (previousInstance !== null) {
                    nestedDeferredActionQueuesCreated++;
                    this.instanceStack.push(previousInstance);
                }
                deferredActionQueuesCreatedCount++;
                current = this.currentInstance = new DeferredActionQueues(this.queueNames, options);
                beginEventCount++;
                this._trigger('begin', current, previousInstance);
            }
            this._onBegin(current, previousInstance);
            return current;
        };

        Backburner.prototype.end = function end() {
            endCount++;
            this._end(false);
        };

        Backburner.prototype.on = function on(eventName, callback) {
            if (typeof callback !== 'function') {
                throw new TypeError('Callback must be a function');
            }
            var callbacks = this._eventCallbacks[eventName];
            if (callbacks !== undefined) {
                callbacks.push(callback);
            } else {
                throw new TypeError('Cannot on() event ' + eventName + ' because it does not exist');
            }
        };

        Backburner.prototype.off = function off(eventName, callback) {
            var callbacks = this._eventCallbacks[eventName];
            if (!eventName || callbacks === undefined) {
                throw new TypeError('Cannot off() event ' + eventName + ' because it does not exist');
            }
            var callbackFound = false;
            if (callback) {
                for (var i = 0; i < callbacks.length; i++) {
                    if (callbacks[i] === callback) {
                        callbackFound = true;
                        callbacks.splice(i, 1);
                        i--;
                    }
                }
            }
            if (!callbackFound) {
                throw new TypeError('Cannot off() callback that does not exist');
            }
        };

        Backburner.prototype.run = function run() {
            runCount++;

            var _parseArgs3 = parseArgs.apply(undefined, arguments),
                target = _parseArgs3[0],
                method = _parseArgs3[1],
                args = _parseArgs3[2];

            return this._run(target, method, args);
        };

        Backburner.prototype.join = function join() {
            joinCount++;

            var _parseArgs4 = parseArgs.apply(undefined, arguments),
                target = _parseArgs4[0],
                method = _parseArgs4[1],
                args = _parseArgs4[2];

            return this._join(target, method, args);
        };
        /**
         * @deprecated please use schedule instead.
         */

        Backburner.prototype.defer = function defer(queueName, target, method) {
            deferCount++;

            for (var _len = arguments.length, args = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
                args[_key - 3] = arguments[_key];
            }

            return this.schedule.apply(this, [queueName, target, method].concat(args));
        };

        Backburner.prototype.schedule = function schedule(queueName) {
            scheduleCount++;

            for (var _len2 = arguments.length, _args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                _args[_key2 - 1] = arguments[_key2];
            }

            var _parseArgs5 = parseArgs.apply(undefined, _args),
                target = _parseArgs5[0],
                method = _parseArgs5[1],
                args = _parseArgs5[2];

            var stack = this.DEBUG ? new Error() : undefined;
            return this._ensureInstance().schedule(queueName, target, method, args, false, stack);
        };
        /*
          Defer the passed iterable of functions to run inside the specified queue.
             @method scheduleIterable
          @param {String} queueName
          @param {Iterable} an iterable of functions to execute
          @return method result
        */

        Backburner.prototype.scheduleIterable = function scheduleIterable(queueName, iterable) {
            scheduleIterableCount++;
            var stack = this.DEBUG ? new Error() : undefined;
            return this._ensureInstance().schedule(queueName, null, iteratorDrain, [iterable], false, stack);
        };
        /**
         * @deprecated please use scheduleOnce instead.
         */

        Backburner.prototype.deferOnce = function deferOnce(queueName, target, method) {
            deferOnceCount++;

            for (var _len3 = arguments.length, args = Array(_len3 > 3 ? _len3 - 3 : 0), _key3 = 3; _key3 < _len3; _key3++) {
                args[_key3 - 3] = arguments[_key3];
            }

            return this.scheduleOnce.apply(this, [queueName, target, method].concat(args));
        };

        Backburner.prototype.scheduleOnce = function scheduleOnce(queueName) {
            scheduleOnceCount++;

            for (var _len4 = arguments.length, _args = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
                _args[_key4 - 1] = arguments[_key4];
            }

            var _parseArgs6 = parseArgs.apply(undefined, _args),
                target = _parseArgs6[0],
                method = _parseArgs6[1],
                args = _parseArgs6[2];

            var stack = this.DEBUG ? new Error() : undefined;
            return this._ensureInstance().schedule(queueName, target, method, args, true, stack);
        };

        Backburner.prototype.setTimeout = function setTimeout() {
            setTimeoutCount++;
            return this.later.apply(this, arguments);
        };

        Backburner.prototype.later = function later() {
            laterCount++;

            var _parseTimerArgs = parseTimerArgs.apply(undefined, arguments),
                target = _parseTimerArgs[0],
                method = _parseTimerArgs[1],
                args = _parseTimerArgs[2],
                wait = _parseTimerArgs[3];

            return this._later(target, method, args, wait);
        };

        Backburner.prototype.throttle = function throttle() {
            throttleCount++;

            var _parseDebounceArgs = parseDebounceArgs.apply(undefined, arguments),
                target = _parseDebounceArgs[0],
                method = _parseDebounceArgs[1],
                args = _parseDebounceArgs[2],
                wait = _parseDebounceArgs[3],
                _parseDebounceArgs$ = _parseDebounceArgs[4],
                isImmediate = _parseDebounceArgs$ === undefined ? true : _parseDebounceArgs$;

            var index = findTimerItem(target, method, this._timers);
            var timerId = void 0;
            if (index === -1) {
                timerId = this._later(target, method, isImmediate ? DISABLE_SCHEDULE : args, wait);
                if (isImmediate) {
                    this._join(target, method, args);
                }
            } else {
                timerId = this._timers[index + 1];
                var argIndex = index + 4;
                if (this._timers[argIndex] !== DISABLE_SCHEDULE) {
                    this._timers[argIndex] = args;
                }
            }
            return timerId;
        };

        Backburner.prototype.debounce = function debounce() {
            debounceCount++;

            var _parseDebounceArgs2 = parseDebounceArgs.apply(undefined, arguments),
                target = _parseDebounceArgs2[0],
                method = _parseDebounceArgs2[1],
                args = _parseDebounceArgs2[2],
                wait = _parseDebounceArgs2[3],
                _parseDebounceArgs2$ = _parseDebounceArgs2[4],
                isImmediate = _parseDebounceArgs2$ === undefined ? false : _parseDebounceArgs2$;

            var _timers = this._timers;
            var index = findTimerItem(target, method, _timers);
            var timerId = void 0;
            if (index === -1) {
                timerId = this._later(target, method, isImmediate ? DISABLE_SCHEDULE : args, wait);
                if (isImmediate) {
                    this._join(target, method, args);
                }
            } else {
                var executeAt = this._platform.now() + wait;
                var argIndex = index + 4;
                if (_timers[argIndex] === DISABLE_SCHEDULE) {
                    args = DISABLE_SCHEDULE;
                }
                timerId = _timers[index + 1];
                var i = binarySearch(executeAt, _timers);
                if (index + TIMERS_OFFSET === i) {
                    _timers[index] = executeAt;
                    _timers[argIndex] = args;
                } else {
                    var stack = this._timers[index + 5];
                    this._timers.splice(i, 0, executeAt, timerId, target, method, args, stack);
                    this._timers.splice(index, TIMERS_OFFSET);
                }
                if (index === 0) {
                    this._reinstallTimerTimeout();
                }
            }
            return timerId;
        };

        Backburner.prototype.cancelTimers = function cancelTimers() {
            cancelTimersCount++;
            this._clearTimerTimeout();
            this._timers = [];
            this._cancelAutorun();
        };

        Backburner.prototype.hasTimers = function hasTimers() {
            return this._timers.length > 0 || this._autorun !== null;
        };

        Backburner.prototype.cancel = function cancel(timer) {
            cancelCount++;
            if (timer === null || timer === undefined) {
                return false;
            }
            var timerType = typeof timer;
            if (timerType === 'number') {
                // we're cancelling a setTimeout or throttle or debounce
                return this._cancelLaterTimer(timer);
            } else if (timerType === 'object' && timer.queue && timer.method) {
                // we're cancelling a deferOnce
                return timer.queue.cancel(timer);
            }
            return false;
        };

        Backburner.prototype.ensureInstance = function ensureInstance() {
            this._ensureInstance();
        };
        /**
         * Returns debug information related to the current instance of Backburner
         *
         * @method getDebugInfo
         * @returns {Object | undefined} Will return and Object containing debug information if
         * the DEBUG flag is set to true on the current instance of Backburner, else undefined.
         */

        Backburner.prototype.getDebugInfo = function getDebugInfo() {
            var _this2 = this;

            if (this.DEBUG) {
                return {
                    autorun: this._autorunStack,
                    counters: this.counters,
                    timers: getQueueItems(this._timers, TIMERS_OFFSET, 2),
                    instanceStack: [this.currentInstance].concat(this.instanceStack).map(function (deferredActionQueue) {
                        return deferredActionQueue && deferredActionQueue._getDebugInfo(_this2.DEBUG);
                    })
                };
            }
            return undefined;
        };

        Backburner.prototype._end = function _end(fromAutorun) {
            var currentInstance = this.currentInstance;
            var nextInstance = null;
            if (currentInstance === null) {
                throw new Error('end called without begin');
            }
            // Prevent double-finally bug in Safari 6.0.2 and iOS 6
            // This bug appears to be resolved in Safari 6.0.5 and iOS 7
            var finallyAlreadyCalled = false;
            var result = void 0;
            try {
                result = currentInstance.flush(fromAutorun);
            } finally {
                if (!finallyAlreadyCalled) {
                    finallyAlreadyCalled = true;
                    if (result === 1 /* Pause */) {
                            this._scheduleAutorun();
                        } else {
                        this.currentInstance = null;
                        if (this.instanceStack.length > 0) {
                            nextInstance = this.instanceStack.pop();
                            this.currentInstance = nextInstance;
                        }
                        this._trigger('end', currentInstance, nextInstance);
                        this._onEnd(currentInstance, nextInstance);
                    }
                }
            }
        };

        Backburner.prototype._join = function _join(target, method, args) {
            if (this.currentInstance === null) {
                return this._run(target, method, args);
            }
            if (target === undefined && args === undefined) {
                return method();
            } else {
                return method.apply(target, args);
            }
        };

        Backburner.prototype._run = function _run(target, method, args) {
            var onError = getOnError(this.options);
            this.begin();
            if (onError) {
                try {
                    return method.apply(target, args);
                } catch (error) {
                    onError(error);
                } finally {
                    this.end();
                }
            } else {
                try {
                    return method.apply(target, args);
                } finally {
                    this.end();
                }
            }
        };

        Backburner.prototype._cancelAutorun = function _cancelAutorun() {
            if (this._autorun !== null) {
                this._platform.clearNext(this._autorun);
                this._autorun = null;
                this._autorunStack = null;
            }
        };

        Backburner.prototype._later = function _later(target, method, args, wait) {
            var stack = this.DEBUG ? new Error() : undefined;
            var executeAt = this._platform.now() + wait;
            var id = UUID++;
            if (this._timers.length === 0) {
                this._timers.push(executeAt, id, target, method, args, stack);
                this._installTimerTimeout();
            } else {
                // find position to insert
                var i = binarySearch(executeAt, this._timers);
                this._timers.splice(i, 0, executeAt, id, target, method, args, stack);
                // always reinstall since it could be out of sync
                this._reinstallTimerTimeout();
            }
            return id;
        };

        Backburner.prototype._cancelLaterTimer = function _cancelLaterTimer(timer) {
            for (var i = 1; i < this._timers.length; i += TIMERS_OFFSET) {
                if (this._timers[i] === timer) {
                    this._timers.splice(i - 1, TIMERS_OFFSET);
                    if (i === 1) {
                        this._reinstallTimerTimeout();
                    }
                    return true;
                }
            }
            return false;
        };
        /**
         Trigger an event. Supports up to two arguments. Designed around
         triggering transition events from one run loop instance to the
         next, which requires an argument for the  instance and then
         an argument for the next instance.
            @private
         @method _trigger
         @param {String} eventName
         @param {any} arg1
         @param {any} arg2
         */

        Backburner.prototype._trigger = function _trigger(eventName, arg1, arg2) {
            var callbacks = this._eventCallbacks[eventName];
            if (callbacks !== undefined) {
                for (var i = 0; i < callbacks.length; i++) {
                    callbacks[i](arg1, arg2);
                }
            }
        };

        Backburner.prototype._runExpiredTimers = function _runExpiredTimers() {
            this._timerTimeoutId = null;
            if (this._timers.length > 0) {
                this.begin();
                this._scheduleExpiredTimers();
                this.end();
            }
        };

        Backburner.prototype._scheduleExpiredTimers = function _scheduleExpiredTimers() {
            var timers = this._timers;
            var i = 0;
            var l = timers.length;
            var defaultQueue = this._defaultQueue;
            var n = this._platform.now();
            for (; i < l; i += TIMERS_OFFSET) {
                var executeAt = timers[i];
                if (executeAt > n) {
                    break;
                }
                var _args2 = timers[i + 4];
                if (_args2 !== DISABLE_SCHEDULE) {
                    var target = timers[i + 2];
                    var method = timers[i + 3];
                    var stack = timers[i + 5];
                    this.currentInstance.schedule(defaultQueue, target, method, _args2, false, stack);
                }
            }
            timers.splice(0, i);
            this._installTimerTimeout();
        };

        Backburner.prototype._reinstallTimerTimeout = function _reinstallTimerTimeout() {
            this._clearTimerTimeout();
            this._installTimerTimeout();
        };

        Backburner.prototype._clearTimerTimeout = function _clearTimerTimeout() {
            if (this._timerTimeoutId === null) {
                return;
            }
            this._platform.clearTimeout(this._timerTimeoutId);
            this._timerTimeoutId = null;
        };

        Backburner.prototype._installTimerTimeout = function _installTimerTimeout() {
            if (this._timers.length === 0) {
                return;
            }
            var minExpiresAt = this._timers[0];
            var n = this._platform.now();
            var wait = Math.max(0, minExpiresAt - n);
            this._timerTimeoutId = this._platform.setTimeout(this._boundRunExpiredTimers, wait);
        };

        Backburner.prototype._ensureInstance = function _ensureInstance() {
            var currentInstance = this.currentInstance;
            if (currentInstance === null) {
                this._autorunStack = this.DEBUG ? new Error() : undefined;
                currentInstance = this.begin();
                this._scheduleAutorun();
            }
            return currentInstance;
        };

        Backburner.prototype._scheduleAutorun = function _scheduleAutorun() {
            autorunsCreatedCount++;
            var next = this._platform.next;
            this._autorun = next();
        };

        (0, _emberBabel.createClass)(Backburner, [{
            key: 'counters',
            get: function () {
                return {
                    begin: beginCount,
                    end: endCount,
                    events: {
                        begin: beginEventCount,
                        end: endEventCount
                    },
                    autoruns: {
                        created: autorunsCreatedCount,
                        completed: autorunsCompletedCount
                    },
                    run: runCount,
                    join: joinCount,
                    defer: deferCount,
                    schedule: scheduleCount,
                    scheduleIterable: scheduleIterableCount,
                    deferOnce: deferOnceCount,
                    scheduleOnce: scheduleOnceCount,
                    setTimeout: setTimeoutCount,
                    later: laterCount,
                    throttle: throttleCount,
                    debounce: debounceCount,
                    cancelTimers: cancelTimersCount,
                    cancel: cancelCount,
                    loops: {
                        total: deferredActionQueuesCreatedCount,
                        nested: nestedDeferredActionQueuesCreated
                    }
                };
            }
        }, {
            key: 'defaultQueue',
            get: function () {
                return this._defaultQueue;
            }
        }]);

        return Backburner;
    }();

    Backburner.Queue = Queue;

    exports.default = Backburner;
    exports.buildPlatform = buildPlatform;
});
enifed("dag-map", ["exports"], function (exports) {
    "use strict";

    /**
     * A topologically ordered map of key/value pairs with a simple API for adding constraints.
     *
     * Edges can forward reference keys that have not been added yet (the forward reference will
     * map the key to undefined).
     */
    var DAG = function () {
        function DAG() {
            this._vertices = new Vertices();
        }
        /**
         * Adds a key/value pair with dependencies on other key/value pairs.
         *
         * @public
         * @param key    The key of the vertex to be added.
         * @param value  The value of that vertex.
         * @param before A key or array of keys of the vertices that must
         *               be visited before this vertex.
         * @param after  An string or array of strings with the keys of the
         *               vertices that must be after this vertex is visited.
         */
        DAG.prototype.add = function (key, value, before, after) {
            if (!key) throw new Error('argument `key` is required');
            var vertices = this._vertices;
            var v = vertices.add(key);
            v.val = value;
            if (before) {
                if (typeof before === "string") {
                    vertices.addEdge(v, vertices.add(before));
                } else {
                    for (var i = 0; i < before.length; i++) {
                        vertices.addEdge(v, vertices.add(before[i]));
                    }
                }
            }
            if (after) {
                if (typeof after === "string") {
                    vertices.addEdge(vertices.add(after), v);
                } else {
                    for (var i = 0; i < after.length; i++) {
                        vertices.addEdge(vertices.add(after[i]), v);
                    }
                }
            }
        };
        /**
         * @deprecated please use add.
         */
        DAG.prototype.addEdges = function (key, value, before, after) {
            this.add(key, value, before, after);
        };
        /**
         * Visits key/value pairs in topological order.
         *
         * @public
         * @param callback The function to be invoked with each key/value.
         */
        DAG.prototype.each = function (callback) {
            this._vertices.walk(callback);
        };
        /**
         * @deprecated please use each.
         */
        DAG.prototype.topsort = function (callback) {
            this.each(callback);
        };
        return DAG;
    }();
    exports.default = DAG;

    /** @private */
    var Vertices = function () {
        function Vertices() {
            this.length = 0;
            this.stack = new IntStack();
            this.path = new IntStack();
            this.result = new IntStack();
        }
        Vertices.prototype.add = function (key) {
            if (!key) throw new Error("missing key");
            var l = this.length | 0;
            var vertex;
            for (var i = 0; i < l; i++) {
                vertex = this[i];
                if (vertex.key === key) return vertex;
            }
            this.length = l + 1;
            return this[l] = {
                idx: l,
                key: key,
                val: undefined,
                out: false,
                flag: false,
                length: 0
            };
        };
        Vertices.prototype.addEdge = function (v, w) {
            this.check(v, w.key);
            var l = w.length | 0;
            for (var i = 0; i < l; i++) {
                if (w[i] === v.idx) return;
            }
            w.length = l + 1;
            w[l] = v.idx;
            v.out = true;
        };
        Vertices.prototype.walk = function (cb) {
            this.reset();
            for (var i = 0; i < this.length; i++) {
                var vertex = this[i];
                if (vertex.out) continue;
                this.visit(vertex, "");
            }
            this.each(this.result, cb);
        };
        Vertices.prototype.check = function (v, w) {
            if (v.key === w) {
                throw new Error("cycle detected: " + w + " <- " + w);
            }
            // quick check
            if (v.length === 0) return;
            // shallow check
            for (var i = 0; i < v.length; i++) {
                var key = this[v[i]].key;
                if (key === w) {
                    throw new Error("cycle detected: " + w + " <- " + v.key + " <- " + w);
                }
            }
            // deep check
            this.reset();
            this.visit(v, w);
            if (this.path.length > 0) {
                var msg_1 = "cycle detected: " + w;
                this.each(this.path, function (key) {
                    msg_1 += " <- " + key;
                });
                throw new Error(msg_1);
            }
        };
        Vertices.prototype.reset = function () {
            this.stack.length = 0;
            this.path.length = 0;
            this.result.length = 0;
            for (var i = 0, l = this.length; i < l; i++) {
                this[i].flag = false;
            }
        };
        Vertices.prototype.visit = function (start, search) {
            var _a = this,
                stack = _a.stack,
                path = _a.path,
                result = _a.result;
            stack.push(start.idx);
            while (stack.length) {
                var index = stack.pop() | 0;
                if (index >= 0) {
                    // enter
                    var vertex = this[index];
                    if (vertex.flag) continue;
                    vertex.flag = true;
                    path.push(index);
                    if (search === vertex.key) break;
                    // push exit
                    stack.push(~index);
                    this.pushIncoming(vertex);
                } else {
                    // exit
                    path.pop();
                    result.push(~index);
                }
            }
        };
        Vertices.prototype.pushIncoming = function (incomming) {
            var stack = this.stack;
            for (var i = incomming.length - 1; i >= 0; i--) {
                var index = incomming[i];
                if (!this[index].flag) {
                    stack.push(index);
                }
            }
        };
        Vertices.prototype.each = function (indices, cb) {
            for (var i = 0, l = indices.length; i < l; i++) {
                var vertex = this[indices[i]];
                cb(vertex.key, vertex.val);
            }
        };
        return Vertices;
    }();
    /** @private */
    var IntStack = function () {
        function IntStack() {
            this.length = 0;
        }
        IntStack.prototype.push = function (n) {
            this[this.length++] = n | 0;
        };
        IntStack.prototype.pop = function () {
            return this[--this.length] | 0;
        };
        return IntStack;
    }();
});
enifed('ember-babel', ['exports'], function (exports) {
  'use strict';

  exports.classCallCheck = classCallCheck;
  exports.inherits = inherits;
  exports.taggedTemplateLiteralLoose = taggedTemplateLiteralLoose;
  exports.createClass = createClass;


  var create = Object.create;
  var setPrototypeOf = Object.setPrototypeOf;
  var defineProperty = Object.defineProperty;

  function classCallCheck(instance, Constructor) {
    if (true /* DEBUG */) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError('Cannot call a class as a function');
        }
      }
  }

  function inherits(subClass, superClass) {
    if (true /* DEBUG */) {
        if (typeof superClass !== 'function' && superClass !== null) {
          throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
        }
      }
    subClass.prototype = create(superClass === null ? null : superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass !== null) setPrototypeOf(subClass, superClass);
  }

  function taggedTemplateLiteralLoose(strings, raw) {
    strings.raw = raw;
    return strings;
  }

  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ('value' in descriptor) descriptor.writable = true;
      defineProperty(target, descriptor.key, descriptor);
    }
  }

  function createClass(Constructor, protoProps, staticProps) {
    if (protoProps !== undefined) defineProperties(Constructor.prototype, protoProps);
    if (staticProps !== undefined) defineProperties(Constructor, staticProps);
    return Constructor;
  }

  var possibleConstructorReturn = exports.possibleConstructorReturn = function (self, call) {
    if (true /* DEBUG */) {
        if (!self) {
          throw new ReferenceError('this hasn\'t been initialized - super() hasn\'t been called');
        }
      }
    return call !== null && typeof call === 'object' || typeof call === 'function' ? call : self;
  };
});
enifed('ember-testing/index', ['exports', 'ember-testing/lib/test', 'ember-testing/lib/adapters/adapter', 'ember-testing/lib/setup_for_testing', 'ember-testing/lib/adapters/qunit', 'ember-testing/lib/support', 'ember-testing/lib/ext/application', 'ember-testing/lib/ext/rsvp', 'ember-testing/lib/helpers', 'ember-testing/lib/initializers'], function (exports, _test, _adapter, _setup_for_testing, _qunit) {
  'use strict';

  exports.QUnitAdapter = exports.setupForTesting = exports.Adapter = exports.Test = undefined;
  Object.defineProperty(exports, 'Test', {
    enumerable: true,
    get: function () {
      return _test.default;
    }
  });
  Object.defineProperty(exports, 'Adapter', {
    enumerable: true,
    get: function () {
      return _adapter.default;
    }
  });
  Object.defineProperty(exports, 'setupForTesting', {
    enumerable: true,
    get: function () {
      return _setup_for_testing.default;
    }
  });
  Object.defineProperty(exports, 'QUnitAdapter', {
    enumerable: true,
    get: function () {
      return _qunit.default;
    }
  });
});
enifed('ember-testing/lib/adapters/adapter', ['exports', '@ember/-internals/runtime'], function (exports, _runtime) {
  'use strict';

  function K() {
    return this;
  }

  /**
   @module @ember/test
  */

  /**
    The primary purpose of this class is to create hooks that can be implemented
    by an adapter for various test frameworks.
  
    @class TestAdapter
    @public
  */
  exports.default = _runtime.Object.extend({
    /**
      This callback will be called whenever an async operation is about to start.
       Override this to call your framework's methods that handle async
      operations.
       @public
      @method asyncStart
    */
    asyncStart: K,

    /**
      This callback will be called whenever an async operation has completed.
       @public
      @method asyncEnd
    */
    asyncEnd: K,

    /**
      Override this method with your testing framework's false assertion.
      This function is called whenever an exception occurs causing the testing
      promise to fail.
       QUnit example:
       ```javascript
        exception: function(error) {
          ok(false, error);
        };
      ```
       @public
      @method exception
      @param {String} error The exception to be raised.
    */
    exception: function (error) {
      throw error;
    }
  });
});
enifed('ember-testing/lib/adapters/qunit', ['exports', '@ember/-internals/utils', 'ember-testing/lib/adapters/adapter'], function (exports, _utils, _adapter) {
  'use strict';

  exports.default = _adapter.default.extend({
    init: function () {
      this.doneCallbacks = [];
    },
    asyncStart: function () {
      if (typeof QUnit.stop === 'function') {
        // very old QUnit version
        QUnit.stop();
      } else {
        this.doneCallbacks.push(QUnit.config.current ? QUnit.config.current.assert.async() : null);
      }
    },
    asyncEnd: function () {
      // checking for QUnit.stop here (even though we _need_ QUnit.start) because
      // QUnit.start() still exists in QUnit 2.x (it just throws an error when calling
      // inside a test context)
      if (typeof QUnit.stop === 'function') {
        QUnit.start();
      } else {
        var done = this.doneCallbacks.pop();
        // This can be null if asyncStart() was called outside of a test
        if (done) {
          done();
        }
      }
    },
    exception: function (error) {
      QUnit.config.current.assert.ok(false, (0, _utils.inspect)(error));
    }
  });
});
enifed('ember-testing/lib/events', ['exports', '@ember/runloop', '@ember/polyfills', 'ember-testing/lib/helpers/-is-form-control'], function (exports, _runloop, _polyfills, _isFormControl) {
  'use strict';

  exports.focus = focus;
  exports.fireEvent = fireEvent;


  var DEFAULT_EVENT_OPTIONS = { canBubble: true, cancelable: true };
  var KEYBOARD_EVENT_TYPES = ['keydown', 'keypress', 'keyup'];
  var MOUSE_EVENT_TYPES = ['click', 'mousedown', 'mouseup', 'dblclick', 'mouseenter', 'mouseleave', 'mousemove', 'mouseout', 'mouseover'];

  function focus(el) {
    if (!el) {
      return;
    }
    if (el.isContentEditable || (0, _isFormControl.default)(el)) {
      var type = el.getAttribute('type');
      if (type !== 'checkbox' && type !== 'radio' && type !== 'hidden') {
        (0, _runloop.run)(null, function () {
          var browserIsNotFocused = document.hasFocus && !document.hasFocus();

          // makes `document.activeElement` be `element`. If the browser is focused, it also fires a focus event
          el.focus();

          // Firefox does not trigger the `focusin` event if the window
          // does not have focus. If the document does not have focus then
          // fire `focusin` event as well.
          if (browserIsNotFocused) {
            // if the browser is not focused the previous `el.focus()` didn't fire an event, so we simulate it
            fireEvent(el, 'focus', {
              bubbles: false
            });

            fireEvent(el, 'focusin');
          }
        });
      }
    }
  }

  function fireEvent(element, type) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    if (!element) {
      return;
    }
    var event = void 0;
    if (KEYBOARD_EVENT_TYPES.indexOf(type) > -1) {
      event = buildKeyboardEvent(type, options);
    } else if (MOUSE_EVENT_TYPES.indexOf(type) > -1) {
      var rect = element.getBoundingClientRect();
      var x = rect.left + 1;
      var y = rect.top + 1;
      var simulatedCoordinates = {
        screenX: x + 5,
        screenY: y + 95,
        clientX: x,
        clientY: y
      };
      event = buildMouseEvent(type, (0, _polyfills.assign)(simulatedCoordinates, options));
    } else {
      event = buildBasicEvent(type, options);
    }
    element.dispatchEvent(event);
  }

  function buildBasicEvent(type) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var event = document.createEvent('Events');

    // Event.bubbles is read only
    var bubbles = options.bubbles !== undefined ? options.bubbles : true;
    var cancelable = options.cancelable !== undefined ? options.cancelable : true;

    delete options.bubbles;
    delete options.cancelable;

    event.initEvent(type, bubbles, cancelable);
    (0, _polyfills.assign)(event, options);
    return event;
  }

  function buildMouseEvent(type) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var event = void 0;
    try {
      event = document.createEvent('MouseEvents');
      var eventOpts = (0, _polyfills.assign)({}, DEFAULT_EVENT_OPTIONS, options);
      event.initMouseEvent(type, eventOpts.canBubble, eventOpts.cancelable, window, eventOpts.detail, eventOpts.screenX, eventOpts.screenY, eventOpts.clientX, eventOpts.clientY, eventOpts.ctrlKey, eventOpts.altKey, eventOpts.shiftKey, eventOpts.metaKey, eventOpts.button, eventOpts.relatedTarget);
    } catch (e) {
      event = buildBasicEvent(type, options);
    }
    return event;
  }

  function buildKeyboardEvent(type) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var event = void 0;
    try {
      event = document.createEvent('KeyEvents');
      var eventOpts = (0, _polyfills.assign)({}, DEFAULT_EVENT_OPTIONS, options);
      event.initKeyEvent(type, eventOpts.canBubble, eventOpts.cancelable, window, eventOpts.ctrlKey, eventOpts.altKey, eventOpts.shiftKey, eventOpts.metaKey, eventOpts.keyCode, eventOpts.charCode);
    } catch (e) {
      event = buildBasicEvent(type, options);
    }
    return event;
  }
});
enifed('ember-testing/lib/ext/application', ['@ember/application', 'ember-testing/lib/setup_for_testing', 'ember-testing/lib/test/helpers', 'ember-testing/lib/test/promise', 'ember-testing/lib/test/run', 'ember-testing/lib/test/on_inject_helpers', 'ember-testing/lib/test/adapter'], function (_application, _setup_for_testing, _helpers, _promise, _run, _on_inject_helpers, _adapter) {
  'use strict';

  _application.default.reopen({
    /**
     This property contains the testing helpers for the current application. These
     are created once you call `injectTestHelpers` on your `Application`
     instance. The included helpers are also available on the `window` object by
     default, but can be used from this object on the individual application also.
       @property testHelpers
      @type {Object}
      @default {}
      @public
    */
    testHelpers: {},

    /**
     This property will contain the original methods that were registered
     on the `helperContainer` before `injectTestHelpers` is called.
      When `removeTestHelpers` is called, these methods are restored to the
     `helperContainer`.
       @property originalMethods
      @type {Object}
      @default {}
      @private
      @since 1.3.0
    */
    originalMethods: {},

    /**
    This property indicates whether or not this application is currently in
    testing mode. This is set when `setupForTesting` is called on the current
    application.
     @property testing
    @type {Boolean}
    @default false
    @since 1.3.0
    @public
    */
    testing: false,

    /**
      This hook defers the readiness of the application, so that you can start
      the app when your tests are ready to run. It also sets the router's
      location to 'none', so that the window's location will not be modified
      (preventing both accidental leaking of state between tests and interference
      with your testing framework). `setupForTesting` should only be called after
      setting a custom `router` class (for example `App.Router = Router.extend(`).
       Example:
       ```
      App.setupForTesting();
      ```
       @method setupForTesting
      @public
    */
    setupForTesting: function () {
      (0, _setup_for_testing.default)();

      this.testing = true;

      this.resolveRegistration('router:main').reopen({
        location: 'none'
      });
    },

    /**
      This will be used as the container to inject the test helpers into. By
      default the helpers are injected into `window`.
       @property helperContainer
      @type {Object} The object to be used for test helpers.
      @default window
      @since 1.2.0
      @private
    */
    helperContainer: null,

    /**
      This injects the test helpers into the `helperContainer` object. If an object is provided
      it will be used as the helperContainer. If `helperContainer` is not set it will default
      to `window`. If a function of the same name has already been defined it will be cached
      (so that it can be reset if the helper is removed with `unregisterHelper` or
      `removeTestHelpers`).
       Any callbacks registered with `onInjectHelpers` will be called once the
      helpers have been injected.
       Example:
      ```
      App.injectTestHelpers();
      ```
       @method injectTestHelpers
      @public
    */
    injectTestHelpers: function (helperContainer) {
      if (helperContainer) {
        this.helperContainer = helperContainer;
      } else {
        this.helperContainer = window;
      }

      this.reopen({
        willDestroy: function () {
          this._super.apply(this, arguments);
          this.removeTestHelpers();
        }
      });

      this.testHelpers = {};
      for (var name in _helpers.helpers) {
        this.originalMethods[name] = this.helperContainer[name];
        this.testHelpers[name] = this.helperContainer[name] = helper(this, name);
        protoWrap(_promise.default.prototype, name, helper(this, name), _helpers.helpers[name].meta.wait);
      }

      (0, _on_inject_helpers.invokeInjectHelpersCallbacks)(this);
    },

    /**
      This removes all helpers that have been registered, and resets and functions
      that were overridden by the helpers.
       Example:
       ```javascript
      App.removeTestHelpers();
      ```
       @public
      @method removeTestHelpers
    */
    removeTestHelpers: function () {
      if (!this.helperContainer) {
        return;
      }

      for (var name in _helpers.helpers) {
        this.helperContainer[name] = this.originalMethods[name];
        delete _promise.default.prototype[name];
        delete this.testHelpers[name];
        delete this.originalMethods[name];
      }
    }
  });

  // This method is no longer needed
  // But still here for backwards compatibility
  // of helper chaining
  function protoWrap(proto, name, callback, isAsync) {
    proto[name] = function () {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      if (isAsync) {
        return callback.apply(this, args);
      } else {
        return this.then(function () {
          return callback.apply(this, args);
        });
      }
    };
  }

  function helper(app, name) {
    var fn = _helpers.helpers[name].method;
    var meta = _helpers.helpers[name].meta;
    if (!meta.wait) {
      return function () {
        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        return fn.apply(app, [app].concat(args));
      };
    }

    return function () {
      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      var lastPromise = (0, _run.default)(function () {
        return (0, _promise.resolve)((0, _promise.getLastPromise)());
      });

      // wait for last helper's promise to resolve and then
      // execute. To be safe, we need to tell the adapter we're going
      // asynchronous here, because fn may not be invoked before we
      // return.
      (0, _adapter.asyncStart)();
      return lastPromise.then(function () {
        return fn.apply(app, [app].concat(args));
      }).finally(_adapter.asyncEnd);
    };
  }
});
enifed('ember-testing/lib/ext/rsvp', ['exports', '@ember/-internals/runtime', '@ember/runloop', '@ember/debug', 'ember-testing/lib/test/adapter'], function (exports, _runtime, _runloop, _debug, _adapter) {
  'use strict';

  _runtime.RSVP.configure('async', function (callback, promise) {
    // if schedule will cause autorun, we need to inform adapter
    if ((0, _debug.isTesting)() && !_runloop.backburner.currentInstance) {
      (0, _adapter.asyncStart)();
      _runloop.backburner.schedule('actions', function () {
        (0, _adapter.asyncEnd)();
        callback(promise);
      });
    } else {
      _runloop.backburner.schedule('actions', function () {
        return callback(promise);
      });
    }
  });

  exports.default = _runtime.RSVP;
});
enifed('ember-testing/lib/helpers', ['ember-testing/lib/test/helpers', 'ember-testing/lib/helpers/and_then', 'ember-testing/lib/helpers/click', 'ember-testing/lib/helpers/current_path', 'ember-testing/lib/helpers/current_route_name', 'ember-testing/lib/helpers/current_url', 'ember-testing/lib/helpers/fill_in', 'ember-testing/lib/helpers/find', 'ember-testing/lib/helpers/find_with_assert', 'ember-testing/lib/helpers/key_event', 'ember-testing/lib/helpers/pause_test', 'ember-testing/lib/helpers/trigger_event', 'ember-testing/lib/helpers/visit', 'ember-testing/lib/helpers/wait'], function (_helpers, _and_then, _click, _current_path, _current_route_name, _current_url, _fill_in, _find, _find_with_assert, _key_event, _pause_test, _trigger_event, _visit, _wait) {
  'use strict';

  (0, _helpers.registerAsyncHelper)('visit', _visit.default);
  (0, _helpers.registerAsyncHelper)('click', _click.default);
  (0, _helpers.registerAsyncHelper)('keyEvent', _key_event.default);
  (0, _helpers.registerAsyncHelper)('fillIn', _fill_in.default);
  (0, _helpers.registerAsyncHelper)('wait', _wait.default);
  (0, _helpers.registerAsyncHelper)('andThen', _and_then.default);
  (0, _helpers.registerAsyncHelper)('pauseTest', _pause_test.pauseTest);
  (0, _helpers.registerAsyncHelper)('triggerEvent', _trigger_event.default);

  (0, _helpers.registerHelper)('find', _find.default);
  (0, _helpers.registerHelper)('findWithAssert', _find_with_assert.default);
  (0, _helpers.registerHelper)('currentRouteName', _current_route_name.default);
  (0, _helpers.registerHelper)('currentPath', _current_path.default);
  (0, _helpers.registerHelper)('currentURL', _current_url.default);
  (0, _helpers.registerHelper)('resumeTest', _pause_test.resumeTest);
});
enifed('ember-testing/lib/helpers/-is-form-control', ['exports'], function (exports) {
  'use strict';

  exports.default = isFormControl;
  var FORM_CONTROL_TAGS = ['INPUT', 'BUTTON', 'SELECT', 'TEXTAREA'];

  /**
    @private
    @param {Element} element the element to check
    @returns {boolean} `true` when the element is a form control, `false` otherwise
  */
  function isFormControl(element) {
    var tagName = element.tagName,
        type = element.type;

    if (type === 'hidden') {
      return false;
    }

    return FORM_CONTROL_TAGS.indexOf(tagName) > -1;
  }
});
enifed("ember-testing/lib/helpers/and_then", ["exports"], function (exports) {
  "use strict";

  exports.default = andThen;
  function andThen(app, callback) {
    return app.testHelpers.wait(callback(app));
  }
});
enifed('ember-testing/lib/helpers/click', ['exports', 'ember-testing/lib/events'], function (exports, _events) {
  'use strict';

  exports.default = click;


  /**
    Clicks an element and triggers any actions triggered by the element's `click`
    event.
  
    Example:
  
    ```javascript
    click('.some-jQuery-selector').then(function() {
      // assert something
    });
    ```
  
    @method click
    @param {String} selector jQuery selector for finding element on the DOM
    @param {Object} context A DOM Element, Document, or jQuery to use as context
    @return {RSVP.Promise<undefined>}
    @public
  */
  function click(app, selector, context) {
    var $el = app.testHelpers.findWithAssert(selector, context);
    var el = $el[0];

    (0, _events.fireEvent)(el, 'mousedown');

    (0, _events.focus)(el);

    (0, _events.fireEvent)(el, 'mouseup');
    (0, _events.fireEvent)(el, 'click');

    return app.testHelpers.wait();
  } /**
    @module ember
    */
});
enifed('ember-testing/lib/helpers/current_path', ['exports', '@ember/-internals/metal'], function (exports, _metal) {
  'use strict';

  exports.default = currentPath;


  /**
    Returns the current path.
  
  Example:
  
  ```javascript
  function validateURL() {
    equal(currentPath(), 'some.path.index', "correct path was transitioned into.");
  }
  
  click('#some-link-id').then(validateURL);
  ```
  
  @method currentPath
  @return {Object} The currently active path.
  @since 1.5.0
  @public
  */
  function currentPath(app) {
    var routingService = app.__container__.lookup('service:-routing');
    return (0, _metal.get)(routingService, 'currentPath');
  } /**
    @module ember
    */
});
enifed('ember-testing/lib/helpers/current_route_name', ['exports', '@ember/-internals/metal'], function (exports, _metal) {
  'use strict';

  exports.default = currentRouteName;

  /**
    Returns the currently active route name.
  
  Example:
  
  ```javascript
  function validateRouteName() {
    equal(currentRouteName(), 'some.path', "correct route was transitioned into.");
  }
  visit('/some/path').then(validateRouteName)
  ```
  
  @method currentRouteName
  @return {Object} The name of the currently active route.
  @since 1.5.0
  @public
  */
  function currentRouteName(app) {
    var routingService = app.__container__.lookup('service:-routing');
    return (0, _metal.get)(routingService, 'currentRouteName');
  } /**
    @module ember
    */
});
enifed('ember-testing/lib/helpers/current_url', ['exports', '@ember/-internals/metal'], function (exports, _metal) {
  'use strict';

  exports.default = currentURL;


  /**
    Returns the current URL.
  
  Example:
  
  ```javascript
  function validateURL() {
    equal(currentURL(), '/some/path', "correct URL was transitioned into.");
  }
  
  click('#some-link-id').then(validateURL);
  ```
  
  @method currentURL
  @return {Object} The currently active URL.
  @since 1.5.0
  @public
  */
  function currentURL(app) {
    var router = app.__container__.lookup('router:main');
    return (0, _metal.get)(router, 'location').getURL();
  } /**
    @module ember
    */
});
enifed('ember-testing/lib/helpers/fill_in', ['exports', 'ember-testing/lib/events', 'ember-testing/lib/helpers/-is-form-control'], function (exports, _events, _isFormControl) {
  'use strict';

  exports.default = fillIn;


  /**
    Fills in an input element with some text.
  
    Example:
  
    ```javascript
    fillIn('#email', 'you@example.com').then(function() {
      // assert something
    });
    ```
  
    @method fillIn
    @param {String} selector jQuery selector finding an input element on the DOM
    to fill text with
    @param {String} text text to place inside the input element
    @return {RSVP.Promise<undefined>}
    @public
  */
  /**
  @module ember
  */
  function fillIn(app, selector, contextOrText, text) {
    var $el = void 0,
        el = void 0,
        context = void 0;
    if (text === undefined) {
      text = contextOrText;
    } else {
      context = contextOrText;
    }
    $el = app.testHelpers.findWithAssert(selector, context);
    el = $el[0];
    (0, _events.focus)(el);

    if ((0, _isFormControl.default)(el)) {
      el.value = text;
    } else {
      el.innerHTML = text;
    }

    (0, _events.fireEvent)(el, 'input');
    (0, _events.fireEvent)(el, 'change');

    return app.testHelpers.wait();
  }
});
enifed('ember-testing/lib/helpers/find', ['exports', '@ember/-internals/metal', '@ember/debug', '@ember/-internals/views'], function (exports, _metal, _debug, _views) {
  'use strict';

  exports.default = find;


  /**
    Finds an element in the context of the app's container element. A simple alias
    for `app.$(selector)`.
  
    Example:
  
    ```javascript
    var $el = find('.my-selector');
    ```
  
    With the `context` param:
  
    ```javascript
    var $el = find('.my-selector', '.parent-element-class');
    ```
  
    @method find
    @param {String} selector jQuery selector for element lookup
    @param {String} [context] (optional) jQuery selector that will limit the selector
                              argument to find only within the context's children
    @return {Object} DOM element representing the results of the query
    @public
  */
  function find(app, selector, context) {
    if (_views.jQueryDisabled) {
      true && !false && (0, _debug.assert)('If jQuery is disabled, please import and use helpers from @ember/test-helpers [https://github.com/emberjs/ember-test-helpers]. Note: `find` is not an available helper.');
    }
    var $el = void 0;
    context = context || (0, _metal.get)(app, 'rootElement');
    $el = app.$(selector, context);
    return $el;
  } /**
    @module ember
    */
});
enifed('ember-testing/lib/helpers/find_with_assert', ['exports'], function (exports) {
  'use strict';

  exports.default = findWithAssert;
  /**
  @module ember
  */
  /**
    Like `find`, but throws an error if the element selector returns no results.
  
    Example:
  
    ```javascript
    var $el = findWithAssert('.doesnt-exist'); // throws error
    ```
  
    With the `context` param:
  
    ```javascript
    var $el = findWithAssert('.selector-id', '.parent-element-class'); // assert will pass
    ```
  
    @method findWithAssert
    @param {String} selector jQuery selector string for finding an element within
    the DOM
    @param {String} [context] (optional) jQuery selector that will limit the
    selector argument to find only within the context's children
    @return {Object} jQuery object representing the results of the query
    @throws {Error} throws error if object returned has a length of 0
    @public
  */
  function findWithAssert(app, selector, context) {
    var $el = app.testHelpers.find(selector, context);
    if ($el.length === 0) {
      throw new Error('Element ' + selector + ' not found.');
    }
    return $el;
  }
});
enifed("ember-testing/lib/helpers/key_event", ["exports"], function (exports) {
  "use strict";

  exports.default = keyEvent;
  /**
  @module ember
  */
  /**
    Simulates a key event, e.g. `keypress`, `keydown`, `keyup` with the desired keyCode
    Example:
    ```javascript
    keyEvent('.some-jQuery-selector', 'keypress', 13).then(function() {
     // assert something
    });
    ```
    @method keyEvent
    @param {String} selector jQuery selector for finding element on the DOM
    @param {String} type the type of key event, e.g. `keypress`, `keydown`, `keyup`
    @param {Number} keyCode the keyCode of the simulated key event
    @return {RSVP.Promise<undefined>}
    @since 1.5.0
    @public
  */
  function keyEvent(app, selector, contextOrType, typeOrKeyCode, keyCode) {
    var context = void 0,
        type = void 0;

    if (keyCode === undefined) {
      context = null;
      keyCode = typeOrKeyCode;
      type = contextOrType;
    } else {
      context = contextOrType;
      type = typeOrKeyCode;
    }

    return app.testHelpers.triggerEvent(selector, context, type, {
      keyCode: keyCode,
      which: keyCode
    });
  }
});
enifed('ember-testing/lib/helpers/pause_test', ['exports', '@ember/-internals/runtime', '@ember/debug'], function (exports, _runtime, _debug) {
  'use strict';

  exports.resumeTest = resumeTest;
  exports.pauseTest = pauseTest;
  /**
  @module ember
  */
  var resume = void 0;

  /**
   Resumes a test paused by `pauseTest`.
  
   @method resumeTest
   @return {void}
   @public
  */
  function resumeTest() {
    true && !resume && (0, _debug.assert)('Testing has not been paused. There is nothing to resume.', resume);

    resume();
    resume = undefined;
  }

  /**
   Pauses the current test - this is useful for debugging while testing or for test-driving.
   It allows you to inspect the state of your application at any point.
   Example (The test will pause before clicking the button):
  
   ```javascript
   visit('/')
   return pauseTest();
   click('.btn');
   ```
  
   You may want to turn off the timeout before pausing.
  
   qunit (as of 2.4.0):
  
   ```
   visit('/');
   assert.timeout(0);
   return pauseTest();
   click('.btn');
   ```
  
   mocha:
  
   ```
   visit('/');
   this.timeout(0);
   return pauseTest();
   click('.btn');
   ```
  
  
   @since 1.9.0
   @method pauseTest
   @return {Object} A promise that will never resolve
   @public
  */
  function pauseTest() {
    (0, _debug.info)('Testing paused. Use `resumeTest()` to continue.');

    return new _runtime.RSVP.Promise(function (resolve) {
      resume = resolve;
    }, 'TestAdapter paused promise');
  }
});
enifed('ember-testing/lib/helpers/trigger_event', ['exports', 'ember-testing/lib/events'], function (exports, _events) {
  'use strict';

  exports.default = triggerEvent;

  /**
    Triggers the given DOM event on the element identified by the provided selector.
    Example:
    ```javascript
    triggerEvent('#some-elem-id', 'blur');
    ```
    This is actually used internally by the `keyEvent` helper like so:
    ```javascript
    triggerEvent('#some-elem-id', 'keypress', { keyCode: 13 });
    ```
   @method triggerEvent
   @param {String} selector jQuery selector for finding element on the DOM
   @param {String} [context] jQuery selector that will limit the selector
                             argument to find only within the context's children
   @param {String} type The event type to be triggered.
   @param {Object} [options] The options to be passed to jQuery.Event.
   @return {RSVP.Promise<undefined>}
   @since 1.5.0
   @public
  */
  function triggerEvent(app, selector, contextOrType, typeOrOptions, possibleOptions) {
    var arity = arguments.length;
    var context = void 0,
        type = void 0,
        options = void 0;

    if (arity === 3) {
      // context and options are optional, so this is
      // app, selector, type
      context = null;
      type = contextOrType;
      options = {};
    } else if (arity === 4) {
      // context and options are optional, so this is
      if (typeof typeOrOptions === 'object') {
        // either
        // app, selector, type, options
        context = null;
        type = contextOrType;
        options = typeOrOptions;
      } else {
        // or
        // app, selector, context, type
        context = contextOrType;
        type = typeOrOptions;
        options = {};
      }
    } else {
      context = contextOrType;
      type = typeOrOptions;
      options = possibleOptions;
    }

    var $el = app.testHelpers.findWithAssert(selector, context);
    var el = $el[0];

    (0, _events.fireEvent)(el, type, options);

    return app.testHelpers.wait();
  } /**
    @module ember
    */
});
enifed('ember-testing/lib/helpers/visit', ['exports', '@ember/runloop'], function (exports, _runloop) {
  'use strict';

  exports.default = visit;


  /**
    Loads a route, sets up any controllers, and renders any templates associated
    with the route as though a real user had triggered the route change while
    using your app.
  
    Example:
  
    ```javascript
    visit('posts/index').then(function() {
      // assert something
    });
    ```
  
    @method visit
    @param {String} url the name of the route
    @return {RSVP.Promise<undefined>}
    @public
  */
  function visit(app, url) {
    var router = app.__container__.lookup('router:main');
    var shouldHandleURL = false;

    app.boot().then(function () {
      router.location.setURL(url);

      if (shouldHandleURL) {
        (0, _runloop.run)(app.__deprecatedInstance__, 'handleURL', url);
      }
    });

    if (app._readinessDeferrals > 0) {
      router.initialURL = url;
      (0, _runloop.run)(app, 'advanceReadiness');
      delete router.initialURL;
    } else {
      shouldHandleURL = true;
    }

    return app.testHelpers.wait();
  }
});
enifed('ember-testing/lib/helpers/wait', ['exports', 'ember-testing/lib/test/waiters', '@ember/-internals/runtime', '@ember/runloop', 'ember-testing/lib/test/pending_requests'], function (exports, _waiters, _runtime, _runloop, _pending_requests) {
  'use strict';

  exports.default = wait;


  /**
    Causes the run loop to process any pending events. This is used to ensure that
    any async operations from other helpers (or your assertions) have been processed.
  
    This is most often used as the return value for the helper functions (see 'click',
    'fillIn','visit',etc). However, there is a method to register a test helper which
    utilizes this method without the need to actually call `wait()` in your helpers.
  
    The `wait` helper is built into `registerAsyncHelper` by default. You will not need
    to `return app.testHelpers.wait();` - the wait behavior is provided for you.
  
    Example:
  
    ```javascript
    import { registerAsyncHelper } from '@ember/test';
  
    registerAsyncHelper('loginUser', function(app, username, password) {
      visit('secured/path/here')
        .fillIn('#username', username)
        .fillIn('#password', password)
        .click('.submit');
    });
    ```
  
    @method wait
    @param {Object} value The value to be returned.
    @return {RSVP.Promise<any>} Promise that resolves to the passed value.
    @public
    @since 1.0.0
  */
  /**
  @module ember
  */
  function wait(app, value) {
    return new _runtime.RSVP.Promise(function (resolve) {
      var router = app.__container__.lookup('router:main');

      // Every 10ms, poll for the async thing to have finished
      var watcher = setInterval(function () {
        // 1. If the router is loading, keep polling
        var routerIsLoading = router._routerMicrolib && !!router._routerMicrolib.activeTransition;
        if (routerIsLoading) {
          return;
        }

        // 2. If there are pending Ajax requests, keep polling
        if ((0, _pending_requests.pendingRequests)()) {
          return;
        }

        // 3. If there are scheduled timers or we are inside of a run loop, keep polling
        if ((0, _runloop.hasScheduledTimers)() || (0, _runloop.getCurrentRunLoop)()) {
          return;
        }

        if ((0, _waiters.checkWaiters)()) {
          return;
        }

        // Stop polling
        clearInterval(watcher);

        // Synchronously resolve the promise
        (0, _runloop.run)(null, resolve, value);
      }, 10);
    });
  }
});
enifed('ember-testing/lib/initializers', ['@ember/application'], function (_application) {
  'use strict';

  var name = 'deferReadiness in `testing` mode';

  (0, _application.onLoad)('Ember.Application', function (Application) {
    if (!Application.initializers[name]) {
      Application.initializer({
        name: name,

        initialize: function (application) {
          if (application.testing) {
            application.deferReadiness();
          }
        }
      });
    }
  });
});
enifed('ember-testing/lib/setup_for_testing', ['exports', '@ember/debug', '@ember/-internals/views', 'ember-testing/lib/test/adapter', 'ember-testing/lib/test/pending_requests', 'ember-testing/lib/adapters/adapter', 'ember-testing/lib/adapters/qunit'], function (exports, _debug, _views, _adapter, _pending_requests, _adapter2, _qunit) {
  'use strict';

  exports.default = setupForTesting;


  /**
    Sets Ember up for testing. This is useful to perform
    basic setup steps in order to unit test.
  
    Use `App.setupForTesting` to perform integration tests (full
    application testing).
  
    @method setupForTesting
    @namespace Ember
    @since 1.5.0
    @private
  */
  /* global self */

  function setupForTesting() {
    (0, _debug.setTesting)(true);

    var adapter = (0, _adapter.getAdapter)();
    // if adapter is not manually set default to QUnit
    if (!adapter) {
      (0, _adapter.setAdapter)(typeof self.QUnit === 'undefined' ? _adapter2.default.create() : _qunit.default.create());
    }

    if (!_views.jQueryDisabled) {
      (0, _views.jQuery)(document).off('ajaxSend', _pending_requests.incrementPendingRequests);
      (0, _views.jQuery)(document).off('ajaxComplete', _pending_requests.decrementPendingRequests);

      (0, _pending_requests.clearPendingRequests)();

      (0, _views.jQuery)(document).on('ajaxSend', _pending_requests.incrementPendingRequests);
      (0, _views.jQuery)(document).on('ajaxComplete', _pending_requests.decrementPendingRequests);
    }
  }
});
enifed('ember-testing/lib/support', ['@ember/debug', '@ember/-internals/views', '@ember/-internals/browser-environment'], function (_debug, _views, _browserEnvironment) {
  'use strict';

  /**
    @module ember
  */

  var $ = _views.jQuery;

  /**
    This method creates a checkbox and triggers the click event to fire the
    passed in handler. It is used to correct for a bug in older versions
    of jQuery (e.g 1.8.3).
  
    @private
    @method testCheckboxClick
  */
  function testCheckboxClick(handler) {
    var input = document.createElement('input');
    $(input).attr('type', 'checkbox').css({ position: 'absolute', left: '-1000px', top: '-1000px' }).appendTo('body').on('click', handler).trigger('click').remove();
  }

  if (_browserEnvironment.hasDOM && !_views.jQueryDisabled) {
    $(function () {
      /*
        Determine whether a checkbox checked using jQuery's "click" method will have
        the correct value for its checked property.
         If we determine that the current jQuery version exhibits this behavior,
        patch it to work correctly as in the commit for the actual fix:
        https://github.com/jquery/jquery/commit/1fb2f92.
      */
      testCheckboxClick(function () {
        if (!this.checked && !$.event.special.click) {
          $.event.special.click = {
            // For checkbox, fire native event so checked state will be right
            trigger: function () {
              if (this.nodeName === 'INPUT' && this.type === 'checkbox' && this.click) {
                this.click();
                return false;
              }
            }
          };
        }
      });

      // Try again to verify that the patch took effect or blow up.
      testCheckboxClick(function () {
        true && (0, _debug.warn)("clicked checkboxes should be checked! the jQuery patch didn't work", this.checked, {
          id: 'ember-testing.test-checkbox-click'
        });
      });
    });
  }
});
enifed('ember-testing/lib/test', ['exports', 'ember-testing/lib/test/helpers', 'ember-testing/lib/test/on_inject_helpers', 'ember-testing/lib/test/promise', 'ember-testing/lib/test/waiters', 'ember-testing/lib/test/adapter'], function (exports, _helpers, _on_inject_helpers, _promise, _waiters, _adapter) {
  'use strict';

  /**
    This is a container for an assortment of testing related functionality:
  
    * Choose your default test adapter (for your framework of choice).
    * Register/Unregister additional test helpers.
    * Setup callbacks to be fired when the test helpers are injected into
      your application.
  
    @class Test
    @namespace Ember
    @public
  */
  var Test = {
    /**
      Hash containing all known test helpers.
       @property _helpers
      @private
      @since 1.7.0
    */
    _helpers: _helpers.helpers,

    registerHelper: _helpers.registerHelper,
    registerAsyncHelper: _helpers.registerAsyncHelper,
    unregisterHelper: _helpers.unregisterHelper,
    onInjectHelpers: _on_inject_helpers.onInjectHelpers,
    Promise: _promise.default,
    promise: _promise.promise,
    resolve: _promise.resolve,
    registerWaiter: _waiters.registerWaiter,
    unregisterWaiter: _waiters.unregisterWaiter,
    checkWaiters: _waiters.checkWaiters
  };

  /**
   Used to allow ember-testing to communicate with a specific testing
   framework.
  
   You can manually set it before calling `App.setupForTesting()`.
  
   Example:
  
   ```javascript
   Ember.Test.adapter = MyCustomAdapter.create()
   ```
  
   If you do not set it, ember-testing will default to `Ember.Test.QUnitAdapter`.
  
   @public
   @for Ember.Test
   @property adapter
   @type {Class} The adapter to be used.
   @default Ember.Test.QUnitAdapter
  */
  /**
    @module ember
  */
  Object.defineProperty(Test, 'adapter', {
    get: _adapter.getAdapter,
    set: _adapter.setAdapter
  });

  exports.default = Test;
});
enifed('ember-testing/lib/test/adapter', ['exports', '@ember/-internals/error-handling'], function (exports, _errorHandling) {
  'use strict';

  exports.getAdapter = getAdapter;
  exports.setAdapter = setAdapter;
  exports.asyncStart = asyncStart;
  exports.asyncEnd = asyncEnd;


  var adapter = void 0;
  function getAdapter() {
    return adapter;
  }

  function setAdapter(value) {
    adapter = value;
    if (value && typeof value.exception === 'function') {
      (0, _errorHandling.setDispatchOverride)(adapterDispatch);
    } else {
      (0, _errorHandling.setDispatchOverride)(null);
    }
  }

  function asyncStart() {
    if (adapter) {
      adapter.asyncStart();
    }
  }

  function asyncEnd() {
    if (adapter) {
      adapter.asyncEnd();
    }
  }

  function adapterDispatch(error) {
    adapter.exception(error);

    console.error(error.stack); // eslint-disable-line no-console
  }
});
enifed('ember-testing/lib/test/helpers', ['exports', 'ember-testing/lib/test/promise'], function (exports, _promise) {
  'use strict';

  exports.helpers = undefined;
  exports.registerHelper = registerHelper;
  exports.registerAsyncHelper = registerAsyncHelper;
  exports.unregisterHelper = unregisterHelper;
  var helpers = exports.helpers = {};
  /**
   @module @ember/test
  */

  /**
    `registerHelper` is used to register a test helper that will be injected
    when `App.injectTestHelpers` is called.
  
    The helper method will always be called with the current Application as
    the first parameter.
  
    For example:
  
    ```javascript
    import { registerHelper } from '@ember/test';
    import { run } from '@ember/runloop';
  
    registerHelper('boot', function(app) {
      run(app, app.advanceReadiness);
    });
    ```
  
    This helper can later be called without arguments because it will be
    called with `app` as the first parameter.
  
    ```javascript
    import Application from '@ember/application';
  
    App = Application.create();
    App.injectTestHelpers();
    boot();
    ```
  
    @public
    @for @ember/test
    @static
    @method registerHelper
    @param {String} name The name of the helper method to add.
    @param {Function} helperMethod
    @param options {Object}
  */
  function registerHelper(name, helperMethod) {
    helpers[name] = {
      method: helperMethod,
      meta: { wait: false }
    };
  }

  /**
    `registerAsyncHelper` is used to register an async test helper that will be injected
    when `App.injectTestHelpers` is called.
  
    The helper method will always be called with the current Application as
    the first parameter.
  
    For example:
  
    ```javascript
    import { registerAsyncHelper } from '@ember/test';
    import { run } from '@ember/runloop';
  
    registerAsyncHelper('boot', function(app) {
      run(app, app.advanceReadiness);
    });
    ```
  
    The advantage of an async helper is that it will not run
    until the last async helper has completed.  All async helpers
    after it will wait for it complete before running.
  
  
    For example:
  
    ```javascript
    import { registerAsyncHelper } from '@ember/test';
  
    registerAsyncHelper('deletePost', function(app, postId) {
      click('.delete-' + postId);
    });
  
    // ... in your test
    visit('/post/2');
    deletePost(2);
    visit('/post/3');
    deletePost(3);
    ```
  
    @public
    @for @ember/test
    @method registerAsyncHelper
    @param {String} name The name of the helper method to add.
    @param {Function} helperMethod
    @since 1.2.0
  */
  function registerAsyncHelper(name, helperMethod) {
    helpers[name] = {
      method: helperMethod,
      meta: { wait: true }
    };
  }

  /**
    Remove a previously added helper method.
  
    Example:
  
    ```javascript
    import { unregisterHelper } from '@ember/test';
  
    unregisterHelper('wait');
    ```
  
    @public
    @method unregisterHelper
    @static
    @for @ember/test
    @param {String} name The helper to remove.
  */
  function unregisterHelper(name) {
    delete helpers[name];
    delete _promise.default.prototype[name];
  }
});
enifed("ember-testing/lib/test/on_inject_helpers", ["exports"], function (exports) {
  "use strict";

  exports.onInjectHelpers = onInjectHelpers;
  exports.invokeInjectHelpersCallbacks = invokeInjectHelpersCallbacks;
  var callbacks = exports.callbacks = [];

  /**
    Used to register callbacks to be fired whenever `App.injectTestHelpers`
    is called.
  
    The callback will receive the current application as an argument.
  
    Example:
  
    ```javascript
    import $ from 'jquery';
  
    Ember.Test.onInjectHelpers(function() {
      $(document).ajaxSend(function() {
        Test.pendingRequests++;
      });
  
      $(document).ajaxComplete(function() {
        Test.pendingRequests--;
      });
    });
    ```
  
    @public
    @for Ember.Test
    @method onInjectHelpers
    @param {Function} callback The function to be called.
  */
  function onInjectHelpers(callback) {
    callbacks.push(callback);
  }

  function invokeInjectHelpersCallbacks(app) {
    for (var i = 0; i < callbacks.length; i++) {
      callbacks[i](app);
    }
  }
});
enifed("ember-testing/lib/test/pending_requests", ["exports"], function (exports) {
  "use strict";

  exports.pendingRequests = pendingRequests;
  exports.clearPendingRequests = clearPendingRequests;
  exports.incrementPendingRequests = incrementPendingRequests;
  exports.decrementPendingRequests = decrementPendingRequests;
  var requests = [];

  function pendingRequests() {
    return requests.length;
  }

  function clearPendingRequests() {
    requests.length = 0;
  }

  function incrementPendingRequests(_, xhr) {
    requests.push(xhr);
  }

  function decrementPendingRequests(_, xhr) {
    setTimeout(function () {
      for (var i = 0; i < requests.length; i++) {
        if (xhr === requests[i]) {
          requests.splice(i, 1);
          break;
        }
      }
    }, 0);
  }
});
enifed('ember-testing/lib/test/promise', ['exports', 'ember-babel', '@ember/-internals/runtime', 'ember-testing/lib/test/run'], function (exports, _emberBabel, _runtime, _run) {
  'use strict';

  exports.promise = promise;
  exports.resolve = resolve;
  exports.getLastPromise = getLastPromise;


  var lastPromise = void 0;

  var TestPromise = function (_RSVP$Promise) {
    (0, _emberBabel.inherits)(TestPromise, _RSVP$Promise);

    function TestPromise() {
      (0, _emberBabel.classCallCheck)(this, TestPromise);

      var _this = (0, _emberBabel.possibleConstructorReturn)(this, _RSVP$Promise.apply(this, arguments));

      lastPromise = _this;
      return _this;
    }

    TestPromise.prototype.then = function then(_onFulfillment) {
      var _RSVP$Promise$prototy;

      var onFulfillment = typeof _onFulfillment === 'function' ? function (result) {
        return isolate(_onFulfillment, result);
      } : undefined;

      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      return (_RSVP$Promise$prototy = _RSVP$Promise.prototype.then).call.apply(_RSVP$Promise$prototy, [this, onFulfillment].concat(args));
    };

    return TestPromise;
  }(_runtime.RSVP.Promise);

  /**
    This returns a thenable tailored for testing.  It catches failed
    `onSuccess` callbacks and invokes the `Ember.Test.adapter.exception`
    callback in the last chained then.
  
    This method should be returned by async helpers such as `wait`.
  
    @public
    @for Ember.Test
    @method promise
    @param {Function} resolver The function used to resolve the promise.
    @param {String} label An optional string for identifying the promise.
  */

  exports.default = TestPromise;
  function promise(resolver, label) {
    var fullLabel = 'Ember.Test.promise: ' + (label || '<Unknown Promise>');
    return new TestPromise(resolver, fullLabel);
  }

  /**
    Replacement for `Ember.RSVP.resolve`
    The only difference is this uses
    an instance of `Ember.Test.Promise`
  
    @public
    @for Ember.Test
    @method resolve
    @param {Mixed} The value to resolve
    @since 1.2.0
  */
  function resolve(result, label) {
    return TestPromise.resolve(result, label);
  }

  function getLastPromise() {
    return lastPromise;
  }

  // This method isolates nested async methods
  // so that they don't conflict with other last promises.
  //
  // 1. Set `Ember.Test.lastPromise` to null
  // 2. Invoke method
  // 3. Return the last promise created during method
  function isolate(onFulfillment, result) {
    // Reset lastPromise for nested helpers
    lastPromise = null;

    var value = onFulfillment(result);

    var promise = lastPromise;
    lastPromise = null;

    // If the method returned a promise
    // return that promise. If not,
    // return the last async helper's promise
    if (value && value instanceof TestPromise || !promise) {
      return value;
    } else {
      return (0, _run.default)(function () {
        return resolve(promise).then(function () {
          return value;
        });
      });
    }
  }
});
enifed('ember-testing/lib/test/run', ['exports', '@ember/runloop'], function (exports, _runloop) {
  'use strict';

  exports.default = run;
  function run(fn) {
    if (!(0, _runloop.getCurrentRunLoop)()) {
      return (0, _runloop.run)(fn);
    } else {
      return fn();
    }
  }
});
enifed("ember-testing/lib/test/waiters", ["exports"], function (exports) {
  "use strict";

  exports.registerWaiter = registerWaiter;
  exports.unregisterWaiter = unregisterWaiter;
  exports.checkWaiters = checkWaiters;
  /**
   @module @ember/test
  */
  var contexts = [];
  var callbacks = [];

  /**
     This allows ember-testing to play nicely with other asynchronous
     events, such as an application that is waiting for a CSS3
     transition or an IndexDB transaction. The waiter runs periodically
     after each async helper (i.e. `click`, `andThen`, `visit`, etc) has executed,
     until the returning result is truthy. After the waiters finish, the next async helper
     is executed and the process repeats.
  
     For example:
  
     ```javascript
     import { registerWaiter } from '@ember/test';
  
     registerWaiter(function() {
       return myPendingTransactions() === 0;
     });
     ```
     The `context` argument allows you to optionally specify the `this`
     with which your callback will be invoked.
  
     For example:
  
     ```javascript
     import { registerWaiter } from '@ember/test';
  
     registerWaiter(MyDB, MyDB.hasPendingTransactions);
     ```
  
     @public
     @for @ember/test
     @static
     @method registerWaiter
     @param {Object} context (optional)
     @param {Function} callback
     @since 1.2.0
  */
  function registerWaiter(context, callback) {
    if (arguments.length === 1) {
      callback = context;
      context = null;
    }
    if (indexOf(context, callback) > -1) {
      return;
    }
    contexts.push(context);
    callbacks.push(callback);
  }

  /**
     `unregisterWaiter` is used to unregister a callback that was
     registered with `registerWaiter`.
  
     @public
     @for @ember/test
     @static
     @method unregisterWaiter
     @param {Object} context (optional)
     @param {Function} callback
     @since 1.2.0
  */
  function unregisterWaiter(context, callback) {
    if (!callbacks.length) {
      return;
    }
    if (arguments.length === 1) {
      callback = context;
      context = null;
    }
    var i = indexOf(context, callback);
    if (i === -1) {
      return;
    }
    contexts.splice(i, 1);
    callbacks.splice(i, 1);
  }

  /**
    Iterates through each registered test waiter, and invokes
    its callback. If any waiter returns false, this method will return
    true indicating that the waiters have not settled yet.
  
    This is generally used internally from the acceptance/integration test
    infrastructure.
  
    @public
    @for @ember/test
    @static
    @method checkWaiters
  */
  function checkWaiters() {
    if (!callbacks.length) {
      return false;
    }
    for (var i = 0; i < callbacks.length; i++) {
      var context = contexts[i];
      var callback = callbacks[i];
      if (!callback.call(context)) {
        return true;
      }
    }
    return false;
  }

  function indexOf(context, callback) {
    for (var i = 0; i < callbacks.length; i++) {
      if (callbacks[i] === callback && contexts[i] === context) {
        return i;
      }
    }
    return -1;
  }
});
enifed('ember/index', ['exports', 'require', '@ember/-internals/environment', 'node-module', '@ember/-internals/utils', '@ember/-internals/container', '@ember/instrumentation', '@ember/-internals/meta', '@ember/-internals/metal', '@ember/canary-features', '@ember/debug', 'backburner', '@ember/-internals/console', '@ember/controller', '@ember/controller/lib/controller_mixin', '@ember/string', '@ember/service', '@ember/object/computed', '@ember/-internals/runtime', '@ember/-internals/glimmer', 'ember/version', '@ember/-internals/views', '@ember/-internals/routing', '@ember/-internals/extension-support', '@ember/error', '@ember/runloop', '@ember/-internals/error-handling', '@ember/-internals/owner', '@ember/application', '@ember/application/globals-resolver', '@ember/application/instance', '@ember/engine', '@ember/engine/instance', '@ember/map', '@ember/map/with-default', '@ember/map/lib/ordered-set', '@ember/polyfills', '@ember/deprecated-features'], function (exports, _require2, _environment, _nodeModule, _utils, _container, _instrumentation, _meta, _metal, _canaryFeatures, _debug, _backburner, _console, _controller, _controller_mixin, _string, _service, _computed, _runtime, _glimmer, _version, _views, _routing, _extensionSupport, _error, _runloop, _errorHandling, _owner, _application, _globalsResolver, _instance, _engine, _instance2, _map, _withDefault, _orderedSet, _polyfills, _deprecatedFeatures) {
  'use strict';

  // ****@ember/-internals/environment****

  // eslint-disable-next-line import/no-unresolved
  var Ember = typeof _environment.context.imports.Ember === 'object' && _environment.context.imports.Ember || {};

  Ember.isNamespace = true;
  Ember.toString = function () {
    return 'Ember';
  };

  Object.defineProperty(Ember, 'ENV', {
    get: _environment.getENV,
    enumerable: false
  });

  Object.defineProperty(Ember, 'lookup', {
    get: _environment.getLookup,
    set: _environment.setLookup,
    enumerable: false
  });

  if (_deprecatedFeatures.EMBER_EXTEND_PROTOTYPES) {
    Object.defineProperty(Ember, 'EXTEND_PROTOTYPES', {
      enumerable: false,
      get: function () {
        true && !false && (0, _debug.deprecate)('Accessing Ember.EXTEND_PROTOTYPES is deprecated, please migrate to Ember.ENV.EXTEND_PROTOTYPES', false, {
          id: 'ember-env.old-extend-prototypes',
          until: '4.0.0'
        });

        return _environment.ENV.EXTEND_PROTOTYPES;
      }
    });
  }

  // ****@ember/application****
  Ember.getOwner = _owner.getOwner;
  Ember.setOwner = _owner.setOwner;
  Ember.Application = _application.default;
  Ember.DefaultResolver = Ember.Resolver = _globalsResolver.default;
  Ember.ApplicationInstance = _instance.default;

  // ****@ember/engine****
  Ember.Engine = _engine.default;
  Ember.EngineInstance = _instance2.default;

  // ****@ember/map****
  Ember.OrderedSet = _orderedSet.default;
  Ember.__OrderedSet__ = _orderedSet.__OrderedSet__;
  Ember.Map = _map.default;
  Ember.MapWithDefault = _withDefault.default;

  // ****@ember/polyfills****
  Ember.assign = _polyfills.assign;
  Ember.merge = _polyfills.merge;

  // ****@ember/-internals/utils****
  Ember.generateGuid = _utils.generateGuid;
  Ember.GUID_KEY = _utils.GUID_KEY;
  Ember.guidFor = _utils.guidFor;
  Ember.inspect = _utils.inspect;
  Ember.makeArray = _utils.makeArray;
  Ember.canInvoke = _utils.canInvoke;
  Ember.tryInvoke = _utils.tryInvoke;
  Ember.wrap = _utils.wrap;
  Ember.uuid = _utils.uuid;
  Ember.NAME_KEY = _utils.NAME_KEY;
  Ember._Cache = _utils.Cache;

  // ****@ember/-internals/container****
  Ember.Container = _container.Container;
  Ember.Registry = _container.Registry;

  // ****@ember/debug****
  Ember.assert = _debug.assert;
  Ember.warn = _debug.warn;
  Ember.debug = _debug.debug;
  Ember.deprecate = _debug.deprecate;
  Ember.deprecateFunc = _debug.deprecateFunc;
  Ember.runInDebug = _debug.runInDebug;

  // ****@ember/error****
  Ember.Error = _error.default;

  /**
    @public
    @class Ember.Debug
  */
  Ember.Debug = {
    registerDeprecationHandler: _debug.registerDeprecationHandler,
    registerWarnHandler: _debug.registerWarnHandler
  };

  // ****@ember/instrumentation****
  Ember.instrument = _instrumentation.instrument;
  Ember.subscribe = _instrumentation.subscribe;
  Ember.Instrumentation = {
    instrument: _instrumentation.instrument,
    subscribe: _instrumentation.subscribe,
    unsubscribe: _instrumentation.unsubscribe,
    reset: _instrumentation.reset
  };

  // ****@ember/runloop****

  // Using _globalsRun here so that mutating the function (adding
  // `next`, `later`, etc to it) is only available in globals builds
  Ember.run = _runloop._globalsRun;
  Ember.run.backburner = _runloop.backburner;
  Ember.run.begin = _runloop.begin;
  Ember.run.bind = _runloop.bind;
  Ember.run.cancel = _runloop.cancel;
  Ember.run.debounce = _runloop.debounce;
  Ember.run.end = _runloop.end;
  Ember.run.hasScheduledTimers = _runloop.hasScheduledTimers;
  Ember.run.join = _runloop.join;
  Ember.run.later = _runloop.later;
  Ember.run.next = _runloop.next;
  Ember.run.once = _runloop.once;
  Ember.run.schedule = _runloop.schedule;
  Ember.run.scheduleOnce = _runloop.scheduleOnce;
  Ember.run.throttle = _runloop.throttle;
  Ember.run.cancelTimers = _runloop.cancelTimers;
  Object.defineProperty(Ember.run, 'currentRunLoop', {
    get: _runloop.getCurrentRunLoop,
    enumerable: false
  });

  // ****@ember/-internals/metal****

  // Using _globalsComputed here so that mutating the function is only available
  // in globals builds
  var computed = _metal._globalsComputed;
  Ember.computed = computed;
  computed.alias = _metal.alias;
  Ember.ComputedProperty = _metal.ComputedProperty;
  Ember.cacheFor = _metal.getCachedValueFor;
  Ember.meta = _meta.meta;
  Ember.get = _metal.get;
  Ember.getWithDefault = _metal.getWithDefault;
  Ember._getPath = _metal._getPath;
  Ember.set = _metal.set;
  Ember.trySet = _metal.trySet;
  Ember.FEATURES = (0, _polyfills.assign)({ isEnabled: _canaryFeatures.isEnabled }, _canaryFeatures.FEATURES);
  Ember._Cache = _utils.Cache;
  Ember.on = _metal.on;
  Ember.addListener = _metal.addListener;
  Ember.removeListener = _metal.removeListener;
  Ember.sendEvent = _metal.sendEvent;
  Ember.hasListeners = _metal.hasListeners;
  Ember.isNone = _metal.isNone;
  Ember.isEmpty = _metal.isEmpty;
  Ember.isBlank = _metal.isBlank;
  Ember.isPresent = _metal.isPresent;
  Ember.notifyPropertyChange = _metal.notifyPropertyChange;
  Ember.overrideChains = _metal.overrideChains;
  Ember.beginPropertyChanges = _metal.beginPropertyChanges;
  Ember.endPropertyChanges = _metal.endPropertyChanges;
  Ember.changeProperties = _metal.changeProperties;
  Ember.platform = {
    defineProperty: true,
    hasPropertyAccessors: true
  };
  Ember.defineProperty = _metal.defineProperty;
  Ember.watchKey = _metal.watchKey;
  Ember.unwatchKey = _metal.unwatchKey;
  Ember.removeChainWatcher = _metal.removeChainWatcher;
  Ember._ChainNode = _metal.ChainNode;
  Ember.finishChains = _metal.finishChains;
  Ember.watchPath = _metal.watchPath;
  Ember.unwatchPath = _metal.unwatchPath;
  Ember.watch = _metal.watch;
  Ember.isWatching = _metal.isWatching;
  Ember.unwatch = _metal.unwatch;
  Ember.destroy = _meta.deleteMeta;
  Ember.libraries = _metal.libraries;
  Ember.getProperties = _metal.getProperties;
  Ember.setProperties = _metal.setProperties;
  Ember.expandProperties = _metal.expandProperties;
  Ember.addObserver = _metal.addObserver;
  Ember.removeObserver = _metal.removeObserver;
  Ember.aliasMethod = _metal.aliasMethod;
  Ember.observer = _metal.observer;
  Ember.mixin = _metal.mixin;
  Ember.Mixin = _metal.Mixin;

  /**
    A function may be assigned to `Ember.onerror` to be called when Ember
    internals encounter an error. This is useful for specialized error handling
    and reporting code.
  
    ```javascript
    import $ from 'jquery';
  
    Ember.onerror = function(error) {
      $.ajax('/report-error', 'POST', {
        stack: error.stack,
        otherInformation: 'whatever app state you want to provide'
      });
    };
    ```
  
    Internally, `Ember.onerror` is used as Backburner's error handler.
  
    @event onerror
    @for Ember
    @param {Exception} error the error object
    @public
  */
  Object.defineProperty(Ember, 'onerror', {
    get: _errorHandling.getOnerror,
    set: _errorHandling.setOnerror,
    enumerable: false
  });

  Object.defineProperty(Ember, 'testing', {
    get: _debug.isTesting,
    set: _debug.setTesting,
    enumerable: false
  });

  Ember._Backburner = _backburner.default;

  // ****@ember/-internals/console****
  if (_deprecatedFeatures.LOGGER) {
    Ember.Logger = _console.default;
  }

  // ****@ember/-internals/runtime****
  Ember.A = _runtime.A;
  Ember.String = {
    loc: _string.loc,
    w: _string.w,
    dasherize: _string.dasherize,
    decamelize: _string.decamelize,
    camelize: _string.camelize,
    classify: _string.classify,
    underscore: _string.underscore,
    capitalize: _string.capitalize
  };
  Ember.Object = _runtime.Object;
  Ember._RegistryProxyMixin = _runtime.RegistryProxyMixin;
  Ember._ContainerProxyMixin = _runtime.ContainerProxyMixin;
  Ember.compare = _runtime.compare;
  Ember.copy = _runtime.copy;
  Ember.isEqual = _runtime.isEqual;

  /**
  @module ember
  */

  /**
    Namespace for injection helper methods.
  
    @class inject
    @namespace Ember
    @static
    @public
  */
  Ember.inject = function inject() {
    true && !false && (0, _debug.assert)('Injected properties must be created through helpers, see \'' + Object.keys(inject).map(function (k) {
      return '\'inject.' + k + '\'';
    }).join(' or ') + '\'');
  };
  Ember.inject.service = _service.inject;
  Ember.inject.controller = _controller.inject;

  Ember.Array = _runtime.Array;
  Ember.Comparable = _runtime.Comparable;
  Ember.Enumerable = _runtime.Enumerable;
  Ember.ArrayProxy = _runtime.ArrayProxy;
  Ember.ObjectProxy = _runtime.ObjectProxy;
  Ember.ActionHandler = _runtime.ActionHandler;
  Ember.CoreObject = _runtime.CoreObject;
  Ember.NativeArray = _runtime.NativeArray;
  Ember.Copyable = _runtime.Copyable;
  Ember.MutableEnumerable = _runtime.MutableEnumerable;
  Ember.MutableArray = _runtime.MutableArray;
  Ember.TargetActionSupport = _runtime.TargetActionSupport;
  Ember.Evented = _runtime.Evented;
  Ember.PromiseProxyMixin = _runtime.PromiseProxyMixin;
  Ember.Observable = _runtime.Observable;
  Ember.typeOf = _runtime.typeOf;
  Ember.isArray = _runtime.isArray;
  Ember.Object = _runtime.Object;
  Ember.onLoad = _application.onLoad;
  Ember.runLoadHooks = _application.runLoadHooks;
  Ember.Controller = _controller.default;
  Ember.ControllerMixin = _controller_mixin.default;
  Ember.Service = _service.default;
  Ember._ProxyMixin = _runtime._ProxyMixin;
  Ember.RSVP = _runtime.RSVP;
  Ember.Namespace = _runtime.Namespace;

  computed.empty = _computed.empty;
  computed.notEmpty = _computed.notEmpty;
  computed.none = _computed.none;
  computed.not = _computed.not;
  computed.bool = _computed.bool;
  computed.match = _computed.match;
  computed.equal = _computed.equal;
  computed.gt = _computed.gt;
  computed.gte = _computed.gte;
  computed.lt = _computed.lt;
  computed.lte = _computed.lte;
  computed.oneWay = _computed.oneWay;
  computed.reads = _computed.oneWay;
  computed.readOnly = _computed.readOnly;
  computed.deprecatingAlias = _computed.deprecatingAlias;
  computed.and = _computed.and;
  computed.or = _computed.or;

  computed.sum = _computed.sum;
  computed.min = _computed.min;
  computed.max = _computed.max;
  computed.map = _computed.map;
  computed.sort = _computed.sort;
  computed.setDiff = _computed.setDiff;
  computed.mapBy = _computed.mapBy;
  computed.filter = _computed.filter;
  computed.filterBy = _computed.filterBy;
  computed.uniq = _computed.uniq;

  computed.uniqBy = _computed.uniqBy;
  computed.union = _computed.union;
  computed.intersect = _computed.intersect;
  computed.collect = _computed.collect;

  /**
    Defines the hash of localized strings for the current language. Used by
    the `String.loc` helper. To localize, add string values to this
    hash.
  
    @property STRINGS
    @for Ember
    @type Object
    @private
  */
  Object.defineProperty(Ember, 'STRINGS', {
    configurable: false,
    get: _string._getStrings,
    set: _string._setStrings
  });

  /**
    Whether searching on the global for new Namespace instances is enabled.
  
    This is only exported here as to not break any addons.  Given the new
    visit API, you will have issues if you treat this as a indicator of
    booted.
  
    Internally this is only exposing a flag in Namespace.
  
    @property BOOTED
    @for Ember
    @type Boolean
    @private
  */
  Object.defineProperty(Ember, 'BOOTED', {
    configurable: false,
    enumerable: false,
    get: _metal.isNamespaceSearchDisabled,
    set: _metal.setNamespaceSearchDisabled
  });

  // ****@ember/-internals/glimmer****
  Ember.Component = _glimmer.Component;
  _glimmer.Helper.helper = _glimmer.helper;
  Ember.Helper = _glimmer.Helper;
  Ember.Checkbox = _glimmer.Checkbox;
  Ember.TextField = _glimmer.TextField;
  Ember.TextArea = _glimmer.TextArea;
  Ember.LinkComponent = _glimmer.LinkComponent;
  Ember._setComponentManager = _glimmer.setComponentManager;
  Ember._componentManagerCapabilities = _glimmer.capabilities;
  Ember._setModifierManager = _glimmer.setModifierManager;
  Ember._modifierManagerCapabilties = _glimmer.modifierCapabilties;
  Ember.Handlebars = {
    template: _glimmer.template,
    Utils: {
      escapeExpression: _glimmer.escapeExpression
    }
  };
  Ember.HTMLBars = {
    template: _glimmer.template
  };

  if (_environment.ENV.EXTEND_PROTOTYPES.String) {
    String.prototype.htmlSafe = function () {
      return (0, _glimmer.htmlSafe)(this);
    };
  }
  Ember.String.htmlSafe = _glimmer.htmlSafe;
  Ember.String.isHTMLSafe = _glimmer.isHTMLSafe;

  /**
    Global hash of shared templates. This will automatically be populated
    by the build tools so that you can store your Handlebars templates in
    separate files that get loaded into JavaScript at buildtime.
  
    @property TEMPLATES
    @for Ember
    @type Object
    @private
  */
  Object.defineProperty(Ember, 'TEMPLATES', {
    get: _glimmer.getTemplates,
    set: _glimmer.setTemplates,
    configurable: false,
    enumerable: false
  });

  /**
    The semantic version
  
    @property VERSION
    @type String
    @public
  */
  Ember.VERSION = _version.default;

  // ****@ember/-internals/views****
  if (!_views.jQueryDisabled) {
    Ember.$ = _views.jQuery;
  }
  Ember.ViewUtils = {
    isSimpleClick: _views.isSimpleClick,
    getViewElement: _views.getViewElement,
    getViewBounds: _views.getViewBounds,
    getViewClientRects: _views.getViewClientRects,
    getViewBoundingClientRect: _views.getViewBoundingClientRect,
    getRootViews: _views.getRootViews,
    getChildViews: _views.getChildViews,
    isSerializationFirstNode: _glimmer.isSerializationFirstNode
  };
  Ember.TextSupport = _views.TextSupport;
  Ember.ComponentLookup = _views.ComponentLookup;
  Ember.EventDispatcher = _views.EventDispatcher;

  // ****@ember/-internals/routing****
  Ember.Location = _routing.Location;
  Ember.AutoLocation = _routing.AutoLocation;
  Ember.HashLocation = _routing.HashLocation;
  Ember.HistoryLocation = _routing.HistoryLocation;
  Ember.NoneLocation = _routing.NoneLocation;
  Ember.controllerFor = _routing.controllerFor;
  Ember.generateControllerFactory = _routing.generateControllerFactory;
  Ember.generateController = _routing.generateController;
  Ember.RouterDSL = _routing.RouterDSL;
  Ember.Router = _routing.Router;
  Ember.Route = _routing.Route;

  (0, _application.runLoadHooks)('Ember.Application', _application.default);

  Ember.DataAdapter = _extensionSupport.DataAdapter;
  Ember.ContainerDebugAdapter = _extensionSupport.ContainerDebugAdapter;

  if ((0, _require2.has)('ember-template-compiler')) {
    (0, _require2.default)('ember-template-compiler');
  }

  // do this to ensure that Ember.Test is defined properly on the global
  // if it is present.
  if ((0, _require2.has)('ember-testing')) {
    var testing = (0, _require2.default)('ember-testing');

    Ember.Test = testing.Test;
    Ember.Test.Adapter = testing.Adapter;
    Ember.Test.QUnitAdapter = testing.QUnitAdapter;
    Ember.setupForTesting = testing.setupForTesting;
  }

  (0, _application.runLoadHooks)('Ember');

  exports.default = Ember;


  if (_nodeModule.IS_NODE) {
    _nodeModule.module.exports = Ember;
  } else {
    _environment.context.exports.Ember = _environment.context.exports.Em = Ember;
  }

  /**
   @module jquery
   @public
   */

  /**
   @class jquery
   @public
   @static
   */

  /**
    Alias for jQuery
  
    @for jquery
    @method $
    @static
    @public
  */
});
enifed("ember/version", ["exports"], function (exports) {
  "use strict";

  exports.default = "3.7.3";
});
/*global enifed, module */
enifed('node-module', ['exports'], function(_exports) {
  var IS_NODE = typeof module === 'object' && typeof module.require === 'function';
  if (IS_NODE) {
    _exports.require = module.require;
    _exports.module = module;
    _exports.IS_NODE = IS_NODE;
  } else {
    _exports.require = null;
    _exports.module = null;
    _exports.IS_NODE = IS_NODE;
  }
});

enifed("route-recognizer", ["exports"], function (exports) {
    "use strict";

    var createObject = Object.create;
    function createMap() {
        var map = createObject(null);
        map["__"] = undefined;
        delete map["__"];
        return map;
    }

    var Target = function Target(path, matcher, delegate) {
        this.path = path;
        this.matcher = matcher;
        this.delegate = delegate;
    };
    Target.prototype.to = function to(target, callback) {
        var delegate = this.delegate;
        if (delegate && delegate.willAddRoute) {
            target = delegate.willAddRoute(this.matcher.target, target);
        }
        this.matcher.add(this.path, target);
        if (callback) {
            if (callback.length === 0) {
                throw new Error("You must have an argument in the function passed to `to`");
            }
            this.matcher.addChild(this.path, target, callback, this.delegate);
        }
    };
    var Matcher = function Matcher(target) {
        this.routes = createMap();
        this.children = createMap();
        this.target = target;
    };
    Matcher.prototype.add = function add(path, target) {
        this.routes[path] = target;
    };
    Matcher.prototype.addChild = function addChild(path, target, callback, delegate) {
        var matcher = new Matcher(target);
        this.children[path] = matcher;
        var match = generateMatch(path, matcher, delegate);
        if (delegate && delegate.contextEntered) {
            delegate.contextEntered(target, match);
        }
        callback(match);
    };
    function generateMatch(startingPath, matcher, delegate) {
        function match(path, callback) {
            var fullPath = startingPath + path;
            if (callback) {
                callback(generateMatch(fullPath, matcher, delegate));
            } else {
                return new Target(fullPath, matcher, delegate);
            }
        }

        return match;
    }
    function addRoute(routeArray, path, handler) {
        var len = 0;
        for (var i = 0; i < routeArray.length; i++) {
            len += routeArray[i].path.length;
        }
        path = path.substr(len);
        var route = { path: path, handler: handler };
        routeArray.push(route);
    }
    function eachRoute(baseRoute, matcher, callback, binding) {
        var routes = matcher.routes;
        var paths = Object.keys(routes);
        for (var i = 0; i < paths.length; i++) {
            var path = paths[i];
            var routeArray = baseRoute.slice();
            addRoute(routeArray, path, routes[path]);
            var nested = matcher.children[path];
            if (nested) {
                eachRoute(routeArray, nested, callback, binding);
            } else {
                callback.call(binding, routeArray);
            }
        }
    }
    var map = function (callback, addRouteCallback) {
        var matcher = new Matcher();
        callback(generateMatch("", matcher, this.delegate));
        eachRoute([], matcher, function (routes) {
            if (addRouteCallback) {
                addRouteCallback(this, routes);
            } else {
                this.add(routes);
            }
        }, this);
    };

    // Normalizes percent-encoded values in `path` to upper-case and decodes percent-encoded
    // values that are not reserved (i.e., unicode characters, emoji, etc). The reserved
    // chars are "/" and "%".
    // Safe to call multiple times on the same path.
    // Normalizes percent-encoded values in `path` to upper-case and decodes percent-encoded
    function normalizePath(path) {
        return path.split("/").map(normalizeSegment).join("/");
    }
    // We want to ensure the characters "%" and "/" remain in percent-encoded
    // form when normalizing paths, so replace them with their encoded form after
    // decoding the rest of the path
    var SEGMENT_RESERVED_CHARS = /%|\//g;
    function normalizeSegment(segment) {
        if (segment.length < 3 || segment.indexOf("%") === -1) {
            return segment;
        }
        return decodeURIComponent(segment).replace(SEGMENT_RESERVED_CHARS, encodeURIComponent);
    }
    // We do not want to encode these characters when generating dynamic path segments
    // See https://tools.ietf.org/html/rfc3986#section-3.3
    // sub-delims: "!", "$", "&", "'", "(", ")", "*", "+", ",", ";", "="
    // others allowed by RFC 3986: ":", "@"
    //
    // First encode the entire path segment, then decode any of the encoded special chars.
    //
    // The chars "!", "'", "(", ")", "*" do not get changed by `encodeURIComponent`,
    // so the possible encoded chars are:
    // ['%24', '%26', '%2B', '%2C', '%3B', '%3D', '%3A', '%40'].
    var PATH_SEGMENT_ENCODINGS = /%(?:2(?:4|6|B|C)|3(?:B|D|A)|40)/g;
    function encodePathSegment(str) {
        return encodeURIComponent(str).replace(PATH_SEGMENT_ENCODINGS, decodeURIComponent);
    }

    var escapeRegex = /(\/|\.|\*|\+|\?|\||\(|\)|\[|\]|\{|\}|\\)/g;
    var isArray = Array.isArray;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    function getParam(params, key) {
        if (typeof params !== "object" || params === null) {
            throw new Error("You must pass an object as the second argument to `generate`.");
        }
        if (!hasOwnProperty.call(params, key)) {
            throw new Error("You must provide param `" + key + "` to `generate`.");
        }
        var value = params[key];
        var str = typeof value === "string" ? value : "" + value;
        if (str.length === 0) {
            throw new Error("You must provide a param `" + key + "`.");
        }
        return str;
    }
    var eachChar = [];
    eachChar[0 /* Static */] = function (segment, currentState) {
        var state = currentState;
        var value = segment.value;
        for (var i = 0; i < value.length; i++) {
            var ch = value.charCodeAt(i);
            state = state.put(ch, false, false);
        }
        return state;
    };
    eachChar[1 /* Dynamic */] = function (_, currentState) {
        return currentState.put(47 /* SLASH */, true, true);
    };
    eachChar[2 /* Star */] = function (_, currentState) {
        return currentState.put(-1 /* ANY */, false, true);
    };
    eachChar[4 /* Epsilon */] = function (_, currentState) {
        return currentState;
    };
    var regex = [];
    regex[0 /* Static */] = function (segment) {
        return segment.value.replace(escapeRegex, "\\$1");
    };
    regex[1 /* Dynamic */] = function () {
        return "([^/]+)";
    };
    regex[2 /* Star */] = function () {
        return "(.+)";
    };
    regex[4 /* Epsilon */] = function () {
        return "";
    };
    var generate = [];
    generate[0 /* Static */] = function (segment) {
        return segment.value;
    };
    generate[1 /* Dynamic */] = function (segment, params) {
        var value = getParam(params, segment.value);
        if (RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS) {
            return encodePathSegment(value);
        } else {
            return value;
        }
    };
    generate[2 /* Star */] = function (segment, params) {
        return getParam(params, segment.value);
    };
    generate[4 /* Epsilon */] = function () {
        return "";
    };
    var EmptyObject = Object.freeze({});
    var EmptyArray = Object.freeze([]);
    // The `names` will be populated with the paramter name for each dynamic/star
    // segment. `shouldDecodes` will be populated with a boolean for each dyanamic/star
    // segment, indicating whether it should be decoded during recognition.
    function parse(segments, route, types) {
        // normalize route as not starting with a "/". Recognition will
        // also normalize.
        if (route.length > 0 && route.charCodeAt(0) === 47 /* SLASH */) {
                route = route.substr(1);
            }
        var parts = route.split("/");
        var names = undefined;
        var shouldDecodes = undefined;
        for (var i = 0; i < parts.length; i++) {
            var part = parts[i];
            var flags = 0;
            var type = 0;
            if (part === "") {
                type = 4 /* Epsilon */;
            } else if (part.charCodeAt(0) === 58 /* COLON */) {
                    type = 1 /* Dynamic */;
                } else if (part.charCodeAt(0) === 42 /* STAR */) {
                    type = 2 /* Star */;
                } else {
                type = 0 /* Static */;
            }
            flags = 2 << type;
            if (flags & 12 /* Named */) {
                    part = part.slice(1);
                    names = names || [];
                    names.push(part);
                    shouldDecodes = shouldDecodes || [];
                    shouldDecodes.push((flags & 4 /* Decoded */) !== 0);
                }
            if (flags & 14 /* Counted */) {
                    types[type]++;
                }
            segments.push({
                type: type,
                value: normalizeSegment(part)
            });
        }
        return {
            names: names || EmptyArray,
            shouldDecodes: shouldDecodes || EmptyArray
        };
    }
    function isEqualCharSpec(spec, char, negate) {
        return spec.char === char && spec.negate === negate;
    }
    // A State has a character specification and (`charSpec`) and a list of possible
    // subsequent states (`nextStates`).
    //
    // If a State is an accepting state, it will also have several additional
    // properties:
    //
    // * `regex`: A regular expression that is used to extract parameters from paths
    //   that reached this accepting state.
    // * `handlers`: Information on how to convert the list of captures into calls
    //   to registered handlers with the specified parameters
    // * `types`: How many static, dynamic or star segments in this route. Used to
    //   decide which route to use if multiple registered routes match a path.
    //
    // Currently, State is implemented naively by looping over `nextStates` and
    // comparing a character specification against a character. A more efficient
    // implementation would use a hash of keys pointing at one or more next states.
    var State = function State(states, id, char, negate, repeat) {
        this.states = states;
        this.id = id;
        this.char = char;
        this.negate = negate;
        this.nextStates = repeat ? id : null;
        this.pattern = "";
        this._regex = undefined;
        this.handlers = undefined;
        this.types = undefined;
    };
    State.prototype.regex = function regex$1() {
        if (!this._regex) {
            this._regex = new RegExp(this.pattern);
        }
        return this._regex;
    };
    State.prototype.get = function get(char, negate) {
        var this$1 = this;

        var nextStates = this.nextStates;
        if (nextStates === null) {
            return;
        }
        if (isArray(nextStates)) {
            for (var i = 0; i < nextStates.length; i++) {
                var child = this$1.states[nextStates[i]];
                if (isEqualCharSpec(child, char, negate)) {
                    return child;
                }
            }
        } else {
            var child$1 = this.states[nextStates];
            if (isEqualCharSpec(child$1, char, negate)) {
                return child$1;
            }
        }
    };
    State.prototype.put = function put(char, negate, repeat) {
        var state;
        // If the character specification already exists in a child of the current
        // state, just return that state.
        if (state = this.get(char, negate)) {
            return state;
        }
        // Make a new state for the character spec
        var states = this.states;
        state = new State(states, states.length, char, negate, repeat);
        states[states.length] = state;
        // Insert the new state as a child of the current state
        if (this.nextStates == null) {
            this.nextStates = state.id;
        } else if (isArray(this.nextStates)) {
            this.nextStates.push(state.id);
        } else {
            this.nextStates = [this.nextStates, state.id];
        }
        // Return the new state
        return state;
    };
    // Find a list of child states matching the next character
    State.prototype.match = function match(ch) {
        var this$1 = this;

        var nextStates = this.nextStates;
        if (!nextStates) {
            return [];
        }
        var returned = [];
        if (isArray(nextStates)) {
            for (var i = 0; i < nextStates.length; i++) {
                var child = this$1.states[nextStates[i]];
                if (isMatch(child, ch)) {
                    returned.push(child);
                }
            }
        } else {
            var child$1 = this.states[nextStates];
            if (isMatch(child$1, ch)) {
                returned.push(child$1);
            }
        }
        return returned;
    };
    function isMatch(spec, char) {
        return spec.negate ? spec.char !== char && spec.char !== -1 /* ANY */ : spec.char === char || spec.char === -1 /* ANY */;
    }
    // This is a somewhat naive strategy, but should work in a lot of cases
    // A better strategy would properly resolve /posts/:id/new and /posts/edit/:id.
    //
    // This strategy generally prefers more static and less dynamic matching.
    // Specifically, it
    //
    //  * prefers fewer stars to more, then
    //  * prefers using stars for less of the match to more, then
    //  * prefers fewer dynamic segments to more, then
    //  * prefers more static segments to more
    function sortSolutions(states) {
        return states.sort(function (a, b) {
            var ref = a.types || [0, 0, 0];
            var astatics = ref[0];
            var adynamics = ref[1];
            var astars = ref[2];
            var ref$1 = b.types || [0, 0, 0];
            var bstatics = ref$1[0];
            var bdynamics = ref$1[1];
            var bstars = ref$1[2];
            if (astars !== bstars) {
                return astars - bstars;
            }
            if (astars) {
                if (astatics !== bstatics) {
                    return bstatics - astatics;
                }
                if (adynamics !== bdynamics) {
                    return bdynamics - adynamics;
                }
            }
            if (adynamics !== bdynamics) {
                return adynamics - bdynamics;
            }
            if (astatics !== bstatics) {
                return bstatics - astatics;
            }
            return 0;
        });
    }
    function recognizeChar(states, ch) {
        var nextStates = [];
        for (var i = 0, l = states.length; i < l; i++) {
            var state = states[i];
            nextStates = nextStates.concat(state.match(ch));
        }
        return nextStates;
    }
    var RecognizeResults = function RecognizeResults(queryParams) {
        this.length = 0;
        this.queryParams = queryParams || {};
    };

    RecognizeResults.prototype.splice = Array.prototype.splice;
    RecognizeResults.prototype.slice = Array.prototype.slice;
    RecognizeResults.prototype.push = Array.prototype.push;
    function findHandler(state, originalPath, queryParams) {
        var handlers = state.handlers;
        var regex = state.regex();
        if (!regex || !handlers) {
            throw new Error("state not initialized");
        }
        var captures = originalPath.match(regex);
        var currentCapture = 1;
        var result = new RecognizeResults(queryParams);
        result.length = handlers.length;
        for (var i = 0; i < handlers.length; i++) {
            var handler = handlers[i];
            var names = handler.names;
            var shouldDecodes = handler.shouldDecodes;
            var params = EmptyObject;
            var isDynamic = false;
            if (names !== EmptyArray && shouldDecodes !== EmptyArray) {
                for (var j = 0; j < names.length; j++) {
                    isDynamic = true;
                    var name = names[j];
                    var capture = captures && captures[currentCapture++];
                    if (params === EmptyObject) {
                        params = {};
                    }
                    if (RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS && shouldDecodes[j]) {
                        params[name] = capture && decodeURIComponent(capture);
                    } else {
                        params[name] = capture;
                    }
                }
            }
            result[i] = {
                handler: handler.handler,
                params: params,
                isDynamic: isDynamic
            };
        }
        return result;
    }
    function decodeQueryParamPart(part) {
        // http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.1
        part = part.replace(/\+/gm, "%20");
        var result;
        try {
            result = decodeURIComponent(part);
        } catch (error) {
            result = "";
        }
        return result;
    }
    var RouteRecognizer = function RouteRecognizer() {
        this.names = createMap();
        var states = [];
        var state = new State(states, 0, -1 /* ANY */, true, false);
        states[0] = state;
        this.states = states;
        this.rootState = state;
    };
    RouteRecognizer.prototype.add = function add(routes, options) {
        var currentState = this.rootState;
        var pattern = "^";
        var types = [0, 0, 0];
        var handlers = new Array(routes.length);
        var allSegments = [];
        var isEmpty = true;
        var j = 0;
        for (var i = 0; i < routes.length; i++) {
            var route = routes[i];
            var ref = parse(allSegments, route.path, types);
            var names = ref.names;
            var shouldDecodes = ref.shouldDecodes;
            // preserve j so it points to the start of newly added segments
            for (; j < allSegments.length; j++) {
                var segment = allSegments[j];
                if (segment.type === 4 /* Epsilon */) {
                        continue;
                    }
                isEmpty = false;
                // Add a "/" for the new segment
                currentState = currentState.put(47 /* SLASH */, false, false);
                pattern += "/";
                // Add a representation of the segment to the NFA and regex
                currentState = eachChar[segment.type](segment, currentState);
                pattern += regex[segment.type](segment);
            }
            handlers[i] = {
                handler: route.handler,
                names: names,
                shouldDecodes: shouldDecodes
            };
        }
        if (isEmpty) {
            currentState = currentState.put(47 /* SLASH */, false, false);
            pattern += "/";
        }
        currentState.handlers = handlers;
        currentState.pattern = pattern + "$";
        currentState.types = types;
        var name;
        if (typeof options === "object" && options !== null && options.as) {
            name = options.as;
        }
        if (name) {
            // if (this.names[name]) {
            //   throw new Error("You may not add a duplicate route named `" + name + "`.");
            // }
            this.names[name] = {
                segments: allSegments,
                handlers: handlers
            };
        }
    };
    RouteRecognizer.prototype.handlersFor = function handlersFor(name) {
        var route = this.names[name];
        if (!route) {
            throw new Error("There is no route named " + name);
        }
        var result = new Array(route.handlers.length);
        for (var i = 0; i < route.handlers.length; i++) {
            var handler = route.handlers[i];
            result[i] = handler;
        }
        return result;
    };
    RouteRecognizer.prototype.hasRoute = function hasRoute(name) {
        return !!this.names[name];
    };
    RouteRecognizer.prototype.generate = function generate$1(name, params) {
        var route = this.names[name];
        var output = "";
        if (!route) {
            throw new Error("There is no route named " + name);
        }
        var segments = route.segments;
        for (var i = 0; i < segments.length; i++) {
            var segment = segments[i];
            if (segment.type === 4 /* Epsilon */) {
                    continue;
                }
            output += "/";
            output += generate[segment.type](segment, params);
        }
        if (output.charAt(0) !== "/") {
            output = "/" + output;
        }
        if (params && params.queryParams) {
            output += this.generateQueryString(params.queryParams);
        }
        return output;
    };
    RouteRecognizer.prototype.generateQueryString = function generateQueryString(params) {
        var pairs = [];
        var keys = Object.keys(params);
        keys.sort();
        for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            var value = params[key];
            if (value == null) {
                continue;
            }
            var pair = encodeURIComponent(key);
            if (isArray(value)) {
                for (var j = 0; j < value.length; j++) {
                    var arrayPair = key + "[]" + "=" + encodeURIComponent(value[j]);
                    pairs.push(arrayPair);
                }
            } else {
                pair += "=" + encodeURIComponent(value);
                pairs.push(pair);
            }
        }
        if (pairs.length === 0) {
            return "";
        }
        return "?" + pairs.join("&");
    };
    RouteRecognizer.prototype.parseQueryString = function parseQueryString(queryString) {
        var pairs = queryString.split("&");
        var queryParams = {};
        for (var i = 0; i < pairs.length; i++) {
            var pair = pairs[i].split("="),
                key = decodeQueryParamPart(pair[0]),
                keyLength = key.length,
                isArray = false,
                value = void 0;
            if (pair.length === 1) {
                value = "true";
            } else {
                // Handle arrays
                if (keyLength > 2 && key.slice(keyLength - 2) === "[]") {
                    isArray = true;
                    key = key.slice(0, keyLength - 2);
                    if (!queryParams[key]) {
                        queryParams[key] = [];
                    }
                }
                value = pair[1] ? decodeQueryParamPart(pair[1]) : "";
            }
            if (isArray) {
                queryParams[key].push(value);
            } else {
                queryParams[key] = value;
            }
        }
        return queryParams;
    };
    RouteRecognizer.prototype.recognize = function recognize(path) {
        var results;
        var states = [this.rootState];
        var queryParams = {};
        var isSlashDropped = false;
        var hashStart = path.indexOf("#");
        if (hashStart !== -1) {
            path = path.substr(0, hashStart);
        }
        var queryStart = path.indexOf("?");
        if (queryStart !== -1) {
            var queryString = path.substr(queryStart + 1, path.length);
            path = path.substr(0, queryStart);
            queryParams = this.parseQueryString(queryString);
        }
        if (path.charAt(0) !== "/") {
            path = "/" + path;
        }
        var originalPath = path;
        if (RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS) {
            path = normalizePath(path);
        } else {
            path = decodeURI(path);
            originalPath = decodeURI(originalPath);
        }
        var pathLen = path.length;
        if (pathLen > 1 && path.charAt(pathLen - 1) === "/") {
            path = path.substr(0, pathLen - 1);
            originalPath = originalPath.substr(0, originalPath.length - 1);
            isSlashDropped = true;
        }
        for (var i = 0; i < path.length; i++) {
            states = recognizeChar(states, path.charCodeAt(i));
            if (!states.length) {
                break;
            }
        }
        var solutions = [];
        for (var i$1 = 0; i$1 < states.length; i$1++) {
            if (states[i$1].handlers) {
                solutions.push(states[i$1]);
            }
        }
        states = sortSolutions(solutions);
        var state = solutions[0];
        if (state && state.handlers) {
            // if a trailing slash was dropped and a star segment is the last segment
            // specified, put the trailing slash back
            if (isSlashDropped && state.pattern && state.pattern.slice(-5) === "(.+)$") {
                originalPath = originalPath + "/";
            }
            results = findHandler(state, originalPath, queryParams);
        }
        return results;
    };
    RouteRecognizer.VERSION = "0.3.4";
    // Set to false to opt-out of encoding and decoding path segments.
    // See https://github.com/tildeio/route-recognizer/pull/55
    RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS = true;
    RouteRecognizer.Normalizer = {
        normalizeSegment: normalizeSegment, normalizePath: normalizePath, encodePathSegment: encodePathSegment
    };
    RouteRecognizer.prototype.map = map;

    exports.default = RouteRecognizer;
});
enifed('router_js', ['exports', 'ember-babel', '@ember/polyfills', 'rsvp', 'route-recognizer'], function (exports, _emberBabel, _polyfills, _rsvp, _routeRecognizer) {
    'use strict';

    exports.InternalRouteInfo = exports.TransitionError = exports.TransitionState = exports.QUERY_PARAMS_SYMBOL = exports.PARAMS_SYMBOL = exports.STATE_SYMBOL = exports.logAbort = exports.InternalTransition = undefined;


    var TransitionAbortedError = function () {
        TransitionAbortedError.prototype = Object.create(Error.prototype);
        TransitionAbortedError.prototype.constructor = TransitionAbortedError;
        function TransitionAbortedError(message) {
            var error = Error.call(this, message);
            this.name = 'TransitionAborted';
            this.message = message || 'TransitionAborted';
            if (Error.captureStackTrace) {
                Error.captureStackTrace(this, TransitionAbortedError);
            } else {
                this.stack = error.stack;
            }
        }
        return TransitionAbortedError;
    }();

    var slice = Array.prototype.slice;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    /**
      Determines if an object is Promise by checking if it is "thenable".
    **/
    function isPromise(p) {
        return p !== null && typeof p === 'object' && typeof p.then === 'function';
    }
    function merge(hash, other) {
        for (var prop in other) {
            if (hasOwnProperty.call(other, prop)) {
                hash[prop] = other[prop];
            }
        }
    }
    /**
      @private
    
      Extracts query params from the end of an array
    **/
    function extractQueryParams(array) {
        var len = array && array.length,
            head = void 0,
            queryParams = void 0;
        if (len && len > 0) {
            var obj = array[len - 1];
            if (isQueryParams(obj)) {
                queryParams = obj.queryParams;
                head = slice.call(array, 0, len - 1);
                return [head, queryParams];
            }
        }
        return [array, null];
    }
    function isQueryParams(obj) {
        return obj && hasOwnProperty.call(obj, 'queryParams');
    }
    /**
      @private
    
      Coerces query param properties and array elements into strings.
    **/
    function coerceQueryParamsToString(queryParams) {
        for (var key in queryParams) {
            var val = queryParams[key];
            if (typeof val === 'number') {
                queryParams[key] = '' + val;
            } else if (Array.isArray(val)) {
                for (var i = 0, l = val.length; i < l; i++) {
                    val[i] = '' + val[i];
                }
            }
        }
    }
    /**
      @private
     */
    function _log(router) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
        }

        if (!router.log) {
            return;
        }
        if (arguments.length === 2) {
            var sequence = args[0],
                msg = args[1];

            router.log('Transition #' + sequence + ': ' + msg);
        } else {
            var _msg = args[0];

            router.log(_msg);
        }
    }
    function isParam(object) {
        return typeof object === 'string' || object instanceof String || typeof object === 'number' || object instanceof Number;
    }
    function forEach(array, callback) {
        for (var i = 0, l = array.length; i < l && callback(array[i]) !== false; i++) {
            // empty intentionally
        }
    }
    function getChangelist(oldObject, newObject) {
        var key = void 0;
        var results = {
            all: {},
            changed: {},
            removed: {}
        };
        merge(results.all, newObject);
        var didChange = false;
        coerceQueryParamsToString(oldObject);
        coerceQueryParamsToString(newObject);
        // Calculate removals
        for (key in oldObject) {
            if (hasOwnProperty.call(oldObject, key)) {
                if (!hasOwnProperty.call(newObject, key)) {
                    didChange = true;
                    results.removed[key] = oldObject[key];
                }
            }
        }
        // Calculate changes
        for (key in newObject) {
            if (hasOwnProperty.call(newObject, key)) {
                var oldElement = oldObject[key];
                var newElement = newObject[key];
                if (isArray(oldElement) && isArray(newElement)) {
                    if (oldElement.length !== newElement.length) {
                        results.changed[key] = newObject[key];
                        didChange = true;
                    } else {
                        for (var i = 0, l = oldElement.length; i < l; i++) {
                            if (oldElement[i] !== newElement[i]) {
                                results.changed[key] = newObject[key];
                                didChange = true;
                            }
                        }
                    }
                } else if (oldObject[key] !== newObject[key]) {
                    results.changed[key] = newObject[key];
                    didChange = true;
                }
            }
        }
        return didChange ? results : undefined;
    }
    function isArray(obj) {
        return Array.isArray(obj);
    }
    function _promiseLabel(label) {
        return 'Router: ' + label;
    }

    var STATE_SYMBOL = '__STATE__-2619860001345920-3322w3';
    var PARAMS_SYMBOL = '__PARAMS__-261986232992830203-23323';
    var QUERY_PARAMS_SYMBOL = '__QPS__-2619863929824844-32323';
    /**
      A Transition is a thennable (a promise-like object) that represents
      an attempt to transition to another route. It can be aborted, either
      explicitly via `abort` or by attempting another transition while a
      previous one is still underway. An aborted transition can also
      be `retry()`d later.
    
      @class Transition
      @constructor
      @param {Object} router
      @param {Object} intent
      @param {Object} state
      @param {Object} error
      @private
     */

    var Transition = function () {
        function Transition(router, intent, state) {
            var _this = this;

            var error = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
            var previousTransition = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;

            (0, _emberBabel.classCallCheck)(this, Transition);

            this.from = null;
            this.to = undefined;
            this.isAborted = false;
            this.isActive = true;
            this.urlMethod = 'update';
            this.resolveIndex = 0;
            this.queryParamsOnly = false;
            this.isTransition = true;
            this.isCausedByAbortingTransition = false;
            this.isCausedByInitialTransition = false;
            this.isCausedByAbortingReplaceTransition = false;
            this._visibleQueryParams = {};
            this[STATE_SYMBOL] = state || router.state;
            this.intent = intent;
            this.router = router;
            this.data = intent && intent.data || {};
            this.resolvedModels = {};
            this[QUERY_PARAMS_SYMBOL] = {};
            this.promise = undefined;
            this.error = undefined;
            this[PARAMS_SYMBOL] = {};
            this.routeInfos = [];
            this.targetName = undefined;
            this.pivotHandler = undefined;
            this.sequence = -1;
            if (error) {
                this.promise = _rsvp.Promise.reject(error);
                this.error = error;
                return;
            }
            // if you're doing multiple redirects, need the new transition to know if it
            // is actually part of the first transition or not. Any further redirects
            // in the initial transition also need to know if they are part of the
            // initial transition
            this.isCausedByAbortingTransition = !!previousTransition;
            this.isCausedByInitialTransition = !!previousTransition && (previousTransition.isCausedByInitialTransition || previousTransition.sequence === 0);
            // Every transition in the chain is a replace
            this.isCausedByAbortingReplaceTransition = !!previousTransition && previousTransition.urlMethod === 'replace' && (!previousTransition.isCausedByAbortingTransition || previousTransition.isCausedByAbortingReplaceTransition);
            if (state) {
                this[PARAMS_SYMBOL] = state.params;
                this[QUERY_PARAMS_SYMBOL] = state.queryParams;
                this.routeInfos = state.routeInfos;
                var len = state.routeInfos.length;
                if (len) {
                    this.targetName = state.routeInfos[len - 1].name;
                }
                for (var i = 0; i < len; ++i) {
                    var handlerInfo = state.routeInfos[i];
                    // TODO: this all seems hacky
                    if (!handlerInfo.isResolved) {
                        break;
                    }
                    this.pivotHandler = handlerInfo.route;
                }
                this.sequence = router.currentSequence++;
                this.promise = state.resolve(function () {
                    if (_this.isAborted) {
                        return _rsvp.Promise.reject(false, _promiseLabel('Transition aborted - reject'));
                    }
                    return _rsvp.Promise.resolve(true);
                }, this).catch(function (result) {
                    return _rsvp.Promise.reject(_this.router.transitionDidError(result, _this));
                }, _promiseLabel('Handle Abort'));
            } else {
                this.promise = _rsvp.Promise.resolve(this[STATE_SYMBOL]);
                this[PARAMS_SYMBOL] = {};
            }
        }
        /**
          The Transition's internal promise. Calling `.then` on this property
          is that same as calling `.then` on the Transition object itself, but
          this property is exposed for when you want to pass around a
          Transition's promise, but not the Transition object itself, since
          Transition object can be externally `abort`ed, while the promise
          cannot.
             @property promise
          @type {Object}
          @public
         */
        /**
          Custom state can be stored on a Transition's `data` object.
          This can be useful for decorating a Transition within an earlier
          hook and shared with a later hook. Properties set on `data` will
          be copied to new transitions generated by calling `retry` on this
          transition.
             @property data
          @type {Object}
          @public
         */
        /**
          A standard promise hook that resolves if the transition
          succeeds and rejects if it fails/redirects/aborts.
             Forwards to the internal `promise` property which you can
          use in situations where you want to pass around a thennable,
          but not the Transition itself.
             @method then
          @param {Function} onFulfilled
          @param {Function} onRejected
          @param {String} label optional string for labeling the promise.
          Useful for tooling.
          @return {Promise}
          @public
         */

        Transition.prototype.then = function then(onFulfilled, onRejected, label) {
            return this.promise.then(onFulfilled, onRejected, label);
        };
        /**
             Forwards to the internal `promise` property which you can
          use in situations where you want to pass around a thennable,
          but not the Transition itself.
             @method catch
          @param {Function} onRejection
          @param {String} label optional string for labeling the promise.
          Useful for tooling.
          @return {Promise}
          @public
         */

        Transition.prototype.catch = function _catch(onRejection, label) {
            return this.promise.catch(onRejection, label);
        };
        /**
             Forwards to the internal `promise` property which you can
          use in situations where you want to pass around a thennable,
          but not the Transition itself.
             @method finally
          @param {Function} callback
          @param {String} label optional string for labeling the promise.
          Useful for tooling.
          @return {Promise}
          @public
         */

        Transition.prototype.finally = function _finally(callback, label) {
            return this.promise.finally(callback, label);
        };
        /**
          Aborts the Transition. Note you can also implicitly abort a transition
          by initiating another transition while a previous one is underway.
             @method abort
          @return {Transition} this transition
          @public
         */

        Transition.prototype.abort = function abort() {
            this.rollback();
            var transition = new Transition(this.router, undefined, undefined, undefined);
            transition.to = this.from;
            transition.from = this.from;
            transition.isAborted = true;
            this.router.routeWillChange(transition);
            this.router.routeDidChange(transition);
            return this;
        };

        Transition.prototype.rollback = function rollback() {
            if (!this.isAborted) {
                _log(this.router, this.sequence, this.targetName + ': transition was aborted');
                if (this.intent !== undefined && this.intent !== null) {
                    this.intent.preTransitionState = this.router.state;
                }
                this.isAborted = true;
                this.isActive = false;
                this.router.activeTransition = undefined;
            }
        };

        Transition.prototype.redirect = function redirect(newTransition) {
            this.rollback();
            this.router.routeWillChange(newTransition);
        };
        /**
             Retries a previously-aborted transition (making sure to abort the
          transition if it's still active). Returns a new transition that
          represents the new attempt to transition.
             @method retry
          @return {Transition} new transition
          @public
         */

        Transition.prototype.retry = function retry() {
            // TODO: add tests for merged state retry()s
            this.abort();
            var newTransition = this.router.transitionByIntent(this.intent, false);
            // inheriting a `null` urlMethod is not valid
            // the urlMethod is only set to `null` when
            // the transition is initiated *after* the url
            // has been updated (i.e. `router.handleURL`)
            //
            // in that scenario, the url method cannot be
            // inherited for a new transition because then
            // the url would not update even though it should
            if (this.urlMethod !== null) {
                newTransition.method(this.urlMethod);
            }
            return newTransition;
        };
        /**
             Sets the URL-changing method to be employed at the end of a
          successful transition. By default, a new Transition will just
          use `updateURL`, but passing 'replace' to this method will
          cause the URL to update using 'replaceWith' instead. Omitting
          a parameter will disable the URL change, allowing for transitions
          that don't update the URL at completion (this is also used for
          handleURL, since the URL has already changed before the
          transition took place).
             @method method
          @param {String} method the type of URL-changing method to use
            at the end of a transition. Accepted values are 'replace',
            falsy values, or any other non-falsy value (which is
            interpreted as an updateURL transition).
             @return {Transition} this transition
          @public
         */

        Transition.prototype.method = function method(_method) {
            this.urlMethod = _method;
            return this;
        };
        // Alias 'trigger' as 'send'


        Transition.prototype.send = function send() {
            var ignoreFailure = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
            var _name = arguments[1];
            var err = arguments[2];
            var transition = arguments[3];
            var handler = arguments[4];

            this.trigger(ignoreFailure, _name, err, transition, handler);
        };
        /**
             Fires an event on the current list of resolved/resolving
          handlers within this transition. Useful for firing events
          on route hierarchies that haven't fully been entered yet.
             Note: This method is also aliased as `send`
             @method trigger
          @param {Boolean} [ignoreFailure=false] a boolean specifying whether unhandled events throw an error
          @param {String} name the name of the event to fire
          @public
         */

        Transition.prototype.trigger = function trigger() {
            var ignoreFailure = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
            var name = arguments[1];

            // TODO: Deprecate the current signature
            if (typeof ignoreFailure === 'string') {
                name = ignoreFailure;
                ignoreFailure = false;
            }

            for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
                args[_key2 - 2] = arguments[_key2];
            }

            this.router.triggerEvent(this[STATE_SYMBOL].routeInfos.slice(0, this.resolveIndex + 1), ignoreFailure, name, args);
        };
        /**
          Transitions are aborted and their promises rejected
          when redirects occur; this method returns a promise
          that will follow any redirects that occur and fulfill
          with the value fulfilled by any redirecting transitions
          that occur.
             @method followRedirects
          @return {Promise} a promise that fulfills with the same
            value that the final redirecting transition fulfills with
          @public
         */

        Transition.prototype.followRedirects = function followRedirects() {
            var router = this.router;
            return this.promise.catch(function (reason) {
                if (router.activeTransition) {
                    return router.activeTransition.followRedirects();
                }
                return _rsvp.Promise.reject(reason);
            });
        };

        Transition.prototype.toString = function toString() {
            return 'Transition (sequence ' + this.sequence + ')';
        };
        /**
          @private
         */

        Transition.prototype.log = function log(message) {
            _log(this.router, this.sequence, message);
        };

        return Transition;
    }();
    /**
      @private
    
      Logs and returns an instance of TransitionAborted.
     */

    function logAbort(transition) {
        _log(transition.router, transition.sequence, 'detected abort.');
        return new TransitionAbortedError();
    }
    function isTransition(obj) {
        return typeof obj === 'object' && obj instanceof Transition && obj.isTransition;
    }
    function prepareResult(obj) {
        if (isTransition(obj)) {
            return null;
        }
        return obj;
    }

    var ROUTE_INFOS = new WeakMap();
    function toReadOnlyRouteInfo(routeInfos) {
        var queryParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var includeAttributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

        return routeInfos.map(function (info, i) {
            var name = info.name,
                params = info.params,
                paramNames = info.paramNames,
                context = info.context,
                route = info.route;

            if (ROUTE_INFOS.has(info) && includeAttributes) {
                var _routeInfo = ROUTE_INFOS.get(info);
                _routeInfo = attachMetadata(route, _routeInfo);
                var routeInfoWithAttribute = createRouteInfoWithAttributes(_routeInfo, context);
                ROUTE_INFOS.set(info, routeInfoWithAttribute);
                return routeInfoWithAttribute;
            }
            var routeInfo = {
                find: function (predicate, thisArg) {
                    var publicInfo = void 0;
                    var arr = [];
                    if (predicate.length === 3) {
                        arr = routeInfos.map(function (info) {
                            return ROUTE_INFOS.get(info);
                        });
                    }
                    for (var _i = 0; routeInfos.length > _i; _i++) {
                        publicInfo = ROUTE_INFOS.get(routeInfos[_i]);
                        if (predicate.call(thisArg, publicInfo, _i, arr)) {
                            return publicInfo;
                        }
                    }
                    return undefined;
                },

                get name() {
                    return name;
                },
                get paramNames() {
                    return paramNames;
                },
                get metadata() {
                    return buildRouteInfoMetadata(route);
                },
                get parent() {
                    var parent = routeInfos[i - 1];
                    if (parent === undefined) {
                        return null;
                    }
                    return ROUTE_INFOS.get(parent);
                },
                get child() {
                    var child = routeInfos[i + 1];
                    if (child === undefined) {
                        return null;
                    }
                    return ROUTE_INFOS.get(child);
                },
                get localName() {
                    var parts = this.name.split('.');
                    return parts[parts.length - 1];
                },
                get params() {
                    return params;
                },
                get queryParams() {
                    return queryParams;
                }
            };
            if (includeAttributes) {
                routeInfo = createRouteInfoWithAttributes(routeInfo, context);
            }
            ROUTE_INFOS.set(info, routeInfo);
            return routeInfo;
        });
    }
    function createRouteInfoWithAttributes(routeInfo, context) {
        var attributes = {
            get attributes() {
                return context;
            }
        };
        if (Object.isFrozen(routeInfo) || routeInfo.hasOwnProperty('attributes')) {
            return Object.freeze((0, _polyfills.assign)({}, routeInfo, attributes));
        }
        return (0, _polyfills.assign)(routeInfo, attributes);
    }
    function buildRouteInfoMetadata(route) {
        if (route !== undefined && route !== null && route.buildRouteInfoMetadata !== undefined) {
            return route.buildRouteInfoMetadata();
        }
        return null;
    }
    function attachMetadata(route, routeInfo) {
        var metadata = {
            get metadata() {
                return buildRouteInfoMetadata(route);
            }
        };
        if (Object.isFrozen(routeInfo) || routeInfo.hasOwnProperty('metadata')) {
            return Object.freeze((0, _polyfills.assign)({}, routeInfo, metadata));
        }
        return (0, _polyfills.assign)(routeInfo, metadata);
    }

    var InternalRouteInfo = function () {
        function InternalRouteInfo(router, name, paramNames, route) {
            (0, _emberBabel.classCallCheck)(this, InternalRouteInfo);

            this._routePromise = undefined;
            this._route = null;
            this.params = {};
            this.isResolved = false;
            this.name = name;
            this.paramNames = paramNames;
            this.router = router;
            if (route) {
                this._processRoute(route);
            }
        }

        InternalRouteInfo.prototype.getModel = function getModel(_transition) {
            return _rsvp.Promise.resolve(this.context);
        };

        InternalRouteInfo.prototype.serialize = function serialize(_context) {
            return this.params || {};
        };

        InternalRouteInfo.prototype.resolve = function resolve(shouldContinue, transition) {
            var _this2 = this;

            return _rsvp.Promise.resolve(this.routePromise).then(function (route) {
                return _this2.checkForAbort(shouldContinue, route);
            }).then(function () {
                return _this2.runBeforeModelHook(transition);
            }).then(function () {
                return _this2.checkForAbort(shouldContinue, null);
            }).then(function () {
                return _this2.getModel(transition);
            }).then(function (resolvedModel) {
                return _this2.checkForAbort(shouldContinue, resolvedModel);
            }).then(function (resolvedModel) {
                return _this2.runAfterModelHook(transition, resolvedModel);
            }).then(function (resolvedModel) {
                return _this2.becomeResolved(transition, resolvedModel);
            });
        };

        InternalRouteInfo.prototype.becomeResolved = function becomeResolved(transition, resolvedContext) {
            var params = this.serialize(resolvedContext);
            if (transition) {
                this.stashResolvedModel(transition, resolvedContext);
                transition[PARAMS_SYMBOL] = transition[PARAMS_SYMBOL] || {};
                transition[PARAMS_SYMBOL][this.name] = params;
            }
            var context = void 0;
            var contextsMatch = resolvedContext === this.context;
            if ('context' in this || !contextsMatch) {
                context = resolvedContext;
            }
            var cached = ROUTE_INFOS.get(this);
            var resolved = new ResolvedRouteInfo(this.router, this.name, this.paramNames, params, this.route, context);
            if (cached !== undefined) {
                ROUTE_INFOS.set(resolved, cached);
            }
            return resolved;
        };

        InternalRouteInfo.prototype.shouldSupercede = function shouldSupercede(routeInfo) {
            // Prefer this newer routeInfo over `other` if:
            // 1) The other one doesn't exist
            // 2) The names don't match
            // 3) This route has a context that doesn't match
            //    the other one (or the other one doesn't have one).
            // 4) This route has parameters that don't match the other.
            if (!routeInfo) {
                return true;
            }
            var contextsMatch = routeInfo.context === this.context;
            return routeInfo.name !== this.name || 'context' in this && !contextsMatch || this.hasOwnProperty('params') && !paramsMatch(this.params, routeInfo.params);
        };

        InternalRouteInfo.prototype.log = function log(transition, message) {
            if (transition.log) {
                transition.log(this.name + ': ' + message);
            }
        };

        InternalRouteInfo.prototype.updateRoute = function updateRoute(route) {
            return this.route = route;
        };

        InternalRouteInfo.prototype.runBeforeModelHook = function runBeforeModelHook(transition) {
            if (transition.trigger) {
                transition.trigger(true, 'willResolveModel', transition, this.route);
            }
            var result = void 0;
            if (this.route) {
                if (this.route.beforeModel !== undefined) {
                    result = this.route.beforeModel(transition);
                }
            }
            if (isTransition(result)) {
                result = null;
            }
            return _rsvp.Promise.resolve(result);
        };

        InternalRouteInfo.prototype.runAfterModelHook = function runAfterModelHook(transition, resolvedModel) {
            // Stash the resolved model on the payload.
            // This makes it possible for users to swap out
            // the resolved model in afterModel.
            var name = this.name;
            this.stashResolvedModel(transition, resolvedModel);
            var result = void 0;
            if (this.route !== undefined) {
                if (this.route.afterModel !== undefined) {
                    result = this.route.afterModel(resolvedModel, transition);
                }
            }
            result = prepareResult(result);
            return _rsvp.Promise.resolve(result).then(function () {
                // Ignore the fulfilled value returned from afterModel.
                // Return the value stashed in resolvedModels, which
                // might have been swapped out in afterModel.
                return transition.resolvedModels[name];
            });
        };

        InternalRouteInfo.prototype.checkForAbort = function checkForAbort(shouldContinue, value) {
            return _rsvp.Promise.resolve(shouldContinue()).then(function () {
                // We don't care about shouldContinue's resolve value;
                // pass along the original value passed to this fn.
                return value;
            }, null);
        };

        InternalRouteInfo.prototype.stashResolvedModel = function stashResolvedModel(transition, resolvedModel) {
            transition.resolvedModels = transition.resolvedModels || {};
            transition.resolvedModels[this.name] = resolvedModel;
        };

        InternalRouteInfo.prototype.fetchRoute = function fetchRoute() {
            var route = this.router.getRoute(this.name);
            return this._processRoute(route);
        };

        InternalRouteInfo.prototype._processRoute = function _processRoute(route) {
            var _this3 = this;

            // Setup a routePromise so that we can wait for asynchronously loaded routes
            this.routePromise = _rsvp.Promise.resolve(route);
            // Wait until the 'route' property has been updated when chaining to a route
            // that is a promise
            if (isPromise(route)) {
                this.routePromise = this.routePromise.then(function (r) {
                    return _this3.updateRoute(r);
                });
                // set to undefined to avoid recursive loop in the route getter
                return this.route = undefined;
            } else if (route) {
                return this.updateRoute(route);
            }
            return undefined;
        };

        (0, _emberBabel.createClass)(InternalRouteInfo, [{
            key: 'route',
            get: function () {
                // _route could be set to either a route object or undefined, so we
                // compare against null to know when it's been set
                if (this._route !== null) {
                    return this._route;
                }
                return this.fetchRoute();
            },
            set: function (route) {
                this._route = route;
            }
        }, {
            key: 'routePromise',
            get: function () {
                if (this._routePromise) {
                    return this._routePromise;
                }
                this.fetchRoute();
                return this._routePromise;
            },
            set: function (routePromise) {
                this._routePromise = routePromise;
            }
        }]);

        return InternalRouteInfo;
    }();

    var ResolvedRouteInfo = function (_InternalRouteInfo) {
        (0, _emberBabel.inherits)(ResolvedRouteInfo, _InternalRouteInfo);

        function ResolvedRouteInfo(router, name, paramNames, params, route, context) {
            (0, _emberBabel.classCallCheck)(this, ResolvedRouteInfo);

            var _this4 = (0, _emberBabel.possibleConstructorReturn)(this, _InternalRouteInfo.call(this, router, name, paramNames, route));

            _this4.params = params;
            _this4.isResolved = true;
            _this4.context = context;
            return _this4;
        }

        ResolvedRouteInfo.prototype.resolve = function resolve(_shouldContinue, transition) {
            // A ResolvedRouteInfo just resolved with itself.
            if (transition && transition.resolvedModels) {
                transition.resolvedModels[this.name] = this.context;
            }
            return _rsvp.Promise.resolve(this);
        };

        return ResolvedRouteInfo;
    }(InternalRouteInfo);

    var UnresolvedRouteInfoByParam = function (_InternalRouteInfo2) {
        (0, _emberBabel.inherits)(UnresolvedRouteInfoByParam, _InternalRouteInfo2);

        function UnresolvedRouteInfoByParam(router, name, paramNames, params, route) {
            (0, _emberBabel.classCallCheck)(this, UnresolvedRouteInfoByParam);

            var _this5 = (0, _emberBabel.possibleConstructorReturn)(this, _InternalRouteInfo2.call(this, router, name, paramNames, route));

            _this5.params = {};
            _this5.params = params;
            return _this5;
        }

        UnresolvedRouteInfoByParam.prototype.getModel = function getModel(transition) {
            var fullParams = this.params;
            if (transition && transition[QUERY_PARAMS_SYMBOL]) {
                fullParams = {};
                merge(fullParams, this.params);
                fullParams.queryParams = transition[QUERY_PARAMS_SYMBOL];
            }
            var route = this.route;
            var result = undefined;
            if (route.deserialize) {
                result = route.deserialize(fullParams, transition);
            } else if (route.model) {
                result = route.model(fullParams, transition);
            }
            if (result && isTransition(result)) {
                result = undefined;
            }
            return _rsvp.Promise.resolve(result);
        };

        return UnresolvedRouteInfoByParam;
    }(InternalRouteInfo);

    var UnresolvedRouteInfoByObject = function (_InternalRouteInfo3) {
        (0, _emberBabel.inherits)(UnresolvedRouteInfoByObject, _InternalRouteInfo3);

        function UnresolvedRouteInfoByObject(router, name, paramNames, context) {
            (0, _emberBabel.classCallCheck)(this, UnresolvedRouteInfoByObject);

            var _this6 = (0, _emberBabel.possibleConstructorReturn)(this, _InternalRouteInfo3.call(this, router, name, paramNames));

            _this6.context = context;
            _this6.serializer = _this6.router.getSerializer(name);
            return _this6;
        }

        UnresolvedRouteInfoByObject.prototype.getModel = function getModel(transition) {
            if (this.router.log !== undefined) {
                this.router.log(this.name + ': resolving provided model');
            }
            return _InternalRouteInfo3.prototype.getModel.call(this, transition);
        };
        /**
          @private
             Serializes a route using its custom `serialize` method or
          by a default that looks up the expected property name from
          the dynamic segment.
             @param {Object} model the model to be serialized for this route
        */

        UnresolvedRouteInfoByObject.prototype.serialize = function serialize(model) {
            var paramNames = this.paramNames,
                context = this.context;

            if (!model) {
                model = context;
            }
            var object = {};
            if (isParam(model)) {
                object[paramNames[0]] = model;
                return object;
            }
            // Use custom serialize if it exists.
            if (this.serializer) {
                // invoke this.serializer unbound (getSerializer returns a stateless function)
                return this.serializer.call(null, model, paramNames);
            } else if (this.route !== undefined) {
                if (this.route.serialize) {
                    return this.route.serialize(model, paramNames);
                }
            }
            if (paramNames.length !== 1) {
                return;
            }
            var name = paramNames[0];
            if (/_id$/.test(name)) {
                object[name] = model.id;
            } else {
                object[name] = model;
            }
            return object;
        };

        return UnresolvedRouteInfoByObject;
    }(InternalRouteInfo);

    function paramsMatch(a, b) {
        if (!a !== !b) {
            // Only one is null.
            return false;
        }
        if (!a) {
            // Both must be null.
            return true;
        }
        // Note: this assumes that both params have the same
        // number of keys, but since we're comparing the
        // same routes, they should.
        for (var k in a) {
            if (a.hasOwnProperty(k) && a[k] !== b[k]) {
                return false;
            }
        }
        return true;
    }

    var TransitionIntent = function TransitionIntent(router) {
        var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        (0, _emberBabel.classCallCheck)(this, TransitionIntent);

        this.router = router;
        this.data = data;
    };

    var TransitionState = function () {
        function TransitionState() {
            (0, _emberBabel.classCallCheck)(this, TransitionState);

            this.routeInfos = [];
            this.queryParams = {};
            this.params = {};
        }

        TransitionState.prototype.promiseLabel = function promiseLabel(label) {
            var targetName = '';
            forEach(this.routeInfos, function (routeInfo) {
                if (targetName !== '') {
                    targetName += '.';
                }
                targetName += routeInfo.name;
                return true;
            });
            return _promiseLabel("'" + targetName + "': " + label);
        };

        TransitionState.prototype.resolve = function resolve(shouldContinue, transition) {
            // First, calculate params for this state. This is useful
            // information to provide to the various route hooks.
            var params = this.params;
            forEach(this.routeInfos, function (routeInfo) {
                params[routeInfo.name] = routeInfo.params || {};
                return true;
            });
            transition.resolveIndex = 0;
            var currentState = this;
            var wasAborted = false;
            // The prelude RSVP.resolve() asyncs us into the promise land.
            return _rsvp.Promise.resolve(null, this.promiseLabel('Start transition')).then(resolveOneRouteInfo, null, this.promiseLabel('Resolve route')).catch(handleError, this.promiseLabel('Handle error'));
            function innerShouldContinue() {
                return _rsvp.Promise.resolve(shouldContinue(), currentState.promiseLabel('Check if should continue')).catch(function (reason) {
                    // We distinguish between errors that occurred
                    // during resolution (e.g. before"Model/model/afterModel),
                    // and aborts due to a rejecting promise from shouldContinue().
                    wasAborted = true;
                    return _rsvp.Promise.reject(reason);
                }, currentState.promiseLabel('Handle abort'));
            }
            function handleError(error) {
                // This is the only possible
                // reject value of TransitionState#resolve
                var routeInfos = currentState.routeInfos;
                var errorHandlerIndex = transition.resolveIndex >= routeInfos.length ? routeInfos.length - 1 : transition.resolveIndex;
                return _rsvp.Promise.reject(new TransitionError(error, currentState.routeInfos[errorHandlerIndex].route, wasAborted, currentState));
            }
            function proceed(resolvedRouteInfo) {
                var wasAlreadyResolved = currentState.routeInfos[transition.resolveIndex].isResolved;
                // Swap the previously unresolved routeInfo with
                // the resolved routeInfo
                currentState.routeInfos[transition.resolveIndex++] = resolvedRouteInfo;
                if (!wasAlreadyResolved) {
                    // Call the redirect hook. The reason we call it here
                    // vs. afterModel is so that redirects into child
                    // routes don't re-run the model hooks for this
                    // already-resolved route.
                    var route = resolvedRouteInfo.route;

                    if (route !== undefined) {
                        if (route.redirect) {
                            route.redirect(resolvedRouteInfo.context, transition);
                        }
                    }
                }
                // Proceed after ensuring that the redirect hook
                // didn't abort this transition by transitioning elsewhere.
                return innerShouldContinue().then(resolveOneRouteInfo, null, currentState.promiseLabel('Resolve route'));
            }
            function resolveOneRouteInfo() {
                if (transition.resolveIndex === currentState.routeInfos.length) {
                    // This is is the only possible
                    // fulfill value of TransitionState#resolve
                    return currentState;
                }
                var routeInfo = currentState.routeInfos[transition.resolveIndex];
                return routeInfo.resolve(innerShouldContinue, transition).then(proceed, null, currentState.promiseLabel('Proceed'));
            }
        };

        return TransitionState;
    }();

    var TransitionError = function TransitionError(error, route, wasAborted, state) {
        (0, _emberBabel.classCallCheck)(this, TransitionError);

        this.error = error;
        this.route = route;
        this.wasAborted = wasAborted;
        this.state = state;
    };

    var NamedTransitionIntent = function (_TransitionIntent) {
        (0, _emberBabel.inherits)(NamedTransitionIntent, _TransitionIntent);

        function NamedTransitionIntent(router, name, pivotHandler) {
            var contexts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
            var queryParams = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
            var data = arguments[5];

            (0, _emberBabel.classCallCheck)(this, NamedTransitionIntent);

            var _this7 = (0, _emberBabel.possibleConstructorReturn)(this, _TransitionIntent.call(this, router, data));

            _this7.preTransitionState = undefined;
            _this7.name = name;
            _this7.pivotHandler = pivotHandler;
            _this7.contexts = contexts;
            _this7.queryParams = queryParams;
            return _this7;
        }

        NamedTransitionIntent.prototype.applyToState = function applyToState(oldState, isIntermediate) {
            // TODO: WTF fix me
            var partitionedArgs = extractQueryParams([this.name].concat(this.contexts)),
                pureArgs = partitionedArgs[0],
                handlers = this.router.recognizer.handlersFor(pureArgs[0]);
            var targetRouteName = handlers[handlers.length - 1].handler;
            return this.applyToHandlers(oldState, handlers, targetRouteName, isIntermediate, false);
        };

        NamedTransitionIntent.prototype.applyToHandlers = function applyToHandlers(oldState, parsedHandlers, targetRouteName, isIntermediate, checkingIfActive) {
            var i = void 0,
                len = void 0;
            var newState = new TransitionState();
            var objects = this.contexts.slice(0);
            var invalidateIndex = parsedHandlers.length;
            // Pivot handlers are provided for refresh transitions
            if (this.pivotHandler) {
                for (i = 0, len = parsedHandlers.length; i < len; ++i) {
                    if (parsedHandlers[i].handler === this.pivotHandler.routeName) {
                        invalidateIndex = i;
                        break;
                    }
                }
            }
            for (i = parsedHandlers.length - 1; i >= 0; --i) {
                var result = parsedHandlers[i];
                var name = result.handler;
                var oldHandlerInfo = oldState.routeInfos[i];
                var newHandlerInfo = null;
                if (result.names.length > 0) {
                    if (i >= invalidateIndex) {
                        newHandlerInfo = this.createParamHandlerInfo(name, result.names, objects, oldHandlerInfo);
                    } else {
                        newHandlerInfo = this.getHandlerInfoForDynamicSegment(name, result.names, objects, oldHandlerInfo, targetRouteName, i);
                    }
                } else {
                    // This route has no dynamic segment.
                    // Therefore treat as a param-based handlerInfo
                    // with empty params. This will cause the `model`
                    // hook to be called with empty params, which is desirable.
                    newHandlerInfo = this.createParamHandlerInfo(name, result.names, objects, oldHandlerInfo);
                }
                if (checkingIfActive) {
                    // If we're performing an isActive check, we want to
                    // serialize URL params with the provided context, but
                    // ignore mismatches between old and new context.
                    newHandlerInfo = newHandlerInfo.becomeResolved(null, newHandlerInfo.context);
                    var oldContext = oldHandlerInfo && oldHandlerInfo.context;
                    if (result.names.length > 0 && oldHandlerInfo.context !== undefined && newHandlerInfo.context === oldContext) {
                        // If contexts match in isActive test, assume params also match.
                        // This allows for flexibility in not requiring that every last
                        // handler provide a `serialize` method
                        newHandlerInfo.params = oldHandlerInfo && oldHandlerInfo.params;
                    }
                    newHandlerInfo.context = oldContext;
                }
                var handlerToUse = oldHandlerInfo;
                if (i >= invalidateIndex || newHandlerInfo.shouldSupercede(oldHandlerInfo)) {
                    invalidateIndex = Math.min(i, invalidateIndex);
                    handlerToUse = newHandlerInfo;
                }
                if (isIntermediate && !checkingIfActive) {
                    handlerToUse = handlerToUse.becomeResolved(null, handlerToUse.context);
                }
                newState.routeInfos.unshift(handlerToUse);
            }
            if (objects.length > 0) {
                throw new Error('More context objects were passed than there are dynamic segments for the route: ' + targetRouteName);
            }
            if (!isIntermediate) {
                this.invalidateChildren(newState.routeInfos, invalidateIndex);
            }
            merge(newState.queryParams, this.queryParams || {});
            return newState;
        };

        NamedTransitionIntent.prototype.invalidateChildren = function invalidateChildren(handlerInfos, invalidateIndex) {
            for (var i = invalidateIndex, l = handlerInfos.length; i < l; ++i) {
                var handlerInfo = handlerInfos[i];
                if (handlerInfo.isResolved) {
                    var _handlerInfos$i = handlerInfos[i],
                        name = _handlerInfos$i.name,
                        params = _handlerInfos$i.params,
                        route = _handlerInfos$i.route,
                        paramNames = _handlerInfos$i.paramNames;

                    handlerInfos[i] = new UnresolvedRouteInfoByParam(this.router, name, paramNames, params, route);
                }
            }
        };

        NamedTransitionIntent.prototype.getHandlerInfoForDynamicSegment = function getHandlerInfoForDynamicSegment(name, names, objects, oldHandlerInfo, _targetRouteName, i) {
            var objectToUse = void 0;
            if (objects.length > 0) {
                // Use the objects provided for this transition.
                objectToUse = objects[objects.length - 1];
                if (isParam(objectToUse)) {
                    return this.createParamHandlerInfo(name, names, objects, oldHandlerInfo);
                } else {
                    objects.pop();
                }
            } else if (oldHandlerInfo && oldHandlerInfo.name === name) {
                // Reuse the matching oldHandlerInfo
                return oldHandlerInfo;
            } else {
                if (this.preTransitionState) {
                    var preTransitionHandlerInfo = this.preTransitionState.routeInfos[i];
                    objectToUse = preTransitionHandlerInfo && preTransitionHandlerInfo.context;
                } else {
                    // Ideally we should throw this error to provide maximal
                    // information to the user that not enough context objects
                    // were provided, but this proves too cumbersome in Ember
                    // in cases where inner template helpers are evaluated
                    // before parent helpers un-render, in which cases this
                    // error somewhat prematurely fires.
                    //throw new Error("Not enough context objects were provided to complete a transition to " + targetRouteName + ". Specifically, the " + name + " route needs an object that can be serialized into its dynamic URL segments [" + names.join(', ') + "]");
                    return oldHandlerInfo;
                }
            }
            return new UnresolvedRouteInfoByObject(this.router, name, names, objectToUse);
        };

        NamedTransitionIntent.prototype.createParamHandlerInfo = function createParamHandlerInfo(name, names, objects, oldHandlerInfo) {
            var params = {};
            // Soak up all the provided string/numbers
            var numNames = names.length;
            while (numNames--) {
                // Only use old params if the names match with the new handler
                var oldParams = oldHandlerInfo && name === oldHandlerInfo.name && oldHandlerInfo.params || {};
                var peek = objects[objects.length - 1];
                var paramName = names[numNames];
                if (isParam(peek)) {
                    params[paramName] = '' + objects.pop();
                } else {
                    // If we're here, this means only some of the params
                    // were string/number params, so try and use a param
                    // value from a previous handler.
                    if (oldParams.hasOwnProperty(paramName)) {
                        params[paramName] = oldParams[paramName];
                    } else {
                        throw new Error("You didn't provide enough string/numeric parameters to satisfy all of the dynamic segments for route " + name);
                    }
                }
            }
            return new UnresolvedRouteInfoByParam(this.router, name, names, params);
        };

        return NamedTransitionIntent;
    }(TransitionIntent);

    var UnrecognizedURLError = function () {
        UnrecognizedURLError.prototype = Object.create(Error.prototype);
        UnrecognizedURLError.prototype.constructor = UnrecognizedURLError;
        function UnrecognizedURLError(message) {
            var error = Error.call(this, message);
            this.name = 'UnrecognizedURLError';
            this.message = message || 'UnrecognizedURL';
            if (Error.captureStackTrace) {
                Error.captureStackTrace(this, UnrecognizedURLError);
            } else {
                this.stack = error.stack;
            }
        }
        return UnrecognizedURLError;
    }();

    var URLTransitionIntent = function (_TransitionIntent2) {
        (0, _emberBabel.inherits)(URLTransitionIntent, _TransitionIntent2);

        function URLTransitionIntent(router, url, data) {
            (0, _emberBabel.classCallCheck)(this, URLTransitionIntent);

            var _this8 = (0, _emberBabel.possibleConstructorReturn)(this, _TransitionIntent2.call(this, router, data));

            _this8.url = url;
            _this8.preTransitionState = undefined;
            return _this8;
        }

        URLTransitionIntent.prototype.applyToState = function applyToState(oldState) {
            var newState = new TransitionState();
            var results = this.router.recognizer.recognize(this.url),
                i = void 0,
                len = void 0;
            if (!results) {
                throw new UnrecognizedURLError(this.url);
            }
            var statesDiffer = false;
            var _url = this.url;
            // Checks if a handler is accessible by URL. If it is not, an error is thrown.
            // For the case where the handler is loaded asynchronously, the error will be
            // thrown once it is loaded.
            function checkHandlerAccessibility(handler) {
                if (handler && handler.inaccessibleByURL) {
                    throw new UnrecognizedURLError(_url);
                }
                return handler;
            }
            for (i = 0, len = results.length; i < len; ++i) {
                var result = results[i];
                var name = result.handler;
                var paramNames = [];
                if (this.router.recognizer.hasRoute(name)) {
                    paramNames = this.router.recognizer.handlersFor(name)[i].names;
                }
                var newRouteInfo = new UnresolvedRouteInfoByParam(this.router, name, paramNames, result.params);
                var route = newRouteInfo.route;
                if (route) {
                    checkHandlerAccessibility(route);
                } else {
                    // If the hanlder is being loaded asynchronously, check if we can
                    // access it after it has resolved
                    newRouteInfo.routePromise = newRouteInfo.routePromise.then(checkHandlerAccessibility);
                }
                var oldRouteInfo = oldState.routeInfos[i];
                if (statesDiffer || newRouteInfo.shouldSupercede(oldRouteInfo)) {
                    statesDiffer = true;
                    newState.routeInfos[i] = newRouteInfo;
                } else {
                    newState.routeInfos[i] = oldRouteInfo;
                }
            }
            merge(newState.queryParams, results.queryParams);
            return newState;
        };

        return URLTransitionIntent;
    }(TransitionIntent);

    var Router = function () {
        function Router(logger) {
            (0, _emberBabel.classCallCheck)(this, Router);

            this._lastQueryParams = {};
            this.state = undefined;
            this.oldState = undefined;
            this.activeTransition = undefined;
            this.currentRouteInfos = undefined;
            this._changedQueryParams = undefined;
            this.currentSequence = 0;
            this.log = logger;
            this.recognizer = new _routeRecognizer.default();
            this.reset();
        }
        /**
          The main entry point into the router. The API is essentially
          the same as the `map` method in `route-recognizer`.
             This method extracts the String handler at the last `.to()`
          call and uses it as the name of the whole route.
             @param {Function} callback
        */

        Router.prototype.map = function map(callback) {
            this.recognizer.map(callback, function (recognizer, routes) {
                for (var i = routes.length - 1, proceed = true; i >= 0 && proceed; --i) {
                    var route = routes[i];
                    var handler = route.handler;
                    recognizer.add(routes, { as: handler });
                    proceed = route.path === '/' || route.path === '' || handler.slice(-6) === '.index';
                }
            });
        };

        Router.prototype.hasRoute = function hasRoute(route) {
            return this.recognizer.hasRoute(route);
        };

        Router.prototype.queryParamsTransition = function queryParamsTransition(changelist, wasTransitioning, oldState, newState) {
            var _this9 = this;

            this.fireQueryParamDidChange(newState, changelist);
            if (!wasTransitioning && this.activeTransition) {
                // One of the routes in queryParamsDidChange
                // caused a transition. Just return that transition.
                return this.activeTransition;
            } else {
                // Running queryParamsDidChange didn't change anything.
                // Just update query params and be on our way.
                // We have to return a noop transition that will
                // perform a URL update at the end. This gives
                // the user the ability to set the url update
                // method (default is replaceState).
                var newTransition = new Transition(this, undefined, undefined);
                newTransition.queryParamsOnly = true;
                oldState.queryParams = this.finalizeQueryParamChange(newState.routeInfos, newState.queryParams, newTransition);
                newTransition[QUERY_PARAMS_SYMBOL] = newState.queryParams;
                this.toReadOnlyInfos(newTransition, newState);
                this.routeWillChange(newTransition);
                newTransition.promise = newTransition.promise.then(function (result) {
                    _this9._updateURL(newTransition, oldState);
                    _this9.didTransition(_this9.currentRouteInfos);
                    _this9.toInfos(newTransition, newState.routeInfos, true);
                    _this9.routeDidChange(newTransition);
                    return result;
                }, null, _promiseLabel('Transition complete'));
                return newTransition;
            }
        };

        Router.prototype.transitionByIntent = function transitionByIntent(intent, isIntermediate) {
            try {
                return this.getTransitionByIntent(intent, isIntermediate);
            } catch (e) {
                return new Transition(this, intent, undefined, e, undefined);
            }
        };

        Router.prototype.recognize = function recognize(url) {
            var intent = new URLTransitionIntent(this, url);
            var newState = this.generateNewState(intent);
            if (newState === null) {
                return newState;
            }
            var readonlyInfos = toReadOnlyRouteInfo(newState.routeInfos, newState.queryParams);
            return readonlyInfos[readonlyInfos.length - 1];
        };

        Router.prototype.recognizeAndLoad = function recognizeAndLoad(url) {
            var intent = new URLTransitionIntent(this, url);
            var newState = this.generateNewState(intent);
            if (newState === null) {
                return _rsvp.Promise.reject('URL ' + url + ' was not recognized');
            }
            var newTransition = new Transition(this, intent, newState, undefined);
            return newTransition.then(function () {
                var routeInfosWithAttributes = toReadOnlyRouteInfo(newState.routeInfos, newTransition[QUERY_PARAMS_SYMBOL], true);
                return routeInfosWithAttributes[routeInfosWithAttributes.length - 1];
            });
        };

        Router.prototype.generateNewState = function generateNewState(intent) {
            try {
                return intent.applyToState(this.state, false);
            } catch (e) {
                return null;
            }
        };

        Router.prototype.getTransitionByIntent = function getTransitionByIntent(intent, isIntermediate) {
            var _this10 = this;

            var wasTransitioning = !!this.activeTransition;
            var oldState = wasTransitioning ? this.activeTransition[STATE_SYMBOL] : this.state;
            var newTransition = void 0;
            var newState = intent.applyToState(oldState, isIntermediate);
            var queryParamChangelist = getChangelist(oldState.queryParams, newState.queryParams);
            if (routeInfosEqual(newState.routeInfos, oldState.routeInfos)) {
                // This is a no-op transition. See if query params changed.
                if (queryParamChangelist) {
                    var _newTransition = this.queryParamsTransition(queryParamChangelist, wasTransitioning, oldState, newState);
                    _newTransition.queryParamsOnly = true;
                    return _newTransition;
                }
                // No-op. No need to create a new transition.
                return this.activeTransition || new Transition(this, undefined, undefined);
            }
            if (isIntermediate) {
                var transition = new Transition(this, undefined, undefined);
                this.toReadOnlyInfos(transition, newState);
                this.setupContexts(newState);
                this.routeWillChange(transition);
                return this.activeTransition;
            }
            // Create a new transition to the destination route.
            newTransition = new Transition(this, intent, newState, undefined, this.activeTransition);
            // transition is to same route with same params, only query params differ.
            // not caught above probably because refresh() has been used
            if (routeInfosSameExceptQueryParams(newState.routeInfos, oldState.routeInfos)) {
                newTransition.queryParamsOnly = true;
            }
            this.toReadOnlyInfos(newTransition, newState);
            // Abort and usurp any previously active transition.
            if (this.activeTransition) {
                this.activeTransition.redirect(newTransition);
            }
            this.activeTransition = newTransition;
            // Transition promises by default resolve with resolved state.
            // For our purposes, swap out the promise to resolve
            // after the transition has been finalized.
            newTransition.promise = newTransition.promise.then(function (result) {
                return _this10.finalizeTransition(newTransition, result);
            }, null, _promiseLabel('Settle transition promise when transition is finalized'));
            if (!wasTransitioning) {
                this.notifyExistingHandlers(newState, newTransition);
            }
            this.fireQueryParamDidChange(newState, queryParamChangelist);
            return newTransition;
        };
        /**
        @private
           Begins and returns a Transition based on the provided
        arguments. Accepts arguments in the form of both URL
        transitions and named transitions.
           @param {Router} router
        @param {Array[Object]} args arguments passed to transitionTo,
          replaceWith, or handleURL
        */

        Router.prototype.doTransition = function doTransition(name) {
            var modelsArray = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
            var isIntermediate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

            var lastArg = modelsArray[modelsArray.length - 1];
            var queryParams = {};
            if (lastArg !== undefined && lastArg.hasOwnProperty('queryParams')) {
                queryParams = modelsArray.pop().queryParams;
            }
            var intent = void 0;
            if (name === undefined) {
                _log(this, 'Updating query params');
                // A query param update is really just a transition
                // into the route you're already on.
                var routeInfos = this.state.routeInfos;

                intent = new NamedTransitionIntent(this, routeInfos[routeInfos.length - 1].name, undefined, [], queryParams);
            } else if (name.charAt(0) === '/') {
                _log(this, 'Attempting URL transition to ' + name);
                intent = new URLTransitionIntent(this, name);
            } else {
                _log(this, 'Attempting transition to ' + name);
                intent = new NamedTransitionIntent(this, name, undefined, modelsArray, queryParams);
            }
            return this.transitionByIntent(intent, isIntermediate);
        };
        /**
        @private
           Updates the URL (if necessary) and calls `setupContexts`
        to update the router's array of `currentRouteInfos`.
        */

        Router.prototype.finalizeTransition = function finalizeTransition(transition, newState) {
            try {
                _log(transition.router, transition.sequence, 'Resolved all models on destination route; finalizing transition.');
                var routeInfos = newState.routeInfos;
                // Run all the necessary enter/setup/exit hooks
                this.setupContexts(newState, transition);
                // Check if a redirect occurred in enter/setup
                if (transition.isAborted) {
                    // TODO: cleaner way? distinguish b/w targetRouteInfos?
                    this.state.routeInfos = this.currentRouteInfos;
                    return _rsvp.Promise.reject(logAbort(transition));
                }
                this._updateURL(transition, newState);
                transition.isActive = false;
                this.activeTransition = undefined;
                this.triggerEvent(this.currentRouteInfos, true, 'didTransition', []);
                this.didTransition(this.currentRouteInfos);
                this.toInfos(transition, newState.routeInfos, true);
                this.routeDidChange(transition);
                _log(this, transition.sequence, 'TRANSITION COMPLETE.');
                // Resolve with the final route.
                return routeInfos[routeInfos.length - 1].route;
            } catch (e) {
                if (!(e instanceof TransitionAbortedError)) {
                    var infos = transition[STATE_SYMBOL].routeInfos;
                    transition.trigger(true, 'error', e, transition, infos[infos.length - 1].route);
                    transition.abort();
                }
                throw e;
            }
        };
        /**
        @private
           Takes an Array of `RouteInfo`s, figures out which ones are
        exiting, entering, or changing contexts, and calls the
        proper route hooks.
           For example, consider the following tree of routes. Each route is
        followed by the URL segment it handles.
           ```
        |~index ("/")
        | |~posts ("/posts")
        | | |-showPost ("/:id")
        | | |-newPost ("/new")
        | | |-editPost ("/edit")
        | |~about ("/about/:id")
        ```
           Consider the following transitions:
           1. A URL transition to `/posts/1`.
           1. Triggers the `*model` callbacks on the
              `index`, `posts`, and `showPost` routes
           2. Triggers the `enter` callback on the same
           3. Triggers the `setup` callback on the same
        2. A direct transition to `newPost`
           1. Triggers the `exit` callback on `showPost`
           2. Triggers the `enter` callback on `newPost`
           3. Triggers the `setup` callback on `newPost`
        3. A direct transition to `about` with a specified
           context object
           1. Triggers the `exit` callback on `newPost`
              and `posts`
           2. Triggers the `serialize` callback on `about`
           3. Triggers the `enter` callback on `about`
           4. Triggers the `setup` callback on `about`
           @param {Router} transition
        @param {TransitionState} newState
        */

        Router.prototype.setupContexts = function setupContexts(newState, transition) {
            var partition = this.partitionRoutes(this.state, newState);
            var i = void 0,
                l = void 0,
                route = void 0;
            for (i = 0, l = partition.exited.length; i < l; i++) {
                route = partition.exited[i].route;
                delete route.context;
                if (route !== undefined) {
                    if (route._internalReset !== undefined) {
                        route._internalReset(true, transition);
                    }
                    if (route.exit !== undefined) {
                        route.exit(transition);
                    }
                }
            }
            var oldState = this.oldState = this.state;
            this.state = newState;
            var currentRouteInfos = this.currentRouteInfos = partition.unchanged.slice();
            try {
                for (i = 0, l = partition.reset.length; i < l; i++) {
                    route = partition.reset[i].route;
                    if (route !== undefined) {
                        if (route._internalReset !== undefined) {
                            route._internalReset(false, transition);
                        }
                    }
                }
                for (i = 0, l = partition.updatedContext.length; i < l; i++) {
                    this.routeEnteredOrUpdated(currentRouteInfos, partition.updatedContext[i], false, transition);
                }
                for (i = 0, l = partition.entered.length; i < l; i++) {
                    this.routeEnteredOrUpdated(currentRouteInfos, partition.entered[i], true, transition);
                }
            } catch (e) {
                this.state = oldState;
                this.currentRouteInfos = oldState.routeInfos;
                throw e;
            }
            this.state.queryParams = this.finalizeQueryParamChange(currentRouteInfos, newState.queryParams, transition);
        };
        /**
        @private
           Fires queryParamsDidChange event
        */

        Router.prototype.fireQueryParamDidChange = function fireQueryParamDidChange(newState, queryParamChangelist) {
            // If queryParams changed trigger event
            if (queryParamChangelist) {
                // This is a little hacky but we need some way of storing
                // changed query params given that no activeTransition
                // is guaranteed to have occurred.
                this._changedQueryParams = queryParamChangelist.all;
                this.triggerEvent(newState.routeInfos, true, 'queryParamsDidChange', [queryParamChangelist.changed, queryParamChangelist.all, queryParamChangelist.removed]);
                this._changedQueryParams = undefined;
            }
        };
        /**
        @private
           Helper method used by setupContexts. Handles errors or redirects
        that may happen in enter/setup.
        */

        Router.prototype.routeEnteredOrUpdated = function routeEnteredOrUpdated(currentRouteInfos, routeInfo, enter, transition) {
            var route = routeInfo.route,
                context = routeInfo.context;
            function _routeEnteredOrUpdated(route) {
                if (enter) {
                    if (route.enter !== undefined) {
                        route.enter(transition);
                    }
                }
                if (transition && transition.isAborted) {
                    throw new TransitionAbortedError();
                }
                route.context = context;
                if (route.contextDidChange !== undefined) {
                    route.contextDidChange();
                }
                if (route.setup !== undefined) {
                    route.setup(context, transition);
                }
                if (transition && transition.isAborted) {
                    throw new TransitionAbortedError();
                }
                currentRouteInfos.push(routeInfo);
                return route;
            }
            // If the route doesn't exist, it means we haven't resolved the route promise yet
            if (route === undefined) {
                routeInfo.routePromise = routeInfo.routePromise.then(_routeEnteredOrUpdated);
            } else {
                _routeEnteredOrUpdated(route);
            }
            return true;
        };
        /**
        @private
           This function is called when transitioning from one URL to
        another to determine which routes are no longer active,
        which routes are newly active, and which routes remain
        active but have their context changed.
           Take a list of old routes and new routes and partition
        them into four buckets:
           * unchanged: the route was active in both the old and
          new URL, and its context remains the same
        * updated context: the route was active in both the
          old and new URL, but its context changed. The route's
          `setup` method, if any, will be called with the new
          context.
        * exited: the route was active in the old URL, but is
          no longer active.
        * entered: the route was not active in the old URL, but
          is now active.
           The PartitionedRoutes structure has four fields:
           * `updatedContext`: a list of `RouteInfo` objects that
          represent routes that remain active but have a changed
          context
        * `entered`: a list of `RouteInfo` objects that represent
          routes that are newly active
        * `exited`: a list of `RouteInfo` objects that are no
          longer active.
        * `unchanged`: a list of `RouteInfo` objects that remain active.
           @param {Array[InternalRouteInfo]} oldRoutes a list of the route
          information for the previous URL (or `[]` if this is the
          first handled transition)
        @param {Array[InternalRouteInfo]} newRoutes a list of the route
          information for the new URL
           @return {Partition}
        */

        Router.prototype.partitionRoutes = function partitionRoutes(oldState, newState) {
            var oldRouteInfos = oldState.routeInfos;
            var newRouteInfos = newState.routeInfos;
            var routes = {
                updatedContext: [],
                exited: [],
                entered: [],
                unchanged: [],
                reset: []
            };
            var routeChanged = void 0,
                contextChanged = false,
                i = void 0,
                l = void 0;
            for (i = 0, l = newRouteInfos.length; i < l; i++) {
                var oldRouteInfo = oldRouteInfos[i],
                    newRouteInfo = newRouteInfos[i];
                if (!oldRouteInfo || oldRouteInfo.route !== newRouteInfo.route) {
                    routeChanged = true;
                }
                if (routeChanged) {
                    routes.entered.push(newRouteInfo);
                    if (oldRouteInfo) {
                        routes.exited.unshift(oldRouteInfo);
                    }
                } else if (contextChanged || oldRouteInfo.context !== newRouteInfo.context) {
                    contextChanged = true;
                    routes.updatedContext.push(newRouteInfo);
                } else {
                    routes.unchanged.push(oldRouteInfo);
                }
            }
            for (i = newRouteInfos.length, l = oldRouteInfos.length; i < l; i++) {
                routes.exited.unshift(oldRouteInfos[i]);
            }
            routes.reset = routes.updatedContext.slice();
            routes.reset.reverse();
            return routes;
        };

        Router.prototype._updateURL = function _updateURL(transition, state) {
            var urlMethod = transition.urlMethod;
            if (!urlMethod) {
                return;
            }
            var routeInfos = state.routeInfos;
            var routeName = routeInfos[routeInfos.length - 1].name;

            var params = {};
            for (var i = routeInfos.length - 1; i >= 0; --i) {
                var routeInfo = routeInfos[i];
                merge(params, routeInfo.params);
                if (routeInfo.route.inaccessibleByURL) {
                    urlMethod = null;
                }
            }
            if (urlMethod) {
                params.queryParams = transition._visibleQueryParams || state.queryParams;
                var url = this.recognizer.generate(routeName, params);
                // transitions during the initial transition must always use replaceURL.
                // When the app boots, you are at a url, e.g. /foo. If some route
                // redirects to bar as part of the initial transition, you don't want to
                // add a history entry for /foo. If you do, pressing back will immediately
                // hit the redirect again and take you back to /bar, thus killing the back
                // button
                var initial = transition.isCausedByInitialTransition;
                // say you are at / and you click a link to route /foo. In /foo's
                // route, the transition is aborted using replacewith('/bar').
                // Because the current url is still /, the history entry for / is
                // removed from the history. Clicking back will take you to the page
                // you were on before /, which is often not even the app, thus killing
                // the back button. That's why updateURL is always correct for an
                // aborting transition that's not the initial transition
                var replaceAndNotAborting = urlMethod === 'replace' && !transition.isCausedByAbortingTransition;
                // because calling refresh causes an aborted transition, this needs to be
                // special cased - if the initial transition is a replace transition, the
                // urlMethod should be honored here.
                var isQueryParamsRefreshTransition = transition.queryParamsOnly && urlMethod === 'replace';
                // say you are at / and you a `replaceWith(/foo)` is called. Then, that
                // transition is aborted with `replaceWith(/bar)`. At the end, we should
                // end up with /bar replacing /. We are replacing the replace. We only
                // will replace the initial route if all subsequent aborts are also
                // replaces. However, there is some ambiguity around the correct behavior
                // here.
                var replacingReplace = urlMethod === 'replace' && transition.isCausedByAbortingReplaceTransition;
                if (initial || replaceAndNotAborting || isQueryParamsRefreshTransition || replacingReplace) {
                    this.replaceURL(url);
                } else {
                    this.updateURL(url);
                }
            }
        };

        Router.prototype.finalizeQueryParamChange = function finalizeQueryParamChange(resolvedHandlers, newQueryParams, transition) {
            // We fire a finalizeQueryParamChange event which
            // gives the new route hierarchy a chance to tell
            // us which query params it's consuming and what
            // their final values are. If a query param is
            // no longer consumed in the final route hierarchy,
            // its serialized segment will be removed
            // from the URL.
            for (var k in newQueryParams) {
                if (newQueryParams.hasOwnProperty(k) && newQueryParams[k] === null) {
                    delete newQueryParams[k];
                }
            }
            var finalQueryParamsArray = [];
            this.triggerEvent(resolvedHandlers, true, 'finalizeQueryParamChange', [newQueryParams, finalQueryParamsArray, transition]);
            if (transition) {
                transition._visibleQueryParams = {};
            }
            var finalQueryParams = {};
            for (var i = 0, len = finalQueryParamsArray.length; i < len; ++i) {
                var qp = finalQueryParamsArray[i];
                finalQueryParams[qp.key] = qp.value;
                if (transition && qp.visible !== false) {
                    transition._visibleQueryParams[qp.key] = qp.value;
                }
            }
            return finalQueryParams;
        };

        Router.prototype.toReadOnlyInfos = function toReadOnlyInfos(newTransition, newState) {
            var oldRouteInfos = this.state.routeInfos;
            this.fromInfos(newTransition, oldRouteInfos);
            this.toInfos(newTransition, newState.routeInfos);
            this._lastQueryParams = newState.queryParams;
        };

        Router.prototype.fromInfos = function fromInfos(newTransition, oldRouteInfos) {
            if (newTransition !== undefined && oldRouteInfos.length > 0) {
                var fromInfos = toReadOnlyRouteInfo(oldRouteInfos, (0, _polyfills.assign)({}, this._lastQueryParams), true);
                newTransition.from = fromInfos[fromInfos.length - 1] || null;
            }
        };

        Router.prototype.toInfos = function toInfos(newTransition, newRouteInfos) {
            var includeAttributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

            if (newTransition !== undefined && newRouteInfos.length > 0) {
                var toInfos = toReadOnlyRouteInfo(newRouteInfos, (0, _polyfills.assign)({}, newTransition[QUERY_PARAMS_SYMBOL]), includeAttributes);
                newTransition.to = toInfos[toInfos.length - 1] || null;
            }
        };

        Router.prototype.notifyExistingHandlers = function notifyExistingHandlers(newState, newTransition) {
            var oldRouteInfos = this.state.routeInfos,
                i = void 0,
                oldRouteInfoLen = void 0,
                oldHandler = void 0,
                newRouteInfo = void 0;
            oldRouteInfoLen = oldRouteInfos.length;
            for (i = 0; i < oldRouteInfoLen; i++) {
                oldHandler = oldRouteInfos[i];
                newRouteInfo = newState.routeInfos[i];
                if (!newRouteInfo || oldHandler.name !== newRouteInfo.name) {
                    break;
                }
                if (!newRouteInfo.isResolved) {}
            }
            this.triggerEvent(oldRouteInfos, true, 'willTransition', [newTransition]);
            this.routeWillChange(newTransition);
            this.willTransition(oldRouteInfos, newState.routeInfos, newTransition);
        };
        /**
          Clears the current and target route routes and triggers exit
          on each of them starting at the leaf and traversing up through
          its ancestors.
        */

        Router.prototype.reset = function reset() {
            if (this.state) {
                forEach(this.state.routeInfos.slice().reverse(), function (routeInfo) {
                    var route = routeInfo.route;
                    if (route !== undefined) {
                        if (route.exit !== undefined) {
                            route.exit();
                        }
                    }
                    return true;
                });
            }
            this.oldState = undefined;
            this.state = new TransitionState();
            this.currentRouteInfos = undefined;
        };
        /**
          let handler = routeInfo.handler;
          The entry point for handling a change to the URL (usually
          via the back and forward button).
             Returns an Array of handlers and the parameters associated
          with those parameters.
             @param {String} url a URL to process
             @return {Array} an Array of `[handler, parameter]` tuples
        */

        Router.prototype.handleURL = function handleURL(url) {
            // Perform a URL-based transition, but don't change
            // the URL afterward, since it already happened.
            if (url.charAt(0) !== '/') {
                url = '/' + url;
            }
            return this.doTransition(url).method(null);
        };
        /**
          Transition into the specified named route.
             If necessary, trigger the exit callback on any routes
          that are no longer represented by the target route.
             @param {String} name the name of the route
        */

        Router.prototype.transitionTo = function transitionTo(name) {
            for (var _len3 = arguments.length, contexts = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
                contexts[_key3 - 1] = arguments[_key3];
            }

            if (typeof name === 'object') {
                contexts.push(name);
                return this.doTransition(undefined, contexts, false);
            }
            return this.doTransition(name, contexts);
        };

        Router.prototype.intermediateTransitionTo = function intermediateTransitionTo(name) {
            for (var _len4 = arguments.length, args = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
                args[_key4 - 1] = arguments[_key4];
            }

            return this.doTransition(name, args, true);
        };

        Router.prototype.refresh = function refresh(pivotRoute) {
            var previousTransition = this.activeTransition;
            var state = previousTransition ? previousTransition[STATE_SYMBOL] : this.state;
            var routeInfos = state.routeInfos;
            if (pivotRoute === undefined) {
                pivotRoute = routeInfos[0].route;
            }
            _log(this, 'Starting a refresh transition');
            var name = routeInfos[routeInfos.length - 1].name;
            var intent = new NamedTransitionIntent(this, name, pivotRoute, [], this._changedQueryParams || state.queryParams);
            var newTransition = this.transitionByIntent(intent, false);
            // if the previous transition is a replace transition, that needs to be preserved
            if (previousTransition && previousTransition.urlMethod === 'replace') {
                newTransition.method(previousTransition.urlMethod);
            }
            return newTransition;
        };
        /**
          Identical to `transitionTo` except that the current URL will be replaced
          if possible.
             This method is intended primarily for use with `replaceState`.
             @param {String} name the name of the route
        */

        Router.prototype.replaceWith = function replaceWith(name) {
            return this.doTransition(name).method('replace');
        };
        /**
          Take a named route and context objects and generate a
          URL.
             @param {String} name the name of the route to generate
            a URL for
          @param {...Object} objects a list of objects to serialize
             @return {String} a URL
        */

        Router.prototype.generate = function generate(routeName) {
            for (var _len5 = arguments.length, args = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
                args[_key5 - 1] = arguments[_key5];
            }

            var partitionedArgs = extractQueryParams(args),
                suppliedParams = partitionedArgs[0],
                queryParams = partitionedArgs[1];
            // Construct a TransitionIntent with the provided params
            // and apply it to the present state of the router.
            var intent = new NamedTransitionIntent(this, routeName, undefined, suppliedParams);
            var state = intent.applyToState(this.state, false);
            var params = {};
            for (var i = 0, len = state.routeInfos.length; i < len; ++i) {
                var routeInfo = state.routeInfos[i];
                var routeParams = routeInfo.serialize();
                merge(params, routeParams);
            }
            params.queryParams = queryParams;
            return this.recognizer.generate(routeName, params);
        };

        Router.prototype.applyIntent = function applyIntent(routeName, contexts) {
            var intent = new NamedTransitionIntent(this, routeName, undefined, contexts);
            var state = this.activeTransition && this.activeTransition[STATE_SYMBOL] || this.state;
            return intent.applyToState(state, false);
        };

        Router.prototype.isActiveIntent = function isActiveIntent(routeName, contexts, queryParams, _state) {
            var state = _state || this.state,
                targetRouteInfos = state.routeInfos,
                routeInfo = void 0,
                len = void 0;
            if (!targetRouteInfos.length) {
                return false;
            }
            var targetHandler = targetRouteInfos[targetRouteInfos.length - 1].name;
            var recogHandlers = this.recognizer.handlersFor(targetHandler);
            var index = 0;
            for (len = recogHandlers.length; index < len; ++index) {
                routeInfo = targetRouteInfos[index];
                if (routeInfo.name === routeName) {
                    break;
                }
            }
            if (index === recogHandlers.length) {
                // The provided route name isn't even in the route hierarchy.
                return false;
            }
            var testState = new TransitionState();
            testState.routeInfos = targetRouteInfos.slice(0, index + 1);
            recogHandlers = recogHandlers.slice(0, index + 1);
            var intent = new NamedTransitionIntent(this, targetHandler, undefined, contexts);
            var newState = intent.applyToHandlers(testState, recogHandlers, targetHandler, true, true);
            var routesEqual = routeInfosEqual(newState.routeInfos, testState.routeInfos);
            if (!queryParams || !routesEqual) {
                return routesEqual;
            }
            // Get a hash of QPs that will still be active on new route
            var activeQPsOnNewHandler = {};
            merge(activeQPsOnNewHandler, queryParams);
            var activeQueryParams = state.queryParams;
            for (var key in activeQueryParams) {
                if (activeQueryParams.hasOwnProperty(key) && activeQPsOnNewHandler.hasOwnProperty(key)) {
                    activeQPsOnNewHandler[key] = activeQueryParams[key];
                }
            }
            return routesEqual && !getChangelist(activeQPsOnNewHandler, queryParams);
        };

        Router.prototype.isActive = function isActive(routeName) {
            for (var _len6 = arguments.length, args = Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
                args[_key6 - 1] = arguments[_key6];
            }

            var partitionedArgs = extractQueryParams(args);
            return this.isActiveIntent(routeName, partitionedArgs[0], partitionedArgs[1]);
        };

        Router.prototype.trigger = function trigger(name) {
            for (var _len7 = arguments.length, args = Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {
                args[_key7 - 1] = arguments[_key7];
            }

            this.triggerEvent(this.currentRouteInfos, false, name, args);
        };

        return Router;
    }();

    function routeInfosEqual(routeInfos, otherRouteInfos) {
        if (routeInfos.length !== otherRouteInfos.length) {
            return false;
        }
        for (var i = 0, len = routeInfos.length; i < len; ++i) {
            if (routeInfos[i] !== otherRouteInfos[i]) {
                return false;
            }
        }
        return true;
    }
    function routeInfosSameExceptQueryParams(routeInfos, otherRouteInfos) {
        if (routeInfos.length !== otherRouteInfos.length) {
            return false;
        }
        for (var i = 0, len = routeInfos.length; i < len; ++i) {
            if (routeInfos[i].name !== otherRouteInfos[i].name) {
                return false;
            }
            if (!paramsEqual(routeInfos[i].params, otherRouteInfos[i].params)) {
                return false;
            }
        }
        return true;
    }
    function paramsEqual(params, otherParams) {
        if (!params && !otherParams) {
            return true;
        } else if (!params && !!otherParams || !!params && !otherParams) {
            // one is falsy but other is not;
            return false;
        }
        var keys = Object.keys(params);
        var otherKeys = Object.keys(otherParams);
        if (keys.length !== otherKeys.length) {
            return false;
        }
        for (var i = 0, len = keys.length; i < len; ++i) {
            var key = keys[i];
            if (params[key] !== otherParams[key]) {
                return false;
            }
        }
        return true;
    }

    exports.default = Router;
    exports.InternalTransition = Transition;
    exports.logAbort = logAbort;
    exports.STATE_SYMBOL = STATE_SYMBOL;
    exports.PARAMS_SYMBOL = PARAMS_SYMBOL;
    exports.QUERY_PARAMS_SYMBOL = QUERY_PARAMS_SYMBOL;
    exports.TransitionState = TransitionState;
    exports.TransitionError = TransitionError;
    exports.InternalRouteInfo = InternalRouteInfo;
});
enifed('rsvp', ['exports', 'node-module', 'ember-babel'], function (exports, _nodeModule, _emberBabel) {
  'use strict';

  exports.filter = exports.async = exports.map = exports.reject = exports.resolve = exports.off = exports.on = exports.configure = exports.denodeify = exports.defer = exports.rethrow = exports.hashSettled = exports.hash = exports.race = exports.allSettled = exports.all = exports.EventTarget = exports.Promise = exports.cast = exports.asap = undefined;

  function callbacksFor(object) {
    var callbacks = object._promiseCallbacks;

    if (!callbacks) {
      callbacks = object._promiseCallbacks = {};
    }

    return callbacks;
  }

  /**
    @class EventTarget
    @for rsvp
    @public
  */
  var EventTarget = {

    /**
      `EventTarget.mixin` extends an object with EventTarget methods. For
      Example:
       ```javascript
      import EventTarget from 'rsvp';
       let object = {};
       EventTarget.mixin(object);
       object.on('finished', function(event) {
        // handle event
      });
       object.trigger('finished', { detail: value });
      ```
       `EventTarget.mixin` also works with prototypes:
       ```javascript
      import EventTarget from 'rsvp';
       let Person = function() {};
      EventTarget.mixin(Person.prototype);
       let yehuda = new Person();
      let tom = new Person();
       yehuda.on('poke', function(event) {
        console.log('Yehuda says OW');
      });
       tom.on('poke', function(event) {
        console.log('Tom says OW');
      });
       yehuda.trigger('poke');
      tom.trigger('poke');
      ```
       @method mixin
      @for rsvp
      @private
      @param {Object} object object to extend with EventTarget methods
    */
    mixin: function (object) {
      object.on = this.on;
      object.off = this.off;
      object.trigger = this.trigger;
      object._promiseCallbacks = undefined;
      return object;
    },

    /**
      Registers a callback to be executed when `eventName` is triggered
       ```javascript
      object.on('event', function(eventInfo){
        // handle the event
      });
       object.trigger('event');
      ```
       @method on
      @for EventTarget
      @private
      @param {String} eventName name of the event to listen for
      @param {Function} callback function to be called when the event is triggered.
    */
    on: function (eventName, callback) {
      if (typeof callback !== 'function') {
        throw new TypeError('Callback must be a function');
      }

      var allCallbacks = callbacksFor(this);
      var callbacks = allCallbacks[eventName];

      if (!callbacks) {
        callbacks = allCallbacks[eventName] = [];
      }

      if (callbacks.indexOf(callback) === -1) {
        callbacks.push(callback);
      }
    },

    /**
      You can use `off` to stop firing a particular callback for an event:
       ```javascript
      function doStuff() { // do stuff! }
      object.on('stuff', doStuff);
       object.trigger('stuff'); // doStuff will be called
       // Unregister ONLY the doStuff callback
      object.off('stuff', doStuff);
      object.trigger('stuff'); // doStuff will NOT be called
      ```
       If you don't pass a `callback` argument to `off`, ALL callbacks for the
      event will not be executed when the event fires. For example:
       ```javascript
      let callback1 = function(){};
      let callback2 = function(){};
       object.on('stuff', callback1);
      object.on('stuff', callback2);
       object.trigger('stuff'); // callback1 and callback2 will be executed.
       object.off('stuff');
      object.trigger('stuff'); // callback1 and callback2 will not be executed!
      ```
       @method off
      @for rsvp
      @private
      @param {String} eventName event to stop listening to
      @param {Function} callback optional argument. If given, only the function
      given will be removed from the event's callback queue. If no `callback`
      argument is given, all callbacks will be removed from the event's callback
      queue.
    */
    off: function (eventName, callback) {
      var allCallbacks = callbacksFor(this);

      if (!callback) {
        allCallbacks[eventName] = [];
        return;
      }

      var callbacks = allCallbacks[eventName];
      var index = callbacks.indexOf(callback);

      if (index !== -1) {
        callbacks.splice(index, 1);
      }
    },

    /**
      Use `trigger` to fire custom events. For example:
       ```javascript
      object.on('foo', function(){
        console.log('foo event happened!');
      });
      object.trigger('foo');
      // 'foo event happened!' logged to the console
      ```
       You can also pass a value as a second argument to `trigger` that will be
      passed as an argument to all event listeners for the event:
       ```javascript
      object.on('foo', function(value){
        console.log(value.name);
      });
       object.trigger('foo', { name: 'bar' });
      // 'bar' logged to the console
      ```
       @method trigger
      @for rsvp
      @private
      @param {String} eventName name of the event to be triggered
      @param {*} options optional value to be passed to any event handlers for
      the given `eventName`
    */
    trigger: function (eventName, options, label) {
      var allCallbacks = callbacksFor(this);

      var callbacks = allCallbacks[eventName];
      if (callbacks) {
        // Don't cache the callbacks.length since it may grow
        var callback = void 0;
        for (var i = 0; i < callbacks.length; i++) {
          callback = callbacks[i];
          callback(options, label);
        }
      }
    }
  };

  var config = {
    instrument: false
  };

  EventTarget['mixin'](config);

  function configure(name, value) {
    if (arguments.length === 2) {
      config[name] = value;
    } else {
      return config[name];
    }
  }

  var queue = [];

  function scheduleFlush() {
    setTimeout(function () {
      for (var i = 0; i < queue.length; i++) {
        var entry = queue[i];

        var payload = entry.payload;

        payload.guid = payload.key + payload.id;
        payload.childGuid = payload.key + payload.childId;
        if (payload.error) {
          payload.stack = payload.error.stack;
        }

        config['trigger'](entry.name, entry.payload);
      }
      queue.length = 0;
    }, 50);
  }

  function instrument(eventName, promise, child) {
    if (1 === queue.push({
      name: eventName,
      payload: {
        key: promise._guidKey,
        id: promise._id,
        eventName: eventName,
        detail: promise._result,
        childId: child && child._id,
        label: promise._label,
        timeStamp: Date.now(),
        error: config["instrument-with-stack"] ? new Error(promise._label) : null
      } })) {
      scheduleFlush();
    }
  }

  /**
    `Promise.resolve` returns a promise that will become resolved with the
    passed `value`. It is shorthand for the following:
  
    ```javascript
    import Promise from 'rsvp';
  
    let promise = new Promise(function(resolve, reject){
      resolve(1);
    });
  
    promise.then(function(value){
      // value === 1
    });
    ```
  
    Instead of writing the above, your code now simply becomes the following:
  
    ```javascript
    import Promise from 'rsvp';
  
    let promise = RSVP.Promise.resolve(1);
  
    promise.then(function(value){
      // value === 1
    });
    ```
  
    @method resolve
    @for Promise
    @static
    @param {*} object value that the returned promise will be resolved with
    @param {String} label optional string for identifying the returned promise.
    Useful for tooling.
    @return {Promise} a promise that will become fulfilled with the given
    `value`
  */
  function resolve$$1(object, label) {
    /*jshint validthis:true */
    var Constructor = this;

    if (object && typeof object === 'object' && object.constructor === Constructor) {
      return object;
    }

    var promise = new Constructor(noop, label);
    resolve$1(promise, object);
    return promise;
  }

  function withOwnPromise() {
    return new TypeError('A promises callback cannot return that same promise.');
  }

  function objectOrFunction(x) {
    var type = typeof x;
    return x !== null && (type === 'object' || type === 'function');
  }

  function noop() {}

  var PENDING = void 0;
  var FULFILLED = 1;
  var REJECTED = 2;

  var TRY_CATCH_ERROR = { error: null };

  function getThen(promise) {
    try {
      return promise.then;
    } catch (error) {
      TRY_CATCH_ERROR.error = error;
      return TRY_CATCH_ERROR;
    }
  }

  var tryCatchCallback = void 0;
  function tryCatcher() {
    try {
      var target = tryCatchCallback;
      tryCatchCallback = null;
      return target.apply(this, arguments);
    } catch (e) {
      TRY_CATCH_ERROR.error = e;
      return TRY_CATCH_ERROR;
    }
  }

  function tryCatch(fn) {
    tryCatchCallback = fn;
    return tryCatcher;
  }

  function handleForeignThenable(promise, thenable, then$$1) {
    config.async(function (promise) {
      var sealed = false;
      var result = tryCatch(then$$1).call(thenable, function (value) {
        if (sealed) {
          return;
        }
        sealed = true;
        if (thenable === value) {
          fulfill(promise, value);
        } else {
          resolve$1(promise, value);
        }
      }, function (reason) {
        if (sealed) {
          return;
        }
        sealed = true;

        reject(promise, reason);
      }, 'Settle: ' + (promise._label || ' unknown promise'));

      if (!sealed && result === TRY_CATCH_ERROR) {
        sealed = true;
        var error = TRY_CATCH_ERROR.error;
        TRY_CATCH_ERROR.error = null;
        reject(promise, error);
      }
    }, promise);
  }

  function handleOwnThenable(promise, thenable) {
    if (thenable._state === FULFILLED) {
      fulfill(promise, thenable._result);
    } else if (thenable._state === REJECTED) {
      thenable._onError = null;
      reject(promise, thenable._result);
    } else {
      subscribe(thenable, undefined, function (value) {
        if (thenable === value) {
          fulfill(promise, value);
        } else {
          resolve$1(promise, value);
        }
      }, function (reason) {
        return reject(promise, reason);
      });
    }
  }

  function handleMaybeThenable(promise, maybeThenable, then$$1) {
    var isOwnThenable = maybeThenable.constructor === promise.constructor && then$$1 === then && promise.constructor.resolve === resolve$$1;

    if (isOwnThenable) {
      handleOwnThenable(promise, maybeThenable);
    } else if (then$$1 === TRY_CATCH_ERROR) {
      var error = TRY_CATCH_ERROR.error;
      TRY_CATCH_ERROR.error = null;
      reject(promise, error);
    } else if (typeof then$$1 === 'function') {
      handleForeignThenable(promise, maybeThenable, then$$1);
    } else {
      fulfill(promise, maybeThenable);
    }
  }

  function resolve$1(promise, value) {
    if (promise === value) {
      fulfill(promise, value);
    } else if (objectOrFunction(value)) {
      handleMaybeThenable(promise, value, getThen(value));
    } else {
      fulfill(promise, value);
    }
  }

  function publishRejection(promise) {
    if (promise._onError) {
      promise._onError(promise._result);
    }

    publish(promise);
  }

  function fulfill(promise, value) {
    if (promise._state !== PENDING) {
      return;
    }

    promise._result = value;
    promise._state = FULFILLED;

    if (promise._subscribers.length === 0) {
      if (config.instrument) {
        instrument('fulfilled', promise);
      }
    } else {
      config.async(publish, promise);
    }
  }

  function reject(promise, reason) {
    if (promise._state !== PENDING) {
      return;
    }
    promise._state = REJECTED;
    promise._result = reason;
    config.async(publishRejection, promise);
  }

  function subscribe(parent, child, onFulfillment, onRejection) {
    var subscribers = parent._subscribers;
    var length = subscribers.length;

    parent._onError = null;

    subscribers[length] = child;
    subscribers[length + FULFILLED] = onFulfillment;
    subscribers[length + REJECTED] = onRejection;

    if (length === 0 && parent._state) {
      config.async(publish, parent);
    }
  }

  function publish(promise) {
    var subscribers = promise._subscribers;
    var settled = promise._state;

    if (config.instrument) {
      instrument(settled === FULFILLED ? 'fulfilled' : 'rejected', promise);
    }

    if (subscribers.length === 0) {
      return;
    }

    var child = void 0,
        callback = void 0,
        result = promise._result;

    for (var i = 0; i < subscribers.length; i += 3) {
      child = subscribers[i];
      callback = subscribers[i + settled];

      if (child) {
        invokeCallback(settled, child, callback, result);
      } else {
        callback(result);
      }
    }

    promise._subscribers.length = 0;
  }

  function invokeCallback(state, promise, callback, result) {
    var hasCallback = typeof callback === 'function';
    var value = void 0;

    if (hasCallback) {
      value = tryCatch(callback)(result);
    } else {
      value = result;
    }

    if (promise._state !== PENDING) {
      // noop
    } else if (value === promise) {
      reject(promise, withOwnPromise());
    } else if (value === TRY_CATCH_ERROR) {
      var error = TRY_CATCH_ERROR.error;
      TRY_CATCH_ERROR.error = null; // release
      reject(promise, error);
    } else if (hasCallback) {
      resolve$1(promise, value);
    } else if (state === FULFILLED) {
      fulfill(promise, value);
    } else if (state === REJECTED) {
      reject(promise, value);
    }
  }

  function initializePromise(promise, resolver) {
    var resolved = false;
    try {
      resolver(function (value) {
        if (resolved) {
          return;
        }
        resolved = true;
        resolve$1(promise, value);
      }, function (reason) {
        if (resolved) {
          return;
        }
        resolved = true;
        reject(promise, reason);
      });
    } catch (e) {
      reject(promise, e);
    }
  }

  function then(onFulfillment, onRejection, label) {
    var parent = this;
    var state = parent._state;

    if (state === FULFILLED && !onFulfillment || state === REJECTED && !onRejection) {
      config.instrument && instrument('chained', parent, parent);
      return parent;
    }

    parent._onError = null;

    var child = new parent.constructor(noop, label);
    var result = parent._result;

    config.instrument && instrument('chained', parent, child);

    if (state === PENDING) {
      subscribe(parent, child, onFulfillment, onRejection);
    } else {
      var callback = state === FULFILLED ? onFulfillment : onRejection;
      config.async(function () {
        return invokeCallback(state, child, callback, result);
      });
    }

    return child;
  }

  var Enumerator = function () {
    function Enumerator(Constructor, input, abortOnReject, label) {
      (0, _emberBabel.classCallCheck)(this, Enumerator);

      this._instanceConstructor = Constructor;
      this.promise = new Constructor(noop, label);
      this._abortOnReject = abortOnReject;
      this._isUsingOwnPromise = Constructor === Promise;
      this._isUsingOwnResolve = Constructor.resolve === resolve$$1;

      this._init.apply(this, arguments);
    }

    Enumerator.prototype._init = function _init(Constructor, input) {
      var len = input.length || 0;
      this.length = len;
      this._remaining = len;
      this._result = new Array(len);

      this._enumerate(input);
    };

    Enumerator.prototype._enumerate = function _enumerate(input) {
      var length = this.length;
      var promise = this.promise;

      for (var i = 0; promise._state === PENDING && i < length; i++) {
        this._eachEntry(input[i], i, true);
      }
      this._checkFullfillment();
    };

    Enumerator.prototype._checkFullfillment = function _checkFullfillment() {
      if (this._remaining === 0) {
        var result = this._result;
        fulfill(this.promise, result);
        this._result = null;
      }
    };

    Enumerator.prototype._settleMaybeThenable = function _settleMaybeThenable(entry, i, firstPass) {
      var c = this._instanceConstructor;

      if (this._isUsingOwnResolve) {
        var then$$1 = getThen(entry);

        if (then$$1 === then && entry._state !== PENDING) {
          entry._onError = null;
          this._settledAt(entry._state, i, entry._result, firstPass);
        } else if (typeof then$$1 !== 'function') {
          this._settledAt(FULFILLED, i, entry, firstPass);
        } else if (this._isUsingOwnPromise) {
          var promise = new c(noop);
          handleMaybeThenable(promise, entry, then$$1);
          this._willSettleAt(promise, i, firstPass);
        } else {
          this._willSettleAt(new c(function (resolve) {
            return resolve(entry);
          }), i, firstPass);
        }
      } else {
        this._willSettleAt(c.resolve(entry), i, firstPass);
      }
    };

    Enumerator.prototype._eachEntry = function _eachEntry(entry, i, firstPass) {
      if (entry !== null && typeof entry === 'object') {
        this._settleMaybeThenable(entry, i, firstPass);
      } else {
        this._setResultAt(FULFILLED, i, entry, firstPass);
      }
    };

    Enumerator.prototype._settledAt = function _settledAt(state, i, value, firstPass) {
      var promise = this.promise;

      if (promise._state === PENDING) {
        if (this._abortOnReject && state === REJECTED) {
          reject(promise, value);
        } else {
          this._setResultAt(state, i, value, firstPass);
          this._checkFullfillment();
        }
      }
    };

    Enumerator.prototype._setResultAt = function _setResultAt(state, i, value, firstPass) {
      this._remaining--;
      this._result[i] = value;
    };

    Enumerator.prototype._willSettleAt = function _willSettleAt(promise, i, firstPass) {
      var _this = this;

      subscribe(promise, undefined, function (value) {
        return _this._settledAt(FULFILLED, i, value, firstPass);
      }, function (reason) {
        return _this._settledAt(REJECTED, i, reason, firstPass);
      });
    };

    return Enumerator;
  }();

  function setSettledResult(state, i, value) {
    this._remaining--;
    if (state === FULFILLED) {
      this._result[i] = {
        state: 'fulfilled',
        value: value
      };
    } else {
      this._result[i] = {
        state: 'rejected',
        reason: value
      };
    }
  }

  /**
    `Promise.all` accepts an array of promises, and returns a new promise which
    is fulfilled with an array of fulfillment values for the passed promises, or
    rejected with the reason of the first passed promise to be rejected. It casts all
    elements of the passed iterable to promises as it runs this algorithm.
  
    Example:
  
    ```javascript
    import Promise, { resolve } from 'rsvp';
  
    let promise1 = resolve(1);
    let promise2 = resolve(2);
    let promise3 = resolve(3);
    let promises = [ promise1, promise2, promise3 ];
  
    Promise.all(promises).then(function(array){
      // The array here would be [ 1, 2, 3 ];
    });
    ```
  
    If any of the `promises` given to `RSVP.all` are rejected, the first promise
    that is rejected will be given as an argument to the returned promises's
    rejection handler. For example:
  
    Example:
  
    ```javascript
    import Promise, { resolve, reject } from 'rsvp';
  
    let promise1 = resolve(1);
    let promise2 = reject(new Error("2"));
    let promise3 = reject(new Error("3"));
    let promises = [ promise1, promise2, promise3 ];
  
    Promise.all(promises).then(function(array){
      // Code here never runs because there are rejected promises!
    }, function(error) {
      // error.message === "2"
    });
    ```
  
    @method all
    @for Promise
    @param {Array} entries array of promises
    @param {String} label optional string for labeling the promise.
    Useful for tooling.
    @return {Promise} promise that is fulfilled when all `promises` have been
    fulfilled, or rejected if any of them become rejected.
    @static
  */
  function all(entries, label) {
    if (!Array.isArray(entries)) {
      return this.reject(new TypeError("Promise.all must be called with an array"), label);
    }
    return new Enumerator(this, entries, true /* abort on reject */, label).promise;
  }

  /**
    `Promise.race` returns a new promise which is settled in the same way as the
    first passed promise to settle.
  
    Example:
  
    ```javascript
    import Promise from 'rsvp';
  
    let promise1 = new Promise(function(resolve, reject){
      setTimeout(function(){
        resolve('promise 1');
      }, 200);
    });
  
    let promise2 = new Promise(function(resolve, reject){
      setTimeout(function(){
        resolve('promise 2');
      }, 100);
    });
  
    Promise.race([promise1, promise2]).then(function(result){
      // result === 'promise 2' because it was resolved before promise1
      // was resolved.
    });
    ```
  
    `Promise.race` is deterministic in that only the state of the first
    settled promise matters. For example, even if other promises given to the
    `promises` array argument are resolved, but the first settled promise has
    become rejected before the other promises became fulfilled, the returned
    promise will become rejected:
  
    ```javascript
    import Promise from 'rsvp';
  
    let promise1 = new Promise(function(resolve, reject){
      setTimeout(function(){
        resolve('promise 1');
      }, 200);
    });
  
    let promise2 = new Promise(function(resolve, reject){
      setTimeout(function(){
        reject(new Error('promise 2'));
      }, 100);
    });
  
    Promise.race([promise1, promise2]).then(function(result){
      // Code here never runs
    }, function(reason){
      // reason.message === 'promise 2' because promise 2 became rejected before
      // promise 1 became fulfilled
    });
    ```
  
    An example real-world use case is implementing timeouts:
  
    ```javascript
    import Promise from 'rsvp';
  
    Promise.race([ajax('foo.json'), timeout(5000)])
    ```
  
    @method race
    @for Promise
    @static
    @param {Array} entries array of promises to observe
    @param {String} label optional string for describing the promise returned.
    Useful for tooling.
    @return {Promise} a promise which settles in the same way as the first passed
    promise to settle.
  */
  function race(entries, label) {
    /*jshint validthis:true */
    var Constructor = this;

    var promise = new Constructor(noop, label);

    if (!Array.isArray(entries)) {
      reject(promise, new TypeError('Promise.race must be called with an array'));
      return promise;
    }

    for (var i = 0; promise._state === PENDING && i < entries.length; i++) {
      subscribe(Constructor.resolve(entries[i]), undefined, function (value) {
        return resolve$1(promise, value);
      }, function (reason) {
        return reject(promise, reason);
      });
    }

    return promise;
  }

  /**
    `Promise.reject` returns a promise rejected with the passed `reason`.
    It is shorthand for the following:
  
    ```javascript
    import Promise from 'rsvp';
  
    let promise = new Promise(function(resolve, reject){
      reject(new Error('WHOOPS'));
    });
  
    promise.then(function(value){
      // Code here doesn't run because the promise is rejected!
    }, function(reason){
      // reason.message === 'WHOOPS'
    });
    ```
  
    Instead of writing the above, your code now simply becomes the following:
  
    ```javascript
    import Promise from 'rsvp';
  
    let promise = Promise.reject(new Error('WHOOPS'));
  
    promise.then(function(value){
      // Code here doesn't run because the promise is rejected!
    }, function(reason){
      // reason.message === 'WHOOPS'
    });
    ```
  
    @method reject
    @for Promise
    @static
    @param {*} reason value that the returned promise will be rejected with.
    @param {String} label optional string for identifying the returned promise.
    Useful for tooling.
    @return {Promise} a promise rejected with the given `reason`.
  */
  function reject$1(reason, label) {
    /*jshint validthis:true */
    var Constructor = this;
    var promise = new Constructor(noop, label);
    reject(promise, reason);
    return promise;
  }

  var guidKey = 'rsvp_' + Date.now() + '-';
  var counter = 0;

  function needsResolver() {
    throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
  }

  function needsNew() {
    throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
  }

  /**
    Promise objects represent the eventual result of an asynchronous operation. The
    primary way of interacting with a promise is through its `then` method, which
    registers callbacks to receive either a promise’s eventual value or the reason
    why the promise cannot be fulfilled.
  
    Terminology
    -----------
  
    - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
    - `thenable` is an object or function that defines a `then` method.
    - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
    - `exception` is a value that is thrown using the throw statement.
    - `reason` is a value that indicates why a promise was rejected.
    - `settled` the final resting state of a promise, fulfilled or rejected.
  
    A promise can be in one of three states: pending, fulfilled, or rejected.
  
    Promises that are fulfilled have a fulfillment value and are in the fulfilled
    state.  Promises that are rejected have a rejection reason and are in the
    rejected state.  A fulfillment value is never a thenable.
  
    Promises can also be said to *resolve* a value.  If this value is also a
    promise, then the original promise's settled state will match the value's
    settled state.  So a promise that *resolves* a promise that rejects will
    itself reject, and a promise that *resolves* a promise that fulfills will
    itself fulfill.
  
  
    Basic Usage:
    ------------
  
    ```js
    let promise = new Promise(function(resolve, reject) {
      // on success
      resolve(value);
  
      // on failure
      reject(reason);
    });
  
    promise.then(function(value) {
      // on fulfillment
    }, function(reason) {
      // on rejection
    });
    ```
  
    Advanced Usage:
    ---------------
  
    Promises shine when abstracting away asynchronous interactions such as
    `XMLHttpRequest`s.
  
    ```js
    function getJSON(url) {
      return new Promise(function(resolve, reject){
        let xhr = new XMLHttpRequest();
  
        xhr.open('GET', url);
        xhr.onreadystatechange = handler;
        xhr.responseType = 'json';
        xhr.setRequestHeader('Accept', 'application/json');
        xhr.send();
  
        function handler() {
          if (this.readyState === this.DONE) {
            if (this.status === 200) {
              resolve(this.response);
            } else {
              reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
            }
          }
        };
      });
    }
  
    getJSON('/posts.json').then(function(json) {
      // on fulfillment
    }, function(reason) {
      // on rejection
    });
    ```
  
    Unlike callbacks, promises are great composable primitives.
  
    ```js
    Promise.all([
      getJSON('/posts'),
      getJSON('/comments')
    ]).then(function(values){
      values[0] // => postsJSON
      values[1] // => commentsJSON
  
      return values;
    });
    ```
  
    @class Promise
    @public
    @param {function} resolver
    @param {String} label optional string for labeling the promise.
    Useful for tooling.
    @constructor
  */

  var Promise = function () {
    function Promise(resolver, label) {
      (0, _emberBabel.classCallCheck)(this, Promise);

      this._id = counter++;
      this._label = label;
      this._state = undefined;
      this._result = undefined;
      this._subscribers = [];

      config.instrument && instrument('created', this);

      if (noop !== resolver) {
        typeof resolver !== 'function' && needsResolver();
        this instanceof Promise ? initializePromise(this, resolver) : needsNew();
      }
    }

    Promise.prototype._onError = function _onError(reason) {
      var _this2 = this;

      config.after(function () {
        if (_this2._onError) {
          config.trigger('error', reason, _this2._label);
        }
      });
    };

    /**
      `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
      as the catch block of a try/catch statement.
    
      ```js
      function findAuthor(){
        throw new Error('couldn\'t find that author');
      }
    
      // synchronous
      try {
        findAuthor();
      } catch(reason) {
        // something went wrong
      }
    
      // async with promises
      findAuthor().catch(function(reason){
        // something went wrong
      });
      ```
    
      @method catch
      @param {Function} onRejection
      @param {String} label optional string for labeling the promise.
      Useful for tooling.
      @return {Promise}
    */

    Promise.prototype.catch = function _catch(onRejection, label) {
      return this.then(undefined, onRejection, label);
    };

    /**
      `finally` will be invoked regardless of the promise's fate just as native
      try/catch/finally behaves
    
      Synchronous example:
    
      ```js
      findAuthor() {
        if (Math.random() > 0.5) {
          throw new Error();
        }
        return new Author();
      }
    
      try {
        return findAuthor(); // succeed or fail
      } catch(error) {
        return findOtherAuthor();
      } finally {
        // always runs
        // doesn't affect the return value
      }
      ```
    
      Asynchronous example:
    
      ```js
      findAuthor().catch(function(reason){
        return findOtherAuthor();
      }).finally(function(){
        // author was either found, or not
      });
      ```
    
      @method finally
      @param {Function} callback
      @param {String} label optional string for labeling the promise.
      Useful for tooling.
      @return {Promise}
    */

    Promise.prototype.finally = function _finally(callback, label) {
      var promise = this;
      var constructor = promise.constructor;

      if (typeof callback === 'function') {
        return promise.then(function (value) {
          return constructor.resolve(callback()).then(function () {
            return value;
          });
        }, function (reason) {
          return constructor.resolve(callback()).then(function () {
            throw reason;
          });
        });
      }

      return promise.then(callback, callback);
    };

    return Promise;
  }();

  Promise.cast = resolve$$1; // deprecated
  Promise.all = all;
  Promise.race = race;
  Promise.resolve = resolve$$1;
  Promise.reject = reject$1;

  Promise.prototype._guidKey = guidKey;

  /**
    The primary way of interacting with a promise is through its `then` method,
    which registers callbacks to receive either a promise's eventual value or the
    reason why the promise cannot be fulfilled.
  
    ```js
    findUser().then(function(user){
      // user is available
    }, function(reason){
      // user is unavailable, and you are given the reason why
    });
    ```
  
    Chaining
    --------
  
    The return value of `then` is itself a promise.  This second, 'downstream'
    promise is resolved with the return value of the first promise's fulfillment
    or rejection handler, or rejected if the handler throws an exception.
  
    ```js
    findUser().then(function (user) {
      return user.name;
    }, function (reason) {
      return 'default name';
    }).then(function (userName) {
      // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
      // will be `'default name'`
    });
  
    findUser().then(function (user) {
      throw new Error('Found user, but still unhappy');
    }, function (reason) {
      throw new Error('`findUser` rejected and we\'re unhappy');
    }).then(function (value) {
      // never reached
    }, function (reason) {
      // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
      // If `findUser` rejected, `reason` will be '`findUser` rejected and we\'re unhappy'.
    });
    ```
    If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.
  
    ```js
    findUser().then(function (user) {
      throw new PedagogicalException('Upstream error');
    }).then(function (value) {
      // never reached
    }).then(function (value) {
      // never reached
    }, function (reason) {
      // The `PedgagocialException` is propagated all the way down to here
    });
    ```
  
    Assimilation
    ------------
  
    Sometimes the value you want to propagate to a downstream promise can only be
    retrieved asynchronously. This can be achieved by returning a promise in the
    fulfillment or rejection handler. The downstream promise will then be pending
    until the returned promise is settled. This is called *assimilation*.
  
    ```js
    findUser().then(function (user) {
      return findCommentsByAuthor(user);
    }).then(function (comments) {
      // The user's comments are now available
    });
    ```
  
    If the assimliated promise rejects, then the downstream promise will also reject.
  
    ```js
    findUser().then(function (user) {
      return findCommentsByAuthor(user);
    }).then(function (comments) {
      // If `findCommentsByAuthor` fulfills, we'll have the value here
    }, function (reason) {
      // If `findCommentsByAuthor` rejects, we'll have the reason here
    });
    ```
  
    Simple Example
    --------------
  
    Synchronous Example
  
    ```javascript
    let result;
  
    try {
      result = findResult();
      // success
    } catch(reason) {
      // failure
    }
    ```
  
    Errback Example
  
    ```js
    findResult(function(result, err){
      if (err) {
        // failure
      } else {
        // success
      }
    });
    ```
  
    Promise Example;
  
    ```javascript
    findResult().then(function(result){
      // success
    }, function(reason){
      // failure
    });
    ```
  
    Advanced Example
    --------------
  
    Synchronous Example
  
    ```javascript
    let author, books;
  
    try {
      author = findAuthor();
      books  = findBooksByAuthor(author);
      // success
    } catch(reason) {
      // failure
    }
    ```
  
    Errback Example
  
    ```js
  
    function foundBooks(books) {
  
    }
  
    function failure(reason) {
  
    }
  
    findAuthor(function(author, err){
      if (err) {
        failure(err);
        // failure
      } else {
        try {
          findBoooksByAuthor(author, function(books, err) {
            if (err) {
              failure(err);
            } else {
              try {
                foundBooks(books);
              } catch(reason) {
                failure(reason);
              }
            }
          });
        } catch(error) {
          failure(err);
        }
        // success
      }
    });
    ```
  
    Promise Example;
  
    ```javascript
    findAuthor().
      then(findBooksByAuthor).
      then(function(books){
        // found books
    }).catch(function(reason){
      // something went wrong
    });
    ```
  
    @method then
    @param {Function} onFulfillment
    @param {Function} onRejection
    @param {String} label optional string for labeling the promise.
    Useful for tooling.
    @return {Promise}
  */
  Promise.prototype.then = then;

  function makeObject(_, argumentNames) {
    var obj = {};
    var length = _.length;
    var args = new Array(length);

    for (var x = 0; x < length; x++) {
      args[x] = _[x];
    }

    for (var i = 0; i < argumentNames.length; i++) {
      var name = argumentNames[i];
      obj[name] = args[i + 1];
    }

    return obj;
  }

  function arrayResult(_) {
    var length = _.length;
    var args = new Array(length - 1);

    for (var i = 1; i < length; i++) {
      args[i - 1] = _[i];
    }

    return args;
  }

  function wrapThenable(then, promise) {
    return {
      then: function (onFulFillment, onRejection) {
        return then.call(promise, onFulFillment, onRejection);
      }
    };
  }

  /**
    `denodeify` takes a 'node-style' function and returns a function that
    will return an `Promise`. You can use `denodeify` in Node.js or the
    browser when you'd prefer to use promises over using callbacks. For example,
    `denodeify` transforms the following:
  
    ```javascript
    let fs = require('fs');
  
    fs.readFile('myfile.txt', function(err, data){
      if (err) return handleError(err);
      handleData(data);
    });
    ```
  
    into:
  
    ```javascript
    let fs = require('fs');
    let readFile = denodeify(fs.readFile);
  
    readFile('myfile.txt').then(handleData, handleError);
    ```
  
    If the node function has multiple success parameters, then `denodeify`
    just returns the first one:
  
    ```javascript
    let request = denodeify(require('request'));
  
    request('http://example.com').then(function(res) {
      // ...
    });
    ```
  
    However, if you need all success parameters, setting `denodeify`'s
    second parameter to `true` causes it to return all success parameters
    as an array:
  
    ```javascript
    let request = denodeify(require('request'), true);
  
    request('http://example.com').then(function(result) {
      // result[0] -> res
      // result[1] -> body
    });
    ```
  
    Or if you pass it an array with names it returns the parameters as a hash:
  
    ```javascript
    let request = denodeify(require('request'), ['res', 'body']);
  
    request('http://example.com').then(function(result) {
      // result.res
      // result.body
    });
    ```
  
    Sometimes you need to retain the `this`:
  
    ```javascript
    let app = require('express')();
    let render = denodeify(app.render.bind(app));
    ```
  
    The denodified function inherits from the original function. It works in all
    environments, except IE 10 and below. Consequently all properties of the original
    function are available to you. However, any properties you change on the
    denodeified function won't be changed on the original function. Example:
  
    ```javascript
    let request = denodeify(require('request')),
        cookieJar = request.jar(); // <- Inheritance is used here
  
    request('http://example.com', {jar: cookieJar}).then(function(res) {
      // cookieJar.cookies holds now the cookies returned by example.com
    });
    ```
  
    Using `denodeify` makes it easier to compose asynchronous operations instead
    of using callbacks. For example, instead of:
  
    ```javascript
    let fs = require('fs');
  
    fs.readFile('myfile.txt', function(err, data){
      if (err) { ... } // Handle error
      fs.writeFile('myfile2.txt', data, function(err){
        if (err) { ... } // Handle error
        console.log('done')
      });
    });
    ```
  
    you can chain the operations together using `then` from the returned promise:
  
    ```javascript
    let fs = require('fs');
    let readFile = denodeify(fs.readFile);
    let writeFile = denodeify(fs.writeFile);
  
    readFile('myfile.txt').then(function(data){
      return writeFile('myfile2.txt', data);
    }).then(function(){
      console.log('done')
    }).catch(function(error){
      // Handle error
    });
    ```
  
    @method denodeify
    @public
    @static
    @for rsvp
    @param {Function} nodeFunc a 'node-style' function that takes a callback as
    its last argument. The callback expects an error to be passed as its first
    argument (if an error occurred, otherwise null), and the value from the
    operation as its second argument ('function(err, value){ }').
    @param {Boolean|Array} [options] An optional paramter that if set
    to `true` causes the promise to fulfill with the callback's success arguments
    as an array. This is useful if the node function has multiple success
    paramters. If you set this paramter to an array with names, the promise will
    fulfill with a hash with these names as keys and the success parameters as
    values.
    @return {Function} a function that wraps `nodeFunc` to return a `Promise`
  */
  function denodeify(nodeFunc, options) {
    var fn = function () {
      var l = arguments.length;
      var args = new Array(l + 1);
      var promiseInput = false;

      for (var i = 0; i < l; ++i) {
        var arg = arguments[i];

        if (!promiseInput) {
          // TODO: clean this up
          promiseInput = needsPromiseInput(arg);
          if (promiseInput === TRY_CATCH_ERROR) {
            var error = TRY_CATCH_ERROR.error;
            TRY_CATCH_ERROR.error = null;
            var p = new Promise(noop);
            reject(p, error);
            return p;
          } else if (promiseInput && promiseInput !== true) {
            arg = wrapThenable(promiseInput, arg);
          }
        }
        args[i] = arg;
      }

      var promise = new Promise(noop);

      args[l] = function (err, val) {
        if (err) {
          reject(promise, err);
        } else if (options === undefined) {
          resolve$1(promise, val);
        } else if (options === true) {
          resolve$1(promise, arrayResult(arguments));
        } else if (Array.isArray(options)) {
          resolve$1(promise, makeObject(arguments, options));
        } else {
          resolve$1(promise, val);
        }
      };

      if (promiseInput) {
        return handlePromiseInput(promise, args, nodeFunc, this);
      } else {
        return handleValueInput(promise, args, nodeFunc, this);
      }
    };

    fn.__proto__ = nodeFunc;

    return fn;
  }

  function handleValueInput(promise, args, nodeFunc, self) {
    var result = tryCatch(nodeFunc).apply(self, args);
    if (result === TRY_CATCH_ERROR) {
      var error = TRY_CATCH_ERROR.error;
      TRY_CATCH_ERROR.error = null;
      reject(promise, error);
    }
    return promise;
  }

  function handlePromiseInput(promise, args, nodeFunc, self) {
    return Promise.all(args).then(function (args) {
      return handleValueInput(promise, args, nodeFunc, self);
    });
  }

  function needsPromiseInput(arg) {
    if (arg !== null && typeof arg === 'object') {
      if (arg.constructor === Promise) {
        return true;
      } else {
        return getThen(arg);
      }
    } else {
      return false;
    }
  }

  /**
    This is a convenient alias for `Promise.all`.
  
    @method all
    @public
    @static
    @for rsvp
    @param {Array} array Array of promises.
    @param {String} label An optional label. This is useful
    for tooling.
  */
  function all$1(array, label) {
    return Promise.all(array, label);
  }

  /**
  @module rsvp
  @public
  **/

  var AllSettled = function (_Enumerator) {
    (0, _emberBabel.inherits)(AllSettled, _Enumerator);

    function AllSettled(Constructor, entries, label) {
      (0, _emberBabel.classCallCheck)(this, AllSettled);

      return (0, _emberBabel.possibleConstructorReturn)(this, _Enumerator.call(this, Constructor, entries, false /* don't abort on reject */, label));
    }

    return AllSettled;
  }(Enumerator);

  AllSettled.prototype._setResultAt = setSettledResult;

  /**
  `RSVP.allSettled` is similar to `RSVP.all`, but instead of implementing
  a fail-fast method, it waits until all the promises have returned and
  shows you all the results. This is useful if you want to handle multiple
  promises' failure states together as a set.
   Returns a promise that is fulfilled when all the given promises have been
  settled. The return promise is fulfilled with an array of the states of
  the promises passed into the `promises` array argument.
   Each state object will either indicate fulfillment or rejection, and
  provide the corresponding value or reason. The states will take one of
  the following formats:
   ```javascript
  { state: 'fulfilled', value: value }
    or
  { state: 'rejected', reason: reason }
  ```
   Example:
   ```javascript
  let promise1 = RSVP.Promise.resolve(1);
  let promise2 = RSVP.Promise.reject(new Error('2'));
  let promise3 = RSVP.Promise.reject(new Error('3'));
  let promises = [ promise1, promise2, promise3 ];
   RSVP.allSettled(promises).then(function(array){
    // array == [
    //   { state: 'fulfilled', value: 1 },
    //   { state: 'rejected', reason: Error },
    //   { state: 'rejected', reason: Error }
    // ]
    // Note that for the second item, reason.message will be '2', and for the
    // third item, reason.message will be '3'.
  }, function(error) {
    // Not run. (This block would only be called if allSettled had failed,
    // for instance if passed an incorrect argument type.)
  });
  ```
   @method allSettled
  @public
  @static
  @for rsvp
  @param {Array} entries
  @param {String} label - optional string that describes the promise.
  Useful for tooling.
  @return {Promise} promise that is fulfilled with an array of the settled
  states of the constituent promises.
  */

  function allSettled(entries, label) {
    if (!Array.isArray(entries)) {
      return Promise.reject(new TypeError("Promise.allSettled must be called with an array"), label);
    }

    return new AllSettled(Promise, entries, label).promise;
  }

  /**
    This is a convenient alias for `Promise.race`.
  
    @method race
    @public
    @static
    @for rsvp
    @param {Array} array Array of promises.
    @param {String} label An optional label. This is useful
    for tooling.
   */
  function race$1(array, label) {
    return Promise.race(array, label);
  }

  var PromiseHash = function (_Enumerator2) {
    (0, _emberBabel.inherits)(PromiseHash, _Enumerator2);

    function PromiseHash(Constructor, object) {
      var abortOnReject = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var label = arguments[3];

      (0, _emberBabel.classCallCheck)(this, PromiseHash);

      return (0, _emberBabel.possibleConstructorReturn)(this, _Enumerator2.call(this, Constructor, object, abortOnReject, label));
    }

    PromiseHash.prototype._init = function _init(Constructor, object) {
      this._result = {};
      this._enumerate(object);
    };

    PromiseHash.prototype._enumerate = function _enumerate(input) {
      var keys = Object.keys(input);

      var length = keys.length;
      var promise = this.promise;
      this._remaining = length;

      var key = void 0,
          val = void 0;
      for (var i = 0; promise._state === PENDING && i < length; i++) {
        key = keys[i];
        val = input[key];
        this._eachEntry(val, key, true);
      }

      this._checkFullfillment();
    };

    return PromiseHash;
  }(Enumerator);

  /**
    `hash` is similar to `all`, but takes an object instead of an array
    for its `promises` argument.
  
    Returns a promise that is fulfilled when all the given promises have been
    fulfilled, or rejected if any of them become rejected. The returned promise
    is fulfilled with a hash that has the same key names as the `promises` object
    argument. If any of the values in the object are not promises, they will
    simply be copied over to the fulfilled object.
  
    Example:
  
    ```javascript
    let promises = {
      myPromise: resolve(1),
      yourPromise: resolve(2),
      theirPromise: resolve(3),
      notAPromise: 4
    };
  
    hash(promises).then(function(hash){
      // hash here is an object that looks like:
      // {
      //   myPromise: 1,
      //   yourPromise: 2,
      //   theirPromise: 3,
      //   notAPromise: 4
      // }
    });
    ```
  
    If any of the `promises` given to `hash` are rejected, the first promise
    that is rejected will be given as the reason to the rejection handler.
  
    Example:
  
    ```javascript
    let promises = {
      myPromise: resolve(1),
      rejectedPromise: reject(new Error('rejectedPromise')),
      anotherRejectedPromise: reject(new Error('anotherRejectedPromise')),
    };
  
    hash(promises).then(function(hash){
      // Code here never runs because there are rejected promises!
    }, function(reason) {
      // reason.message === 'rejectedPromise'
    });
    ```
  
    An important note: `hash` is intended for plain JavaScript objects that
    are just a set of keys and values. `hash` will NOT preserve prototype
    chains.
  
    Example:
  
    ```javascript
    import { hash, resolve } from 'rsvp';
    function MyConstructor(){
      this.example = resolve('Example');
    }
  
    MyConstructor.prototype = {
      protoProperty: resolve('Proto Property')
    };
  
    let myObject = new MyConstructor();
  
    hash(myObject).then(function(hash){
      // protoProperty will not be present, instead you will just have an
      // object that looks like:
      // {
      //   example: 'Example'
      // }
      //
      // hash.hasOwnProperty('protoProperty'); // false
      // 'undefined' === typeof hash.protoProperty
    });
    ```
  
    @method hash
    @public
    @static
    @for rsvp
    @param {Object} object
    @param {String} label optional string that describes the promise.
    Useful for tooling.
    @return {Promise} promise that is fulfilled when all properties of `promises`
    have been fulfilled, or rejected if any of them become rejected.
  */

  function hash(object, label) {
    return Promise.resolve(object, label).then(function (object) {
      if (object === null || typeof object !== 'object') {
        throw new TypeError("Promise.hash must be called with an object");
      }
      return new PromiseHash(Promise, object, label).promise;
    });
  }

  var HashSettled = function (_PromiseHash) {
    (0, _emberBabel.inherits)(HashSettled, _PromiseHash);

    function HashSettled(Constructor, object, label) {
      (0, _emberBabel.classCallCheck)(this, HashSettled);

      return (0, _emberBabel.possibleConstructorReturn)(this, _PromiseHash.call(this, Constructor, object, false, label));
    }

    return HashSettled;
  }(PromiseHash);

  HashSettled.prototype._setResultAt = setSettledResult;

  /**
    `hashSettled` is similar to `allSettled`, but takes an object
    instead of an array for its `promises` argument.
  
    Unlike `all` or `hash`, which implement a fail-fast method,
    but like `allSettled`, `hashSettled` waits until all the
    constituent promises have returned and then shows you all the results
    with their states and values/reasons. This is useful if you want to
    handle multiple promises' failure states together as a set.
  
    Returns a promise that is fulfilled when all the given promises have been
    settled, or rejected if the passed parameters are invalid.
  
    The returned promise is fulfilled with a hash that has the same key names as
    the `promises` object argument. If any of the values in the object are not
    promises, they will be copied over to the fulfilled object and marked with state
    'fulfilled'.
  
    Example:
  
    ```javascript
    import { hashSettled, resolve } from 'rsvp';
  
    let promises = {
      myPromise: resolve(1),
      yourPromise: resolve(2),
      theirPromise: resolve(3),
      notAPromise: 4
    };
  
    hashSettled(promises).then(function(hash){
      // hash here is an object that looks like:
      // {
      //   myPromise: { state: 'fulfilled', value: 1 },
      //   yourPromise: { state: 'fulfilled', value: 2 },
      //   theirPromise: { state: 'fulfilled', value: 3 },
      //   notAPromise: { state: 'fulfilled', value: 4 }
      // }
    });
    ```
  
    If any of the `promises` given to `hash` are rejected, the state will
    be set to 'rejected' and the reason for rejection provided.
  
    Example:
  
    ```javascript
    import { hashSettled, reject, resolve } from 'rsvp';
  
    let promises = {
      myPromise: resolve(1),
      rejectedPromise: reject(new Error('rejection')),
      anotherRejectedPromise: reject(new Error('more rejection')),
    };
  
    hashSettled(promises).then(function(hash){
      // hash here is an object that looks like:
      // {
      //   myPromise:              { state: 'fulfilled', value: 1 },
      //   rejectedPromise:        { state: 'rejected', reason: Error },
      //   anotherRejectedPromise: { state: 'rejected', reason: Error },
      // }
      // Note that for rejectedPromise, reason.message == 'rejection',
      // and for anotherRejectedPromise, reason.message == 'more rejection'.
    });
    ```
  
    An important note: `hashSettled` is intended for plain JavaScript objects that
    are just a set of keys and values. `hashSettled` will NOT preserve prototype
    chains.
  
    Example:
  
    ```javascript
    import Promise, { hashSettled, resolve } from 'rsvp';
  
    function MyConstructor(){
      this.example = resolve('Example');
    }
  
    MyConstructor.prototype = {
      protoProperty: Promise.resolve('Proto Property')
    };
  
    let myObject = new MyConstructor();
  
    hashSettled(myObject).then(function(hash){
      // protoProperty will not be present, instead you will just have an
      // object that looks like:
      // {
      //   example: { state: 'fulfilled', value: 'Example' }
      // }
      //
      // hash.hasOwnProperty('protoProperty'); // false
      // 'undefined' === typeof hash.protoProperty
    });
    ```
  
    @method hashSettled
    @public
    @for rsvp
    @param {Object} object
    @param {String} label optional string that describes the promise.
    Useful for tooling.
    @return {Promise} promise that is fulfilled when when all properties of `promises`
    have been settled.
    @static
  */

  function hashSettled(object, label) {
    return Promise.resolve(object, label).then(function (object) {
      if (object === null || typeof object !== 'object') {
        throw new TypeError("hashSettled must be called with an object");
      }

      return new HashSettled(Promise, object, false, label).promise;
    });
  }

  /**
    `rethrow` will rethrow an error on the next turn of the JavaScript event
    loop in order to aid debugging.
  
    Promises A+ specifies that any exceptions that occur with a promise must be
    caught by the promises implementation and bubbled to the last handler. For
    this reason, it is recommended that you always specify a second rejection
    handler function to `then`. However, `rethrow` will throw the exception
    outside of the promise, so it bubbles up to your console if in the browser,
    or domain/cause uncaught exception in Node. `rethrow` will also throw the
    error again so the error can be handled by the promise per the spec.
  
    ```javascript
    import { rethrow } from 'rsvp';
  
    function throws(){
      throw new Error('Whoops!');
    }
  
    let promise = new Promise(function(resolve, reject){
      throws();
    });
  
    promise.catch(rethrow).then(function(){
      // Code here doesn't run because the promise became rejected due to an
      // error!
    }, function (err){
      // handle the error here
    });
    ```
  
    The 'Whoops' error will be thrown on the next turn of the event loop
    and you can watch for it in your console. You can also handle it using a
    rejection handler given to `.then` or `.catch` on the returned promise.
  
    @method rethrow
    @public
    @static
    @for rsvp
    @param {Error} reason reason the promise became rejected.
    @throws Error
    @static
  */
  function rethrow(reason) {
    setTimeout(function () {
      throw reason;
    });
    throw reason;
  }

  /**
    `defer` returns an object similar to jQuery's `$.Deferred`.
    `defer` should be used when porting over code reliant on `$.Deferred`'s
    interface. New code should use the `Promise` constructor instead.
  
    The object returned from `defer` is a plain object with three properties:
  
    * promise - an `Promise`.
    * reject - a function that causes the `promise` property on this object to
      become rejected
    * resolve - a function that causes the `promise` property on this object to
      become fulfilled.
  
    Example:
  
     ```javascript
     let deferred = defer();
  
     deferred.resolve("Success!");
  
     deferred.promise.then(function(value){
       // value here is "Success!"
     });
     ```
  
    @method defer
    @public
    @static
    @for rsvp
    @param {String} label optional string for labeling the promise.
    Useful for tooling.
    @return {Object}
   */

  function defer(label) {
    var deferred = { resolve: undefined, reject: undefined };

    deferred.promise = new Promise(function (resolve, reject) {
      deferred.resolve = resolve;
      deferred.reject = reject;
    }, label);

    return deferred;
  }

  var MapEnumerator = function (_Enumerator3) {
    (0, _emberBabel.inherits)(MapEnumerator, _Enumerator3);

    function MapEnumerator(Constructor, entries, mapFn, label) {
      (0, _emberBabel.classCallCheck)(this, MapEnumerator);

      return (0, _emberBabel.possibleConstructorReturn)(this, _Enumerator3.call(this, Constructor, entries, true, label, mapFn));
    }

    MapEnumerator.prototype._init = function _init(Constructor, input, bool, label, mapFn) {
      var len = input.length || 0;
      this.length = len;
      this._remaining = len;
      this._result = new Array(len);
      this._mapFn = mapFn;

      this._enumerate(input);
    };

    MapEnumerator.prototype._setResultAt = function _setResultAt(state, i, value, firstPass) {
      if (firstPass) {
        var val = tryCatch(this._mapFn)(value, i);
        if (val === TRY_CATCH_ERROR) {
          this._settledAt(REJECTED, i, val.error, false);
        } else {
          this._eachEntry(val, i, false);
        }
      } else {
        this._remaining--;
        this._result[i] = value;
      }
    };

    return MapEnumerator;
  }(Enumerator);

  /**
   `map` is similar to JavaScript's native `map` method. `mapFn` is eagerly called
    meaning that as soon as any promise resolves its value will be passed to `mapFn`.
    `map` returns a promise that will become fulfilled with the result of running
    `mapFn` on the values the promises become fulfilled with.
  
    For example:
  
    ```javascript
    import { map, resolve } from 'rsvp';
  
    let promise1 = resolve(1);
    let promise2 = resolve(2);
    let promise3 = resolve(3);
    let promises = [ promise1, promise2, promise3 ];
  
    let mapFn = function(item){
      return item + 1;
    };
  
    map(promises, mapFn).then(function(result){
      // result is [ 2, 3, 4 ]
    });
    ```
  
    If any of the `promises` given to `map` are rejected, the first promise
    that is rejected will be given as an argument to the returned promise's
    rejection handler. For example:
  
    ```javascript
    import { map, reject, resolve } from 'rsvp';
  
    let promise1 = resolve(1);
    let promise2 = reject(new Error('2'));
    let promise3 = reject(new Error('3'));
    let promises = [ promise1, promise2, promise3 ];
  
    let mapFn = function(item){
      return item + 1;
    };
  
    map(promises, mapFn).then(function(array){
      // Code here never runs because there are rejected promises!
    }, function(reason) {
      // reason.message === '2'
    });
    ```
  
    `map` will also wait if a promise is returned from `mapFn`. For example,
    say you want to get all comments from a set of blog posts, but you need
    the blog posts first because they contain a url to those comments.
  
    ```javscript
    import { map } from 'rsvp';
  
    let mapFn = function(blogPost){
      // getComments does some ajax and returns an Promise that is fulfilled
      // with some comments data
      return getComments(blogPost.comments_url);
    };
  
    // getBlogPosts does some ajax and returns an Promise that is fulfilled
    // with some blog post data
    map(getBlogPosts(), mapFn).then(function(comments){
      // comments is the result of asking the server for the comments
      // of all blog posts returned from getBlogPosts()
    });
    ```
  
    @method map
    @public
    @static
    @for rsvp
    @param {Array} promises
    @param {Function} mapFn function to be called on each fulfilled promise.
    @param {String} label optional string for labeling the promise.
    Useful for tooling.
    @return {Promise} promise that is fulfilled with the result of calling
    `mapFn` on each fulfilled promise or value when they become fulfilled.
     The promise will be rejected if any of the given `promises` become rejected.
  */

  function map(promises, mapFn, label) {
    if (typeof mapFn !== 'function') {
      return Promise.reject(new TypeError("map expects a function as a second argument"), label);
    }

    return Promise.resolve(promises, label).then(function (promises) {
      if (!Array.isArray(promises)) {
        throw new TypeError("map must be called with an array");
      }
      return new MapEnumerator(Promise, promises, mapFn, label).promise;
    });
  }

  /**
    This is a convenient alias for `Promise.resolve`.
  
    @method resolve
    @public
    @static
    @for rsvp
    @param {*} value value that the returned promise will be resolved with
    @param {String} label optional string for identifying the returned promise.
    Useful for tooling.
    @return {Promise} a promise that will become fulfilled with the given
    `value`
  */
  function resolve$2(value, label) {
    return Promise.resolve(value, label);
  }

  /**
    This is a convenient alias for `Promise.reject`.
  
    @method reject
    @public
    @static
    @for rsvp
    @param {*} reason value that the returned promise will be rejected with.
    @param {String} label optional string for identifying the returned promise.
    Useful for tooling.
    @return {Promise} a promise rejected with the given `reason`.
  */
  function reject$2(reason, label) {
    return Promise.reject(reason, label);
  }

  var EMPTY_OBJECT = {};

  var FilterEnumerator = function (_MapEnumerator) {
    (0, _emberBabel.inherits)(FilterEnumerator, _MapEnumerator);

    function FilterEnumerator() {
      (0, _emberBabel.classCallCheck)(this, FilterEnumerator);

      return (0, _emberBabel.possibleConstructorReturn)(this, _MapEnumerator.apply(this, arguments));
    }

    FilterEnumerator.prototype._checkFullfillment = function _checkFullfillment() {
      if (this._remaining === 0 && this._result !== null) {
        var result = this._result.filter(function (val) {
          return val !== EMPTY_OBJECT;
        });
        fulfill(this.promise, result);
        this._result = null;
      }
    };

    FilterEnumerator.prototype._setResultAt = function _setResultAt(state, i, value, firstPass) {
      if (firstPass) {
        this._result[i] = value;
        var val = tryCatch(this._mapFn)(value, i);
        if (val === TRY_CATCH_ERROR) {
          this._settledAt(REJECTED, i, val.error, false);
        } else {
          this._eachEntry(val, i, false);
        }
      } else {
        this._remaining--;
        if (!value) {
          this._result[i] = EMPTY_OBJECT;
        }
      }
    };

    return FilterEnumerator;
  }(MapEnumerator);

  /**
   `filter` is similar to JavaScript's native `filter` method.
   `filterFn` is eagerly called meaning that as soon as any promise
    resolves its value will be passed to `filterFn`. `filter` returns
    a promise that will become fulfilled with the result of running
    `filterFn` on the values the promises become fulfilled with.
  
    For example:
  
    ```javascript
    import { filter, resolve } from 'rsvp';
  
    let promise1 = resolve(1);
    let promise2 = resolve(2);
    let promise3 = resolve(3);
  
    let promises = [promise1, promise2, promise3];
  
    let filterFn = function(item){
      return item > 1;
    };
  
    filter(promises, filterFn).then(function(result){
      // result is [ 2, 3 ]
    });
    ```
  
    If any of the `promises` given to `filter` are rejected, the first promise
    that is rejected will be given as an argument to the returned promise's
    rejection handler. For example:
  
    ```javascript
    import { filter, reject, resolve } from 'rsvp';
  
    let promise1 = resolve(1);
    let promise2 = reject(new Error('2'));
    let promise3 = reject(new Error('3'));
    let promises = [ promise1, promise2, promise3 ];
  
    let filterFn = function(item){
      return item > 1;
    };
  
    filter(promises, filterFn).then(function(array){
      // Code here never runs because there are rejected promises!
    }, function(reason) {
      // reason.message === '2'
    });
    ```
  
    `filter` will also wait for any promises returned from `filterFn`.
    For instance, you may want to fetch a list of users then return a subset
    of those users based on some asynchronous operation:
  
    ```javascript
    import { filter, resolve } from 'rsvp';
  
    let alice = { name: 'alice' };
    let bob   = { name: 'bob' };
    let users = [ alice, bob ];
  
    let promises = users.map(function(user){
      return resolve(user);
    });
  
    let filterFn = function(user){
      // Here, Alice has permissions to create a blog post, but Bob does not.
      return getPrivilegesForUser(user).then(function(privs){
        return privs.can_create_blog_post === true;
      });
    };
    filter(promises, filterFn).then(function(users){
      // true, because the server told us only Alice can create a blog post.
      users.length === 1;
      // false, because Alice is the only user present in `users`
      users[0] === bob;
    });
    ```
  
    @method filter
    @public
    @static
    @for rsvp
    @param {Array} promises
    @param {Function} filterFn - function to be called on each resolved value to
    filter the final results.
    @param {String} label optional string describing the promise. Useful for
    tooling.
    @return {Promise}
  */

  function filter(promises, filterFn, label) {
    if (typeof filterFn !== 'function') {
      return Promise.reject(new TypeError("filter expects function as a second argument"), label);
    }

    return Promise.resolve(promises, label).then(function (promises) {
      if (!Array.isArray(promises)) {
        throw new TypeError("filter must be called with an array");
      }
      return new FilterEnumerator(Promise, promises, filterFn, label).promise;
    });
  }

  var len = 0;
  var vertxNext = void 0;
  function asap(callback, arg) {
    queue$1[len] = callback;
    queue$1[len + 1] = arg;
    len += 2;
    if (len === 2) {
      // If len is 1, that means that we need to schedule an async flush.
      // If additional callbacks are queued before the queue is flushed, they
      // will be processed by this flush that we are scheduling.
      scheduleFlush$1();
    }
  }

  var browserWindow = typeof window !== 'undefined' ? window : undefined;
  var browserGlobal = browserWindow || {};
  var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;
  var isNode = typeof self === 'undefined' && typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';

  // test for web worker but not in IE10
  var isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';

  // node
  function useNextTick() {
    var nextTick = process.nextTick;
    // node version 0.10.x displays a deprecation warning when nextTick is used recursively
    // setImmediate should be used instead instead
    var version = process.versions.node.match(/^(?:(\d+)\.)?(?:(\d+)\.)?(\*|\d+)$/);
    if (Array.isArray(version) && version[1] === '0' && version[2] === '10') {
      nextTick = setImmediate;
    }
    return function () {
      return nextTick(flush);
    };
  }

  // vertx
  function useVertxTimer() {
    if (typeof vertxNext !== 'undefined') {
      return function () {
        vertxNext(flush);
      };
    }
    return useSetTimeout();
  }

  function useMutationObserver() {
    var iterations = 0;
    var observer = new BrowserMutationObserver(flush);
    var node = document.createTextNode('');
    observer.observe(node, { characterData: true });

    return function () {
      return node.data = iterations = ++iterations % 2;
    };
  }

  // web worker
  function useMessageChannel() {
    var channel = new MessageChannel();
    channel.port1.onmessage = flush;
    return function () {
      return channel.port2.postMessage(0);
    };
  }

  function useSetTimeout() {
    return function () {
      return setTimeout(flush, 1);
    };
  }

  var queue$1 = new Array(1000);

  function flush() {
    for (var i = 0; i < len; i += 2) {
      var callback = queue$1[i];
      var arg = queue$1[i + 1];

      callback(arg);

      queue$1[i] = undefined;
      queue$1[i + 1] = undefined;
    }

    len = 0;
  }

  function attemptVertex() {
    try {
      var vertx = Function('return this')().require('vertx');
      vertxNext = vertx.runOnLoop || vertx.runOnContext;
      return useVertxTimer();
    } catch (e) {
      return useSetTimeout();
    }
  }

  var scheduleFlush$1 = void 0;
  // Decide what async method to use to triggering processing of queued callbacks:
  if (isNode) {
    scheduleFlush$1 = useNextTick();
  } else if (BrowserMutationObserver) {
    scheduleFlush$1 = useMutationObserver();
  } else if (isWorker) {
    scheduleFlush$1 = useMessageChannel();
  } else if (browserWindow === undefined && typeof _nodeModule.require === 'function') {
    scheduleFlush$1 = attemptVertex();
  } else {
    scheduleFlush$1 = useSetTimeout();
  }

  // defaults
  config.async = asap;
  config.after = function (cb) {
    return setTimeout(cb, 0);
  };
  var cast = resolve$2;

  var async = function (callback, arg) {
    return config.async(callback, arg);
  };

  function on() {
    config.on.apply(config, arguments);
  }

  function off() {
    config.off.apply(config, arguments);
  }

  // Set up instrumentation through `window.__PROMISE_INTRUMENTATION__`
  if (typeof window !== 'undefined' && typeof window['__PROMISE_INSTRUMENTATION__'] === 'object') {
    var callbacks = window['__PROMISE_INSTRUMENTATION__'];
    configure('instrument', true);
    for (var eventName in callbacks) {
      if (callbacks.hasOwnProperty(eventName)) {
        on(eventName, callbacks[eventName]);
      }
    }
  }

  // the default export here is for backwards compat:
  //   https://github.com/tildeio/rsvp.js/issues/434
  var rsvp = {
    asap: asap,
    cast: cast,
    Promise: Promise,
    EventTarget: EventTarget,
    all: all$1,
    allSettled: allSettled,
    race: race$1,
    hash: hash,
    hashSettled: hashSettled,
    rethrow: rethrow,
    defer: defer,
    denodeify: denodeify,
    configure: configure,
    on: on,
    off: off,
    resolve: resolve$2,
    reject: reject$2,
    map: map,
    async: async,
    filter: filter
  };

  exports.default = rsvp;
  exports.asap = asap;
  exports.cast = cast;
  exports.Promise = Promise;
  exports.EventTarget = EventTarget;
  exports.all = all$1;
  exports.allSettled = allSettled;
  exports.race = race$1;
  exports.hash = hash;
  exports.hashSettled = hashSettled;
  exports.rethrow = rethrow;
  exports.defer = defer;
  exports.denodeify = denodeify;
  exports.configure = configure;
  exports.on = on;
  exports.off = off;
  exports.resolve = resolve$2;
  exports.reject = reject$2;
  exports.map = map;
  exports.async = async;
  exports.filter = filter;
});
requireModule('ember')

}());

;if (typeof FastBoot === 'undefined') {
/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.14.7
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global.Popper = factory());
}(this, (function () { 'use strict';

var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined';

var longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];
var timeoutDuration = 0;
for (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {
  if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {
    timeoutDuration = 1;
    break;
  }
}

function microtaskDebounce(fn) {
  var called = false;
  return function () {
    if (called) {
      return;
    }
    called = true;
    window.Promise.resolve().then(function () {
      called = false;
      fn();
    });
  };
}

function taskDebounce(fn) {
  var scheduled = false;
  return function () {
    if (!scheduled) {
      scheduled = true;
      setTimeout(function () {
        scheduled = false;
        fn();
      }, timeoutDuration);
    }
  };
}

var supportsMicroTasks = isBrowser && window.Promise;

/**
* Create a debounced version of a method, that's asynchronously deferred
* but called in the minimum time possible.
*
* @method
* @memberof Popper.Utils
* @argument {Function} fn
* @returns {Function}
*/
var debounce = supportsMicroTasks ? microtaskDebounce : taskDebounce;

/**
 * Check if the given variable is a function
 * @method
 * @memberof Popper.Utils
 * @argument {Any} functionToCheck - variable to check
 * @returns {Boolean} answer to: is a function?
 */
function isFunction(functionToCheck) {
  var getType = {};
  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
}

/**
 * Get CSS computed property of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Eement} element
 * @argument {String} property
 */
function getStyleComputedProperty(element, property) {
  if (element.nodeType !== 1) {
    return [];
  }
  // NOTE: 1 DOM access here
  var window = element.ownerDocument.defaultView;
  var css = window.getComputedStyle(element, null);
  return property ? css[property] : css;
}

/**
 * Returns the parentNode or the host of the element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} parent
 */
function getParentNode(element) {
  if (element.nodeName === 'HTML') {
    return element;
  }
  return element.parentNode || element.host;
}

/**
 * Returns the scrolling parent of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} scroll parent
 */
function getScrollParent(element) {
  // Return body, `getScroll` will take care to get the correct `scrollTop` from it
  if (!element) {
    return document.body;
  }

  switch (element.nodeName) {
    case 'HTML':
    case 'BODY':
      return element.ownerDocument.body;
    case '#document':
      return element.body;
  }

  // Firefox want us to check `-x` and `-y` variations as well

  var _getStyleComputedProp = getStyleComputedProperty(element),
      overflow = _getStyleComputedProp.overflow,
      overflowX = _getStyleComputedProp.overflowX,
      overflowY = _getStyleComputedProp.overflowY;

  if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {
    return element;
  }

  return getScrollParent(getParentNode(element));
}

var isIE11 = isBrowser && !!(window.MSInputMethodContext && document.documentMode);
var isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);

/**
 * Determines if the browser is Internet Explorer
 * @method
 * @memberof Popper.Utils
 * @param {Number} version to check
 * @returns {Boolean} isIE
 */
function isIE(version) {
  if (version === 11) {
    return isIE11;
  }
  if (version === 10) {
    return isIE10;
  }
  return isIE11 || isIE10;
}

/**
 * Returns the offset parent of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} offset parent
 */
function getOffsetParent(element) {
  if (!element) {
    return document.documentElement;
  }

  var noOffsetParent = isIE(10) ? document.body : null;

  // NOTE: 1 DOM access here
  var offsetParent = element.offsetParent || null;
  // Skip hidden elements which don't have an offsetParent
  while (offsetParent === noOffsetParent && element.nextElementSibling) {
    offsetParent = (element = element.nextElementSibling).offsetParent;
  }

  var nodeName = offsetParent && offsetParent.nodeName;

  if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {
    return element ? element.ownerDocument.documentElement : document.documentElement;
  }

  // .offsetParent will return the closest TH, TD or TABLE in case
  // no offsetParent is present, I hate this job...
  if (['TH', 'TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {
    return getOffsetParent(offsetParent);
  }

  return offsetParent;
}

function isOffsetContainer(element) {
  var nodeName = element.nodeName;

  if (nodeName === 'BODY') {
    return false;
  }
  return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element;
}

/**
 * Finds the root node (document, shadowDOM root) of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} node
 * @returns {Element} root node
 */
function getRoot(node) {
  if (node.parentNode !== null) {
    return getRoot(node.parentNode);
  }

  return node;
}

/**
 * Finds the offset parent common to the two provided nodes
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element1
 * @argument {Element} element2
 * @returns {Element} common offset parent
 */
function findCommonOffsetParent(element1, element2) {
  // This check is needed to avoid errors in case one of the elements isn't defined for any reason
  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {
    return document.documentElement;
  }

  // Here we make sure to give as "start" the element that comes first in the DOM
  var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;
  var start = order ? element1 : element2;
  var end = order ? element2 : element1;

  // Get common ancestor container
  var range = document.createRange();
  range.setStart(start, 0);
  range.setEnd(end, 0);
  var commonAncestorContainer = range.commonAncestorContainer;

  // Both nodes are inside #document

  if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {
    if (isOffsetContainer(commonAncestorContainer)) {
      return commonAncestorContainer;
    }

    return getOffsetParent(commonAncestorContainer);
  }

  // one of the nodes is inside shadowDOM, find which one
  var element1root = getRoot(element1);
  if (element1root.host) {
    return findCommonOffsetParent(element1root.host, element2);
  } else {
    return findCommonOffsetParent(element1, getRoot(element2).host);
  }
}

/**
 * Gets the scroll value of the given element in the given side (top and left)
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @argument {String} side `top` or `left`
 * @returns {number} amount of scrolled pixels
 */
function getScroll(element) {
  var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';

  var upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';
  var nodeName = element.nodeName;

  if (nodeName === 'BODY' || nodeName === 'HTML') {
    var html = element.ownerDocument.documentElement;
    var scrollingElement = element.ownerDocument.scrollingElement || html;
    return scrollingElement[upperSide];
  }

  return element[upperSide];
}

/*
 * Sum or subtract the element scroll values (left and top) from a given rect object
 * @method
 * @memberof Popper.Utils
 * @param {Object} rect - Rect object you want to change
 * @param {HTMLElement} element - The element from the function reads the scroll values
 * @param {Boolean} subtract - set to true if you want to subtract the scroll values
 * @return {Object} rect - The modifier rect object
 */
function includeScroll(rect, element) {
  var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  var scrollTop = getScroll(element, 'top');
  var scrollLeft = getScroll(element, 'left');
  var modifier = subtract ? -1 : 1;
  rect.top += scrollTop * modifier;
  rect.bottom += scrollTop * modifier;
  rect.left += scrollLeft * modifier;
  rect.right += scrollLeft * modifier;
  return rect;
}

/*
 * Helper to detect borders of a given element
 * @method
 * @memberof Popper.Utils
 * @param {CSSStyleDeclaration} styles
 * Result of `getStyleComputedProperty` on the given element
 * @param {String} axis - `x` or `y`
 * @return {number} borders - The borders size of the given axis
 */

function getBordersSize(styles, axis) {
  var sideA = axis === 'x' ? 'Left' : 'Top';
  var sideB = sideA === 'Left' ? 'Right' : 'Bottom';

  return parseFloat(styles['border' + sideA + 'Width'], 10) + parseFloat(styles['border' + sideB + 'Width'], 10);
}

function getSize(axis, body, html, computedStyle) {
  return Math.max(body['offset' + axis], body['scroll' + axis], html['client' + axis], html['offset' + axis], html['scroll' + axis], isIE(10) ? parseInt(html['offset' + axis]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Top' : 'Left')]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Bottom' : 'Right')]) : 0);
}

function getWindowSizes(document) {
  var body = document.body;
  var html = document.documentElement;
  var computedStyle = isIE(10) && getComputedStyle(html);

  return {
    height: getSize('Height', body, html, computedStyle),
    width: getSize('Width', body, html, computedStyle)
  };
}

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();





var defineProperty = function (obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
};

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

/**
 * Given element offsets, generate an output similar to getBoundingClientRect
 * @method
 * @memberof Popper.Utils
 * @argument {Object} offsets
 * @returns {Object} ClientRect like output
 */
function getClientRect(offsets) {
  return _extends({}, offsets, {
    right: offsets.left + offsets.width,
    bottom: offsets.top + offsets.height
  });
}

/**
 * Get bounding client rect of given element
 * @method
 * @memberof Popper.Utils
 * @param {HTMLElement} element
 * @return {Object} client rect
 */
function getBoundingClientRect(element) {
  var rect = {};

  // IE10 10 FIX: Please, don't ask, the element isn't
  // considered in DOM in some circumstances...
  // This isn't reproducible in IE10 compatibility mode of IE11
  try {
    if (isIE(10)) {
      rect = element.getBoundingClientRect();
      var scrollTop = getScroll(element, 'top');
      var scrollLeft = getScroll(element, 'left');
      rect.top += scrollTop;
      rect.left += scrollLeft;
      rect.bottom += scrollTop;
      rect.right += scrollLeft;
    } else {
      rect = element.getBoundingClientRect();
    }
  } catch (e) {}

  var result = {
    left: rect.left,
    top: rect.top,
    width: rect.right - rect.left,
    height: rect.bottom - rect.top
  };

  // subtract scrollbar size from sizes
  var sizes = element.nodeName === 'HTML' ? getWindowSizes(element.ownerDocument) : {};
  var width = sizes.width || element.clientWidth || result.right - result.left;
  var height = sizes.height || element.clientHeight || result.bottom - result.top;

  var horizScrollbar = element.offsetWidth - width;
  var vertScrollbar = element.offsetHeight - height;

  // if an hypothetical scrollbar is detected, we must be sure it's not a `border`
  // we make this check conditional for performance reasons
  if (horizScrollbar || vertScrollbar) {
    var styles = getStyleComputedProperty(element);
    horizScrollbar -= getBordersSize(styles, 'x');
    vertScrollbar -= getBordersSize(styles, 'y');

    result.width -= horizScrollbar;
    result.height -= vertScrollbar;
  }

  return getClientRect(result);
}

function getOffsetRectRelativeToArbitraryNode(children, parent) {
  var fixedPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  var isIE10 = isIE(10);
  var isHTML = parent.nodeName === 'HTML';
  var childrenRect = getBoundingClientRect(children);
  var parentRect = getBoundingClientRect(parent);
  var scrollParent = getScrollParent(children);

  var styles = getStyleComputedProperty(parent);
  var borderTopWidth = parseFloat(styles.borderTopWidth, 10);
  var borderLeftWidth = parseFloat(styles.borderLeftWidth, 10);

  // In cases where the parent is fixed, we must ignore negative scroll in offset calc
  if (fixedPosition && isHTML) {
    parentRect.top = Math.max(parentRect.top, 0);
    parentRect.left = Math.max(parentRect.left, 0);
  }
  var offsets = getClientRect({
    top: childrenRect.top - parentRect.top - borderTopWidth,
    left: childrenRect.left - parentRect.left - borderLeftWidth,
    width: childrenRect.width,
    height: childrenRect.height
  });
  offsets.marginTop = 0;
  offsets.marginLeft = 0;

  // Subtract margins of documentElement in case it's being used as parent
  // we do this only on HTML because it's the only element that behaves
  // differently when margins are applied to it. The margins are included in
  // the box of the documentElement, in the other cases not.
  if (!isIE10 && isHTML) {
    var marginTop = parseFloat(styles.marginTop, 10);
    var marginLeft = parseFloat(styles.marginLeft, 10);

    offsets.top -= borderTopWidth - marginTop;
    offsets.bottom -= borderTopWidth - marginTop;
    offsets.left -= borderLeftWidth - marginLeft;
    offsets.right -= borderLeftWidth - marginLeft;

    // Attach marginTop and marginLeft because in some circumstances we may need them
    offsets.marginTop = marginTop;
    offsets.marginLeft = marginLeft;
  }

  if (isIE10 && !fixedPosition ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {
    offsets = includeScroll(offsets, parent);
  }

  return offsets;
}

function getViewportOffsetRectRelativeToArtbitraryNode(element) {
  var excludeScroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  var html = element.ownerDocument.documentElement;
  var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);
  var width = Math.max(html.clientWidth, window.innerWidth || 0);
  var height = Math.max(html.clientHeight, window.innerHeight || 0);

  var scrollTop = !excludeScroll ? getScroll(html) : 0;
  var scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0;

  var offset = {
    top: scrollTop - relativeOffset.top + relativeOffset.marginTop,
    left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,
    width: width,
    height: height
  };

  return getClientRect(offset);
}

/**
 * Check if the given element is fixed or is inside a fixed parent
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @argument {Element} customContainer
 * @returns {Boolean} answer to "isFixed?"
 */
function isFixed(element) {
  var nodeName = element.nodeName;
  if (nodeName === 'BODY' || nodeName === 'HTML') {
    return false;
  }
  if (getStyleComputedProperty(element, 'position') === 'fixed') {
    return true;
  }
  var parentNode = getParentNode(element);
  if (!parentNode) {
    return false;
  }
  return isFixed(parentNode);
}

/**
 * Finds the first parent of an element that has a transformed property defined
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} first transformed parent or documentElement
 */

function getFixedPositionOffsetParent(element) {
  // This check is needed to avoid errors in case one of the elements isn't defined for any reason
  if (!element || !element.parentElement || isIE()) {
    return document.documentElement;
  }
  var el = element.parentElement;
  while (el && getStyleComputedProperty(el, 'transform') === 'none') {
    el = el.parentElement;
  }
  return el || document.documentElement;
}

/**
 * Computed the boundaries limits and return them
 * @method
 * @memberof Popper.Utils
 * @param {HTMLElement} popper
 * @param {HTMLElement} reference
 * @param {number} padding
 * @param {HTMLElement} boundariesElement - Element used to define the boundaries
 * @param {Boolean} fixedPosition - Is in fixed position mode
 * @returns {Object} Coordinates of the boundaries
 */
function getBoundaries(popper, reference, padding, boundariesElement) {
  var fixedPosition = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

  // NOTE: 1 DOM access here

  var boundaries = { top: 0, left: 0 };
  var offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, reference);

  // Handle viewport case
  if (boundariesElement === 'viewport') {
    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);
  } else {
    // Handle other cases based on DOM element used as boundaries
    var boundariesNode = void 0;
    if (boundariesElement === 'scrollParent') {
      boundariesNode = getScrollParent(getParentNode(reference));
      if (boundariesNode.nodeName === 'BODY') {
        boundariesNode = popper.ownerDocument.documentElement;
      }
    } else if (boundariesElement === 'window') {
      boundariesNode = popper.ownerDocument.documentElement;
    } else {
      boundariesNode = boundariesElement;
    }

    var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent, fixedPosition);

    // In case of HTML, we need a different computation
    if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {
      var _getWindowSizes = getWindowSizes(popper.ownerDocument),
          height = _getWindowSizes.height,
          width = _getWindowSizes.width;

      boundaries.top += offsets.top - offsets.marginTop;
      boundaries.bottom = height + offsets.top;
      boundaries.left += offsets.left - offsets.marginLeft;
      boundaries.right = width + offsets.left;
    } else {
      // for all the other DOM elements, this one is good
      boundaries = offsets;
    }
  }

  // Add paddings
  padding = padding || 0;
  var isPaddingNumber = typeof padding === 'number';
  boundaries.left += isPaddingNumber ? padding : padding.left || 0;
  boundaries.top += isPaddingNumber ? padding : padding.top || 0;
  boundaries.right -= isPaddingNumber ? padding : padding.right || 0;
  boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0;

  return boundaries;
}

function getArea(_ref) {
  var width = _ref.width,
      height = _ref.height;

  return width * height;
}

/**
 * Utility used to transform the `auto` placement to the placement with more
 * available space.
 * @method
 * @memberof Popper.Utils
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {
  var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;

  if (placement.indexOf('auto') === -1) {
    return placement;
  }

  var boundaries = getBoundaries(popper, reference, padding, boundariesElement);

  var rects = {
    top: {
      width: boundaries.width,
      height: refRect.top - boundaries.top
    },
    right: {
      width: boundaries.right - refRect.right,
      height: boundaries.height
    },
    bottom: {
      width: boundaries.width,
      height: boundaries.bottom - refRect.bottom
    },
    left: {
      width: refRect.left - boundaries.left,
      height: boundaries.height
    }
  };

  var sortedAreas = Object.keys(rects).map(function (key) {
    return _extends({
      key: key
    }, rects[key], {
      area: getArea(rects[key])
    });
  }).sort(function (a, b) {
    return b.area - a.area;
  });

  var filteredAreas = sortedAreas.filter(function (_ref2) {
    var width = _ref2.width,
        height = _ref2.height;
    return width >= popper.clientWidth && height >= popper.clientHeight;
  });

  var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;

  var variation = placement.split('-')[1];

  return computedPlacement + (variation ? '-' + variation : '');
}

/**
 * Get offsets to the reference element
 * @method
 * @memberof Popper.Utils
 * @param {Object} state
 * @param {Element} popper - the popper element
 * @param {Element} reference - the reference element (the popper will be relative to this)
 * @param {Element} fixedPosition - is in fixed position mode
 * @returns {Object} An object containing the offsets which will be applied to the popper
 */
function getReferenceOffsets(state, popper, reference) {
  var fixedPosition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

  var commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, reference);
  return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);
}

/**
 * Get the outer sizes of the given element (offset size + margins)
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Object} object containing width and height properties
 */
function getOuterSizes(element) {
  var window = element.ownerDocument.defaultView;
  var styles = window.getComputedStyle(element);
  var x = parseFloat(styles.marginTop || 0) + parseFloat(styles.marginBottom || 0);
  var y = parseFloat(styles.marginLeft || 0) + parseFloat(styles.marginRight || 0);
  var result = {
    width: element.offsetWidth + y,
    height: element.offsetHeight + x
  };
  return result;
}

/**
 * Get the opposite placement of the given one
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement
 * @returns {String} flipped placement
 */
function getOppositePlacement(placement) {
  var hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };
  return placement.replace(/left|right|bottom|top/g, function (matched) {
    return hash[matched];
  });
}

/**
 * Get offsets to the popper
 * @method
 * @memberof Popper.Utils
 * @param {Object} position - CSS position the Popper will get applied
 * @param {HTMLElement} popper - the popper element
 * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)
 * @param {String} placement - one of the valid placement options
 * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper
 */
function getPopperOffsets(popper, referenceOffsets, placement) {
  placement = placement.split('-')[0];

  // Get popper node sizes
  var popperRect = getOuterSizes(popper);

  // Add position, width and height to our offsets object
  var popperOffsets = {
    width: popperRect.width,
    height: popperRect.height
  };

  // depending by the popper placement we have to compute its offsets slightly differently
  var isHoriz = ['right', 'left'].indexOf(placement) !== -1;
  var mainSide = isHoriz ? 'top' : 'left';
  var secondarySide = isHoriz ? 'left' : 'top';
  var measurement = isHoriz ? 'height' : 'width';
  var secondaryMeasurement = !isHoriz ? 'height' : 'width';

  popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;
  if (placement === secondarySide) {
    popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];
  } else {
    popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];
  }

  return popperOffsets;
}

/**
 * Mimics the `find` method of Array
 * @method
 * @memberof Popper.Utils
 * @argument {Array} arr
 * @argument prop
 * @argument value
 * @returns index or -1
 */
function find(arr, check) {
  // use native find if supported
  if (Array.prototype.find) {
    return arr.find(check);
  }

  // use `filter` to obtain the same behavior of `find`
  return arr.filter(check)[0];
}

/**
 * Return the index of the matching object
 * @method
 * @memberof Popper.Utils
 * @argument {Array} arr
 * @argument prop
 * @argument value
 * @returns index or -1
 */
function findIndex(arr, prop, value) {
  // use native findIndex if supported
  if (Array.prototype.findIndex) {
    return arr.findIndex(function (cur) {
      return cur[prop] === value;
    });
  }

  // use `find` + `indexOf` if `findIndex` isn't supported
  var match = find(arr, function (obj) {
    return obj[prop] === value;
  });
  return arr.indexOf(match);
}

/**
 * Loop trough the list of modifiers and run them in order,
 * each of them will then edit the data object.
 * @method
 * @memberof Popper.Utils
 * @param {dataObject} data
 * @param {Array} modifiers
 * @param {String} ends - Optional modifier name used as stopper
 * @returns {dataObject}
 */
function runModifiers(modifiers, data, ends) {
  var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex(modifiers, 'name', ends));

  modifiersToRun.forEach(function (modifier) {
    if (modifier['function']) {
      // eslint-disable-line dot-notation
      console.warn('`modifier.function` is deprecated, use `modifier.fn`!');
    }
    var fn = modifier['function'] || modifier.fn; // eslint-disable-line dot-notation
    if (modifier.enabled && isFunction(fn)) {
      // Add properties to offsets to make them a complete clientRect object
      // we do this before each modifier to make sure the previous one doesn't
      // mess with these values
      data.offsets.popper = getClientRect(data.offsets.popper);
      data.offsets.reference = getClientRect(data.offsets.reference);

      data = fn(data, modifier);
    }
  });

  return data;
}

/**
 * Updates the position of the popper, computing the new offsets and applying
 * the new style.<br />
 * Prefer `scheduleUpdate` over `update` because of performance reasons.
 * @method
 * @memberof Popper
 */
function update() {
  // if popper is destroyed, don't perform any further update
  if (this.state.isDestroyed) {
    return;
  }

  var data = {
    instance: this,
    styles: {},
    arrowStyles: {},
    attributes: {},
    flipped: false,
    offsets: {}
  };

  // compute reference element offsets
  data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference, this.options.positionFixed);

  // compute auto placement, store placement inside the data object,
  // modifiers will be able to edit `placement` if needed
  // and refer to originalPlacement to know the original value
  data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);

  // store the computed placement inside `originalPlacement`
  data.originalPlacement = data.placement;

  data.positionFixed = this.options.positionFixed;

  // compute the popper offsets
  data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);

  data.offsets.popper.position = this.options.positionFixed ? 'fixed' : 'absolute';

  // run the modifiers
  data = runModifiers(this.modifiers, data);

  // the first `update` will call `onCreate` callback
  // the other ones will call `onUpdate` callback
  if (!this.state.isCreated) {
    this.state.isCreated = true;
    this.options.onCreate(data);
  } else {
    this.options.onUpdate(data);
  }
}

/**
 * Helper used to know if the given modifier is enabled.
 * @method
 * @memberof Popper.Utils
 * @returns {Boolean}
 */
function isModifierEnabled(modifiers, modifierName) {
  return modifiers.some(function (_ref) {
    var name = _ref.name,
        enabled = _ref.enabled;
    return enabled && name === modifierName;
  });
}

/**
 * Get the prefixed supported property name
 * @method
 * @memberof Popper.Utils
 * @argument {String} property (camelCase)
 * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)
 */
function getSupportedPropertyName(property) {
  var prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];
  var upperProp = property.charAt(0).toUpperCase() + property.slice(1);

  for (var i = 0; i < prefixes.length; i++) {
    var prefix = prefixes[i];
    var toCheck = prefix ? '' + prefix + upperProp : property;
    if (typeof document.body.style[toCheck] !== 'undefined') {
      return toCheck;
    }
  }
  return null;
}

/**
 * Destroys the popper.
 * @method
 * @memberof Popper
 */
function destroy() {
  this.state.isDestroyed = true;

  // touch DOM only if `applyStyle` modifier is enabled
  if (isModifierEnabled(this.modifiers, 'applyStyle')) {
    this.popper.removeAttribute('x-placement');
    this.popper.style.position = '';
    this.popper.style.top = '';
    this.popper.style.left = '';
    this.popper.style.right = '';
    this.popper.style.bottom = '';
    this.popper.style.willChange = '';
    this.popper.style[getSupportedPropertyName('transform')] = '';
  }

  this.disableEventListeners();

  // remove the popper if user explicity asked for the deletion on destroy
  // do not use `remove` because IE11 doesn't support it
  if (this.options.removeOnDestroy) {
    this.popper.parentNode.removeChild(this.popper);
  }
  return this;
}

/**
 * Get the window associated with the element
 * @argument {Element} element
 * @returns {Window}
 */
function getWindow(element) {
  var ownerDocument = element.ownerDocument;
  return ownerDocument ? ownerDocument.defaultView : window;
}

function attachToScrollParents(scrollParent, event, callback, scrollParents) {
  var isBody = scrollParent.nodeName === 'BODY';
  var target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;
  target.addEventListener(event, callback, { passive: true });

  if (!isBody) {
    attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);
  }
  scrollParents.push(target);
}

/**
 * Setup needed event listeners used to update the popper position
 * @method
 * @memberof Popper.Utils
 * @private
 */
function setupEventListeners(reference, options, state, updateBound) {
  // Resize event listener on window
  state.updateBound = updateBound;
  getWindow(reference).addEventListener('resize', state.updateBound, { passive: true });

  // Scroll event listener on scroll parents
  var scrollElement = getScrollParent(reference);
  attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents);
  state.scrollElement = scrollElement;
  state.eventsEnabled = true;

  return state;
}

/**
 * It will add resize/scroll events and start recalculating
 * position of the popper element when they are triggered.
 * @method
 * @memberof Popper
 */
function enableEventListeners() {
  if (!this.state.eventsEnabled) {
    this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);
  }
}

/**
 * Remove event listeners used to update the popper position
 * @method
 * @memberof Popper.Utils
 * @private
 */
function removeEventListeners(reference, state) {
  // Remove resize event listener on window
  getWindow(reference).removeEventListener('resize', state.updateBound);

  // Remove scroll event listener on scroll parents
  state.scrollParents.forEach(function (target) {
    target.removeEventListener('scroll', state.updateBound);
  });

  // Reset state
  state.updateBound = null;
  state.scrollParents = [];
  state.scrollElement = null;
  state.eventsEnabled = false;
  return state;
}

/**
 * It will remove resize/scroll events and won't recalculate popper position
 * when they are triggered. It also won't trigger `onUpdate` callback anymore,
 * unless you call `update` method manually.
 * @method
 * @memberof Popper
 */
function disableEventListeners() {
  if (this.state.eventsEnabled) {
    cancelAnimationFrame(this.scheduleUpdate);
    this.state = removeEventListeners(this.reference, this.state);
  }
}

/**
 * Tells if a given input is a number
 * @method
 * @memberof Popper.Utils
 * @param {*} input to check
 * @return {Boolean}
 */
function isNumeric(n) {
  return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);
}

/**
 * Set the style to the given popper
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element - Element to apply the style to
 * @argument {Object} styles
 * Object with a list of properties and values which will be applied to the element
 */
function setStyles(element, styles) {
  Object.keys(styles).forEach(function (prop) {
    var unit = '';
    // add unit if the value is numeric and is one of the following
    if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {
      unit = 'px';
    }
    element.style[prop] = styles[prop] + unit;
  });
}

/**
 * Set the attributes to the given popper
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element - Element to apply the attributes to
 * @argument {Object} styles
 * Object with a list of properties and values which will be applied to the element
 */
function setAttributes(element, attributes) {
  Object.keys(attributes).forEach(function (prop) {
    var value = attributes[prop];
    if (value !== false) {
      element.setAttribute(prop, attributes[prop]);
    } else {
      element.removeAttribute(prop);
    }
  });
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} data.styles - List of style properties - values to apply to popper element
 * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The same data object
 */
function applyStyle(data) {
  // any property present in `data.styles` will be applied to the popper,
  // in this way we can make the 3rd party modifiers add custom styles to it
  // Be aware, modifiers could override the properties defined in the previous
  // lines of this modifier!
  setStyles(data.instance.popper, data.styles);

  // any property present in `data.attributes` will be applied to the popper,
  // they will be set as HTML attributes of the element
  setAttributes(data.instance.popper, data.attributes);

  // if arrowElement is defined and arrowStyles has some properties
  if (data.arrowElement && Object.keys(data.arrowStyles).length) {
    setStyles(data.arrowElement, data.arrowStyles);
  }

  return data;
}

/**
 * Set the x-placement attribute before everything else because it could be used
 * to add margins to the popper margins needs to be calculated to get the
 * correct popper offsets.
 * @method
 * @memberof Popper.modifiers
 * @param {HTMLElement} reference - The reference element used to position the popper
 * @param {HTMLElement} popper - The HTML element used as popper
 * @param {Object} options - Popper.js options
 */
function applyStyleOnLoad(reference, popper, options, modifierOptions, state) {
  // compute reference element offsets
  var referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed);

  // compute auto placement, store placement inside the data object,
  // modifiers will be able to edit `placement` if needed
  // and refer to originalPlacement to know the original value
  var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);

  popper.setAttribute('x-placement', placement);

  // Apply `position` to popper before anything else because
  // without the position applied we can't guarantee correct computations
  setStyles(popper, { position: options.positionFixed ? 'fixed' : 'absolute' });

  return options;
}

/**
 * @function
 * @memberof Popper.Utils
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Boolean} shouldRound - If the offsets should be rounded at all
 * @returns {Object} The popper's position offsets rounded
 *
 * The tale of pixel-perfect positioning. It's still not 100% perfect, but as
 * good as it can be within reason.
 * Discussion here: https://github.com/FezVrasta/popper.js/pull/715
 *
 * Low DPI screens cause a popper to be blurry if not using full pixels (Safari
 * as well on High DPI screens).
 *
 * Firefox prefers no rounding for positioning and does not have blurriness on
 * high DPI screens.
 *
 * Only horizontal placement and left/right values need to be considered.
 */
function getRoundedOffsets(data, shouldRound) {
  var _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;
  var round = Math.round,
      floor = Math.floor;

  var noRound = function noRound(v) {
    return v;
  };

  var referenceWidth = round(reference.width);
  var popperWidth = round(popper.width);

  var isVertical = ['left', 'right'].indexOf(data.placement) !== -1;
  var isVariation = data.placement.indexOf('-') !== -1;
  var sameWidthParity = referenceWidth % 2 === popperWidth % 2;
  var bothOddWidth = referenceWidth % 2 === 1 && popperWidth % 2 === 1;

  var horizontalToInteger = !shouldRound ? noRound : isVertical || isVariation || sameWidthParity ? round : floor;
  var verticalToInteger = !shouldRound ? noRound : round;

  return {
    left: horizontalToInteger(bothOddWidth && !isVariation && shouldRound ? popper.left - 1 : popper.left),
    top: verticalToInteger(popper.top),
    bottom: verticalToInteger(popper.bottom),
    right: horizontalToInteger(popper.right)
  };
}

var isFirefox = isBrowser && /Firefox/i.test(navigator.userAgent);

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function computeStyle(data, options) {
  var x = options.x,
      y = options.y;
  var popper = data.offsets.popper;

  // Remove this legacy support in Popper.js v2

  var legacyGpuAccelerationOption = find(data.instance.modifiers, function (modifier) {
    return modifier.name === 'applyStyle';
  }).gpuAcceleration;
  if (legacyGpuAccelerationOption !== undefined) {
    console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');
  }
  var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;

  var offsetParent = getOffsetParent(data.instance.popper);
  var offsetParentRect = getBoundingClientRect(offsetParent);

  // Styles
  var styles = {
    position: popper.position
  };

  var offsets = getRoundedOffsets(data, window.devicePixelRatio < 2 || !isFirefox);

  var sideA = x === 'bottom' ? 'top' : 'bottom';
  var sideB = y === 'right' ? 'left' : 'right';

  // if gpuAcceleration is set to `true` and transform is supported,
  //  we use `translate3d` to apply the position to the popper we
  // automatically use the supported prefixed version if needed
  var prefixedProperty = getSupportedPropertyName('transform');

  // now, let's make a step back and look at this code closely (wtf?)
  // If the content of the popper grows once it's been positioned, it
  // may happen that the popper gets misplaced because of the new content
  // overflowing its reference element
  // To avoid this problem, we provide two options (x and y), which allow
  // the consumer to define the offset origin.
  // If we position a popper on top of a reference element, we can set
  // `x` to `top` to make the popper grow towards its top instead of
  // its bottom.
  var left = void 0,
      top = void 0;
  if (sideA === 'bottom') {
    // when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)
    // and not the bottom of the html element
    if (offsetParent.nodeName === 'HTML') {
      top = -offsetParent.clientHeight + offsets.bottom;
    } else {
      top = -offsetParentRect.height + offsets.bottom;
    }
  } else {
    top = offsets.top;
  }
  if (sideB === 'right') {
    if (offsetParent.nodeName === 'HTML') {
      left = -offsetParent.clientWidth + offsets.right;
    } else {
      left = -offsetParentRect.width + offsets.right;
    }
  } else {
    left = offsets.left;
  }
  if (gpuAcceleration && prefixedProperty) {
    styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';
    styles[sideA] = 0;
    styles[sideB] = 0;
    styles.willChange = 'transform';
  } else {
    // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties
    var invertTop = sideA === 'bottom' ? -1 : 1;
    var invertLeft = sideB === 'right' ? -1 : 1;
    styles[sideA] = top * invertTop;
    styles[sideB] = left * invertLeft;
    styles.willChange = sideA + ', ' + sideB;
  }

  // Attributes
  var attributes = {
    'x-placement': data.placement
  };

  // Update `data` attributes, styles and arrowStyles
  data.attributes = _extends({}, attributes, data.attributes);
  data.styles = _extends({}, styles, data.styles);
  data.arrowStyles = _extends({}, data.offsets.arrow, data.arrowStyles);

  return data;
}

/**
 * Helper used to know if the given modifier depends from another one.<br />
 * It checks if the needed modifier is listed and enabled.
 * @method
 * @memberof Popper.Utils
 * @param {Array} modifiers - list of modifiers
 * @param {String} requestingName - name of requesting modifier
 * @param {String} requestedName - name of requested modifier
 * @returns {Boolean}
 */
function isModifierRequired(modifiers, requestingName, requestedName) {
  var requesting = find(modifiers, function (_ref) {
    var name = _ref.name;
    return name === requestingName;
  });

  var isRequired = !!requesting && modifiers.some(function (modifier) {
    return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;
  });

  if (!isRequired) {
    var _requesting = '`' + requestingName + '`';
    var requested = '`' + requestedName + '`';
    console.warn(requested + ' modifier is required by ' + _requesting + ' modifier in order to work, be sure to include it before ' + _requesting + '!');
  }
  return isRequired;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function arrow(data, options) {
  var _data$offsets$arrow;

  // arrow depends on keepTogether in order to work
  if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {
    return data;
  }

  var arrowElement = options.element;

  // if arrowElement is a string, suppose it's a CSS selector
  if (typeof arrowElement === 'string') {
    arrowElement = data.instance.popper.querySelector(arrowElement);

    // if arrowElement is not found, don't run the modifier
    if (!arrowElement) {
      return data;
    }
  } else {
    // if the arrowElement isn't a query selector we must check that the
    // provided DOM node is child of its popper node
    if (!data.instance.popper.contains(arrowElement)) {
      console.warn('WARNING: `arrow.element` must be child of its popper element!');
      return data;
    }
  }

  var placement = data.placement.split('-')[0];
  var _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;

  var isVertical = ['left', 'right'].indexOf(placement) !== -1;

  var len = isVertical ? 'height' : 'width';
  var sideCapitalized = isVertical ? 'Top' : 'Left';
  var side = sideCapitalized.toLowerCase();
  var altSide = isVertical ? 'left' : 'top';
  var opSide = isVertical ? 'bottom' : 'right';
  var arrowElementSize = getOuterSizes(arrowElement)[len];

  //
  // extends keepTogether behavior making sure the popper and its
  // reference have enough pixels in conjunction
  //

  // top/left side
  if (reference[opSide] - arrowElementSize < popper[side]) {
    data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);
  }
  // bottom/right side
  if (reference[side] + arrowElementSize > popper[opSide]) {
    data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];
  }
  data.offsets.popper = getClientRect(data.offsets.popper);

  // compute center of the popper
  var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;

  // Compute the sideValue using the updated popper offsets
  // take popper margin in account because we don't have this info available
  var css = getStyleComputedProperty(data.instance.popper);
  var popperMarginSide = parseFloat(css['margin' + sideCapitalized], 10);
  var popperBorderSide = parseFloat(css['border' + sideCapitalized + 'Width'], 10);
  var sideValue = center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;

  // prevent arrowElement from being placed not contiguously to its popper
  sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);

  data.arrowElement = arrowElement;
  data.offsets.arrow = (_data$offsets$arrow = {}, defineProperty(_data$offsets$arrow, side, Math.round(sideValue)), defineProperty(_data$offsets$arrow, altSide, ''), _data$offsets$arrow);

  return data;
}

/**
 * Get the opposite placement variation of the given one
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement variation
 * @returns {String} flipped placement variation
 */
function getOppositeVariation(variation) {
  if (variation === 'end') {
    return 'start';
  } else if (variation === 'start') {
    return 'end';
  }
  return variation;
}

/**
 * List of accepted placements to use as values of the `placement` option.<br />
 * Valid placements are:
 * - `auto`
 * - `top`
 * - `right`
 * - `bottom`
 * - `left`
 *
 * Each placement can have a variation from this list:
 * - `-start`
 * - `-end`
 *
 * Variations are interpreted easily if you think of them as the left to right
 * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`
 * is right.<br />
 * Vertically (`left` and `right`), `start` is top and `end` is bottom.
 *
 * Some valid examples are:
 * - `top-end` (on top of reference, right aligned)
 * - `right-start` (on right of reference, top aligned)
 * - `bottom` (on bottom, centered)
 * - `auto-end` (on the side with more space available, alignment depends by placement)
 *
 * @static
 * @type {Array}
 * @enum {String}
 * @readonly
 * @method placements
 * @memberof Popper
 */
var placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'];

// Get rid of `auto` `auto-start` and `auto-end`
var validPlacements = placements.slice(3);

/**
 * Given an initial placement, returns all the subsequent placements
 * clockwise (or counter-clockwise).
 *
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement - A valid placement (it accepts variations)
 * @argument {Boolean} counter - Set to true to walk the placements counterclockwise
 * @returns {Array} placements including their variations
 */
function clockwise(placement) {
  var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  var index = validPlacements.indexOf(placement);
  var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));
  return counter ? arr.reverse() : arr;
}

var BEHAVIORS = {
  FLIP: 'flip',
  CLOCKWISE: 'clockwise',
  COUNTERCLOCKWISE: 'counterclockwise'
};

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function flip(data, options) {
  // if `inner` modifier is enabled, we can't use the `flip` modifier
  if (isModifierEnabled(data.instance.modifiers, 'inner')) {
    return data;
  }

  if (data.flipped && data.placement === data.originalPlacement) {
    // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides
    return data;
  }

  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement, data.positionFixed);

  var placement = data.placement.split('-')[0];
  var placementOpposite = getOppositePlacement(placement);
  var variation = data.placement.split('-')[1] || '';

  var flipOrder = [];

  switch (options.behavior) {
    case BEHAVIORS.FLIP:
      flipOrder = [placement, placementOpposite];
      break;
    case BEHAVIORS.CLOCKWISE:
      flipOrder = clockwise(placement);
      break;
    case BEHAVIORS.COUNTERCLOCKWISE:
      flipOrder = clockwise(placement, true);
      break;
    default:
      flipOrder = options.behavior;
  }

  flipOrder.forEach(function (step, index) {
    if (placement !== step || flipOrder.length === index + 1) {
      return data;
    }

    placement = data.placement.split('-')[0];
    placementOpposite = getOppositePlacement(placement);

    var popperOffsets = data.offsets.popper;
    var refOffsets = data.offsets.reference;

    // using floor because the reference offsets may contain decimals we are not going to consider here
    var floor = Math.floor;
    var overlapsRef = placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom);

    var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);
    var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);
    var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);
    var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);

    var overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom;

    // flip the variation if required
    var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;
    var flippedVariation = !!options.flipVariations && (isVertical && variation === 'start' && overflowsLeft || isVertical && variation === 'end' && overflowsRight || !isVertical && variation === 'start' && overflowsTop || !isVertical && variation === 'end' && overflowsBottom);

    if (overlapsRef || overflowsBoundaries || flippedVariation) {
      // this boolean to detect any flip loop
      data.flipped = true;

      if (overlapsRef || overflowsBoundaries) {
        placement = flipOrder[index + 1];
      }

      if (flippedVariation) {
        variation = getOppositeVariation(variation);
      }

      data.placement = placement + (variation ? '-' + variation : '');

      // this object contains `position`, we want to preserve it along with
      // any additional property we may add in the future
      data.offsets.popper = _extends({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));

      data = runModifiers(data.instance.modifiers, data, 'flip');
    }
  });
  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function keepTogether(data) {
  var _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;

  var placement = data.placement.split('-')[0];
  var floor = Math.floor;
  var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;
  var side = isVertical ? 'right' : 'bottom';
  var opSide = isVertical ? 'left' : 'top';
  var measurement = isVertical ? 'width' : 'height';

  if (popper[side] < floor(reference[opSide])) {
    data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];
  }
  if (popper[opSide] > floor(reference[side])) {
    data.offsets.popper[opSide] = floor(reference[side]);
  }

  return data;
}

/**
 * Converts a string containing value + unit into a px value number
 * @function
 * @memberof {modifiers~offset}
 * @private
 * @argument {String} str - Value + unit string
 * @argument {String} measurement - `height` or `width`
 * @argument {Object} popperOffsets
 * @argument {Object} referenceOffsets
 * @returns {Number|String}
 * Value in pixels, or original string if no values were extracted
 */
function toValue(str, measurement, popperOffsets, referenceOffsets) {
  // separate value from unit
  var split = str.match(/((?:\-|\+)?\d*\.?\d*)(.*)/);
  var value = +split[1];
  var unit = split[2];

  // If it's not a number it's an operator, I guess
  if (!value) {
    return str;
  }

  if (unit.indexOf('%') === 0) {
    var element = void 0;
    switch (unit) {
      case '%p':
        element = popperOffsets;
        break;
      case '%':
      case '%r':
      default:
        element = referenceOffsets;
    }

    var rect = getClientRect(element);
    return rect[measurement] / 100 * value;
  } else if (unit === 'vh' || unit === 'vw') {
    // if is a vh or vw, we calculate the size based on the viewport
    var size = void 0;
    if (unit === 'vh') {
      size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
    } else {
      size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
    }
    return size / 100 * value;
  } else {
    // if is an explicit pixel unit, we get rid of the unit and keep the value
    // if is an implicit unit, it's px, and we return just the value
    return value;
  }
}

/**
 * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.
 * @function
 * @memberof {modifiers~offset}
 * @private
 * @argument {String} offset
 * @argument {Object} popperOffsets
 * @argument {Object} referenceOffsets
 * @argument {String} basePlacement
 * @returns {Array} a two cells array with x and y offsets in numbers
 */
function parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {
  var offsets = [0, 0];

  // Use height if placement is left or right and index is 0 otherwise use width
  // in this way the first offset will use an axis and the second one
  // will use the other one
  var useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;

  // Split the offset string to obtain a list of values and operands
  // The regex addresses values with the plus or minus sign in front (+10, -20, etc)
  var fragments = offset.split(/(\+|\-)/).map(function (frag) {
    return frag.trim();
  });

  // Detect if the offset string contains a pair of values or a single one
  // they could be separated by comma or space
  var divider = fragments.indexOf(find(fragments, function (frag) {
    return frag.search(/,|\s/) !== -1;
  }));

  if (fragments[divider] && fragments[divider].indexOf(',') === -1) {
    console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');
  }

  // If divider is found, we divide the list of values and operands to divide
  // them by ofset X and Y.
  var splitRegex = /\s*,\s*|\s+/;
  var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];

  // Convert the values with units to absolute pixels to allow our computations
  ops = ops.map(function (op, index) {
    // Most of the units rely on the orientation of the popper
    var measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width';
    var mergeWithPrevious = false;
    return op
    // This aggregates any `+` or `-` sign that aren't considered operators
    // e.g.: 10 + +5 => [10, +, +5]
    .reduce(function (a, b) {
      if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {
        a[a.length - 1] = b;
        mergeWithPrevious = true;
        return a;
      } else if (mergeWithPrevious) {
        a[a.length - 1] += b;
        mergeWithPrevious = false;
        return a;
      } else {
        return a.concat(b);
      }
    }, [])
    // Here we convert the string values into number values (in px)
    .map(function (str) {
      return toValue(str, measurement, popperOffsets, referenceOffsets);
    });
  });

  // Loop trough the offsets arrays and execute the operations
  ops.forEach(function (op, index) {
    op.forEach(function (frag, index2) {
      if (isNumeric(frag)) {
        offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);
      }
    });
  });
  return offsets;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @argument {Number|String} options.offset=0
 * The offset value as described in the modifier description
 * @returns {Object} The data object, properly modified
 */
function offset(data, _ref) {
  var offset = _ref.offset;
  var placement = data.placement,
      _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;

  var basePlacement = placement.split('-')[0];

  var offsets = void 0;
  if (isNumeric(+offset)) {
    offsets = [+offset, 0];
  } else {
    offsets = parseOffset(offset, popper, reference, basePlacement);
  }

  if (basePlacement === 'left') {
    popper.top += offsets[0];
    popper.left -= offsets[1];
  } else if (basePlacement === 'right') {
    popper.top += offsets[0];
    popper.left += offsets[1];
  } else if (basePlacement === 'top') {
    popper.left += offsets[0];
    popper.top -= offsets[1];
  } else if (basePlacement === 'bottom') {
    popper.left += offsets[0];
    popper.top += offsets[1];
  }

  data.popper = popper;
  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function preventOverflow(data, options) {
  var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);

  // If offsetParent is the reference element, we really want to
  // go one step up and use the next offsetParent as reference to
  // avoid to make this modifier completely useless and look like broken
  if (data.instance.reference === boundariesElement) {
    boundariesElement = getOffsetParent(boundariesElement);
  }

  // NOTE: DOM access here
  // resets the popper's position so that the document size can be calculated excluding
  // the size of the popper element itself
  var transformProp = getSupportedPropertyName('transform');
  var popperStyles = data.instance.popper.style; // assignment to help minification
  var top = popperStyles.top,
      left = popperStyles.left,
      transform = popperStyles[transformProp];

  popperStyles.top = '';
  popperStyles.left = '';
  popperStyles[transformProp] = '';

  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement, data.positionFixed);

  // NOTE: DOM access here
  // restores the original style properties after the offsets have been computed
  popperStyles.top = top;
  popperStyles.left = left;
  popperStyles[transformProp] = transform;

  options.boundaries = boundaries;

  var order = options.priority;
  var popper = data.offsets.popper;

  var check = {
    primary: function primary(placement) {
      var value = popper[placement];
      if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {
        value = Math.max(popper[placement], boundaries[placement]);
      }
      return defineProperty({}, placement, value);
    },
    secondary: function secondary(placement) {
      var mainSide = placement === 'right' ? 'left' : 'top';
      var value = popper[mainSide];
      if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {
        value = Math.min(popper[mainSide], boundaries[placement] - (placement === 'right' ? popper.width : popper.height));
      }
      return defineProperty({}, mainSide, value);
    }
  };

  order.forEach(function (placement) {
    var side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';
    popper = _extends({}, popper, check[side](placement));
  });

  data.offsets.popper = popper;

  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function shift(data) {
  var placement = data.placement;
  var basePlacement = placement.split('-')[0];
  var shiftvariation = placement.split('-')[1];

  // if shift shiftvariation is specified, run the modifier
  if (shiftvariation) {
    var _data$offsets = data.offsets,
        reference = _data$offsets.reference,
        popper = _data$offsets.popper;

    var isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;
    var side = isVertical ? 'left' : 'top';
    var measurement = isVertical ? 'width' : 'height';

    var shiftOffsets = {
      start: defineProperty({}, side, reference[side]),
      end: defineProperty({}, side, reference[side] + reference[measurement] - popper[measurement])
    };

    data.offsets.popper = _extends({}, popper, shiftOffsets[shiftvariation]);
  }

  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function hide(data) {
  if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {
    return data;
  }

  var refRect = data.offsets.reference;
  var bound = find(data.instance.modifiers, function (modifier) {
    return modifier.name === 'preventOverflow';
  }).boundaries;

  if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {
    // Avoid unnecessary DOM access if visibility hasn't changed
    if (data.hide === true) {
      return data;
    }

    data.hide = true;
    data.attributes['x-out-of-boundaries'] = '';
  } else {
    // Avoid unnecessary DOM access if visibility hasn't changed
    if (data.hide === false) {
      return data;
    }

    data.hide = false;
    data.attributes['x-out-of-boundaries'] = false;
  }

  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function inner(data) {
  var placement = data.placement;
  var basePlacement = placement.split('-')[0];
  var _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;

  var isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;

  var subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;

  popper[isHoriz ? 'left' : 'top'] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);

  data.placement = getOppositePlacement(placement);
  data.offsets.popper = getClientRect(popper);

  return data;
}

/**
 * Modifier function, each modifier can have a function of this type assigned
 * to its `fn` property.<br />
 * These functions will be called on each update, this means that you must
 * make sure they are performant enough to avoid performance bottlenecks.
 *
 * @function ModifierFn
 * @argument {dataObject} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {dataObject} The data object, properly modified
 */

/**
 * Modifiers are plugins used to alter the behavior of your poppers.<br />
 * Popper.js uses a set of 9 modifiers to provide all the basic functionalities
 * needed by the library.
 *
 * Usually you don't want to override the `order`, `fn` and `onLoad` props.
 * All the other properties are configurations that could be tweaked.
 * @namespace modifiers
 */
var modifiers = {
  /**
   * Modifier used to shift the popper on the start or end of its reference
   * element.<br />
   * It will read the variation of the `placement` property.<br />
   * It can be one either `-end` or `-start`.
   * @memberof modifiers
   * @inner
   */
  shift: {
    /** @prop {number} order=100 - Index used to define the order of execution */
    order: 100,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: shift
  },

  /**
   * The `offset` modifier can shift your popper on both its axis.
   *
   * It accepts the following units:
   * - `px` or unit-less, interpreted as pixels
   * - `%` or `%r`, percentage relative to the length of the reference element
   * - `%p`, percentage relative to the length of the popper element
   * - `vw`, CSS viewport width unit
   * - `vh`, CSS viewport height unit
   *
   * For length is intended the main axis relative to the placement of the popper.<br />
   * This means that if the placement is `top` or `bottom`, the length will be the
   * `width`. In case of `left` or `right`, it will be the `height`.
   *
   * You can provide a single value (as `Number` or `String`), or a pair of values
   * as `String` divided by a comma or one (or more) white spaces.<br />
   * The latter is a deprecated method because it leads to confusion and will be
   * removed in v2.<br />
   * Additionally, it accepts additions and subtractions between different units.
   * Note that multiplications and divisions aren't supported.
   *
   * Valid examples are:
   * ```
   * 10
   * '10%'
   * '10, 10'
   * '10%, 10'
   * '10 + 10%'
   * '10 - 5vh + 3%'
   * '-10px + 5vh, 5px - 6%'
   * ```
   * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap
   * > with their reference element, unfortunately, you will have to disable the `flip` modifier.
   * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).
   *
   * @memberof modifiers
   * @inner
   */
  offset: {
    /** @prop {number} order=200 - Index used to define the order of execution */
    order: 200,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: offset,
    /** @prop {Number|String} offset=0
     * The offset value as described in the modifier description
     */
    offset: 0
  },

  /**
   * Modifier used to prevent the popper from being positioned outside the boundary.
   *
   * A scenario exists where the reference itself is not within the boundaries.<br />
   * We can say it has "escaped the boundaries" — or just "escaped".<br />
   * In this case we need to decide whether the popper should either:
   *
   * - detach from the reference and remain "trapped" in the boundaries, or
   * - if it should ignore the boundary and "escape with its reference"
   *
   * When `escapeWithReference` is set to`true` and reference is completely
   * outside its boundaries, the popper will overflow (or completely leave)
   * the boundaries in order to remain attached to the edge of the reference.
   *
   * @memberof modifiers
   * @inner
   */
  preventOverflow: {
    /** @prop {number} order=300 - Index used to define the order of execution */
    order: 300,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: preventOverflow,
    /**
     * @prop {Array} [priority=['left','right','top','bottom']]
     * Popper will try to prevent overflow following these priorities by default,
     * then, it could overflow on the left and on top of the `boundariesElement`
     */
    priority: ['left', 'right', 'top', 'bottom'],
    /**
     * @prop {number} padding=5
     * Amount of pixel used to define a minimum distance between the boundaries
     * and the popper. This makes sure the popper always has a little padding
     * between the edges of its container
     */
    padding: 5,
    /**
     * @prop {String|HTMLElement} boundariesElement='scrollParent'
     * Boundaries used by the modifier. Can be `scrollParent`, `window`,
     * `viewport` or any DOM element.
     */
    boundariesElement: 'scrollParent'
  },

  /**
   * Modifier used to make sure the reference and its popper stay near each other
   * without leaving any gap between the two. Especially useful when the arrow is
   * enabled and you want to ensure that it points to its reference element.
   * It cares only about the first axis. You can still have poppers with margin
   * between the popper and its reference element.
   * @memberof modifiers
   * @inner
   */
  keepTogether: {
    /** @prop {number} order=400 - Index used to define the order of execution */
    order: 400,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: keepTogether
  },

  /**
   * This modifier is used to move the `arrowElement` of the popper to make
   * sure it is positioned between the reference element and its popper element.
   * It will read the outer size of the `arrowElement` node to detect how many
   * pixels of conjunction are needed.
   *
   * It has no effect if no `arrowElement` is provided.
   * @memberof modifiers
   * @inner
   */
  arrow: {
    /** @prop {number} order=500 - Index used to define the order of execution */
    order: 500,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: arrow,
    /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */
    element: '[x-arrow]'
  },

  /**
   * Modifier used to flip the popper's placement when it starts to overlap its
   * reference element.
   *
   * Requires the `preventOverflow` modifier before it in order to work.
   *
   * **NOTE:** this modifier will interrupt the current update cycle and will
   * restart it if it detects the need to flip the placement.
   * @memberof modifiers
   * @inner
   */
  flip: {
    /** @prop {number} order=600 - Index used to define the order of execution */
    order: 600,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: flip,
    /**
     * @prop {String|Array} behavior='flip'
     * The behavior used to change the popper's placement. It can be one of
     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid
     * placements (with optional variations)
     */
    behavior: 'flip',
    /**
     * @prop {number} padding=5
     * The popper will flip if it hits the edges of the `boundariesElement`
     */
    padding: 5,
    /**
     * @prop {String|HTMLElement} boundariesElement='viewport'
     * The element which will define the boundaries of the popper position.
     * The popper will never be placed outside of the defined boundaries
     * (except if `keepTogether` is enabled)
     */
    boundariesElement: 'viewport'
  },

  /**
   * Modifier used to make the popper flow toward the inner of the reference element.
   * By default, when this modifier is disabled, the popper will be placed outside
   * the reference element.
   * @memberof modifiers
   * @inner
   */
  inner: {
    /** @prop {number} order=700 - Index used to define the order of execution */
    order: 700,
    /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */
    enabled: false,
    /** @prop {ModifierFn} */
    fn: inner
  },

  /**
   * Modifier used to hide the popper when its reference element is outside of the
   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can
   * be used to hide with a CSS selector the popper when its reference is
   * out of boundaries.
   *
   * Requires the `preventOverflow` modifier before it in order to work.
   * @memberof modifiers
   * @inner
   */
  hide: {
    /** @prop {number} order=800 - Index used to define the order of execution */
    order: 800,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: hide
  },

  /**
   * Computes the style that will be applied to the popper element to gets
   * properly positioned.
   *
   * Note that this modifier will not touch the DOM, it just prepares the styles
   * so that `applyStyle` modifier can apply it. This separation is useful
   * in case you need to replace `applyStyle` with a custom implementation.
   *
   * This modifier has `850` as `order` value to maintain backward compatibility
   * with previous versions of Popper.js. Expect the modifiers ordering method
   * to change in future major versions of the library.
   *
   * @memberof modifiers
   * @inner
   */
  computeStyle: {
    /** @prop {number} order=850 - Index used to define the order of execution */
    order: 850,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: computeStyle,
    /**
     * @prop {Boolean} gpuAcceleration=true
     * If true, it uses the CSS 3D transformation to position the popper.
     * Otherwise, it will use the `top` and `left` properties
     */
    gpuAcceleration: true,
    /**
     * @prop {string} [x='bottom']
     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.
     * Change this if your popper should grow in a direction different from `bottom`
     */
    x: 'bottom',
    /**
     * @prop {string} [x='left']
     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.
     * Change this if your popper should grow in a direction different from `right`
     */
    y: 'right'
  },

  /**
   * Applies the computed styles to the popper element.
   *
   * All the DOM manipulations are limited to this modifier. This is useful in case
   * you want to integrate Popper.js inside a framework or view library and you
   * want to delegate all the DOM manipulations to it.
   *
   * Note that if you disable this modifier, you must make sure the popper element
   * has its position set to `absolute` before Popper.js can do its work!
   *
   * Just disable this modifier and define your own to achieve the desired effect.
   *
   * @memberof modifiers
   * @inner
   */
  applyStyle: {
    /** @prop {number} order=900 - Index used to define the order of execution */
    order: 900,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: applyStyle,
    /** @prop {Function} */
    onLoad: applyStyleOnLoad,
    /**
     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier
     * @prop {Boolean} gpuAcceleration=true
     * If true, it uses the CSS 3D transformation to position the popper.
     * Otherwise, it will use the `top` and `left` properties
     */
    gpuAcceleration: undefined
  }
};

/**
 * The `dataObject` is an object containing all the information used by Popper.js.
 * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.
 * @name dataObject
 * @property {Object} data.instance The Popper.js instance
 * @property {String} data.placement Placement applied to popper
 * @property {String} data.originalPlacement Placement originally defined on init
 * @property {Boolean} data.flipped True if popper has been flipped by flip modifier
 * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper
 * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier
 * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)
 * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)
 * @property {Object} data.boundaries Offsets of the popper boundaries
 * @property {Object} data.offsets The measurements of popper, reference and arrow elements
 * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values
 * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values
 * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0
 */

/**
 * Default options provided to Popper.js constructor.<br />
 * These can be overridden using the `options` argument of Popper.js.<br />
 * To override an option, simply pass an object with the same
 * structure of the `options` object, as the 3rd argument. For example:
 * ```
 * new Popper(ref, pop, {
 *   modifiers: {
 *     preventOverflow: { enabled: false }
 *   }
 * })
 * ```
 * @type {Object}
 * @static
 * @memberof Popper
 */
var Defaults = {
  /**
   * Popper's placement.
   * @prop {Popper.placements} placement='bottom'
   */
  placement: 'bottom',

  /**
   * Set this to true if you want popper to position it self in 'fixed' mode
   * @prop {Boolean} positionFixed=false
   */
  positionFixed: false,

  /**
   * Whether events (resize, scroll) are initially enabled.
   * @prop {Boolean} eventsEnabled=true
   */
  eventsEnabled: true,

  /**
   * Set to true if you want to automatically remove the popper when
   * you call the `destroy` method.
   * @prop {Boolean} removeOnDestroy=false
   */
  removeOnDestroy: false,

  /**
   * Callback called when the popper is created.<br />
   * By default, it is set to no-op.<br />
   * Access Popper.js instance with `data.instance`.
   * @prop {onCreate}
   */
  onCreate: function onCreate() {},

  /**
   * Callback called when the popper is updated. This callback is not called
   * on the initialization/creation of the popper, but only on subsequent
   * updates.<br />
   * By default, it is set to no-op.<br />
   * Access Popper.js instance with `data.instance`.
   * @prop {onUpdate}
   */
  onUpdate: function onUpdate() {},

  /**
   * List of modifiers used to modify the offsets before they are applied to the popper.
   * They provide most of the functionalities of Popper.js.
   * @prop {modifiers}
   */
  modifiers: modifiers
};

/**
 * @callback onCreate
 * @param {dataObject} data
 */

/**
 * @callback onUpdate
 * @param {dataObject} data
 */

// Utils
// Methods
var Popper = function () {
  /**
   * Creates a new Popper.js instance.
   * @class Popper
   * @param {HTMLElement|referenceObject} reference - The reference element used to position the popper
   * @param {HTMLElement} popper - The HTML element used as the popper
   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)
   * @return {Object} instance - The generated Popper.js instance
   */
  function Popper(reference, popper) {
    var _this = this;

    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    classCallCheck(this, Popper);

    this.scheduleUpdate = function () {
      return requestAnimationFrame(_this.update);
    };

    // make update() debounced, so that it only runs at most once-per-tick
    this.update = debounce(this.update.bind(this));

    // with {} we create a new object with the options inside it
    this.options = _extends({}, Popper.Defaults, options);

    // init state
    this.state = {
      isDestroyed: false,
      isCreated: false,
      scrollParents: []
    };

    // get reference and popper elements (allow jQuery wrappers)
    this.reference = reference && reference.jquery ? reference[0] : reference;
    this.popper = popper && popper.jquery ? popper[0] : popper;

    // Deep merge modifiers options
    this.options.modifiers = {};
    Object.keys(_extends({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function (name) {
      _this.options.modifiers[name] = _extends({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});
    });

    // Refactoring modifiers' list (Object => Array)
    this.modifiers = Object.keys(this.options.modifiers).map(function (name) {
      return _extends({
        name: name
      }, _this.options.modifiers[name]);
    })
    // sort the modifiers by order
    .sort(function (a, b) {
      return a.order - b.order;
    });

    // modifiers have the ability to execute arbitrary code when Popper.js get inited
    // such code is executed in the same order of its modifier
    // they could add new properties to their options configuration
    // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!
    this.modifiers.forEach(function (modifierOptions) {
      if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {
        modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);
      }
    });

    // fire the first update to position the popper in the right place
    this.update();

    var eventsEnabled = this.options.eventsEnabled;
    if (eventsEnabled) {
      // setup event listeners, they will take care of update the position in specific situations
      this.enableEventListeners();
    }

    this.state.eventsEnabled = eventsEnabled;
  }

  // We can't use class properties because they don't get listed in the
  // class prototype and break stuff like Sinon stubs


  createClass(Popper, [{
    key: 'update',
    value: function update$$1() {
      return update.call(this);
    }
  }, {
    key: 'destroy',
    value: function destroy$$1() {
      return destroy.call(this);
    }
  }, {
    key: 'enableEventListeners',
    value: function enableEventListeners$$1() {
      return enableEventListeners.call(this);
    }
  }, {
    key: 'disableEventListeners',
    value: function disableEventListeners$$1() {
      return disableEventListeners.call(this);
    }

    /**
     * Schedules an update. It will run on the next UI update available.
     * @method scheduleUpdate
     * @memberof Popper
     */


    /**
     * Collection of utilities useful when writing custom modifiers.
     * Starting from version 1.7, this method is available only if you
     * include `popper-utils.js` before `popper.js`.
     *
     * **DEPRECATION**: This way to access PopperUtils is deprecated
     * and will be removed in v2! Use the PopperUtils module directly instead.
     * Due to the high instability of the methods contained in Utils, we can't
     * guarantee them to follow semver. Use them at your own risk!
     * @static
     * @private
     * @type {Object}
     * @deprecated since version 1.8
     * @member Utils
     * @memberof Popper
     */

  }]);
  return Popper;
}();

/**
 * The `referenceObject` is an object that provides an interface compatible with Popper.js
 * and lets you use it as replacement of a real DOM node.<br />
 * You can use this method to position a popper relatively to a set of coordinates
 * in case you don't have a DOM node to use as reference.
 *
 * ```
 * new Popper(referenceObject, popperNode);
 * ```
 *
 * NB: This feature isn't supported in Internet Explorer 10.
 * @name referenceObject
 * @property {Function} data.getBoundingClientRect
 * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.
 * @property {number} data.clientWidth
 * An ES6 getter that will return the width of the virtual reference element.
 * @property {number} data.clientHeight
 * An ES6 getter that will return the height of the virtual reference element.
 */


Popper.Utils = (typeof window !== 'undefined' ? window : global).PopperUtils;
Popper.placements = placements;
Popper.Defaults = Defaults;

return Popper;

})));


}
;Ember.libraries.register('Ember Bootstrap', '2.6.0');
;define("ember-basic-dropdown/components/basic-dropdown", ["exports", "ember-basic-dropdown/templates/components/basic-dropdown", "ember-basic-dropdown/utils/computed-fallback-if-undefined", "ember-basic-dropdown/utils/calculate-position", "require"], function (_exports, _basicDropdown, _computedFallbackIfUndefined, _calculatePosition, _require) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const assign = Object.assign || function EmberAssign(original, ...args) {
    for (let i = 0; i < args.length; i++) {
      let arg = args[i];

      if (!arg) {
        continue;
      }

      let updates = Object.keys(arg);

      for (let i = 0; i < updates.length; i++) {
        let prop = updates[i];
        original[prop] = arg[prop];
      }
    }

    return original;
  };

  const ignoredStyleAttrs = ['top', 'left', 'right', 'width', 'height'];

  var _default = Ember.Component.extend({
    layout: _basicDropdown.default,
    tagName: '',
    renderInPlace: (0, _computedFallbackIfUndefined.default)(false),
    verticalPosition: (0, _computedFallbackIfUndefined.default)('auto'),
    // above | below
    horizontalPosition: (0, _computedFallbackIfUndefined.default)('auto'),
    // auto-right | right | center | left
    rootEventType: (0, _computedFallbackIfUndefined.default)('mousedown'),
    // TODO: Change default event type to "click" in 2.0
    matchTriggerWidth: (0, _computedFallbackIfUndefined.default)(false),
    triggerComponent: (0, _computedFallbackIfUndefined.default)('basic-dropdown/trigger'),
    contentComponent: (0, _computedFallbackIfUndefined.default)('basic-dropdown/content'),
    calculatePosition: (0, _computedFallbackIfUndefined.default)(_calculatePosition.default),
    classNames: ['ember-basic-dropdown'],
    top: null,
    left: null,
    right: null,
    width: null,
    height: null,
    otherStyles: {},

    // eslint-disable-line
    // Lifecycle hooks
    init() {
      if (this.get('renderInPlace') && this.get('tagName') === '') {
        this.set('tagName', 'div');
      }

      this._super(...arguments);

      this.set('publicAPI', {});
      this.set('otherStyles', {});
      let publicAPI = this.updateState({
        uniqueId: Ember.guidFor(this),
        isOpen: this.get('initiallyOpened') || false,
        disabled: this.get('disabled') || false,
        actions: {
          open: this.open.bind(this),
          close: this.close.bind(this),
          toggle: this.toggle.bind(this),
          reposition: this.reposition.bind(this)
        }
      });
      this.dropdownId = this.dropdownId || "ember-basic-dropdown-content-".concat(publicAPI.uniqueId);
      let onInit = this.get('onInit');

      if (onInit) {
        onInit(publicAPI);
      }
    },

    didReceiveAttrs() {
      this._super(...arguments);

      let oldDisabled = !!this._oldDisabled;
      let newDisabled = !!this.get('disabled');
      this._oldDisabled = newDisabled;

      if (newDisabled && !oldDisabled) {
        Ember.run.join(this, this.disable);
      } else if (!newDisabled && oldDisabled) {
        Ember.run.join(this, this.enable);
      }
    },

    willDestroy() {
      this._super(...arguments);

      let registerAPI = this.get('registerAPI');

      if (registerAPI) {
        registerAPI(null);
      }
    },

    // CPs
    destination: Ember.computed({
      get() {
        return this._getDestinationId();
      },

      set(_, v) {
        return v === undefined ? this._getDestinationId() : v;
      }

    }),
    // Actions
    actions: {
      handleFocus(e) {
        let onFocus = this.get('onFocus');

        if (onFocus) {
          onFocus(this.get('publicAPI'), e);
        }
      }

    },

    // Methods
    open(e) {
      if (this.get('isDestroyed')) {
        return;
      }

      let publicAPI = this.get('publicAPI');

      if (publicAPI.disabled || publicAPI.isOpen) {
        return;
      }

      let onOpen = this.get('onOpen');

      if (onOpen && onOpen(publicAPI, e) === false) {
        return;
      }

      this.updateState({
        isOpen: true
      });
    },

    close(e, skipFocus) {
      if (this.get('isDestroyed')) {
        return;
      }

      let publicAPI = this.get('publicAPI');

      if (publicAPI.disabled || !publicAPI.isOpen) {
        return;
      }

      let onClose = this.get('onClose');

      if (onClose && onClose(publicAPI, e) === false) {
        return;
      }

      if (this.get('isDestroyed')) {
        return;
      }

      this.setProperties({
        hPosition: null,
        vPosition: null,
        top: null,
        left: null,
        right: null,
        width: null,
        height: null
      });
      this.previousVerticalPosition = this.previousHorizontalPosition = null;
      this.updateState({
        isOpen: false
      });

      if (skipFocus) {
        return;
      }

      let trigger = document.querySelector("[data-ebd-id=".concat(publicAPI.uniqueId, "-trigger]"));

      if (trigger && trigger.tabIndex > -1) {
        trigger.focus();
      }
    },

    toggle(e) {
      if (this.get('publicAPI.isOpen')) {
        this.close(e);
      } else {
        this.open(e);
      }
    },

    reposition() {
      let publicAPI = this.get('publicAPI');

      if (!publicAPI.isOpen) {
        return;
      }

      let dropdownElement = document.getElementById(this.dropdownId);
      let triggerElement = document.querySelector("[data-ebd-id=".concat(publicAPI.uniqueId, "-trigger]"));

      if (!dropdownElement || !triggerElement) {
        return;
      }

      this.destinationElement = this.destinationElement || document.getElementById(this.get('destination'));
      let options = this.getProperties('horizontalPosition', 'verticalPosition', 'matchTriggerWidth', 'previousHorizontalPosition', 'previousVerticalPosition', 'renderInPlace');
      options.dropdown = this;
      let positionData = this.get('calculatePosition')(triggerElement, dropdownElement, this.destinationElement, options);
      return this.applyReposition(triggerElement, dropdownElement, positionData);
    },

    applyReposition(trigger, dropdown, positions) {
      let changes = {
        hPosition: positions.horizontalPosition,
        vPosition: positions.verticalPosition,
        otherStyles: this.get('otherStyles')
      };

      if (positions.style) {
        if (positions.style.top !== undefined) {
          changes.top = "".concat(positions.style.top, "px");
        } // The component can be aligned from the right or from the left, but not from both.


        if (positions.style.left !== undefined) {
          changes.left = "".concat(positions.style.left, "px");
          changes.right = null; // Since we set the first run manually we may need to unset the `right` property.

          if (positions.style.right !== undefined) {
            positions.style.right = undefined;
          }
        } else if (positions.style.right !== undefined) {
          changes.right = "".concat(positions.style.right, "px");
          changes.left = null;
        }

        if (positions.style.width !== undefined) {
          changes.width = "".concat(positions.style.width, "px");
        }

        if (positions.style.height !== undefined) {
          changes.height = "".concat(positions.style.height, "px");
        }

        Object.keys(positions.style).forEach(attr => {
          if (ignoredStyleAttrs.indexOf(attr) === -1) {
            if (changes[attr] !== positions.style[attr]) {
              changes.otherStyles[attr] = positions.style[attr];
            }
          }
        });

        if (this.get('top') === null) {
          // Bypass Ember on the first reposition only to avoid flickering.
          let cssRules = [];

          for (let prop in positions.style) {
            if (positions.style[prop] !== undefined) {
              if (typeof positions.style[prop] === 'number') {
                cssRules.push("".concat(prop, ": ").concat(positions.style[prop], "px"));
              } else {
                cssRules.push("".concat(prop, ": ").concat(positions.style[prop]));
              }
            }
          }

          dropdown.setAttribute('style', cssRules.join(';'));
        }
      }

      this.setProperties(changes);
      this.previousHorizontalPosition = positions.horizontalPosition;
      this.previousVerticalPosition = positions.verticalPosition;
      return changes;
    },

    disable() {
      let publicAPI = this.get('publicAPI');

      if (publicAPI.isOpen) {
        publicAPI.actions.close();
      }

      this.updateState({
        disabled: true
      });
    },

    enable() {
      this.updateState({
        disabled: false
      });
    },

    updateState(changes) {
      let newState = Ember.set(this, 'publicAPI', assign({}, this.get('publicAPI'), changes));
      let registerAPI = this.get('registerAPI');

      if (registerAPI) {
        registerAPI(newState);
      }

      return newState;
    },

    _getDestinationId() {
      let config = Ember.getOwner(this).resolveRegistration('config:environment');

      if (config.environment === 'test' && typeof FastBoot === 'undefined') {
        if (true
        /* DEBUG */
        ) {
          let id, rootView;

          if (_require.default.has('@ember/test-helpers/dom/get-root-element')) {
            try {
              id = (0, _require.default)('@ember/test-helpers/dom/get-root-element').default().id;
            } catch (ex) {// no op
            }
          }

          if (!id) {
            rootView = document.querySelector('#ember-testing > .ember-view');
            id = rootView ? rootView.id : undefined;
          }

          return id;
        }
      }

      return config['ember-basic-dropdown'] && config['ember-basic-dropdown'].destination || 'ember-basic-dropdown-wormhole';
    }

  });

  _exports.default = _default;
});
;define("ember-basic-dropdown/components/basic-dropdown/content-element", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend({
    attributeBindings: ['style', 'dir']
  });

  _exports.default = _default;
});
;define("ember-basic-dropdown/components/basic-dropdown/content", ["exports", "ember-basic-dropdown/templates/components/basic-dropdown/content", "ember-basic-dropdown/utils/computed-fallback-if-undefined", "ember-basic-dropdown/utils/calculate-position", "ember-basic-dropdown/utils/scroll-helpers"], function (_exports, _content, _computedFallbackIfUndefined, _calculatePosition, _scrollHelpers) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  function closestContent(el) {
    while (el && (!el.classList || !el.classList.contains('ember-basic-dropdown-content'))) {
      el = el.parentElement;
    }

    return el;
  }

  function waitForAnimations(element, callback) {
    window.requestAnimationFrame(function () {
      let computedStyle = window.getComputedStyle(element);

      if (computedStyle.animationName !== 'none' && computedStyle.animationPlayState === 'running') {
        let eventCallback = function () {
          element.removeEventListener('animationend', eventCallback);
          callback();
        };

        element.addEventListener('animationend', eventCallback);
      } else {
        callback();
      }
    });
  }
  /**
   * Evaluates if the given element is in a dropdown or any of its parent dropdowns.
   *
   * @param {HTMLElement} el
   * @param {String} dropdownId
   */


  function dropdownIsValidParent(el, dropdownId) {
    let closestDropdown = closestContent(el);

    if (closestDropdown) {
      let trigger = document.querySelector("[aria-owns=".concat(closestDropdown.attributes.id.value, "]"));
      let parentDropdown = closestContent(trigger);
      return parentDropdown && parentDropdown.attributes.id.value === dropdownId || dropdownIsValidParent(parentDropdown, dropdownId);
    } else {
      return false;
    }
  }

  var _default = Ember.Component.extend({
    layout: _content.default,
    tagName: '',
    isTouchDevice: Boolean(!!window && 'ontouchstart' in window),
    hasMoved: false,
    animationClass: '',
    transitioningInClass: 'ember-basic-dropdown--transitioning-in',
    transitionedInClass: 'ember-basic-dropdown--transitioned-in',
    transitioningOutClass: 'ember-basic-dropdown--transitioning-out',
    // CPs
    _contentTagName: (0, _computedFallbackIfUndefined.default)('div'),
    animationEnabled: Ember.computed(function () {
      let config = Ember.getOwner(this).resolveRegistration('config:environment');
      return config.environment !== 'test';
    }),
    destinationElement: Ember.computed('destination', function () {
      return document.getElementById(this.get('destination'));
    }),
    style: Ember.computed('top', 'left', 'right', 'width', 'height', 'otherStyles', function () {
      let style = '';
      let {
        top,
        left,
        right,
        width,
        height,
        otherStyles
      } = this.getProperties('top', 'left', 'right', 'width', 'height', 'otherStyles');

      if (otherStyles) {
        Object.keys(otherStyles).forEach(attr => {
          style += "".concat(attr, ": ").concat(otherStyles[attr], ";");
        });
      }

      if (top) {
        style += "top: ".concat(top, ";");
      }

      if (left) {
        style += "left: ".concat(left, ";");
      }

      if (right) {
        style += "right: ".concat(right, ";");
      }

      if (width) {
        style += "width: ".concat(width, ";");
      }

      if (height) {
        style += "height: ".concat(height);
      }

      if (style.length > 0) {
        return Ember.String.htmlSafe(style);
      }
    }),

    // Lifecycle hooks
    init() {
      this._super(...arguments);

      this.handleRootMouseDown = this.handleRootMouseDown.bind(this);
      this.touchStartHandler = this.touchStartHandler.bind(this);
      this.touchMoveHandler = this.touchMoveHandler.bind(this);
      this.wheelHandler = this.wheelHandler.bind(this);
      let dropdown = this.get('dropdown');
      this.scrollableAncestors = [];
      this.dropdownId = "ember-basic-dropdown-content-".concat(dropdown.uniqueId);

      if (this.get('animationEnabled')) {
        this.set('animationClass', this.get('transitioningInClass'));
      }

      this.runloopAwareReposition = function () {
        Ember.run.join(dropdown.actions.reposition);
      };
    },

    willDestroyElement() {
      this._super(...arguments);

      this._teardown();
    },

    didReceiveAttrs() {
      this._super(...arguments);

      let oldDropdown = this.get('oldDropdown') || {};
      let dropdown = this.get('dropdown'); // The following condition checks whether we need to open the dropdown - either because it was
      // closed and is now open or because it was open and then it was closed and opened pretty much at
      // the same time, indicated by `top`, `left` and `right` being null.

      let {
        top,
        left,
        right,
        renderInPlace
      } = this.getProperties('top', 'left', 'right', 'renderInPlace');

      if ((!oldDropdown.isOpen || top === null && left === null && right === null && renderInPlace === false) && dropdown.isOpen) {
        Ember.run.scheduleOnce('afterRender', this, this.open);
      } else if (oldDropdown.isOpen && !dropdown.isOpen) {
        this.close();
      }

      this.set('oldDropdown', dropdown);
    },

    // Methods
    open() {
      let dropdown = this.get('dropdown');
      this.triggerElement = this.triggerElement || document.querySelector("[data-ebd-id=".concat(dropdown.uniqueId, "-trigger]"));
      this.dropdownElement = document.getElementById(this.dropdownId);
      const rootEventType = this.get('rootEventType');
      document.addEventListener(rootEventType, this.handleRootMouseDown, true);

      if (this.get('isTouchDevice')) {
        document.addEventListener('touchstart', this.touchStartHandler, true);
        document.addEventListener('touchend', this.handleRootMouseDown, true);
      }

      let onFocusIn = this.get('onFocusIn');

      if (onFocusIn) {
        this.dropdownElement.addEventListener('focusin', e => onFocusIn(dropdown, e));
      }

      let onFocusOut = this.get('onFocusOut');

      if (onFocusOut) {
        this.dropdownElement.addEventListener('focusout', e => onFocusOut(dropdown, e));
      }

      let onMouseEnter = this.get('onMouseEnter');

      if (onMouseEnter) {
        this.dropdownElement.addEventListener('mouseenter', e => onMouseEnter(dropdown, e));
      }

      let onMouseLeave = this.get('onMouseLeave');

      if (onMouseLeave) {
        this.dropdownElement.addEventListener('mouseleave', e => onMouseLeave(dropdown, e));
      }

      let onKeyDown = this.get('onKeyDown');

      if (onKeyDown) {
        this.dropdownElement.addEventListener('keydown', e => onKeyDown(dropdown, e));
      }

      dropdown.actions.reposition(); // Always wire up events, even if rendered in place.

      this.scrollableAncestors = this.getScrollableAncestors();
      this.addGlobalEvents();
      this.addScrollHandling();
      this.startObservingDomMutations();

      if (this.get('animationEnabled')) {
        Ember.run.scheduleOnce('afterRender', this, this.animateIn);
      }
    },

    close() {
      this._teardown();

      if (this.get('animationEnabled')) {
        this.animateOut(this.dropdownElement);
      }

      this.dropdownElement = null;
    },

    // Methods
    handleRootMouseDown(e) {
      if (this.hasMoved || this.dropdownElement.contains(e.target) || this.triggerElement && this.triggerElement.contains(e.target)) {
        this.hasMoved = false;
        return;
      }

      if (dropdownIsValidParent(e.target, this.dropdownId)) {
        this.hasMoved = false;
        return;
      }

      this.get('dropdown').actions.close(e, true);
    },

    addGlobalEvents() {
      window.addEventListener('resize', this.runloopAwareReposition);
      window.addEventListener('orientationchange', this.runloopAwareReposition);
    },

    startObservingDomMutations() {
      this.mutationObserver = new MutationObserver(mutations => {
        if (mutations[0].addedNodes.length || mutations[0].removedNodes.length) {
          this.runloopAwareReposition();
        }
      });
      this.mutationObserver.observe(this.dropdownElement, {
        childList: true,
        subtree: true
      });
    },

    removeGlobalEvents() {
      window.removeEventListener('resize', this.runloopAwareReposition);
      window.removeEventListener('orientationchange', this.runloopAwareReposition);
    },

    stopObservingDomMutations() {
      if (this.mutationObserver) {
        this.mutationObserver.disconnect();
        this.mutationObserver = null;
      }
    },

    animateIn() {
      waitForAnimations(this.dropdownElement, () => {
        this.set('animationClass', this.get('transitionedInClass'));
      });
    },

    animateOut(dropdownElement) {
      let parentElement = this.get('renderInPlace') ? dropdownElement.parentElement.parentElement : dropdownElement.parentElement;
      let clone = dropdownElement.cloneNode(true);
      clone.id = "".concat(clone.id, "--clone");
      let transitioningInClass = this.get('transitioningInClass');
      clone.classList.remove(...transitioningInClass.split(' '));
      clone.classList.add(...this.get('transitioningOutClass').split(' '));
      parentElement.appendChild(clone);
      this.set('animationClass', transitioningInClass);
      waitForAnimations(clone, function () {
        parentElement.removeChild(clone);
      });
    },

    touchStartHandler() {
      document.addEventListener('touchmove', this.touchMoveHandler, true);
    },

    touchMoveHandler() {
      this.hasMoved = true;
      document.removeEventListener('touchmove', this.touchMoveHandler, true);
    },

    wheelHandler(event) {
      const element = this.dropdownElement;

      if (element.contains(event.target) || element === event.target) {
        // Discover the amount of scrollable canvas that is within the dropdown.
        const availableScroll = (0, _scrollHelpers.getAvailableScroll)(event.target, element); // Calculate what the event's desired change to that scrollable canvas is.

        let {
          deltaX,
          deltaY
        } = (0, _scrollHelpers.getScrollDeltas)(event); // If the consequence of the wheel action would result in scrolling beyond
        // the scrollable canvas of the dropdown, call preventDefault() and clamp
        // the value of the delta to the available scroll size.

        if (deltaX < availableScroll.deltaXNegative) {
          deltaX = availableScroll.deltaXNegative;
          event.preventDefault();
        } else if (deltaX > availableScroll.deltaXPositive) {
          deltaX = availableScroll.deltaXPositive;
          event.preventDefault();
        } else if (deltaY < availableScroll.deltaYNegative) {
          deltaY = availableScroll.deltaYNegative;
          event.preventDefault();
        } else if (deltaY > availableScroll.deltaYPositive) {
          deltaY = availableScroll.deltaYPositive;
          event.preventDefault();
        } // Add back in the default behavior for the two good states that the above
        // `preventDefault()` code will break.
        // - Two-axis scrolling on a one-axis scroll container
        // - The last relevant wheel event if the scroll is overshooting
        // Also, don't attempt to do this if both of `deltaX` or `deltaY` are 0.


        if (event.defaultPrevented && (deltaX || deltaY)) {
          (0, _scrollHelpers.distributeScroll)(deltaX, deltaY, event.target, element);
        }
      } else {
        // Scrolling outside of the dropdown is prohibited.
        event.preventDefault();
      }
    },

    // All ancestors with scroll (except the BODY, which is treated differently)
    getScrollableAncestors() {
      let scrollableAncestors = [];

      if (this.triggerElement) {
        let nextScrollable = (0, _calculatePosition.getScrollParent)(this.triggerElement.parentNode);

        while (nextScrollable && nextScrollable.tagName.toUpperCase() !== 'BODY' && nextScrollable.tagName.toUpperCase() !== 'HTML') {
          scrollableAncestors.push(nextScrollable);
          nextScrollable = (0, _calculatePosition.getScrollParent)(nextScrollable.parentNode);
        }
      }

      return scrollableAncestors;
    },

    addScrollHandling() {
      if (this.get('preventScroll') === true) {
        this.addPreventScrollEvent();
        this.removeScrollHandling = this.removePreventScrollEvent;
      } else {
        this.addScrollEvents();
        this.removeScrollHandling = this.removeScrollEvents;
      }
    },

    // Assigned at runtime to ensure that changes to the `preventScroll` property
    // don't result in not cleaning up after ourselves.
    removeScrollHandling() {},

    // These two functions wire up scroll handling if `preventScroll` is true.
    // These prevent all scrolling that isn't inside of the dropdown.
    addPreventScrollEvent() {
      document.addEventListener('wheel', this.wheelHandler, {
        capture: true,
        passive: false
      });
    },

    removePreventScrollEvent() {
      document.removeEventListener('wheel', this.wheelHandler, {
        capture: true,
        passive: false
      });
    },

    // These two functions wire up scroll handling if `preventScroll` is false.
    // These trigger reposition of the dropdown.
    addScrollEvents() {
      window.addEventListener('scroll', this.runloopAwareReposition);
      this.scrollableAncestors.forEach(el => {
        el.addEventListener('scroll', this.runloopAwareReposition);
      });
    },

    removeScrollEvents() {
      window.removeEventListener('scroll', this.runloopAwareReposition);
      this.scrollableAncestors.forEach(el => {
        el.removeEventListener('scroll', this.runloopAwareReposition);
      });
    },

    _teardown() {
      this.removeGlobalEvents();
      this.removeScrollHandling();
      this.scrollableAncestors = [];
      this.stopObservingDomMutations();
      const rootEventType = this.get('rootEventType');
      document.removeEventListener(rootEventType, this.handleRootMouseDown, true);

      if (this.get('isTouchDevice')) {
        document.removeEventListener('touchstart', this.touchStartHandler, true);
        document.removeEventListener('touchend', this.handleRootMouseDown, true);
      }
    }

  });

  _exports.default = _default;
});
;define("ember-basic-dropdown/components/basic-dropdown/trigger", ["exports", "ember-basic-dropdown/templates/components/basic-dropdown/trigger", "ember-basic-dropdown/utils/computed-fallback-if-undefined"], function (_exports, _trigger, _computedFallbackIfUndefined) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const isTouchDevice = !!window && 'ontouchstart' in window;

  function trueStringIfPresent(path) {
    return Ember.computed(path, function () {
      if (this.get(path)) {
        return 'true';
      } else {
        return null;
      }
    });
  }

  var _default = Ember.Component.extend({
    layout: _trigger.default,
    isTouchDevice,
    classNames: ['ember-basic-dropdown-trigger'],
    role: (0, _computedFallbackIfUndefined.default)('button'),
    // Need this intermediary property, because in older ember versions the passed in attribute would
    // be bound and CP calculations wouldn't be taken into consideration
    ariaRole: Ember.computed.readOnly('role'),
    tabindex: 0,
    eventType: 'mousedown',
    stopPropagation: false,
    classNameBindings: ['inPlaceClass', 'hPositionClass', 'vPositionClass'],
    attributeBindings: ['ariaRole:role', 'style', 'type', 'uniqueId:data-ebd-id', 'tabIndex:tabindex', 'dropdownId:aria-owns', 'ariaLabel:aria-label', 'ariaLabelledBy:aria-labelledby', 'ariaDescribedBy:aria-describedby', 'aria-autocomplete', 'aria-activedescendant', 'aria-disabled', 'aria-expanded', 'aria-haspopup', 'aria-invalid', 'aria-pressed', 'aria-required', 'title'],

    // Lifecycle hooks
    init() {
      this._super(...arguments);

      let dropdown = this.get('dropdown');
      this.uniqueId = "".concat(dropdown.uniqueId, "-trigger");
      this.dropdownId = this.dropdownId || "ember-basic-dropdown-content-".concat(dropdown.uniqueId);
      this._touchMoveHandler = this._touchMoveHandler.bind(this);

      this._mouseupHandler = () => {
        document.removeEventListener('mouseup', this._mouseupHandler, true);
        document.body.classList.remove('ember-basic-dropdown-text-select-disabled');
      };
    },

    didInsertElement() {
      this._super(...arguments);

      this.addMandatoryHandlers();
      this.addOptionalHandlers();
    },

    willDestroyElement() {
      this._super(...arguments);

      document.removeEventListener('touchmove', this._touchMoveHandler);
      document.removeEventListener('mouseup', this._mouseupHandler, true);
    },

    // CPs
    'aria-disabled': trueStringIfPresent('dropdown.disabled'),
    'aria-expanded': trueStringIfPresent('dropdown.isOpen'),
    'aria-invalid': trueStringIfPresent('ariaInvalid'),
    'aria-pressed': trueStringIfPresent('ariaPressed'),
    'aria-required': trueStringIfPresent('ariaRequired'),
    tabIndex: Ember.computed('dropdown.disabled', 'tabindex', function () {
      let tabindex = this.get('tabindex');

      if (tabindex === false || this.get('dropdown.disabled')) {
        return undefined;
      } else {
        return tabindex || 0;
      }
    }).readOnly(),
    inPlaceClass: Ember.computed('renderInPlace', function () {
      if (this.get('renderInPlace')) {
        return 'ember-basic-dropdown-trigger--in-place';
      }
    }),
    hPositionClass: Ember.computed('hPosition', function () {
      let hPosition = this.get('hPosition');

      if (hPosition) {
        return "ember-basic-dropdown-trigger--".concat(hPosition);
      }
    }),
    vPositionClass: Ember.computed('vPosition', function () {
      let vPosition = this.get('vPosition');

      if (vPosition) {
        return "ember-basic-dropdown-trigger--".concat(vPosition);
      }
    }),
    // Actions
    actions: {
      handleMouseDown(e) {
        let dropdown = this.get('dropdown');

        if (dropdown.disabled) {
          return;
        } // execute user-supplied onMouseDown function before default toggle action;
        // short-circuit default behavior if user-supplied function returns `false`


        let onMouseDown = this.get('onMouseDown');

        if (onMouseDown && onMouseDown(dropdown, e) === false) {
          return;
        }

        if (this.get('eventType') === 'mousedown') {
          if (e.button !== 0) {
            return;
          }

          if (this.get('stopPropagation')) {
            e.stopPropagation();
          }

          this.stopTextSelectionUntilMouseup();

          if (this.toggleIsBeingHandledByTouchEvents) {
            // Some devises have both touchscreen & mouse, and they are not mutually exclusive
            // In those cases the touchdown handler is fired first, and it sets a flag to
            // short-circuit the mouseup so the component is not opened and immediately closed.
            this.toggleIsBeingHandledByTouchEvents = false;
            return;
          }

          dropdown.actions.toggle(e);
        }
      },

      handleClick(e) {
        let dropdown = this.get('dropdown');

        if (!dropdown || dropdown.disabled) {
          return;
        }

        if (this.get('eventType') === 'click') {
          if (this.get('stopPropagation')) {
            e.stopPropagation();
          }

          if (this.toggleIsBeingHandledByTouchEvents) {
            // Some devises have both touchscreen & mouse, and they are not mutually exclusive
            // In those cases the touchdown handler is fired first, and it sets a flag to
            // short-circuit the mouseup so the component is not opened and immediately closed.
            this.toggleIsBeingHandledByTouchEvents = false;
            return;
          }

          dropdown.actions.toggle(e);
        }
      },

      handleTouchEnd(e) {
        this.toggleIsBeingHandledByTouchEvents = true;
        let dropdown = this.get('dropdown');

        if (e && e.defaultPrevented || dropdown.disabled) {
          return;
        }

        if (!this.hasMoved) {
          // execute user-supplied onTouchEnd function before default toggle action;
          // short-circuit default behavior if user-supplied function returns `false`
          let onTouchEnd = this.get('onTouchEnd');

          if (onTouchEnd && onTouchEnd(dropdown, e) === false) {
            return;
          }

          dropdown.actions.toggle(e);
        }

        this.hasMoved = false;
        document.removeEventListener('touchmove', this._touchMoveHandler); // This next three lines are stolen from hammertime. This prevents the default
        // behaviour of the touchend, but synthetically trigger a focus and a (delayed) click
        // to simulate natural behaviour.

        e.target.focus();
        setTimeout(function () {
          if (!e.target) {
            return;
          }

          let event;

          try {
            event = document.createEvent('MouseEvents');
            event.initMouseEvent('click', true, true, window);
          } catch (e) {
            event = new Event('click');
          } finally {
            e.target.dispatchEvent(event);
          }
        }, 0);
        e.preventDefault();
      },

      handleKeyDown(e) {
        let dropdown = this.get('dropdown');

        if (dropdown.disabled) {
          return;
        }

        let onKeyDown = this.get('onKeyDown');

        if (onKeyDown && onKeyDown(dropdown, e) === false) {
          return;
        }

        if (e.keyCode === 13) {
          // Enter
          dropdown.actions.toggle(e);
        } else if (e.keyCode === 32) {
          // Space
          e.preventDefault(); // prevents the space to trigger a scroll page-next

          dropdown.actions.toggle(e);
        } else if (e.keyCode === 27) {
          dropdown.actions.close(e);
        }
      }

    },

    // Methods
    _touchMoveHandler() {
      this.hasMoved = true;
      document.removeEventListener('touchmove', this._touchMoveHandler);
    },

    stopTextSelectionUntilMouseup() {
      document.addEventListener('mouseup', this._mouseupHandler, true);
      document.body.classList.add('ember-basic-dropdown-text-select-disabled');
    },

    addMandatoryHandlers() {
      if (this.get('isTouchDevice')) {
        // If the component opens on click there is no need of any of this, as the device will
        // take care tell apart faux clicks from scrolls.
        this.element.addEventListener('touchstart', () => {
          document.addEventListener('touchmove', this._touchMoveHandler);
        });
        this.element.addEventListener('touchend', e => this.send('handleTouchEnd', e));
      }

      this.element.addEventListener('mousedown', e => this.send('handleMouseDown', e));
      this.element.addEventListener('click', e => {
        if (!this.get('isDestroyed')) {
          this.send('handleClick', e);
        }
      });
      this.element.addEventListener('keydown', e => this.send('handleKeyDown', e));
    },

    addOptionalHandlers() {
      let dropdown = this.get('dropdown');
      let onMouseEnter = this.get('onMouseEnter');

      if (onMouseEnter) {
        this.element.addEventListener('mouseenter', e => onMouseEnter(dropdown, e));
      }

      let onMouseLeave = this.get('onMouseLeave');

      if (onMouseLeave) {
        this.element.addEventListener('mouseleave', e => onMouseLeave(dropdown, e));
      }

      let onFocus = this.get('onFocus');

      if (onFocus) {
        this.element.addEventListener('focus', e => onFocus(dropdown, e));
      }

      let onBlur = this.get('onBlur');

      if (onBlur) {
        this.element.addEventListener('blur', e => onBlur(dropdown, e));
      }

      let onFocusIn = this.get('onFocusIn');

      if (onFocusIn) {
        this.element.addEventListener('focusin', e => onFocusIn(dropdown, e));
      }

      let onFocusOut = this.get('onFocusOut');

      if (onFocusOut) {
        this.element.addEventListener('focusout', e => onFocusOut(dropdown, e));
      }

      let onKeyUp = this.get('onKeyUp');

      if (onKeyUp) {
        this.element.addEventListener('keyup', e => onKeyUp(dropdown, e));
      }
    }

  });

  _exports.default = _default;
});
;define("ember-basic-dropdown/templates/components/basic-dropdown", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "H4xcgj2l",
    "block": "{\"symbols\":[\"&default\"],\"statements\":[[14,1,[[27,\"hash\",null,[[\"uniqueId\",\"isOpen\",\"disabled\",\"actions\",\"trigger\",\"content\"],[[23,[\"publicAPI\",\"uniqueId\"]],[23,[\"publicAPI\",\"isOpen\"]],[23,[\"publicAPI\",\"disabled\"]],[23,[\"publicAPI\",\"actions\"]],[27,\"component\",[[23,[\"triggerComponent\"]]],[[\"dropdown\",\"hPosition\",\"onFocus\",\"renderInPlace\",\"vPosition\"],[[27,\"readonly\",[[23,[\"publicAPI\"]]],null],[27,\"readonly\",[[23,[\"hPosition\"]]],null],[27,\"action\",[[22,0,[]],\"handleFocus\"],null],[27,\"readonly\",[[23,[\"renderInPlace\"]]],null],[27,\"readonly\",[[23,[\"vPosition\"]]],null]]]],[27,\"component\",[[23,[\"contentComponent\"]]],[[\"dropdown\",\"hPosition\",\"renderInPlace\",\"preventScroll\",\"rootEventType\",\"vPosition\",\"destination\",\"top\",\"left\",\"right\",\"width\",\"height\",\"otherStyles\"],[[27,\"readonly\",[[23,[\"publicAPI\"]]],null],[27,\"readonly\",[[23,[\"hPosition\"]]],null],[27,\"readonly\",[[23,[\"renderInPlace\"]]],null],[27,\"readonly\",[[23,[\"preventScroll\"]]],null],[27,\"readonly\",[[23,[\"rootEventType\"]]],null],[27,\"readonly\",[[23,[\"vPosition\"]]],null],[27,\"readonly\",[[23,[\"destination\"]]],null],[27,\"readonly\",[[23,[\"top\"]]],null],[27,\"readonly\",[[23,[\"left\"]]],null],[27,\"readonly\",[[23,[\"right\"]]],null],[27,\"readonly\",[[23,[\"width\"]]],null],[27,\"readonly\",[[23,[\"height\"]]],null],[27,\"readonly\",[[23,[\"otherStyles\"]]],null]]]]]]]]],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ember-basic-dropdown/templates/components/basic-dropdown.hbs"
    }
  });

  _exports.default = _default;
});
;define("ember-basic-dropdown/templates/components/basic-dropdown/content", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "+TFzvVCf",
    "block": "{\"symbols\":[\"&default\"],\"statements\":[[4,\"if\",[[23,[\"dropdown\",\"isOpen\"]]],null,{\"statements\":[[0,\"  \"],[7,\"div\"],[11,\"class\",\"ember-basic-dropdown-content-wormhole-origin\"],[9],[0,\"\\n\"],[4,\"if\",[[23,[\"renderInPlace\"]]],null,{\"statements\":[[4,\"if\",[[23,[\"overlay\"]]],null,{\"statements\":[[0,\"        \"],[7,\"div\"],[11,\"class\",\"ember-basic-dropdown-overlay\"],[9],[10],[0,\"\\n\"]],\"parameters\":[]},null],[4,\"basic-dropdown/content-element\",null,[[\"tagName\",\"id\",\"class\",\"style\",\"dir\"],[[23,[\"_contentTagName\"]],[23,[\"dropdownId\"]],[27,\"concat\",[\"ember-basic-dropdown-content \",[23,[\"class\"]],\" \",[23,[\"defaultClass\"]],\" \",[27,\"if\",[[23,[\"renderInPlace\"]],\"ember-basic-dropdown-content--in-place \"],null],[27,\"if\",[[23,[\"hPosition\"]],[27,\"concat\",[\"ember-basic-dropdown-content--\",[23,[\"hPosition\"]]],null]],null],\" \",[27,\"if\",[[23,[\"vPosition\"]],[27,\"concat\",[\"ember-basic-dropdown-content--\",[23,[\"vPosition\"]]],null]],null],\" \",[23,[\"animationClass\"]]],null],[23,[\"style\"]],[23,[\"dir\"]]]],{\"statements\":[[0,\"        \"],[14,1],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},{\"statements\":[[4,\"in-element\",[[23,[\"destinationElement\"]]],[[\"guid\",\"nextSibling\"],[\"%cursor:0%\",null]],{\"statements\":[[4,\"if\",[[23,[\"overlay\"]]],null,{\"statements\":[[0,\"        \"],[7,\"div\"],[11,\"class\",\"ember-basic-dropdown-overlay\"],[9],[10],[0,\"\\n\"]],\"parameters\":[]},null],[4,\"basic-dropdown/content-element\",null,[[\"tagName\",\"id\",\"class\",\"style\",\"dir\"],[[23,[\"_contentTagName\"]],[23,[\"dropdownId\"]],[27,\"concat\",[\"ember-basic-dropdown-content \",[23,[\"class\"]],\" \",[23,[\"defaultClass\"]],\" \",[27,\"if\",[[23,[\"renderInPlace\"]],\"ember-basic-dropdown-content--in-place \"],null],[27,\"if\",[[23,[\"hPosition\"]],[27,\"concat\",[\"ember-basic-dropdown-content--\",[23,[\"hPosition\"]]],null]],null],\" \",[27,\"if\",[[23,[\"vPosition\"]],[27,\"concat\",[\"ember-basic-dropdown-content--\",[23,[\"vPosition\"]]],null]],null],\" \",[23,[\"animationClass\"]]],null],[23,[\"style\"]],[23,[\"dir\"]]]],{\"statements\":[[0,\"        \"],[14,1],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},null]],\"parameters\":[]}],[0,\"  \"],[10],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"  \"],[7,\"div\"],[12,\"id\",[21,\"dropdownId\"]],[11,\"class\",\"ember-basic-dropdown-content-placeholder\"],[11,\"style\",\"display: none;\"],[9],[10],[0,\"\\n\"]],\"parameters\":[]}]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ember-basic-dropdown/templates/components/basic-dropdown/content.hbs"
    }
  });

  _exports.default = _default;
});
;define("ember-basic-dropdown/templates/components/basic-dropdown/trigger", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "Gyk02zzo",
    "block": "{\"symbols\":[\"&default\"],\"statements\":[[14,1]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ember-basic-dropdown/templates/components/basic-dropdown/trigger.hbs"
    }
  });

  _exports.default = _default;
});
;define("ember-basic-dropdown/utils/calculate-position", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _default;
  _exports.calculateWormholedPosition = calculateWormholedPosition;
  _exports.calculateInPlacePosition = calculateInPlacePosition;
  _exports.getScrollParent = getScrollParent;

  /**
    Function used to calculate the position of the content of the dropdown.
    @public
    @method calculatePosition
    @param {DomElement} trigger The trigger of the dropdown
    @param {DomElement} content The content of the dropdown
    @param {DomElement} destination The element in which the content is going to be placed.
    @param {Object} options The directives that define how the position is calculated
      - {String} horizontalPosition How the users want the dropdown to be positioned horizontally. Values: right | center | left
      - {String} verticalPosition How the users want the dropdown to be positioned vertically. Values: above | below
      - {Boolean} matchTriggerWidth If the user wants the width of the dropdown to match the width of the trigger
      - {String} previousHorizontalPosition How the dropdown was positioned for the last time. Same values than horizontalPosition, but can be null the first time.
      - {String} previousVerticalPosition How the dropdown was positioned for the last time. Same values than verticalPosition, but can be null the first time.
      - {Boolean} renderInPlace Boolean flat that is truthy if the component is rendered in place.
    @return {Object} How the component is going to be positioned.
      - {String} horizontalPosition The new horizontal position.
      - {String} verticalPosition The new vertical position.
      - {Object} CSS properties to be set on the dropdown. It supports `top`, `left`, `right` and `width`.
  */
  function _default(_, _2, _destination, {
    renderInPlace
  }) {
    if (renderInPlace) {
      return calculateInPlacePosition(...arguments);
    } else {
      return calculateWormholedPosition(...arguments);
    }
  }

  function calculateWormholedPosition(trigger, content, destination, {
    horizontalPosition,
    verticalPosition,
    matchTriggerWidth,
    previousHorizontalPosition,
    previousVerticalPosition
  }) {
    // Collect information about all the involved DOM elements
    let scroll = {
      left: window.pageXOffset,
      top: window.pageYOffset
    };
    let {
      left: triggerLeft,
      top: triggerTop,
      width: triggerWidth,
      height: triggerHeight
    } = trigger.getBoundingClientRect();
    let {
      height: dropdownHeight,
      width: dropdownWidth
    } = content.getBoundingClientRect();
    let viewportWidth = document.body.clientWidth || window.innerWidth;
    let style = {}; // Apply containers' offset

    let anchorElement = destination.parentNode;
    let anchorPosition = window.getComputedStyle(anchorElement).position;

    while (anchorPosition !== 'relative' && anchorPosition !== 'absolute' && anchorElement.tagName.toUpperCase() !== 'BODY') {
      anchorElement = anchorElement.parentNode;
      anchorPosition = window.getComputedStyle(anchorElement).position;
    }

    if (anchorPosition === 'relative' || anchorPosition === 'absolute') {
      let rect = anchorElement.getBoundingClientRect();
      triggerLeft = triggerLeft - rect.left;
      triggerTop = triggerTop - rect.top;
      let {
        offsetParent
      } = anchorElement;

      if (offsetParent) {
        triggerLeft -= anchorElement.offsetParent.scrollLeft;
        triggerTop -= anchorElement.offsetParent.scrollTop;
      }
    } // Calculate drop down width


    dropdownWidth = matchTriggerWidth ? triggerWidth : dropdownWidth;

    if (matchTriggerWidth) {
      style.width = dropdownWidth;
    } // Calculate horizontal position


    let triggerLeftWithScroll = triggerLeft + scroll.left;

    if (horizontalPosition === 'auto' || horizontalPosition === 'auto-left') {
      // Calculate the number of visible horizontal pixels if we were to place the
      // dropdown on the left and right
      let leftVisible = Math.min(viewportWidth, triggerLeft + dropdownWidth) - Math.max(0, triggerLeft);
      let rightVisible = Math.min(viewportWidth, triggerLeft + triggerWidth) - Math.max(0, triggerLeft + triggerWidth - dropdownWidth);

      if (dropdownWidth > leftVisible && rightVisible > leftVisible) {
        // If the drop down won't fit left-aligned, and there is more space on the
        // right than on the left, then force right-aligned
        horizontalPosition = 'right';
      } else if (dropdownWidth > rightVisible && leftVisible > rightVisible) {
        // If the drop down won't fit right-aligned, and there is more space on
        // the left than on the right, then force left-aligned
        horizontalPosition = 'left';
      } else {
        // Keep same position as previous
        horizontalPosition = previousHorizontalPosition || 'left';
      }
    } else if (horizontalPosition === 'auto-right') {
      // Calculate the number of visible horizontal pixels if we were to place the
      // dropdown on the left and right
      let leftVisible = Math.min(viewportWidth, triggerLeft + dropdownWidth) - Math.max(0, triggerLeft);
      let rightVisible = Math.min(viewportWidth, triggerLeft + triggerWidth) - Math.max(0, triggerLeft + triggerWidth - dropdownWidth);

      if (dropdownWidth > rightVisible && leftVisible > rightVisible) {
        // If the drop down won't fit right-aligned, and there is more space on the
        // left than on the right, then force left-aligned
        horizontalPosition = 'left';
      } else if (dropdownWidth > leftVisible && rightVisible > leftVisible) {
        // If the drop down won't fit left-aligned, and there is more space on
        // the right than on the left, then force right-aligned
        horizontalPosition = 'right';
      } else {
        // Keep same position as previous
        horizontalPosition = previousHorizontalPosition || 'right';
      }
    }

    if (horizontalPosition === 'right') {
      style.right = viewportWidth - (triggerLeftWithScroll + triggerWidth);
    } else if (horizontalPosition === 'center') {
      style.left = triggerLeftWithScroll + (triggerWidth - dropdownWidth) / 2;
    } else {
      style.left = triggerLeftWithScroll;
    } // Calculate vertical position


    let triggerTopWithScroll = triggerTop;
    /**
     * Fixes bug where the dropdown always stays on the same position on the screen when
     * the <body> is relatively positioned
     */

    let isBodyPositionRelative = window.getComputedStyle(document.body).getPropertyValue('position') === 'relative';

    if (!isBodyPositionRelative) {
      triggerTopWithScroll += scroll.top;
    }

    if (verticalPosition === 'above') {
      style.top = triggerTopWithScroll - dropdownHeight;
    } else if (verticalPosition === 'below') {
      style.top = triggerTopWithScroll + triggerHeight;
    } else {
      let viewportBottom = scroll.top + window.innerHeight;
      let enoughRoomBelow = triggerTopWithScroll + triggerHeight + dropdownHeight < viewportBottom;
      let enoughRoomAbove = triggerTop > dropdownHeight;

      if (previousVerticalPosition === 'below' && !enoughRoomBelow && enoughRoomAbove) {
        verticalPosition = 'above';
      } else if (previousVerticalPosition === 'above' && !enoughRoomAbove && enoughRoomBelow) {
        verticalPosition = 'below';
      } else if (!previousVerticalPosition) {
        verticalPosition = enoughRoomBelow ? 'below' : 'above';
      } else {
        verticalPosition = previousVerticalPosition;
      }

      style.top = triggerTopWithScroll + (verticalPosition === 'below' ? triggerHeight : -dropdownHeight);
    }

    return {
      horizontalPosition,
      verticalPosition,
      style
    };
  }

  function calculateInPlacePosition(trigger, content, destination, {
    horizontalPosition,
    verticalPosition
    /*, matchTriggerWidth, previousHorizontalPosition, previousVerticalPosition */

  }) {
    let dropdownRect;
    let positionData = {};

    if (horizontalPosition === 'auto') {
      let triggerRect = trigger.getBoundingClientRect();
      dropdownRect = content.getBoundingClientRect();
      let viewportRight = window.pageXOffset + window.innerWidth;
      positionData.horizontalPosition = triggerRect.left + dropdownRect.width > viewportRight ? 'right' : 'left';
    } else if (horizontalPosition === 'center') {
      let {
        width: triggerWidth
      } = trigger.getBoundingClientRect();
      let {
        width: dropdownWidth
      } = content.getBoundingClientRect();
      positionData.style = {
        left: (triggerWidth - dropdownWidth) / 2
      };
    } else if (horizontalPosition === 'auto-right') {
      let triggerRect = trigger.getBoundingClientRect();
      let dropdownRect = content.getBoundingClientRect();
      positionData.horizontalPosition = triggerRect.right > dropdownRect.width ? 'right' : 'left';
    } else if (horizontalPosition === 'right') {
      positionData.horizontalPosition = 'right';
    }

    if (verticalPosition === 'above') {
      positionData.verticalPosition = verticalPosition;
      dropdownRect = dropdownRect || content.getBoundingClientRect();
      positionData.style = {
        top: -dropdownRect.height
      };
    } else {
      positionData.verticalPosition = 'below';
    }

    return positionData;
  }

  function getScrollParent(element) {
    let style = window.getComputedStyle(element);
    let excludeStaticParent = style.position === "absolute";
    let overflowRegex = /(auto|scroll)/;
    if (style.position === "fixed") return document.body;

    for (let parent = element; parent = parent.parentElement;) {
      style = window.getComputedStyle(parent);

      if (excludeStaticParent && style.position === "static") {
        continue;
      }

      if (overflowRegex.test(style.overflow + style.overflowY + style.overflowX)) {
        return parent;
      }
    }

    return document.body;
  }
});
;define("ember-basic-dropdown/utils/computed-fallback-if-undefined", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = computedFallbackIfUndefined;

  function computedFallbackIfUndefined(fallback) {
    return Ember.computed({
      get() {
        return fallback;
      },

      set(_, v) {
        return v === undefined ? fallback : v;
      }

    });
  }
});
;define("ember-basic-dropdown/utils/scroll-helpers", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.getScrollDeltas = getScrollDeltas;
  _exports.getScrollLineHeight = getScrollLineHeight;
  _exports.getAvailableScroll = getAvailableScroll;
  _exports.distributeScroll = distributeScroll;
  _exports.LINES_PER_PAGE = _exports.DOM_DELTA_PAGE = _exports.DOM_DELTA_LINE = _exports.DOM_DELTA_PIXEL = void 0;

  /**
   * Mode that expresses the deltas in pixels.
   *
   * @property DOM_DELTA_PIXEL
   */
  const DOM_DELTA_PIXEL = 0;
  /**
   * Mode that expresses the deltas in lines.
   *
   * This only happens in Firefox for Windows.
   *
   * Reference: https://stackoverflow.com/a/37474225
   *
   * @property DOM_DELTA_LINE
   */

  _exports.DOM_DELTA_PIXEL = DOM_DELTA_PIXEL;
  const DOM_DELTA_LINE = 1;
  /**
   * Mode that expresses the deltas in pages.
   *
   * This only happens in Firefox for Windows with
   * a custom OS setting activated.
   *
   * Reference: https://stackoverflow.com/a/37474225
   */

  _exports.DOM_DELTA_LINE = DOM_DELTA_LINE;
  const DOM_DELTA_PAGE = 2;
  /**
   * Number of lines per page considered for
   * DOM_DELTA_PAGE.
   *
   * @property LINES_PER_PAGE
   */

  _exports.DOM_DELTA_PAGE = DOM_DELTA_PAGE;
  const LINES_PER_PAGE = 3;
  /**
   * Returns the deltas calculated in pixels.
   *
   * @param {Number} event.deltaX horizontal delta
   * @param {Number} event.deltaY vertical delta
   * @param {DeltaMode} event.deltaMode delta mode tells which unit is being used.
   * @return {Object} Object with deltaX and deltaY properties
   */

  _exports.LINES_PER_PAGE = LINES_PER_PAGE;

  function getScrollDeltas({
    deltaX = 0,
    deltaY = 0,
    deltaMode = DOM_DELTA_PIXEL
  }) {
    if (deltaMode !== DOM_DELTA_PIXEL) {
      if (deltaMode === DOM_DELTA_PAGE) {
        deltaX *= LINES_PER_PAGE;
        deltaY *= LINES_PER_PAGE;
      }

      const scrollLineHeight = getScrollLineHeight();
      deltaX *= scrollLineHeight;
      deltaY *= scrollLineHeight;
    }

    return {
      deltaX,
      deltaY
    };
  }

  let scrollLineHeight = null;

  function getScrollLineHeight() {
    if (!scrollLineHeight) {
      const iframe = document.createElement('iframe');
      iframe.src = '#';
      iframe.style.position = 'absolute';
      iframe.style.visibility = 'hidden';
      iframe.style.width = '0px';
      iframe.style.height = '0px';
      iframe.style.border = 'none';
      document.body.appendChild(iframe);
      const iframeDocument = iframe.contentWindow.document;
      iframeDocument.open();
      iframeDocument.write('<!doctype html><html><head></head><body><span>X</span></body></html>');
      iframeDocument.close();
      scrollLineHeight = iframeDocument.body.firstElementChild.offsetHeight;
      document.body.removeChild(iframe);
    }

    return scrollLineHeight;
  }

  function getAvailableScroll(element, container) {
    const availableScroll = {
      deltaXNegative: 0,
      deltaXPositive: 0,
      deltaYNegative: 0,
      deltaYPositive: 0
    };
    let scrollLeftMax, scrollTopMax;

    while (container.contains(element) || container === element) {
      scrollLeftMax = element.scrollWidth - element.clientWidth;
      scrollTopMax = element.scrollHeight - element.clientHeight;
      availableScroll.deltaXNegative += -element.scrollLeft;
      availableScroll.deltaXPositive += scrollLeftMax - element.scrollLeft;
      availableScroll.deltaYNegative += -element.scrollTop;
      availableScroll.deltaYPositive += scrollTopMax - element.scrollTop;
      element = element.parentNode;
    }

    return availableScroll;
  }
  /**
   * Calculates the scroll distribution for `element` inside` container.
   *
   * @param {Number} deltaX
   * @param {Number} deltaY
   * @param {Element} element
   * @param {Element} container
   * @param {ScrollInformation[]} accumulator
   * @return {ScrollInforamtion}
   */


  function calculateScrollDistribution(deltaX, deltaY, element, container, accumulator = []) {
    const scrollInformation = {
      element,
      scrollLeft: 0,
      scrollTop: 0
    };
    const scrollLeftMax = element.scrollWidth - element.clientWidth;
    const scrollTopMax = element.scrollHeight - element.clientHeight;
    const availableScroll = {
      deltaXNegative: -element.scrollLeft,
      deltaXPositive: scrollLeftMax - element.scrollLeft,
      deltaYNegative: -element.scrollTop,
      deltaYPositive: scrollTopMax - element.scrollTop
    };
    const elementStyle = window.getComputedStyle(element);

    if (elementStyle.overflowX !== 'hidden') {
      // The `deltaX` can be larger than the available scroll for the element, thus overshooting.
      // The result of that is that it scrolls the element as far as possible. We don't need to
      // calculate exactly because we reduce the amount of desired scroll for the
      // parent elements by the correct amount below.
      scrollInformation.scrollLeft = element.scrollLeft + deltaX;

      if (deltaX > availableScroll.deltaXPositive) {
        deltaX = deltaX - availableScroll.deltaXPositive;
      } else if (deltaX < availableScroll.deltaXNegative) {
        deltaX = deltaX - availableScroll.deltaXNegative;
      } else {
        deltaX = 0;
      }
    }

    if (elementStyle.overflowY !== 'hidden') {
      scrollInformation.scrollTop = element.scrollTop + deltaY;

      if (deltaY > availableScroll.deltaYPositive) {
        deltaY = deltaY - availableScroll.deltaYPositive;
      } else if (deltaY < availableScroll.deltaYNegative) {
        deltaY = deltaY - availableScroll.deltaYNegative;
      } else {
        deltaY = 0;
      }
    }

    if (element !== container && (deltaX || deltaY)) {
      return calculateScrollDistribution(deltaX, deltaY, element.parentNode, container, accumulator.concat([scrollInformation]));
    }

    return accumulator.concat([scrollInformation]);
  } // Recursively walks up scroll containers until the delta is distributed or we
  // run out of elements in the allowed-to-scroll container.


  function distributeScroll(deltaX, deltaY, element, container) {
    const scrollInfos = calculateScrollDistribution(deltaX, deltaY, element, container);
    let info;

    for (let i = 0; i < scrollInfos.length; i++) {
      info = scrollInfos[i];
      info.element.scrollLeft = info.scrollLeft;
      info.element.scrollTop = info.scrollTop;
    }
  }
});
;define('ember-bootstrap/components/base/bs-form', ['exports', 'ember-bootstrap/templates/components/bs-form'], function (exports, _bsForm) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    layout: _bsForm.default,
    tagName: 'form',
    classNameBindings: ['layoutClass'],
    attributeBindings: ['_novalidate:novalidate'],
    ariaRole: 'form',

    /**
     * Bootstrap form class name (computed)
     *
     * @property layoutClass
     * @type string
     * @readonly
     * @protected
     *
     */

    /**
     * Set a model that this form should represent. This serves several purposes:
     *
     * * child `Components.FormElement`s can access and bind to this model by their `property`
     * * when the model supports validation by using the [ember-validations](https://github.com/dockyard/ember-validations) mixin,
     * child `Components.FormElement`s will look at the validation information of their `property` and render their form group accordingly.
     * Moreover the form's `submit` event handler will validate the model and deny submitting if the model is not validated successfully.
     *
     * @property model
     * @type Ember.Object
     * @public
     */
    model: null,

    /**
     * Set the layout of the form to either "vertical", "horizontal" or "inline". See http://getbootstrap.com/css/#forms-inline and http://getbootstrap.com/css/#forms-horizontal
     *
     * @property formLayout
     * @type string
     * @public
     */
    formLayout: 'vertical',

    /**
     * Check if validating the model is supported. This needs to be implemented by another addon.
     *
     * @property hasValidator
     * @type boolean
     * @readonly
     * @protected
     */
    hasValidator: false,

    /**
     * The Bootstrap grid class for form labels. This is used by the `Components.FormElement` class as a default for the
     * whole form.
     *
     * @property horizontalLabelGridClass
     * @type string
     * @default 'col-md-4'
     * @public
     */
    horizontalLabelGridClass: 'col-md-4',

    /**
     * @property elementComponent
     * @type {String}
     * @private
     */
    elementComponent: 'bs-form/element',

    /**
     * @property groupComponent
     * @type {String}
     * @private
     */
    groupComponent: 'bs-form/group',

    /**
     * `isSubmitting` is `true` after `submit` event has been triggered and until Promise returned by `onSubmit` is
     * fulfilled. If `validate` returns a Promise that one is also taken into consideration.
     *
     * If multiple concurrent submit events are fired, it stays `true` until all submit events have been fulfilled.
     *
     * @property isSubmitting
     * @type {Boolean}
     * @readonly
     * @private
     */
    isSubmitting: false,

    /**
     * `isSubmitted` is `true` if last submission was successful.
     * A change to any form element resets it's value to `false`.
     *
     * If not using `Components.FormElement`, `resetSubmissionState` action must be triggered on each change to reset
     * form's submission state.
     *
     * @property isSubmitted
     * @type {Boolean}
     * @private
     */
    isSubmitted: false,

    /**
     * `isRejected` is `true` if last submission was rejected.
     * A submission is considered as rejected if form is invalid as well as if `onSubmit` rejects.
     * A change to any form element resets it's value to `false`.
     *
     * If not using `Components.FormElement`, `resetSubmissionState` action must be triggered on each change to reset
     * form's submission state.
     *
     * @property isRejected
     * @type {Boolean}
     * @private
     */
    isRejected: false,

    /**
     * Count of pending submissions.
     *
     * @property pendingSubmissions
     * @type {Integer}
     * @private
     */
    pendingSubmissions: 0,

    /**
     * If set to true pressing enter will submit the form, even if no submit button is present
     *
     * @property submitOnEnter
     * @type boolean
     * @default false
     * @public
     */
    submitOnEnter: false,

    /**
     * Controls if `onSubmit` action is fired concurrently. If `true` submitting form multiple
     * times will not trigger `onSubmit` action if a Promise returned by previous submission is
     * not settled yet.
     *
     * Droping a submission also prevents rerunning validation and `onBefore` hook.
     *
     * @property preventConcurrency
     * @type Boolean
     * @default false
     * @public
     */
    preventConcurrency: false,

    /**
     * If true, after successful validation and upon submitting the form, all current element validations will be hidden.
     * If the form remains visible, the user would have to focus out of elements of submit the form again for the
     * validations to show up again, as if a fresh new form component had been rendered.
     *
     * @property hideValidationsOnSubmit
     * @type {Boolean}
     * @default false
     * @public
     */
    hideValidationsOnSubmit: false,

    /**
     * If set to true novalidate attribute is present on form element
     *
     * @property novalidate
     * @type boolean
     * @default null
     * @public
     */
    novalidate: false,

    _novalidate: Ember.computed('novalidate', function () {
      return this.get('novalidate') === true ? '' : undefined;
    }),

    /**
     * Validate hook which will return a promise that will either resolve if the model is valid
     * or reject if it's not. This should be overridden to add validation support.
     *
     * @method validate
     * @param {Object} model
     * @return {Promise}
     * @public
     */
    validate(model) {}, // eslint-disable-line no-unused-vars

    /**
     * @property showAllValidations
     * @type boolean
     * @default undefined
     * @private
     */
    showAllValidations: undefined,

    /**
     * Action is called before the form is validated (if possible) and submitted.
     *
     * @event onBefore
     * @param { Object } model  The form's `model`
     * @public
     */
    onBefore(model) {}, // eslint-disable-line no-unused-vars

    /**
     * Action is called when submit has been triggered and the model has passed all validations (if present).
     *
     * @event onSubmit
     * @param { Object } model  The form's `model`
     * @param { Object } result The returned result from the validate method, if validation is available
     * @public
     */
    onSubmit(model, result) {}, // eslint-disable-line no-unused-vars

    /**
     * Action is called when validation of the model has failed.
     *
     * @event onInvalid
     * @param { Object } model  The form's `model`
     * @param { Object } error
     * @public
     */
    onInvalid(model, error) {}, // eslint-disable-line no-unused-vars

    /**
     * Submit handler that will send the default action ("action") to the controller when submitting the form.
     *
     * If there is a supplied `model` that supports validation (`hasValidator`) the model will be validated before, and
     * only if validation is successful the default action will be sent. Otherwise an "invalid" action will be sent, and
     * all the `showValidation` property of all child `Components.FormElement`s will be set to true, so error state and
     * messages will be shown automatically.
     *
     * @method submit
     * @private
     */
    submit(e) {
      if (e) {
        e.preventDefault();
      }

      if (this.get('preventConcurrency') && this.get('isSubmitting')) {
        return;
      }

      this.set('isSubmitting', true);
      this.incrementProperty('pendingSubmissions');

      let model = this.get('model');

      this.get('onBefore')(model);

      Ember.RSVP.resolve(this.get('hasValidator') ? this.validate(this.get('model')) : null).then(record => {
        return Ember.RSVP.resolve().then(() => {
          if (this.get('hideValidationsOnSubmit') === true) {
            this.set('showAllValidations', false);
          }
          return this.get('onSubmit')(model, record);
        }).then(() => {
          if (!this.get('isDestroyed')) {
            this.set('isSubmitted', true);
          }
        }, () => {
          if (!this.get('isDestroyed')) {
            this.set('isRejected', true);
          }
        });
      }, error => {
        this.set('showAllValidations', true);

        return Ember.RSVP.resolve().then(() => {
          return this.get('onInvalid')(model, error);
        }).finally(() => {
          if (!this.get('isDestroyed')) {
            this.set('isRejected', true);
          }
        });
      }).finally(() => {
        if (!this.get('isDestroyed')) {
          if (this.get('pendingSubmissions') === 1) {
            this.set('isSubmitting', false);
          }

          this.decrementProperty('pendingSubmissions');

          // reset forced hiding of validations
          if (this.get('showAllValidations') === false) {
            this.set('showAllValidations', undefined);
          }
        }
      });
    },

    keyPress(e) {
      let code = e.keyCode || e.which;
      if (code === 13 && this.get('submitOnEnter')) {
        this.triggerSubmit();
      }
    },

    triggerSubmit() {
      let event = document.createEvent('Event');
      event.initEvent('submit', true, true);
      this.get('element').dispatchEvent(event);
    },

    actions: {
      change(value, model, property) {
        (true && !(Ember.isPresent(model) && Ember.isPresent(property)) && Ember.assert('You cannot use the form element\'s default onChange action for form elements if not using a model or setting the value directly on a form element. You must add your own onChange action to the form element in this case!', Ember.isPresent(model) && Ember.isPresent(property)));

        if (typeof model.set === 'function') {
          model.set(property, value);
        } else {
          Ember.set(model, property, value);
        }
      },

      resetSubmissionState() {
        this.set('isSubmitted', false);
        this.set('isRejected', false);
      }
    }
  });
});
;define('ember-bootstrap/components/base/bs-form/element', ['exports', 'ember-bootstrap/templates/components/bs-form/element', 'ember-bootstrap/components/bs-form/group'], function (exports, _element, _group) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  const nonDefaultLayouts = Ember.A(['checkbox']);

  /**
   Sub class of `Components.FormGroup` that adds automatic form layout markup and form validation features.
  
   ### Form layout
  
   The appropriate Bootstrap markup for the given `formLayout` and `controlType` is automatically generated to easily
   create forms without coding the default Bootstrap form markup by hand:
  
   ```hbs
   {{#bs-form formLayout="horizontal" onSubmit=(action "submit") as |form|}}
     {{form.element controlType="email" label="Email" placeholder="Email" value=email}}
     {{form.element controlType="password" label="Password" placeholder="Password" value=password}}
     {{form.element controlType="checkbox" label="Remember me" value=rememberMe}}
     {{bs-button defaultText="Submit" type="primary" buttonType="submit"}}
   {{/bs-form}}
   ```
  
   ### Control types
  
   The following control types are supported out of the box:
  
   * Inputs (simple `text`, or any other HTML5 supported input types like `password`, `email` etc.)
   * Checkbox (single)
   * Radio Button (group)
   * Textarea
  
   #### Radio Buttons
  
   For a group of mutually exclusive radio buttons to work, you must supply the `options` property with an array of
   options, each of which will be rendered with an appropriate radio button and its label. It can be either a simple array
   of strings or objects. In the latter case, you would have to set `optionLabelPath` to the property, that contains the
   label on these objects.
  
   ```hbs
   {{#bs-form model=this onSubmit=(action "submit") as |form|}}
     {{form.element controlType="radio" label="Gender" options=genderOptions optionLabelPath="title" property="gender"}}
   {{/bs-form}}
   ```
  
   The default layout for radios is stacked, but Bootstrap's inline layout is also supported using the `inline` property
   of the yielded control component:
  
   ```hbs
   {{#bs-form model=this onSubmit=(action "submit") as |form|}}
     {{#form.element controlType="radio" label="Gender" options=genderOptions property="gender" as |el|}}
       {{el.control inline=true}}
     {{/form.element}}
   {{/bs-form}}
   ```
  
   #### Custom controls
  
   Apart from the standard built-in browser controls (see the `controlType` property), you can use any custom control simply
   by invoking the component with a block template. Use whatever control you might want, for example a select-2 component
   (from the [ember-select-2 addon](https://istefo.github.io/ember-select-2)):
  
   ```hbs
   {{#bs-form model=this onSubmit=(action "submit") as |form|}}
   {{#form.element label="Select-2" property="gender" useIcons=false as |el|}}
   {{select-2 id=el.id content=genderChoices optionLabelPath="label" value=el.value searchEnabled=false}}
   {{/form.element}}
   {{/bs-form}}
   ```
  
   The component yields a hash with the following properties:
   * `control`: the component that would be used for rendering the form control based on the given `controlType`
   * `id`: id to be used for the form control, so it matches the labels `for` attribute
   * `value`: the value of the form element
   * `validation`: the validation state of the element, `null` if no validation is to be shown, otherwise 'success', 'error' or 'warning'
  
   If your custom control does not render an input element, you should set `useIcons` to `false` since bootstrap only supports
   feedback icons with textual `<input class="form-control">` elements.
  
   If you just want to customize the existing control component, you can use the aforementioned yielded `control` component
   to customize that existing component:
  
   ```hbs
   {{#bs-form model=this onSubmit=(action "submit") as |form|}}
   {{#form.element label="Email" placeholder="Email" property="email" as |el|}}
   {{el.control class="input-lg"}}
   {{/form.element}}
   {{/bs-form}}
   ```
  
   If you are using the custom control quite often, you should consider writing an integration plugin like
   [`ember-bootstrap-power-select`](https://github.com/kaliber5/ember-bootstrap-power-select).
   To do so, you need to provide a component `{{bs-form/element/control/my-custom-control}}` which extends
   [`Components.FormElementControl`](Components.FormElementControl.html).
  
   ### Form validation
  
   In the following example the control elements of the three form elements value will be bound to the properties
   (given by `property`) of the form's `model`, which in this case is its controller (see `model=this`):
  
   ```hbs
   {{#bs-form formLayout="horizontal" model=this onSubmit=(action "submit") as |form|}}
     {{form.element controlType="email" label="Email" placeholder="Email" property="email"}}
     {{form.element controlType="password" label="Password" placeholder="Password" property="password"}}
     {{form.element controlType="checkbox" label="Remember me" property="rememberMe"}}
     {{bs-button defaultText="Submit" type="primary" buttonType="submit"}}
   {{/bs-form}}
   ```
  
   By using this indirection in comparison to directly binding the `value` property, you get the benefit of automatic
   form validation, given that your `model` has a supported means of validating itself.
   See [Components.Form](Components.Form.html) for details on how to enable form validation.
  
   In the example above the `model` was our controller itself, so the control elements were bound to the appropriate
   properties of our controller. A controller implementing validations on those properties could look like this:
  
   ```js
   import Ember from 'ember';
   import EmberValidations from 'ember-validations';
  
   export default Ember.Controller.extend(EmberValidations,{
     email: null,
     password: null,
     rememberMe: false,
     validations: {
       email: {
         presence: true,
         format: {
           with: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/
         }
       },
       password: {
         presence: true,
         length: { minimum: 6, maximum: 10}
       },
       comments: {
         length: { minimum: 5, maximum: 20}
       }
     }
   });
   ```
  
   If the `showValidation` property is `true` (which is automatically the case if a `focusOut` event is captured from the
   control element or the containing `Components.Form` was submitted with its `model` failing validation) and there are
   validation errors for the `model`'s `property`, the appropriate Bootstrap validation markup (see
   http://getbootstrap.com/css/#forms-control-validation) is applied:
  
   * `validation` is set to 'error', which will set the `has-error` CSS class
   * the `errorIcon` feedback icon is displayed if `controlType` is a text field
   * the validation messages are displayed as Bootstrap `help-block`s in BS3 and `form-control-feedback` in BS4
  
   The same applies for warning messages, if the used validation library supports this. (Currently only
   [ember-cp-validations](https://github.com/offirgolan/ember-cp-validations))
  
   As soon as the validation is successful again...
  
   * `validation` is set to 'success', which will set the `has-success` CSS class
   * the `successIcon` feedback icon is displayed if `controlType` is a text field
   * the validation messages are removed
  
   In case you want to display some error or warning message that is independent of the model's validation, for
   example to display a failure message on a login form after a failed authentication attempt (so not coming from
   the validation library), you can use the `customError` or `customWarning` properties to do so.
  
   ### HTML attributes
  
   To set HTML attributes on the control element provided by this component, set them as properties of this component:
  
   ```hbs
   {{#bs-form formLayout="horizontal" model=this onSubmit=(action "submit") as |form|}}
   {{form.element controlType="email" label="Email" property="email"
     placeholder="Email"
     required=true
     multiple=true
     tabIndex=5
   }}
   ...
   {{/bs-form}}
   ```
  
   The following attributes are supported depending on the `controlType`:
  
   <table class="table table-striped">
   <thead>
   <tr>
   <th></th>
   <th>textarea</th>
   <th>checkbox/radio</th>
   <th>all others</th>
   </tr>
   </thead>
   <tbody>
   <tr>
   <td>accept</td>
   <td></td>
   <td></td>
   <td>✔︎</td>
   </tr>
   <tr>
   <td>autocapitalize</td>
   <td>✔︎</td>
   <td></td>
   <td>✔︎</td>
   </tr>
   <tr>
   <td>autocomplete</td>
   <td>✔︎</td>
   <td></td>
   <td>✔︎</td>
   </tr>
   <tr>
   <td>autocorrect</td>
   <td>✔︎</td>
   <td></td>
   <td>✔︎</td>
   </tr>
   <tr>
   <td>autofocus</td>
   <td>✔︎</td>
   <td>✔︎</td>
   <td>✔︎</td>
   </tr>
   <tr>
   <td>autosave</td>
   <td></td>
   <td></td>
   <td>✔︎</td>
   </tr>
   <tr>
   <td>cols</td>
   <td>✔︎</td>
   <td></td>
   <td></td>
   </tr>
   <tr>
   <td>disabled</td>
   <td></td>
   <td>✔︎</td>
   <td>✔︎</td>
   </tr>
   <tr>
   <td>form</td>
   <td>✔︎</td>
   <td>✔︎</td>
   <td>✔︎</td>
   </tr>
   <tr>
   <td>inputmode</td>
   <td></td>
   <td></td>
   <td>✔︎</td>
   </tr>
   <tr>
   <td>max</td>
   <td></td>
   <td></td>
   <td>✔︎</td>
   </tr>
   <tr>
   <td>maxlength</td>
   <td>✔︎</td>
   <td></td>
   <td>✔︎</td>
   </tr>
   <tr>
   <td>min</td>
   <td></td>
   <td></td>
   <td>✔︎</td>
   </tr>
   <tr>
   <td>minlength</td>
   <td>✔︎</td>
   <td></td>
   <td>✔︎</td>
   </tr>
   <tr>
   <td>multiple</td>
   <td></td>
   <td></td>
   <td>✔︎</td>
   </tr>
   <tr>
   <td>name</td>
   <td>✔︎</td>
   <td>✔︎</td>
   <td>✔︎</td>
   </tr>
   <tr>
   <td>pattern</td>
   <td></td>
   <td></td>
   <td>✔︎</td>
   </tr>
   <tr>
   <td>placeholder</td>
   <td>✔︎</td>
   <td></td>
   <td>✔︎</td>
   </tr>
   <tr>
   <td>readonly</td>
   <td>✔︎</td>
   <td>︎</td>
   <td>✔︎</td>
   </tr>
   <tr>
   <td>required</td>
   <td>✔︎</td>
   <td>✔︎</td>
   <td>✔︎</td>
   </tr>
   <tr>
   <td>rows</td>
   <td>✔︎</td>
   <td></td>
   <td></td>
   </tr>
   <tr>
   <td>size<br>via <code>controlSize</code> property</td>
   <td></td>
   <td></td>
   <td>✔︎</td>
   </tr>
   <tr>
   <td>spellcheck</td>
   <td>✔︎</td>
   <td></td>
   <td>✔︎</td>
   </tr>
   <tr>
   <td>step</td>
   <td></td>
   <td></td>
   <td>✔︎</td>
   </tr>
   <tr>
   <td>tabindex</td>
   <td>✔︎</td>
   <td>✔︎</td>
   <td>✔︎</td>
   </tr>
   <tr>
   <td>title</td>
   <td>✔︎</td>
   <td>✔︎</td>
   <td>✔︎</td>
   </tr>
   <tr>
   <td>wrap</td>
   <td>✔︎</td>
   <td></td>
   <td></td>
   </tr>
   </tbody>
   </table>
  
   @class FormElement
   @namespace Components
   @extends Components.FormGroup
   @public
   */
  exports.default = _group.default.extend({
    layout: _element.default,
    classNameBindings: ['disabled:disabled', 'required:is-required', 'isValidating'],

    /**
     * Text to display within a `<label>` tag.
     *
     * You should include a label for every form input cause otherwise screen readers
     * will have trouble with your forms. Use `invisibleLabel` property if you want
     * to hide them.
     *
     * @property label
     * @type string
     * @public
     */
    label: null,

    /**
     * Controls label visibility by adding 'sr-only' class.
     *
     * @property invisibleLabel
     * @type boolean
     * @default false
     * @public
     */
    invisibleLabel: false,

    /**
     * @property hasLabel
     * @type boolean
     * @readonly
     * @private
     */
    hasLabel: Ember.computed.notEmpty('label'),

    /**
     * The type of the control widget.
     * Supported types:
     *
     * * 'text'
     * * 'checkbox'
     * * 'radio'
     * * 'textarea'
     * * any other type will use an input tag with the `controlType` value as the type attribute (for e.g. HTML5 input
     * types like 'email'), and the same layout as the 'text' type
     *
     * @property controlType
     * @type string
     * @default 'text'
     * @public
     */
    controlType: 'text',

    /**
     * The value of the control element is bound to this property. You can bind it to some controller property to
     * get/set the control element's value:
     *
     * ```hbs
     * {{form.element controlType="email" label="Email" placeholder="Email" value=email}}
     * ```
     *
     * Note: you lose the ability to validate this form element by directly binding to its value. It is recommended
     * to use the `property` feature instead.
     *
     *
     * @property value
     * @public
     */
    value: null,

    /**
     The property name of the form element's `model` (by default the `model` of its parent `Components.Form`) that this
     form element should represent. The control element's value will automatically be bound to the model property's
     value.
      Using this property enables form validation on this element.
      @property property
     @type string
     @public
     */
    property: null,

    /**
     * The model used for validation. Defaults to the parent `Components.Form`'s `model`
     *
     * @property model
     * @public
     */
    model: null,

    /**
     * Show a help text next to the control
     *
     * @property helpText
     * @type {string}
     * @public
     */
    helpText: null,

    /**
     * Only if there is a validator, this property makes all errors to be displayed at once
     * inside a scrollable container.
     *
     * @default false
     * @property showMultipleErrors
     * @public
     * @type {Boolean}
     */
    showMultipleErrors: false,

    /**
     * Array of options for control types that show a selection (e.g. radio button groups)
     * Can be an array of simple strings or objects. For objects use `optionLabelPath` to specify the path containing the
     * label.
     *
     * @property options
     * @type {Array}
     * @public
     */
    options: null,

    /**
     * Property path (e.g. 'title' or 'related.name') to render the label of an selection option. See `options`.s
     *
     * @property optionLabelPath
     * @type {String}
     * @public
     */
    optionLabelPath: null,

    /**
     * @property hasHelpText
     * @type boolean
     * @readonly
     * @private
     */
    hasHelpText: Ember.computed.notEmpty('helpText').readOnly(),

    /**
     * The array of error messages from the `model`'s validation.
     *
     * @property errors
     * @type array
     * @protected
     */
    errors: null,

    /**
     * @property hasErrors
     * @type boolean
     * @readonly
     * @private
     */
    hasErrors: Ember.computed.gt('errors.length', 0),

    /**
     * The array of warning messages from the `model`'s validation.
     *
     * @property errors
     * @type array
     * @protected
     */
    warnings: null,

    /**
     * @property hasWarnings
     * @type boolean
     * @readonly
     * @private
     */
    hasWarnings: Ember.computed.gt('warnings.length', 0),

    /**
     * Show a custom error message that does not come from the model's validation. Will be immediately shown, regardless
     * of any user interaction (i.e. no `focusOut` event required)
     *
     * @property customError
     * @type string
     * @public
     */
    customError: null,

    /**
     * @property hasCustomError
     * @type boolean
     * @readonly
     * @private
     */
    hasCustomError: Ember.computed.notEmpty('customError'),

    /**
     * Show a custom warning message that does not come from the model's validation. Will be immediately shown, regardless
     * of any user interaction (i.e. no `focusOut` event required). If the model's validation has an error then the error
     * will be shown in place of this warning.
     *
     * @property customWarning
     * @type string
     * @public
     */
    customWarning: null,

    /**
     * @property hasCustomWarning
     * @type boolean
     * @readonly
     * @private
     */
    hasCustomWarning: Ember.computed.notEmpty('customWarning'),

    /**
     * Property for size styling, set to 'lg', 'sm' or 'xs' (the latter only for BS3)
     *
     * @property size
     * @type String
     * @public
     */
    size: null,

    /**
     * The array of validation messages (either errors or warnings) from either custom error/warnings or , if we are showing model validation messages, the model's validation
     *
     * @property validationMessages
     * @type array
     * @private
     */
    validationMessages: Ember.computed('hasCustomError', 'customError', 'hasErrors', 'hasCustomWarning', 'customWarning', 'hasWarnings', 'errors.[]', 'warnings.[]', 'showModelValidation', function () {
      if (this.get('hasCustomError')) {
        return Ember.A([this.get('customError')]);
      }
      if (this.get('hasErrors') && this.get('showModelValidation')) {
        return Ember.A(this.get('errors'));
      }
      if (this.get('hasCustomWarning')) {
        return Ember.A([this.get('customWarning')]);
      }
      if (this.get('hasWarnings') && this.get('showModelValidation')) {
        return Ember.A(this.get('warnings'));
      }
      return null;
    }),

    /**
     * @property hasValidationMessages
     * @type boolean
     * @readonly
     * @private
     */
    hasValidationMessages: Ember.computed.gt('validationMessages.length', 0),

    /**
     * @property hasValidator
     * @type boolean
     * @default false
     * @protected
     */
    hasValidator: false,

    /**
     * Set a validating state for async validations
     *
     * @property isValidating
     * @type boolean
     * @default false
     * @protected
     */
    isValidating: false,

    /**
     * If `true` form validation markup is rendered (requires a validatable `model`).
     *
     * @property showValidation
     * @type boolean
     * @default false
     * @private
     */
    showValidation: Ember.computed.or('showOwnValidation', 'showAllValidations', 'hasCustomError', 'hasCustomWarning'),

    /**
     * @property showOwnValidation
     * @type boolean
     * @default false
     * @private
     */
    showOwnValidation: false,

    /**
     * @property showAllValidations
     * @type boolean
     * @default false
     * @private
     */
    showAllValidations: Ember.computed({
      get() {},
      set(key, value) {
        this.set('showOwnValidation', false);
        return value;
      }
    }),

    /**
     * @property showModelValidations
     * @type boolean
     * @readonly
     * @private
     */
    showModelValidation: Ember.computed.or('showOwnValidation', 'showAllValidations'),

    /**
     * @property showValidationMessages
     * @type boolean
     * @readonly
     * @private
     */
    showValidationMessages: Ember.computed.and('showValidation', 'hasValidationMessages'),

    /**
     * Event or list of events which enable form validation markup rendering.
     * Supported events: ['focusout', 'change', 'input']
     *
     * @property showValidationOn
     * @type string|array
     * @default ['focusout']
     * @public
     */
    showValidationOn: null,

    /**
     * @property _showValidationOn
     * @type array
     * @readonly
     * @private
     */
    _showValidationOn: Ember.computed('showValidationOn.[]', function () {
      let showValidationOn = this.get('showValidationOn');

      (true && !(Ember.isArray(showValidationOn) || Ember.typeOf(showValidationOn) === 'string') && Ember.assert('showValidationOn must be a String or an Array', Ember.isArray(showValidationOn) || Ember.typeOf(showValidationOn) === 'string'));

      if (Ember.isArray(showValidationOn)) {
        return showValidationOn.map(type => {
          return type.toLowerCase();
        });
      }

      if (typeof showValidationOn.toString === 'function') {
        return [showValidationOn.toLowerCase()];
      }
      return [];
    }),

    /**
     * @method showValidationOnHandler
     * @params {Event} event
     * @private
     */
    showValidationOnHandler({ target, type }) {
      // Should not do anything if
      if (
      // validations are already shown or
      this.get('showOwnValidation') ||
      // validations should not be shown for this event type or
      this.get('_showValidationOn').indexOf(type) === -1 ||
      // validation should not be shown for this event target
      Ember.isArray(this.get('doNotShowValidationForEventTargets')) && this.get('doNotShowValidationForEventTargets.length') > 0 && [...this.element.querySelectorAll(this.get('doNotShowValidationForEventTargets').join(','))].some(el => el.contains(target))) {
        return;
      }

      this.set('showOwnValidation', true);
    },

    /**
     * Controls if validation should be shown for specified event targets.
     *
     * It expects an array of query selectors. If event target is a children of an event that matches
     * these selectors, an event triggered for it will not trigger validation errors to be shown.
     *
     * By default events fired on elements inside an input group are skipped.
     *
     * If `null` or an empty array is passed validation errors are shown for all events regardless
     * of event target.
     *
     * @property doNotShowValidationForEventTargets
     * @type ?array
     * @public
     */

    /**
     * The validation ("error" (BS3)/"danger" (BS4), "warning", or "success") or null if no validation is to be shown. Automatically computed from the
     * models validation state.
     *
     * @property validation
     * @readonly
     * @type string
     * @private
     */
    validation: Ember.computed('hasCustomError', 'hasErrors', 'hasCustomWarning', 'hasWarnings', 'hasValidator', 'showValidation', 'showModelValidation', 'isValidating', 'disabled', function () {
      if (!this.get('showValidation') || !this.get('hasValidator') || this.get('isValidating') || this.get('disabled')) {
        return null;
      } else if (this.get('showModelValidation')) {
        /* The display of model validation messages has been triggered */
        return this.get('hasErrors') || this.get('hasCustomError') ? 'error' : this.get('hasWarnings') || this.get('hasCustomWarning') ? 'warning' : 'success';
      } else {
        /* If there are custom errors or warnings these should always be shown */
        return this.get('hasCustomError') ? 'error' : 'warning';
      }
    }),

    /**
     * True for text field `controlType`s
     *
     * @property useIcons
     * @type boolean
     * @readonly
     * @public
     */
    useIcons: Ember.computed.equal('controlComponent', 'bs-form/element/control/input'),

    /**
     * The form layout used for the markup generation (see http://getbootstrap.com/css/#forms):
     *
     * * 'horizontal'
     * * 'vertical'
     * * 'inline'
     *
     * Defaults to the parent `form`'s `formLayout` property.
     *
     * @property formLayout
     * @type string
     * @default 'vertical'
     * @public
     */
    formLayout: 'vertical',

    /**
     * The Bootstrap grid class for form labels within a horizontal layout form. Defaults to the value of the same
     * property of the parent form. The corresponding grid class for form controls is automatically computed.
     *
     * @property horizontalLabelGridClass
     * @type string
     * @public
     */
    horizontalLabelGridClass: null,

    /**
     * ID for input field and the corresponding label's "for" attribute
     *
     * @property formElementId
     * @type string
     * @private
     */
    formElementId: Ember.computed('elementId', function () {
      return `${this.get('elementId')}-field`;
    }),

    /**
     * ID of the helpText, used for aria-describedby attribute of the control element
     *
     * @property ariaDescribedBy
     * @type string
     * @private
     */
    ariaDescribedBy: Ember.computed('elementId', function () {
      return `${this.get('elementId')}-help`;
    }),

    /**
     * @property formComponent
     * @type {String}
     * @private
     */
    formComponent: 'bs-form',

    /**
     * @property layoutComponent
     * @type {String}
     * @private
     */
    layoutComponent: Ember.computed('formLayout', 'controlType', function () {
      const formComponent = this.get('formComponent');
      const formLayout = this.get('formLayout');
      const controlType = this.get('controlType');

      if (nonDefaultLayouts.includes(controlType)) {
        return `${formComponent}/element/layout/${formLayout}/${controlType}`;
      } else {
        return `${formComponent}/element/layout/${formLayout}`;
      }
    }),

    /**
     * @property controlComponent
     * @type {String}
     * @private
     */
    controlComponent: Ember.computed('controlType', function () {
      const formComponent = this.get('formComponent');
      const controlType = this.get('controlType');
      const componentName = `${formComponent}/element/control/${controlType}`;

      if (Ember.getOwner(this).hasRegistration(`component:${componentName}`)) {
        return componentName;
      }

      return `${formComponent}/element/control/input`;
    }),

    /**
     * @property errorsComponent
     * @type {String}
     * @private
     */
    errorsComponent: 'bs-form/element/errors',

    /**
     * @property feedbackIconComponent
     * @type {String}
     * @private
     */
    feedbackIconComponent: 'bs-form/element/feedback-icon',

    /**
     * @property labelComponent
     * @type {String}
     * @private
     */
    labelComponent: 'bs-form/element/label',

    /**
     * @property helpTextComponent
     * @type {String}
     * @private
     */
    helpTextComponent: 'bs-form/element/help-text',

    /**
     * Setup validation properties. This method acts as a hook for external validation
     * libraries to overwrite. In case of failed validations the `errors` property should contain an array of error messages.
     *
     * @method setupValidations
     * @private
     */
    setupValidations() {},

    /**
     * Listen for focusOut events from the control element to automatically set `showOwnValidation` to true to enable
     * form validation markup rendering if `showValidationsOn` contains `focusOut`.
     *
     * @event focusOut
     * @private
     */
    focusOut(event) {
      this.showValidationOnHandler(event);
    },

    /**
     * Listen for change events from the control element to automatically set `showOwnValidation` to true to enable
     * form validation markup rendering if `showValidationsOn` contains `change`.
     *
     * @event change
     * @private
     */
    change(event) {
      this.showValidationOnHandler(event);
    },

    /**
     * Listen for input events from the control element to automatically set `showOwnValidation` to true to enable
     * form validation markup rendering if `showValidationsOn` contains `input`.
     *
     * @event input
     * @private
     */
    input(event) {
      this.showValidationOnHandler(event);
    },

    /**
     * The action is called whenever the input value is changed, e.g. by typing text
     *
     * @event onChange
     * @param {String} value The new value of the form control
     * @param {Object} model The form element's model
     * @param {String} property The value of `property`
     * @public
     */
    onChange() {},

    /**
     * Private duplicate of onChange event used for internal state handling between form and it's elements.
     *
     * @event _onChange
     * @private
     */
    _onChange() {},

    init() {
      this._super(...arguments);
      if (this.get('showValidationOn') === null) {
        this.set('showValidationOn', ['focusOut']);
      }
      if (!Ember.isBlank(this.get('property'))) {
        Ember.defineProperty(this, 'value', Ember.computed.alias(`model.${this.get('property')}`));
        this.setupValidations();
      }
    },

    /*
     * adjust feedback icon position
     *
     * Bootstrap documentation:
     *  Manual positioning of feedback icons is required for [...] input groups
     *  with an add-on on the right. [...] For input groups, adjust the right
     *  value to an appropriate pixel value depending on the width of your addon.
     */
    adjustFeedbackIcons: Ember.observer('hasFeedback', 'formLayout', function () {
      Ember.run.scheduleOnce('afterRender', () => {
        let el = this.get('element');
        let feedbackIcon;
        // validation state icons are only shown if form element has feedback
        if (!this.get('isDestroying') && this.get('hasFeedback')
        // and form group element has
        // an input-group
        && el.querySelector('.input-group')
        // an addon or button on right side
        && el.querySelector('.input-group input + .input-group-addon, .input-group input + .input-group-btn')
        // an icon showing validation state
        && (feedbackIcon = el.querySelector('.form-control-feedback'))) {
          // clear existing adjustment
          feedbackIcon.style.right = '';

          let defaultPosition = 0;
          let match = getComputedStyle(feedbackIcon).right.match(/^(\d+)px$/);
          if (match) {
            defaultPosition = parseInt(match[1]);
          }
          // Bootstrap documentation:
          //  We do not support multiple add-ons (.input-group-addon or .input-group-btn) on a single side.
          // therefore we could rely on having only one input-group-addon or input-group-btn
          let inputGroupWidth = el.querySelector('input + .input-group-addon, input + .input-group-btn').offsetWidth;
          let adjustedPosition = defaultPosition + inputGroupWidth;

          feedbackIcon.style.right = `${adjustedPosition}px`;
        }
      });
    }),

    didInsertElement() {
      this._super(...arguments);
      this.adjustFeedbackIcons();
    },

    actions: {
      change(value) {
        let { onChange, model, property, _onChange } = this.getProperties('onChange', 'model', 'property', '_onChange');
        onChange(value, model, property);
        _onChange();
      }
    }
  });
});
;define('ember-bootstrap/components/base/bs-form/element/control', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({

    /**
     * @property value
     * @public
     */
    value: null,

    /**
     * @property ariaDescribedBy
     * @type {string}
     * @public
     */
    ariaDescribedBy: null,

    /**
     * This action is called whenever the `value` changes
     *
     * @event onChange
     * @param {*} value
     * @public
     */
    onChange() {}
  });
});
;define('ember-bootstrap/components/base/bs-form/element/control/checkbox', ['exports', 'ember-bootstrap/components/base/bs-form/element/control', 'ember-bootstrap/mixins/control-attributes'], function (exports, _control, _controlAttributes) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _control.default.extend(_controlAttributes.default, {
    attributeBindings: ['value:checked', 'type'],

    /**
     * @property type
     * @type {String}
     * @readonly
     * @private
     */
    type: 'checkbox',

    click(event) {
      this.get('onChange')(event.target.checked);
    }
  });
});
;define('ember-bootstrap/components/base/bs-form/element/control/input', ['exports', 'ember-bootstrap/components/base/bs-form/element/control', 'ember-bootstrap/mixins/control-attributes'], function (exports, _control, _controlAttributes) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _control.default.extend(_controlAttributes.default, {
    attributeBindings: ['value', 'type', 'placeholder', 'controlSize:size', 'minlength', 'maxlength', 'min', 'max', 'pattern', 'accept', 'autocomplete', 'autocapitalize', 'autocorrect', 'autosave', 'inputmode', 'multiple', 'step', 'spellcheck'],
    classNames: ['form-control'],

    /**
     * @property type
     * @type {String}
     * @public
     */
    type: 'text',

    change(event) {
      this.get('onChange')(event.target.value);
    },

    input(event) {
      this.get('onChange')(event.target.value);
    }

  });
});
;define('ember-bootstrap/components/base/bs-form/element/control/radio', ['exports', 'ember-bootstrap/components/base/bs-form/element/control', 'ember-bootstrap/templates/components/bs-form/element/control/radio'], function (exports, _control, _radio) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _control.default.extend({
    layout: _radio.default,
    tagName: '',

    /**
     * @property inline
     * @type {Boolean}
     * @default false
     * @public
     */
    inline: false
  });
});
;define('ember-bootstrap/components/base/bs-form/element/control/textarea', ['exports', 'ember-bootstrap/components/base/bs-form/element/control', 'ember-bootstrap/mixins/control-attributes'], function (exports, _control, _controlAttributes) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _control.default.extend(_controlAttributes.default, {
    attributeBindings: ['value', 'placeholder', 'minlength', 'maxlength', 'autocomplete', 'autocapitalize', 'autocorrect', 'spellcheck', 'rows', 'cols', 'wrap'],
    tagName: 'textarea',
    classNames: ['form-control'],

    change(event) {
      this.get('onChange')(event.target.value);
    },

    input(event) {
      this.get('onChange')(event.target.value);
    }
  });
});
;define('ember-bootstrap/components/base/bs-form/element/errors', ['exports', 'ember-bootstrap/templates/components/bs-form/element/errors'], function (exports, _errors) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    layout: _errors.default,
    tagName: '',

    /**
     * @property show
     * @type {Boolean}
     * @public
     */
    show: false,

    /**
     * @property messages
     * @type {Ember.Array}
     * @public
     */
    messages: null,

    /**
     * Whether or not should display several errors at the same time.
     *
     * @default false
     * @property showMultipleErrors
     * @public
     * @type {Boolean}
     */
    showMultipleErrors: false
  });
});
;define('ember-bootstrap/components/base/bs-form/element/feedback-icon', ['exports', 'ember-bootstrap/templates/components/bs-form/element/feedback-icon'], function (exports, _feedbackIcon) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    layout: _feedbackIcon.default,
    tagName: '',

    /**
     * @property show
     * @type {Boolean}
     * @public
     */
    show: false,

    /**
     * @property iconName
     * @type {String}
     * @public
     */
    iconName: null
  });
});
;define('ember-bootstrap/components/base/bs-form/element/help-text', ['exports', 'ember-bootstrap/templates/components/bs-form/element/help-text'], function (exports, _helpText) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    layout: _helpText.default,

    /**
     * @property text
     * @type {string}
     * @public
     */
    text: null
  });
});
;define('ember-bootstrap/components/base/bs-form/element/label', ['exports', 'ember-bootstrap/templates/components/bs-form/element/label'], function (exports, _label) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    layout: _label.default,
    tagName: '',

    /**
     * @property label
     * @type string
     * @public
     */
    label: null,

    /**
     * @property invisibleLabel
     * @type boolean
     * @public
     */
    invisibleLabel: false,

    /**
     * @property formElementId
     * @type {String}
     * @public
     */
    formElementId: null,

    /**
     * @property labelClass
     * @type {String}
     * @public
     */
    labelClass: null,

    /**
     * The form layout used for the markup generation (see http://getbootstrap.com/css/#forms):
     *
     * * 'horizontal'
     * * 'vertical'
     * * 'inline'
     *
     * Defaults to the parent `form`'s `formLayout` property.
     *
     * @property formLayout
     * @type string
     * @default 'vertical'
     * @public
     */
    formLayout: 'vertical',

    /**
     * The type of the control widget.
     * Supported types:
     *
     * * 'text'
     * * 'checkbox'
     * * 'textarea'
     * * any other type will use an input tag with the `controlType` value as the type attribute (for e.g. HTML5 input
     * types like 'email'), and the same layout as the 'text' type
     *
     * @property controlType
     * @type string
     * @default 'text'
     * @public
     */
    controlType: 'text',

    /**
     * Indicates whether the type of the control widget equals `checkbox`
     *
     * @property isCheckbox
     * @type boolean
     * @private
     */
    isCheckbox: Ember.computed.equal('controlType', 'checkbox').readOnly(),

    /**
     * Indicates whether the form type equals `horizontal`
     *
     * @property isHorizontal
     * @type boolean
     * @private
     */
    isHorizontal: Ember.computed.equal('formLayout', 'horizontal').readOnly()
  });
});
;define('ember-bootstrap/components/base/bs-form/element/layout', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    tagName: '',

    /**
     * @property formElementId
     * @type {String}
     * @public
     */
    formElementId: null,

    /**
     * @property hasLabel
     * @type boolean
     * @public
     */
    hasLabel: true,

    /**
     * @property errorsComponent
     * @type {Ember.Component}
     * @public
     */
    errorsComponent: null,

    /**
     * @property feedbackIconComponent
     * @type {Ember.Component}
     * @public
     */
    feedbackIconComponent: null,

    /**
     * @property labelComponent
     * @type {Ember.Component}
     * @public
     */
    labelComponent: null,

    /**
     * @property helpTextComponent
     * @type {Ember.Component}
     * @public
     */
    helpTextComponent: null
  });
});
;define('ember-bootstrap/components/base/bs-form/element/layout/horizontal', ['exports', 'ember-bootstrap/components/base/bs-form/element/layout', 'ember-bootstrap/templates/components/bs-form/element/layout/horizontal'], function (exports, _layout, _horizontal) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _layout.default.extend({
    layout: _horizontal.default,

    /**
     * The Bootstrap grid class for form labels within a horizontal layout form.
     *
     * @property horizontalLabelGridClass
     * @type string
     * @public
     */
    horizontalLabelGridClass: null,

    /**
     * Computed property that specifies the Bootstrap grid class for form controls within a horizontal layout form.
     *
     * @property horizontalInputGridClass
     * @type string
     * @readonly
     * @private
     */
    horizontalInputGridClass: Ember.computed('horizontalLabelGridClass', function () {
      if (Ember.isBlank(this.get('horizontalLabelGridClass'))) {
        return;
      }
      let parts = this.get('horizontalLabelGridClass').split('-');
      (true && !(parts.length === 3) && Ember.assert('horizontalInputGridClass must match format bootstrap grid column class', parts.length === 3));

      parts[2] = 12 - parts[2];
      return parts.join('-');
    }).readOnly()

  });
});
;define('ember-bootstrap/components/base/bs-form/element/layout/inline', ['exports', 'ember-bootstrap/components/base/bs-form/element/layout', 'ember-bootstrap/templates/components/bs-form/element/layout/vertical'], function (exports, _layout, _vertical) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _layout.default.extend({
    layout: _vertical.default
  });
});
;define('ember-bootstrap/components/base/bs-form/element/layout/inline/checkbox', ['exports', 'ember-bootstrap/components/base/bs-form/element/layout/inline', 'ember-bootstrap/templates/components/bs-form/element/layout/vertical/checkbox'], function (exports, _inline, _checkbox) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _inline.default.extend({
    layout: _checkbox.default
  });
});
;define('ember-bootstrap/components/base/bs-form/element/layout/vertical', ['exports', 'ember-bootstrap/components/base/bs-form/element/layout', 'ember-bootstrap/templates/components/bs-form/element/layout/vertical'], function (exports, _layout, _vertical) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _layout.default.extend({
    layout: _vertical.default
  });
});
;define('ember-bootstrap/components/base/bs-form/element/layout/vertical/checkbox', ['exports', 'ember-bootstrap/components/base/bs-form/element/layout/vertical', 'ember-bootstrap/templates/components/bs-form/element/layout/vertical/checkbox'], function (exports, _vertical, _checkbox) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _vertical.default.extend({
    layout: _checkbox.default
  });
});
;define('ember-bootstrap/components/base/bs-form/group', ['exports', 'ember-bootstrap/templates/components/bs-form/group'], function (exports, _group) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    layout: _group.default,

    /**
     * @property classTypePrefix
     * @type String
     * @default 'form-group' (BS3) or 'form-control' (BS4)
     * @private
     */

    /**
     * Computed property which is true if the form group is in a validation state
     *
     * @property hasValidation
     * @type boolean
     * @private
     * @readonly
     */
    hasValidation: Ember.computed.notEmpty('validation').readOnly(),

    /**
     * Set to a validation state to render the form-group with a validation style (only for BS3).
     * See http://getbootstrap.com/css/#forms-control-validation
     *
     * The default states of "success", "warning" and "error" are supported by Bootstrap out-of-the-box.
     * But you can use custom states as well. This will set a has-<state> class, and (if `useIcons`is true)
     * a feedback whose class is taken from the <state>Icon property
     *
     * @property validation
     * @type string
     * @public
     */
    validation: null
  });
});
;define('ember-bootstrap/components/bs-form', ['exports', 'ember-bootstrap/components/base/bs-form'], function (exports, _bsForm) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _bsForm.default.extend({
    layoutClass: Ember.computed('formLayout', function () {
      let layout = this.get('formLayout');
      let supportedTypes = ['vertical', 'horizontal', 'inline'];
      (true && !(supportedTypes.indexOf(layout) >= 0) && Ember.assert('must provide a valid `formLayout` attribute.', supportedTypes.indexOf(layout) >= 0));

      return layout === 'vertical' ? 'form' : `form-${layout}`;
    }).readOnly()
  });
});
;define('ember-bootstrap/components/bs-form/element', ['exports', 'ember-bootstrap/components/base/bs-form/element'], function (exports, _element) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _element.default.extend({
    init() {
      this._super(...arguments);
      this.set('doNotShowValidationForEventTargets', ['.input-group-addon', '.input-group-btn']);
    }
  });
});
;define('ember-bootstrap/components/bs-form/element/control', ['exports', 'ember-bootstrap/components/base/bs-form/element/control'], function (exports, _control) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _control.default;
    }
  });
});
;define('ember-bootstrap/components/bs-form/element/control/checkbox', ['exports', 'ember-bootstrap/components/base/bs-form/element/control/checkbox'], function (exports, _checkbox) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _checkbox.default;
    }
  });
});
;define('ember-bootstrap/components/bs-form/element/control/input', ['exports', 'ember-bootstrap/components/base/bs-form/element/control/input'], function (exports, _input) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _input.default;
    }
  });
});
;define('ember-bootstrap/components/bs-form/element/control/radio', ['exports', 'ember-bootstrap/components/base/bs-form/element/control/radio'], function (exports, _radio) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _radio.default;
    }
  });
});
;define('ember-bootstrap/components/bs-form/element/control/textarea', ['exports', 'ember-bootstrap/components/base/bs-form/element/control/textarea'], function (exports, _textarea) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _textarea.default;
    }
  });
});
;define('ember-bootstrap/components/bs-form/element/errors', ['exports', 'ember-bootstrap/components/base/bs-form/element/errors'], function (exports, _errors) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _errors.default.extend({
    feedbackClass: 'help-block'
  });
});
;define('ember-bootstrap/components/bs-form/element/feedback-icon', ['exports', 'ember-bootstrap/components/base/bs-form/element/feedback-icon'], function (exports, _feedbackIcon) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _feedbackIcon.default;
    }
  });
});
;define('ember-bootstrap/components/bs-form/element/help-text', ['exports', 'ember-bootstrap/components/base/bs-form/element/help-text'], function (exports, _helpText) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _helpText.default.extend({
    classNames: ['help-block']
  });
});
;define('ember-bootstrap/components/bs-form/element/label', ['exports', 'ember-bootstrap/components/base/bs-form/element/label'], function (exports, _label) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _label.default.extend({
    tagName: ''
  });
});
;define('ember-bootstrap/components/bs-form/element/layout', ['exports', 'ember-bootstrap/components/base/bs-form/element/layout'], function (exports, _layout) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _layout.default;
    }
  });
});
;define('ember-bootstrap/components/bs-form/element/layout/horizontal', ['exports', 'ember-bootstrap/components/base/bs-form/element/layout/horizontal'], function (exports, _horizontal) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _horizontal.default.extend({
    /**
     * Computed property that specifies the Bootstrap offset grid class for form controls within a horizontal layout
     * form, that have no label.
     *
     * @property horizontalInputOffsetGridClass
     * @type string
     * @readonly
     * @private
     */
    horizontalInputOffsetGridClass: Ember.computed('horizontalLabelGridClass', function () {
      if (Ember.isBlank(this.get('horizontalLabelGridClass'))) {
        return;
      }
      let parts = this.get('horizontalLabelGridClass').split('-');
      parts.splice(2, 0, 'offset');
      return parts.join('-');
    })
  });
});
;define('ember-bootstrap/components/bs-form/element/layout/horizontal/checkbox', ['exports', 'ember-bootstrap/components/bs-form/element/layout/horizontal', 'ember-bootstrap/templates/components/bs-form/element/layout/horizontal/checkbox'], function (exports, _horizontal, _checkbox) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _horizontal.default.extend({
    layout: _checkbox.default
  });
});
;define('ember-bootstrap/components/bs-form/element/layout/inline', ['exports', 'ember-bootstrap/components/base/bs-form/element/layout/inline'], function (exports, _inline) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _inline.default;
    }
  });
});
;define('ember-bootstrap/components/bs-form/element/layout/inline/checkbox', ['exports', 'ember-bootstrap/components/base/bs-form/element/layout/inline/checkbox'], function (exports, _checkbox) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _checkbox.default;
    }
  });
});
;define('ember-bootstrap/components/bs-form/element/layout/vertical', ['exports', 'ember-bootstrap/components/base/bs-form/element/layout/vertical'], function (exports, _vertical) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _vertical.default;
    }
  });
});
;define('ember-bootstrap/components/bs-form/element/layout/vertical/checkbox', ['exports', 'ember-bootstrap/components/base/bs-form/element/layout/vertical/checkbox'], function (exports, _checkbox) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _checkbox.default;
    }
  });
});
;define('ember-bootstrap/components/bs-form/group', ['exports', 'ember-bootstrap/components/base/bs-form/group', 'ember-bootstrap/config', 'ember-bootstrap/mixins/size-class'], function (exports, _group, _config, _sizeClass) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _group.default.extend(_sizeClass.default, {
    classNames: ['form-group'],
    classNameBindings: ['validationClass', 'hasFeedback'],

    classTypePrefix: 'form-group',

    /**
     * Whether to show validation state icons.
     * See http://getbootstrap.com/css/#forms-control-validation
     *
     * @property useIcons
     * @type boolean
     * @default true
     * @public
     */
    useIcons: true,

    /**
     * Computed property which is true if the form group is showing a validation icon
     *
     * @property hasFeedback
     * @type boolean
     * @private
     * @readonly
     */
    hasFeedback: Ember.computed.and('hasValidation', 'useIcons', 'hasIconForValidationState').readOnly(),

    /**
     * The icon classes to be used for a feedback icon in a "success" validation state.
     * Defaults to the usual glyphicon classes. This is ignored, and no feedback icon is
     * rendered if `useIcons` is false.
     *
     * You can change this globally by setting the `formValidationSuccessIcon` property of
     * the ember-bootstrap configuration in your config/environment.js file. If your are
     * using FontAwesome for example:
     *
     * ```js
     * ENV['ember-bootstrap'] = {
       *   formValidationSuccessIcon: 'fas fa-check'
       * }
     * ```
     *
     * @property successIcon
     * @type string
     * @default 'glyphicon glyphicon-ok'
     * @public
     */
    successIcon: _config.default.formValidationSuccessIcon,

    /**
     * The icon classes to be used for a feedback icon in a "error" validation state.
     * Defaults to the usual glyphicon classes. This is ignored, and no feedback icon is
     * rendered if `useIcons` is false.
     *
     * You can change this globally by setting the `formValidationErrorIcon` property of
     * the ember-bootstrap configuration in your config/environment.js file. If your are
     * using FontAwesome for example:
     *
     * ```js
     * ENV['ember-bootstrap'] = {
       *   formValidationErrorIcon: 'fas fa-times'
       * }
     * ```
     *
     * @property errorIcon
     * @type string
     * @public
     */
    errorIcon: _config.default.formValidationErrorIcon,

    /**
     * The icon classes to be used for a feedback icon in a "warning" validation state.
     * Defaults to the usual glyphicon classes. This is ignored, and no feedback icon is
     * rendered if `useIcons` is false.
     *
     * You can change this globally by setting the `formValidationWarningIcon` property of
     * the ember-bootstrap configuration in your config/environment.js file. If your are
     * using FontAwesome for example:
     *
     * ```js
     * ENV['ember-bootstrap'] = {
       *   formValidationWarningIcon: 'fas fa-exclamation-triangle'
       * }
     * ```
     *
     * @property warningIcon
     * @type string
     * @public
     */
    warningIcon: _config.default.formValidationWarningIcon,

    /**
     * The icon classes to be used for a feedback icon in a "info" validation state.
     * Defaults to the usual glyphicon classes. This is ignored, and no feedback icon is
     * rendered if `useIcons` is false.
     *
     * You can change this globally by setting the `formValidationInfoIcon` property of
     * the ember-bootstrap configuration in your config/environment.js file. If your are
     * using FontAwesome for example:
     *
     * ```js
     * ENV['ember-bootstrap'] = {
       *   formValidationInfoIcon: 'fa fa-info-circle
       * }
     * ```
     *
     * The "info" validation state is not supported in Bootstrap CSS, but can be easily added
     * using the following LESS style:
     * ```less
     * .has-info {
       *   .form-control-validation(@state-info-text; @state-info-text; @state-info-bg);
       * }
     * ```
     *
     * @property infoIcon
     * @type string
     * @public
     */
    infoIcon: _config.default.formValidationInfoIcon,

    /**
     * @property iconName
     * @type string
     * @readonly
     * @private
     */
    iconName: Ember.computed('validation', function () {
      let validation = this.get('validation') || 'success';
      return this.get(`${validation}Icon`);
    }).readOnly(),

    /**
     * @property hasIconForValidationState
     * @type boolean
     * @readonly
     * @private
     */
    hasIconForValidationState: Ember.computed.notEmpty('iconName').readOnly(),

    /**
     * @property validationClass
     * @type string
     * @readonly
     * @private
     */
    validationClass: Ember.computed('validation', function () {
      let validation = this.get('validation');
      if (!Ember.isBlank(validation)) {
        return `has-${validation}`;
      }
    }).readOnly()
  });
});
;define('ember-bootstrap/config', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  const Config = Ember.Object.extend();

  Config.reopenClass({
    formValidationSuccessIcon: 'glyphicon glyphicon-ok',
    formValidationErrorIcon: 'glyphicon glyphicon-remove',
    formValidationWarningIcon: 'glyphicon glyphicon-warning-sign',
    formValidationInfoIcon: 'glyphicon glyphicon-info-sign',
    insertEmberWormholeElementToDom: true,

    load(config = {}) {
      for (let property in config) {
        if (this.hasOwnProperty(property) && typeof this[property] !== 'function') {
          this[property] = config[property];
        }
      }
    }
  });

  exports.default = Config;
});
;define('ember-bootstrap/helpers/bs-contains', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.bsContains = bsContains;
  function bsContains(params /* , hash*/) {
    return Ember.isArray(params[0]) ? Ember.A(params[0]).includes(params[1]) : false;
  }

  exports.default = Ember.Helper.helper(bsContains);
});
;define('ember-bootstrap/helpers/bs-eq', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.eq = eq;
  function eq(params) {
    return params[0] === params[1];
  }

  exports.default = Ember.Helper.helper(eq);
});
;define('ember-bootstrap/mixins/component-child', ['exports', 'ember-bootstrap/mixins/component-parent'], function (exports, _componentParent) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Mixin.create({

    /**
     * The parent component
     *
     * @property _parent
     * @private
     */
    _parent: Ember.computed(function () {
      return this.nearestOfType(_componentParent.default);
    }),

    /**
     * flag to check if component has already been registered
     * @property _didRegister
     * @type boolean
     * @private
     */
    _didRegister: false,

    /**
     * Register ourself as a child at the parent component
     * We use the `willRender` event here to also support the fastboot environment, where there is no `didInsertElement`
     *
     * @method _registerWithParent
     * @private
     */
    _registerWithParent() {
      if (!this._didRegister) {
        let parent = this.get('_parent');
        if (parent) {
          parent.registerChild(this);
          this._didRegister = true;
        }
      }
    },

    /**
     * Unregister from the parent component
     *
     * @method _unregisterFromParent
     * @private
     */
    _unregisterFromParent() {
      let parent = this.get('_parent');
      if (this._didRegister && parent) {
        parent.removeChild(this);
        this._didRegister = false;
      }
    },

    didReceiveAttrs() {
      this._super(...arguments);
      this._registerWithParent();
    },

    willRender() {
      this._super(...arguments);
      this._registerWithParent();
    },

    willDestroyElement() {
      this._super(...arguments);
      this._unregisterFromParent();
    }
  });
});
;define('ember-bootstrap/mixins/component-parent', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Mixin.create({

    /**
     * Array of registered child components
     *
     * @property children
     * @type array
     * @protected
     */
    children: null,

    init() {
      this._super(...arguments);
      this.set('children', Ember.A());
    },

    /**
     * Register a component as a child of this parent
     *
     * @method registerChild
     * @param child
     * @public
     */
    registerChild(child) {
      Ember.run.schedule('actions', this, function () {
        this.get('children').addObject(child);
      });
    },

    /**
     * Remove the child component from this parent component
     *
     * @method removeChild
     * @param child
     * @public
     */
    removeChild(child) {
      Ember.run.schedule('actions', this, function () {
        this.get('children').removeObject(child);
      });
    }
  });
});
;define('ember-bootstrap/mixins/control-attributes', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Mixin.create({
    attributeBindings: ['name', 'autofocus', 'disabled', 'readonly', 'required', 'tabindex', 'form', 'title', 'ariaDescribedBy:aria-describedby'],
    tagName: 'input'
  });
});
;define('ember-bootstrap/mixins/control-validation', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Mixin.create({
    classNameBindings: ['formFeedbackClass'],

    validationType: null,

    formFeedbackClass: Ember.computed('validationType', function () {
      let validationType = this.get('validationType');
      switch (validationType) {
        case 'error':
          return 'is-invalid';
        case 'success':
          return 'is-valid';
        case 'warning':
          return 'is-warning'; // not officially supported in BS4 :(
      }
    })
  });
});
;define('ember-bootstrap/mixins/dropdown-toggle', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Mixin.create({
    classNames: ['dropdown-toggle'],

    /**
     * @property ariaRole
     * @default button
     * @type string
     * @protected
     */
    ariaRole: 'button',

    /**
     * Reference to the parent dropdown component
     *
     * @property dropdown
     * @type {Components.Dropdown}
     * @private
     */
    dropdown: null,

    didReceiveAttrs() {
      this._super(...arguments);
      let dropdown = this.get('dropdown');
      if (dropdown) {
        Ember.run.schedule('actions', this, function () {
          if (!this.get('isDestroyed')) {
            dropdown.set('toggle', this);
          }
        });
      }
    }
  });
});
;define('ember-bootstrap/mixins/size-class', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Mixin.create({
    /**
     * Prefix for the size class, e.g. "btn" for button size classes ("btn-lg", "btn-sm" etc.)
     *
     * @property classTypePrefix
     * @type string
     * @required
     * @protected
     */
    classTypePrefix: null,

    classNameBindings: ['sizeClass'],

    sizeClass: Ember.computed('size', function () {
      let prefix = this.get('classTypePrefix');
      let size = this.get('size');
      return Ember.isBlank(size) ? null : `${prefix}-${size}`;
    }),

    /**
     * Property for size styling, set to 'lg', 'sm' or 'xs'
     *
     * Also see the [Bootstrap docs](http://getbootstrap.com/css/#buttons-sizes)
     *
     * @property size
     * @type String
     * @public
     */
    size: null
  });
});
;define('ember-bootstrap/mixins/sub-component', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Mixin.create({
    targetObject: Ember.computed.alias('parentView')
  });
});
;define('ember-bootstrap/mixins/transition-support', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Mixin.create({

    /**
     * @property transitionsEnabled
     * @type boolean
     * @private
     */
    transitionsEnabled: Ember.computed.reads('fade'),

    /**
     * Access to the fastboot service if available
     *
     * @property fastboot
     * @type {Ember.Service}
     * @private
     */
    fastboot: Ember.computed(function () {
      let owner = Ember.getOwner(this);
      return owner.lookup('service:fastboot');
    }),

    /**
     * Use CSS transitions?
     *
     * @property usesTransition
     * @type boolean
     * @readonly
     * @private
     */
    usesTransition: Ember.computed('fade', 'fastboot.isFastBoot', function () {
      return !this.get('fastboot.isFastBoot') && this.get('transitionsEnabled');
    })
  });
});
;define('ember-bootstrap/mixins/type-class', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Mixin.create({
    /**
     * Prefix for the type class, e.g. "btn" for button type classes ("btn-primary2 etc.)
     *
     * @property classTypePrefix
     * @type string
     * @required
     * @protected
     */
    classTypePrefix: null,

    classNameBindings: ['typeClass'],

    typeClass: Ember.computed('type', function () {
      let prefix = this.get('classTypePrefix');
      let type = this.get('type') || 'default';

      if (this.get('outline')) {
        return `${prefix}-outline-${type}`;
      }
      return `${prefix}-${type}`;
    }),

    /**
     * Property for type styling
     *
     * For the available types see the [Bootstrap docs](http://getbootstrap.com/css/#buttons-options) (use without "btn-" prefix)
     *
     * @property type
     * @type String
     * @default 'default'
     * @public
     */
    type: 'default'
  });
});
;define("ember-bootstrap/templates/components/bs-form", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "EkRIfI/s",
    "block": "{\"symbols\":[\"&default\"],\"statements\":[[14,1,[[27,\"hash\",null,[[\"element\",\"group\",\"isSubmitting\",\"isSubmitted\",\"isRejected\",\"resetSubmissionState\"],[[27,\"component\",[[23,[\"elementComponent\"]]],[[\"model\",\"formLayout\",\"horizontalLabelGridClass\",\"showAllValidations\",\"onChange\",\"_onChange\"],[[23,[\"model\"]],[23,[\"formLayout\"]],[23,[\"horizontalLabelGridClass\"]],[23,[\"showAllValidations\"]],[27,\"action\",[[22,0,[]],\"change\"],null],[27,\"action\",[[22,0,[]],\"resetSubmissionState\"],null]]]],[27,\"component\",[[23,[\"groupComponent\"]]],[[\"formLayout\"],[[23,[\"formLayout\"]]]]],[23,[\"isSubmitting\"]],[23,[\"isSubmitted\"]],[23,[\"isRejected\"]],[27,\"action\",[[22,0,[]],\"resetSubmissionState\"],null]]]]]],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ember-bootstrap/templates/components/bs-form.hbs"
    }
  });

  _exports.default = _default;
});
;define("ember-bootstrap/templates/components/bs-form/element", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "y+VAwtbv",
    "block": "{\"symbols\":[\"control\",\"&default\"],\"statements\":[[4,\"component\",[[23,[\"layoutComponent\"]]],[[\"hasLabel\",\"formElementId\",\"horizontalLabelGridClass\",\"errorsComponent\",\"feedbackIconComponent\",\"labelComponent\",\"helpTextComponent\"],[[23,[\"hasLabel\"]],[23,[\"formElementId\"]],[23,[\"horizontalLabelGridClass\"]],[27,\"component\",[[23,[\"errorsComponent\"]]],[[\"messages\",\"show\",\"showMultipleErrors\"],[[23,[\"validationMessages\"]],[23,[\"showValidationMessages\"]],[23,[\"showMultipleErrors\"]]]]],[27,\"component\",[[23,[\"feedbackIconComponent\"]]],[[\"iconName\",\"show\"],[[23,[\"iconName\"]],[23,[\"hasFeedback\"]]]]],[27,\"component\",[[23,[\"labelComponent\"]]],[[\"label\",\"invisibleLabel\",\"formElementId\",\"controlType\",\"formLayout\",\"size\"],[[23,[\"label\"]],[23,[\"invisibleLabel\"]],[23,[\"formElementId\"]],[23,[\"controlType\"]],[23,[\"formLayout\"]],[23,[\"size\"]]]]],[27,\"if\",[[23,[\"hasHelpText\"]],[27,\"component\",[[23,[\"helpTextComponent\"]]],[[\"text\",\"id\"],[[23,[\"helpText\"]],[23,[\"ariaDescribedBy\"]]]]]],null]]],{\"statements\":[[4,\"with\",[[27,\"component\",[[23,[\"controlComponent\"]]],[[\"value\",\"id\",\"name\",\"type\",\"label\",\"placeholder\",\"autofocus\",\"disabled\",\"readonly\",\"required\",\"controlSize\",\"tabindex\",\"minlength\",\"maxlength\",\"min\",\"max\",\"pattern\",\"accept\",\"autocomplete\",\"autocapitalize\",\"autocorrect\",\"autosave\",\"inputmode\",\"multiple\",\"step\",\"form\",\"spellcheck\",\"cols\",\"rows\",\"wrap\",\"title\",\"options\",\"optionLabelPath\",\"ariaDescribedBy\",\"onChange\",\"validationType\",\"size\"],[[23,[\"value\"]],[23,[\"formElementId\"]],[23,[\"name\"]],[23,[\"controlType\"]],[23,[\"label\"]],[23,[\"placeholder\"]],[23,[\"autofocus\"]],[23,[\"disabled\"]],[23,[\"readonly\"]],[23,[\"required\"]],[23,[\"controlSize\"]],[23,[\"tabindex\"]],[23,[\"minlength\"]],[23,[\"maxlength\"]],[23,[\"min\"]],[23,[\"max\"]],[23,[\"pattern\"]],[23,[\"accept\"]],[23,[\"autocomplete\"]],[23,[\"autocapitalize\"]],[23,[\"autocorrect\"]],[23,[\"autosave\"]],[23,[\"inputmode\"]],[23,[\"multiple\"]],[23,[\"step\"]],[23,[\"form\"]],[23,[\"spellcheck\"]],[23,[\"cols\"]],[23,[\"rows\"]],[23,[\"wrap\"]],[23,[\"title\"]],[23,[\"options\"]],[23,[\"optionLabelPath\"]],[27,\"if\",[[23,[\"hasHelpText\"]],[23,[\"ariaDescribedBy\"]]],null],[27,\"action\",[[22,0,[]],\"change\"],null],[23,[\"validation\"]],[23,[\"size\"]]]]]],null,{\"statements\":[[4,\"if\",[[24,2]],null,{\"statements\":[[0,\"      \"],[14,2,[[27,\"hash\",null,[[\"value\",\"id\",\"validation\",\"control\"],[[23,[\"value\"]],[23,[\"formElementId\"]],[23,[\"validation\"]],[22,1,[]]]]]]],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"      \"],[1,[27,\"component\",[[22,1,[]]],null],false],[0,\"\\n\"]],\"parameters\":[]}]],\"parameters\":[1]},null]],\"parameters\":[]},null]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ember-bootstrap/templates/components/bs-form/element.hbs"
    }
  });

  _exports.default = _default;
});
;define("ember-bootstrap/templates/components/bs-form/element/control/radio", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "r/lW/Vc/",
    "block": "{\"symbols\":[\"option\",\"index\",\"id\",\"&default\"],\"statements\":[[4,\"each\",[[23,[\"options\"]]],null,{\"statements\":[[4,\"with\",[[27,\"concat\",[[22,0,[\"elementId\"]],\"-\",[22,2,[]]],null]],null,{\"statements\":[[4,\"if\",[[23,[\"inline\"]]],null,{\"statements\":[[0,\"      \"],[7,\"label\"],[12,\"for\",[22,3,[]]],[11,\"class\",\"radio-inline\"],[9],[0,\"\\n        \"],[7,\"input\"],[12,\"id\",[22,3,[]]],[12,\"checked\",[27,\"bs-eq\",[[22,1,[]],[23,[\"value\"]]],null]],[12,\"onclick\",[27,\"action\",[[22,0,[]],[23,[\"onChange\"]],[22,1,[]]],null]],[12,\"name\",[21,\"name\"]],[12,\"required\",[21,\"required\"]],[12,\"disabled\",[21,\"disabled\"]],[12,\"autofocus\",[21,\"autofocus\"]],[12,\"tabindex\",[21,\"tabindex\"]],[12,\"form\",[21,\"form\"]],[12,\"title\",[21,\"title\"]],[11,\"type\",\"radio\"],[9],[10],[0,\"\\n\"],[4,\"if\",[[23,[\"hasblock\"]]],null,{\"statements\":[[0,\"          \"],[14,4],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[23,[\"optionLabelPath\"]]],null,{\"statements\":[[0,\"            \"],[1,[27,\"get\",[[22,1,[]],[23,[\"optionLabelPath\"]]],null],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"            \"],[1,[22,1,[]],false],[0,\"\\n\"]],\"parameters\":[]}]],\"parameters\":[]}],[0,\"      \"],[10],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"      \"],[7,\"div\"],[11,\"class\",\"radio\"],[9],[0,\"\\n\\n        \"],[7,\"label\"],[12,\"for\",[22,3,[]]],[9],[0,\"\\n          \"],[7,\"input\"],[12,\"id\",[22,3,[]]],[12,\"checked\",[27,\"bs-eq\",[[22,1,[]],[23,[\"value\"]]],null]],[12,\"onclick\",[27,\"action\",[[22,0,[]],[23,[\"onChange\"]],[22,1,[]]],null]],[12,\"name\",[21,\"name\"]],[12,\"required\",[21,\"required\"]],[12,\"disabled\",[21,\"disabled\"]],[12,\"autofocus\",[21,\"autofocus\"]],[12,\"tabindex\",[21,\"tabindex\"]],[12,\"form\",[21,\"form\"]],[12,\"title\",[21,\"title\"]],[11,\"type\",\"radio\"],[9],[10],[0,\"\\n\"],[4,\"if\",[[23,[\"hasblock\"]]],null,{\"statements\":[[0,\"            \"],[14,4],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[23,[\"optionLabelPath\"]]],null,{\"statements\":[[0,\"              \"],[1,[27,\"get\",[[22,1,[]],[23,[\"optionLabelPath\"]]],null],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"              \"],[1,[22,1,[]],false],[0,\"\\n\"]],\"parameters\":[]}]],\"parameters\":[]}],[0,\"        \"],[10],[0,\"\\n      \"],[10],[0,\"\\n\"]],\"parameters\":[]}]],\"parameters\":[3]},null]],\"parameters\":[1,2]},null]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ember-bootstrap/templates/components/bs-form/element/control/radio.hbs"
    }
  });

  _exports.default = _default;
});
;define("ember-bootstrap/templates/components/bs-form/element/errors", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "r1RXxCOH",
    "block": "{\"symbols\":[\"message\"],\"statements\":[[4,\"if\",[[23,[\"show\"]]],null,{\"statements\":[[4,\"if\",[[23,[\"showMultipleErrors\"]]],null,{\"statements\":[[0,\"    \"],[7,\"div\"],[11,\"class\",\"pre-scrollable\"],[9],[0,\"\\n\"],[4,\"each\",[[23,[\"messages\"]]],null,{\"statements\":[[0,\"        \"],[7,\"div\"],[12,\"class\",[21,\"feedbackClass\"]],[9],[1,[22,1,[]],false],[10],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"],[10],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"    \"],[7,\"div\"],[12,\"class\",[21,\"feedbackClass\"]],[9],[1,[23,[\"messages\",\"firstObject\"]],false],[10],[0,\"\\n\"]],\"parameters\":[]}]],\"parameters\":[]},null]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ember-bootstrap/templates/components/bs-form/element/errors.hbs"
    }
  });

  _exports.default = _default;
});
;define("ember-bootstrap/templates/components/bs-form/element/feedback-icon", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "0s5tcig6",
    "block": "{\"symbols\":[],\"statements\":[[4,\"if\",[[23,[\"show\"]]],null,{\"statements\":[[0,\"  \"],[7,\"span\"],[12,\"class\",[28,[\"form-control-feedback \",[21,\"iconName\"]]]],[11,\"aria-hidden\",\"true\"],[9],[10],[0,\"\\n\"]],\"parameters\":[]},null]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ember-bootstrap/templates/components/bs-form/element/feedback-icon.hbs"
    }
  });

  _exports.default = _default;
});
;define("ember-bootstrap/templates/components/bs-form/element/help-text", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "zZVUZt6L",
    "block": "{\"symbols\":[],\"statements\":[[1,[21,\"text\"],false]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ember-bootstrap/templates/components/bs-form/element/help-text.hbs"
    }
  });

  _exports.default = _default;
});
;define("ember-bootstrap/templates/components/bs-form/element/label", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "HR7bB/zF",
    "block": "{\"symbols\":[\"&default\"],\"statements\":[[4,\"if\",[[24,1]],null,{\"statements\":[[0,\"  \"],[7,\"label\"],[9],[0,\"\\n    \"],[14,1],[0,\"\\n    \"],[1,[21,\"label\"],false],[0,\"\\n  \"],[10],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"  \"],[7,\"label\"],[12,\"class\",[28,[\"control-label \",[27,\"if\",[[23,[\"invisibleLabel\"]],\"sr-only\"],null],\" \",[21,\"labelClass\"]]]],[12,\"for\",[21,\"formElementId\"]],[9],[1,[21,\"label\"],false],[10],[0,\"\\n\"]],\"parameters\":[]}]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ember-bootstrap/templates/components/bs-form/element/label.hbs"
    }
  });

  _exports.default = _default;
});
;define("ember-bootstrap/templates/components/bs-form/element/layout/horizontal", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "BHiqLNIQ",
    "block": "{\"symbols\":[\"&default\"],\"statements\":[[4,\"if\",[[23,[\"hasLabel\"]]],null,{\"statements\":[[0,\"  \"],[1,[27,\"component\",[[23,[\"labelComponent\"]]],[[\"labelClass\"],[[23,[\"horizontalLabelGridClass\"]]]]],false],[0,\"\\n  \"],[7,\"div\"],[12,\"class\",[21,\"horizontalInputGridClass\"]],[9],[0,\"\\n    \"],[14,1],[0,\"\\n    \"],[1,[27,\"component\",[[23,[\"feedbackIconComponent\"]]],null],false],[0,\"\\n    \"],[1,[27,\"component\",[[23,[\"errorsComponent\"]]],null],false],[0,\"\\n    \"],[1,[27,\"component\",[[23,[\"helpTextComponent\"]]],null],false],[0,\"\\n  \"],[10],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"  \"],[7,\"div\"],[12,\"class\",[28,[[21,\"horizontalInputGridClass\"],\" \",[21,\"horizontalInputOffsetGridClass\"]]]],[9],[0,\"\\n    \"],[14,1],[0,\"\\n    \"],[1,[27,\"component\",[[23,[\"feedbackIconComponent\"]]],null],false],[0,\"\\n    \"],[1,[27,\"component\",[[23,[\"errorsComponent\"]]],null],false],[0,\"\\n    \"],[1,[27,\"component\",[[23,[\"helpTextComponent\"]]],null],false],[0,\"\\n  \"],[10],[0,\"\\n\"]],\"parameters\":[]}]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ember-bootstrap/templates/components/bs-form/element/layout/horizontal.hbs"
    }
  });

  _exports.default = _default;
});
;define("ember-bootstrap/templates/components/bs-form/element/layout/horizontal/checkbox", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "ZBRQLTw0",
    "block": "{\"symbols\":[\"&default\"],\"statements\":[[7,\"div\"],[12,\"class\",[28,[[21,\"horizontalInputGridClass\"],\" \",[21,\"horizontalInputOffsetGridClass\"]]]],[9],[0,\"\\n  \"],[7,\"div\"],[11,\"class\",\"checkbox\"],[9],[0,\"\\n\"],[4,\"component\",[[23,[\"labelComponent\"]]],null,{\"statements\":[[0,\"      \"],[14,1],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"  \"],[10],[0,\"\\n  \"],[1,[27,\"component\",[[23,[\"errorsComponent\"]]],null],false],[0,\"\\n  \"],[1,[27,\"component\",[[23,[\"helpTextComponent\"]]],null],false],[0,\"\\n\"],[10]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ember-bootstrap/templates/components/bs-form/element/layout/horizontal/checkbox.hbs"
    }
  });

  _exports.default = _default;
});
;define("ember-bootstrap/templates/components/bs-form/element/layout/vertical", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "iUOEdkHz",
    "block": "{\"symbols\":[\"&default\"],\"statements\":[[4,\"if\",[[23,[\"hasLabel\"]]],null,{\"statements\":[[0,\"  \"],[1,[27,\"component\",[[23,[\"labelComponent\"]]],null],false],[0,\"\\n\"]],\"parameters\":[]},null],[14,1],[0,\"\\n\"],[1,[27,\"component\",[[23,[\"feedbackIconComponent\"]]],null],false],[0,\"\\n\"],[1,[27,\"component\",[[23,[\"errorsComponent\"]]],null],false],[0,\"\\n\"],[1,[27,\"component\",[[23,[\"helpTextComponent\"]]],null],false]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ember-bootstrap/templates/components/bs-form/element/layout/vertical.hbs"
    }
  });

  _exports.default = _default;
});
;define("ember-bootstrap/templates/components/bs-form/element/layout/vertical/checkbox", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "Zcfry/WT",
    "block": "{\"symbols\":[\"&default\"],\"statements\":[[7,\"div\"],[11,\"class\",\"checkbox\"],[9],[0,\"\\n\"],[4,\"component\",[[23,[\"labelComponent\"]]],null,{\"statements\":[[0,\"    \"],[14,1],[0,\"\\n\"]],\"parameters\":[]},null],[10],[0,\"\\n\"],[1,[27,\"component\",[[23,[\"errorsComponent\"]]],null],false],[0,\"\\n\"],[1,[27,\"component\",[[23,[\"helpTextComponent\"]]],null],false]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ember-bootstrap/templates/components/bs-form/element/layout/vertical/checkbox.hbs"
    }
  });

  _exports.default = _default;
});
;define("ember-bootstrap/templates/components/bs-form/group", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "HBwk1S/K",
    "block": "{\"symbols\":[\"&default\"],\"statements\":[[14,1],[0,\"\\n\"],[4,\"if\",[[23,[\"hasFeedback\"]]],null,{\"statements\":[[0,\"  \"],[7,\"span\"],[12,\"class\",[28,[\"form-control-feedback \",[21,\"iconName\"]]]],[11,\"aria-hidden\",\"true\"],[9],[10],[0,\"\\n\"]],\"parameters\":[]},null]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ember-bootstrap/templates/components/bs-form/group.hbs"
    }
  });

  _exports.default = _default;
});
;define('ember-bootstrap/utils/dom', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.findElementById = findElementById;
  exports.getDOM = getDOM;


  function childNodesOfElement(element) {
    let children = [];
    let child = element.firstChild;
    while (child) {
      children.push(child);
      child = child.nextSibling;
    }
    return children;
  }

  function findElementById(doc, id) {
    if (doc.getElementById) {
      return doc.getElementById(id);
    }

    let nodes = childNodesOfElement(doc);
    let node;

    while (nodes.length) {
      node = nodes.shift();

      if (node.getAttribute && node.getAttribute('id') === id) {
        return node;
      }
      nodes = childNodesOfElement(node).concat(nodes);
    }
  }

  // Private Ember API usage. Get the dom implementation used by the current
  // renderer, be it native browser DOM or Fastboot SimpleDOM
  function getDOM(context) {
    let { renderer } = context;
    if (!renderer._dom) {
      // pre glimmer2
      let container = Ember.getOwner ? Ember.getOwner(context) : context.container;
      let documentService = container.lookup('service:-document');

      if (documentService) {
        return documentService;
      }

      renderer = container.lookup('renderer:-dom');
    }

    if (renderer._dom && renderer._dom.document) {
      return renderer._dom.document;
    } else {
      throw new Error('Could not get DOM');
    }
  }
});
;define('ember-bootstrap/utils/listen-to-cp', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.default = function (dependentKey, defaultValue = null) {
    return Ember.computed(dependentKey, {
      get() {
        return Ember.getWithDefault(this, dependentKey, defaultValue);
      },
      set(key, value) {
        // eslint-disable-line no-unused-vars
        return value;
      }
    });
  };
});
;define('ember-bootstrap/utils/overrideable-cp', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = overrideableCP;


  /**
   * CP macro that created a regular computed property, which can be manually overriden.
   * This is needed after implicitly overrideable CPs have been deprecated:
   * https://deprecations-app-prod.herokuapp.com/deprecations/v3.x/#toc_computed-property-override
   *
   * @private
   */
  function overrideableCP() {
    let fn = Array.prototype.slice.call(arguments, -1)[0];
    let args = Array.prototype.slice.call(arguments, 0, arguments.length - 1);
    (true && !(typeof fn === 'function') && Ember.assert('Last argument for overrideableCP must be a function', typeof fn === 'function'));


    return Ember.computed(...args, {
      get(key) {
        let overridden = this[`__${key}`];
        return overridden || fn.call(this);
      },
      set(key, value) {
        this[`__${key}`] = value;
        return value;
      }
    });
  }
});
;define('ember-bootstrap/utils/transition-end', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = waitForTransitionEnd;
  function waitForTransitionEnd(node, duration = 0) {
    if (!node) {
      return Ember.RSVP.reject();
    }
    let backup;

    if (Ember.testing) {
      duration = 0;
    }

    return new Ember.RSVP.Promise(function (resolve) {
      let done = function () {
        if (backup) {
          Ember.run.cancel(backup);
          backup = null;
        }
        node.removeEventListener('transitionend', done);
        resolve();
      };

      node.addEventListener('transitionend', done, false);
      backup = Ember.run.later(this, done, duration);
    });
  }
});
;define('ember-concurrency/-buffer-policy', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  const saturateActiveQueue = scheduler => {
    while (scheduler.activeTaskInstances.length < scheduler.maxConcurrency) {
      let taskInstance = scheduler.queuedTaskInstances.shift();
      if (!taskInstance) {
        break;
      }
      scheduler.activeTaskInstances.push(taskInstance);
    }
  };

  function numPerformSlots(scheduler) {
    return scheduler.maxConcurrency - scheduler.queuedTaskInstances.length - scheduler.activeTaskInstances.length;
  }

  const enqueueTasksPolicy = exports.enqueueTasksPolicy = {
    requiresUnboundedConcurrency: true,
    schedule(scheduler) {
      // [a,b,_] [c,d,e,f] becomes
      // [a,b,c] [d,e,f]
      saturateActiveQueue(scheduler);
    },
    getNextPerformStatus(scheduler) {
      return numPerformSlots(scheduler) > 0 ? 'succeed' : 'enqueue';
    }
  };

  const dropQueuedTasksPolicy = exports.dropQueuedTasksPolicy = {
    cancelReason: `it belongs to a 'drop' Task that was already running`,
    schedule(scheduler) {
      // [a,b,_] [c,d,e,f] becomes
      // [a,b,c] []
      saturateActiveQueue(scheduler);
      scheduler.spliceTaskInstances(this.cancelReason, scheduler.queuedTaskInstances, 0, scheduler.queuedTaskInstances.length);
    },
    getNextPerformStatus(scheduler) {
      return numPerformSlots(scheduler) > 0 ? 'succeed' : 'drop';
    }
  };

  const cancelOngoingTasksPolicy = exports.cancelOngoingTasksPolicy = {
    cancelReason: `it belongs to a 'restartable' Task that was .perform()ed again`,
    schedule(scheduler) {
      // [a,b,_] [c,d,e,f] becomes
      // [d,e,f] []
      let activeTaskInstances = scheduler.activeTaskInstances;
      let queuedTaskInstances = scheduler.queuedTaskInstances;
      activeTaskInstances.push(...queuedTaskInstances);
      queuedTaskInstances.length = 0;

      let numToShift = Math.max(0, activeTaskInstances.length - scheduler.maxConcurrency);
      scheduler.spliceTaskInstances(this.cancelReason, activeTaskInstances, 0, numToShift);
    },
    getNextPerformStatus(scheduler) {
      return numPerformSlots(scheduler) > 0 ? 'succeed' : 'cancel_previous';
    }
  };

  const dropButKeepLatestPolicy = exports.dropButKeepLatestPolicy = {
    cancelReason: `it belongs to a 'keepLatest' Task that was already running`,
    schedule(scheduler) {
      // [a,b,_] [c,d,e,f] becomes
      // [d,e,f] []
      saturateActiveQueue(scheduler);
      scheduler.spliceTaskInstances(this.cancelReason, scheduler.queuedTaskInstances, 0, scheduler.queuedTaskInstances.length - 1);
    }
  };
});
;define('ember-concurrency/-cancelable-promise-helpers', ['exports', 'ember-concurrency/-task-instance', 'ember-concurrency/utils'], function (exports, _taskInstance, _utils) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.hash = exports.race = exports.allSettled = exports.all = undefined;


  const asyncAll = taskAwareVariantOf(Ember.RSVP.Promise, 'all', identity);

  function* resolver(value) {
    return value;
  }

  /**
   * A cancelation-aware variant of [Promise.all](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all).
   * The normal version of a `Promise.all` just returns a regular, uncancelable
   * Promise. The `ember-concurrency` variant of `all()` has the following
   * additional behavior:
   *
   * - if the task that `yield`ed `all()` is canceled, any of the
   *   {@linkcode TaskInstance}s passed in to `all` will be canceled
   * - if any of the {@linkcode TaskInstance}s (or regular promises) passed in reject (or
   *   are canceled), all of the other unfinished `TaskInstance`s will
   *   be automatically canceled.
   *
   * [Check out the "Awaiting Multiple Child Tasks example"](/docs/examples/joining-tasks)
   */
  const all = exports.all = things => {
    if (things.length === 0) {
      return things;
    }

    for (let i = 0; i < things.length; ++i) {
      let t = things[i];
      if (!(t && t[_utils.yieldableSymbol])) {
        return asyncAll(things);
      }
    }

    let isAsync = false;
    let taskInstances = things.map(thing => {
      let ti = _taskInstance.default.create({
        // TODO: consider simpler iterator than full on generator fn?
        fn: resolver,
        args: [thing]
      })._start();

      if (ti._completionState !== 1) {
        isAsync = true;
      }
      return ti;
    });

    if (isAsync) {
      return asyncAll(taskInstances);
    } else {
      return taskInstances.map(ti => ti.value);
    }
  };

  /**
   * A cancelation-aware variant of [RSVP.allSettled](http://emberjs.com/api/classes/RSVP.html#method_allSettled).
   * The normal version of a `RSVP.allSettled` just returns a regular, uncancelable
   * Promise. The `ember-concurrency` variant of `allSettled()` has the following
   * additional behavior:
   *
   * - if the task that `yield`ed `allSettled()` is canceled, any of the
   *   {@linkcode TaskInstance}s passed in to `allSettled` will be canceled
   */
  const allSettled = exports.allSettled = taskAwareVariantOf(Ember.RSVP, 'allSettled', identity);

  /**
   * A cancelation-aware variant of [Promise.race](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race).
   * The normal version of a `Promise.race` just returns a regular, uncancelable
   * Promise. The `ember-concurrency` variant of `race()` has the following
   * additional behavior:
   *
   * - if the task that `yield`ed `race()` is canceled, any of the
   *   {@linkcode TaskInstance}s passed in to `race` will be canceled
   * - once any of the tasks/promises passed in complete (either success, failure,
   *   or cancelation), any of the {@linkcode TaskInstance}s passed in will be canceled
   *
   * [Check out the "Awaiting Multiple Child Tasks example"](/docs/examples/joining-tasks)
   */
  const race = exports.race = taskAwareVariantOf(Ember.RSVP.Promise, 'race', identity);

  /**
   * A cancelation-aware variant of [RSVP.hash](http://emberjs.com/api/classes/RSVP.html#hash).
   * The normal version of a `RSVP.hash` just returns a regular, uncancelable
   * Promise. The `ember-concurrency` variant of `hash()` has the following
   * additional behavior:
   *
   * - if the task that `yield`ed `hash()` is canceled, any of the
   *   {@linkcode TaskInstance}s passed in to `allSettled` will be canceled
   * - if any of the items rejects/cancels, all other cancelable items
   *   (e.g. {@linkcode TaskInstance}s) will be canceled
   */
  const hash = exports.hash = taskAwareVariantOf(Ember.RSVP, 'hash', getValues);

  function identity(obj) {
    return obj;
  }

  function getValues(obj) {
    return Object.keys(obj).map(k => obj[k]);
  }

  function taskAwareVariantOf(obj, method, getItems) {
    return function (thing) {
      let items = getItems(thing);
      let defer = Ember.RSVP.defer();

      obj[method](thing).then(defer.resolve, defer.reject);

      let hasCancelled = false;
      let cancelAll = () => {
        if (hasCancelled) {
          return;
        }
        hasCancelled = true;
        items.forEach(it => {
          if (it) {
            if (it instanceof _taskInstance.default) {
              it.cancel();
            } else if (typeof it.__ec_cancel__ === 'function') {
              it.__ec_cancel__();
            }
          }
        });
      };

      let promise = defer.promise.finally(cancelAll);
      promise.__ec_cancel__ = cancelAll;
      return promise;
    };
  }
});
;define('ember-concurrency/-encapsulated-task', ['exports', 'ember-concurrency/-task-instance'], function (exports, _taskInstance) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _taskInstance.default.extend({
    _makeIterator() {
      let perform = this.get('perform');
      (true && !(typeof perform === 'function') && Ember.assert("The object passed to `task()` must define a `perform` generator function, e.g. `perform: function * (a,b,c) {...}`, or better yet `*perform(a,b,c) {...}`", typeof perform === 'function'));

      return perform.apply(this, this.args);
    },

    perform: null
  });
});
;define('ember-concurrency/-helpers', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.taskHelperClosure = taskHelperClosure;
  function taskHelperClosure(helperName, taskMethod, _args, hash) {
    let task = _args[0];
    let outerArgs = _args.slice(1);

    return Ember.run.bind(null, function (...innerArgs) {
      if (!task || typeof task[taskMethod] !== 'function') {
        (true && !(false) && Ember.assert(`The first argument passed to the \`${helperName}\` helper should be a Task object (without quotes); you passed ${task}`, false));

        return;
      }

      if (hash && hash.value) {
        let event = innerArgs.pop();
        innerArgs.push(Ember.get(event, hash.value));
      }

      return task[taskMethod](...outerArgs, ...innerArgs);
    });
  }
});
;define('ember-concurrency/-property-modifiers-mixin', ['exports', 'ember-concurrency/-scheduler', 'ember-concurrency/-buffer-policy'], function (exports, _scheduler, _bufferPolicy) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.propertyModifiers = undefined;
  exports.resolveScheduler = resolveScheduler;
  const propertyModifiers = exports.propertyModifiers = {
    // by default, task(...) expands to task(...).enqueue().maxConcurrency(Infinity)
    _bufferPolicy: _bufferPolicy.enqueueTasksPolicy,
    _maxConcurrency: Infinity,
    _taskGroupPath: null,
    _hasUsedModifier: false,
    _hasSetBufferPolicy: false,
    _hasEnabledEvents: false,

    restartable() {
      return setBufferPolicy(this, _bufferPolicy.cancelOngoingTasksPolicy);
    },

    enqueue() {
      return setBufferPolicy(this, _bufferPolicy.enqueueTasksPolicy);
    },

    drop() {
      return setBufferPolicy(this, _bufferPolicy.dropQueuedTasksPolicy);
    },

    keepLatest() {
      return setBufferPolicy(this, _bufferPolicy.dropButKeepLatestPolicy);
    },

    maxConcurrency(n) {
      this._hasUsedModifier = true;
      this._maxConcurrency = n;
      assertModifiersNotMixedWithGroup(this);
      return this;
    },

    group(taskGroupPath) {
      this._taskGroupPath = taskGroupPath;
      assertModifiersNotMixedWithGroup(this);
      return this;
    },

    evented() {
      this._hasEnabledEvents = true;
      return this;
    },

    debug() {
      this._debug = true;
      return this;
    }
  };

  function setBufferPolicy(obj, policy) {
    obj._hasSetBufferPolicy = true;
    obj._hasUsedModifier = true;
    obj._bufferPolicy = policy;
    assertModifiersNotMixedWithGroup(obj);

    if (obj._maxConcurrency === Infinity) {
      obj._maxConcurrency = 1;
    }

    return obj;
  }

  function assertModifiersNotMixedWithGroup(obj) {
    (true && !(!obj._hasUsedModifier || !obj._taskGroupPath) && Ember.assert(`ember-concurrency does not currently support using both .group() with other task modifiers (e.g. drop(), enqueue(), restartable())`, !obj._hasUsedModifier || !obj._taskGroupPath));
  }

  function resolveScheduler(propertyObj, obj, TaskGroup) {
    if (propertyObj._taskGroupPath) {
      let taskGroup = obj.get(propertyObj._taskGroupPath);
      (true && !(taskGroup instanceof TaskGroup) && Ember.assert(`Expected path '${propertyObj._taskGroupPath}' to resolve to a TaskGroup object, but instead was ${taskGroup}`, taskGroup instanceof TaskGroup));

      return taskGroup._scheduler;
    } else {
      return _scheduler.default.create({
        bufferPolicy: propertyObj._bufferPolicy,
        maxConcurrency: propertyObj._maxConcurrency
      });
    }
  }
});
;define('ember-concurrency/-scheduler', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  let SEEN_INDEX = 0;

  const Scheduler = Ember.Object.extend({
    lastPerformed: null,
    lastStarted: null,
    lastRunning: null,
    lastSuccessful: null,
    lastComplete: null,
    lastErrored: null,
    lastCanceled: null,
    lastIncomplete: null,
    performCount: 0,

    boundHandleFulfill: null,
    boundHandleReject: null,

    init() {
      this._super(...arguments);
      this.activeTaskInstances = [];
      this.queuedTaskInstances = [];
    },

    cancelAll(reason) {
      let seen = [];
      this.spliceTaskInstances(reason, this.activeTaskInstances, 0, this.activeTaskInstances.length, seen);
      this.spliceTaskInstances(reason, this.queuedTaskInstances, 0, this.queuedTaskInstances.length, seen);
      flushTaskCounts(seen);
    },

    spliceTaskInstances(cancelReason, taskInstances, index, count, seen) {
      for (let i = index; i < index + count; ++i) {
        let taskInstance = taskInstances[i];

        if (!taskInstance.hasStarted) {
          // This tracking logic is kinda spread all over the place...
          // maybe TaskInstances themselves could notify
          // some delegate of queued state changes upon cancelation?
          taskInstance.task.decrementProperty('numQueued');
        }

        taskInstance.cancel(cancelReason);
        if (seen) {
          seen.push(taskInstance.task);
        }
      }
      taskInstances.splice(index, count);
    },

    schedule(taskInstance) {
      Ember.set(this, 'lastPerformed', taskInstance);
      this.incrementProperty('performCount');
      taskInstance.task.incrementProperty('numQueued');
      this.queuedTaskInstances.push(taskInstance);
      this._flushQueues();
    },

    _flushQueues() {
      let seen = [];

      for (let i = 0; i < this.activeTaskInstances.length; ++i) {
        seen.push(this.activeTaskInstances[i].task);
      }

      this.activeTaskInstances = filterFinished(this.activeTaskInstances);

      this.bufferPolicy.schedule(this);

      var lastStarted = null;
      for (let i = 0; i < this.activeTaskInstances.length; ++i) {
        let taskInstance = this.activeTaskInstances[i];
        if (!taskInstance.hasStarted) {
          this._startTaskInstance(taskInstance);
          lastStarted = taskInstance;
        }
        seen.push(taskInstance.task);
      }

      if (lastStarted) {
        Ember.set(this, 'lastStarted', lastStarted);
      }
      Ember.set(this, 'lastRunning', lastStarted);

      for (let i = 0; i < this.queuedTaskInstances.length; ++i) {
        seen.push(this.queuedTaskInstances[i].task);
      }

      flushTaskCounts(seen);
      Ember.set(this, 'concurrency', this.activeTaskInstances.length);
    },

    _startTaskInstance(taskInstance) {
      let task = taskInstance.task;
      task.decrementProperty('numQueued');
      task.incrementProperty('numRunning');

      taskInstance._start()._onFinalize(() => {
        task.decrementProperty('numRunning');
        var state = taskInstance._completionState;
        Ember.set(this, 'lastComplete', taskInstance);
        if (state === 1) {
          Ember.set(this, 'lastSuccessful', taskInstance);
        } else {
          if (state === 2) {
            Ember.set(this, 'lastErrored', taskInstance);
          } else if (state === 3) {
            Ember.set(this, 'lastCanceled', taskInstance);
          }
          Ember.set(this, 'lastIncomplete', taskInstance);
        }
        Ember.run.once(this, this._flushQueues);
      });
    }
  });

  function flushTaskCounts(tasks) {
    SEEN_INDEX++;
    for (let i = 0, l = tasks.length; i < l; ++i) {
      let task = tasks[i];
      if (task._seenIndex < SEEN_INDEX) {
        task._seenIndex = SEEN_INDEX;
        updateTaskChainCounts(task);
      }
    }
  }

  function updateTaskChainCounts(task) {
    let numRunning = task.numRunning;
    let numQueued = task.numQueued;
    let taskGroup = task.get('group');

    while (taskGroup) {
      Ember.set(taskGroup, 'numRunning', numRunning);
      Ember.set(taskGroup, 'numQueued', numQueued);
      taskGroup = taskGroup.get('group');
    }
  }

  function filterFinished(taskInstances) {
    let ret = [];
    for (let i = 0, l = taskInstances.length; i < l; ++i) {
      let taskInstance = taskInstances[i];
      if (Ember.get(taskInstance, 'isFinished') === false) {
        ret.push(taskInstance);
      }
    }
    return ret;
  }

  exports.default = Scheduler;
});
;define('ember-concurrency/-task-group', ['exports', 'ember-concurrency/utils', 'ember-concurrency/-task-state-mixin', 'ember-concurrency/-property-modifiers-mixin'], function (exports, _utils, _taskStateMixin, _propertyModifiersMixin) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.TaskGroupProperty = exports.TaskGroup = undefined;
  const TaskGroup = exports.TaskGroup = Ember.Object.extend(_taskStateMixin.default, {
    isTaskGroup: true,

    toString() {
      return `<TaskGroup:${this._propertyName}>`;
    },

    _numRunningOrNumQueued: Ember.computed.or('numRunning', 'numQueued'),
    isRunning: Ember.computed.bool('_numRunningOrNumQueued'),
    isQueued: false
  });

  let TaskGroupProperty = exports.TaskGroupProperty = undefined;

  if (false) {
    exports.TaskGroupProperty = TaskGroupProperty = class {};
  } else {
    exports.TaskGroupProperty = TaskGroupProperty = class extends _utils._ComputedProperty {};
  }

  (0, _utils.objectAssign)(TaskGroupProperty.prototype, _propertyModifiersMixin.propertyModifiers);
});
;define('ember-concurrency/-task-instance', ['exports', 'ember-concurrency/utils'], function (exports, _utils) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PERFORM_TYPE_LINKED = exports.PERFORM_TYPE_UNLINKED = exports.PERFORM_TYPE_DEFAULT = undefined;
  exports.getRunningInstance = getRunningInstance;
  exports.didCancel = didCancel;
  exports.go = go;
  exports.wrap = wrap;


  const TASK_CANCELATION_NAME = 'TaskCancelation';

  const COMPLETION_PENDING = 0;
  const COMPLETION_SUCCESS = 1;
  const COMPLETION_ERROR = 2;
  const COMPLETION_CANCEL = 3;

  const GENERATOR_STATE_BEFORE_CREATE = "BEFORE_CREATE";
  const GENERATOR_STATE_HAS_MORE_VALUES = "HAS_MORE_VALUES";
  const GENERATOR_STATE_DONE = "DONE";
  const GENERATOR_STATE_ERRORED = "ERRORED";

  const PERFORM_TYPE_DEFAULT = exports.PERFORM_TYPE_DEFAULT = "PERFORM_TYPE_DEFAULT";
  const PERFORM_TYPE_UNLINKED = exports.PERFORM_TYPE_UNLINKED = "PERFORM_TYPE_UNLINKED";
  const PERFORM_TYPE_LINKED = exports.PERFORM_TYPE_LINKED = "PERFORM_TYPE_LINKED";

  let TASK_INSTANCE_STACK = [];

  function getRunningInstance() {
    return TASK_INSTANCE_STACK[TASK_INSTANCE_STACK.length - 1];
  }

  function handleYieldedUnknownThenable(thenable, taskInstance, resumeIndex) {
    thenable.then(value => {
      taskInstance.proceed(resumeIndex, _utils.YIELDABLE_CONTINUE, value);
    }, error => {
      taskInstance.proceed(resumeIndex, _utils.YIELDABLE_THROW, error);
    });
  }

  /**
   * Returns true if the object passed to it is a TaskCancelation error.
   * If you call `someTask.perform().catch(...)` or otherwise treat
   * a {@linkcode TaskInstance} like a promise, you may need to
   * handle the cancelation of a TaskInstance differently from
   * other kinds of errors it might throw, and you can use this
   * convenience function to distinguish cancelation from errors.
   *
   * ```js
   * click() {
   *   this.get('myTask').perform().catch(e => {
   *     if (!didCancel(e)) { throw e; }
   *   });
   * }
   * ```
   *
   * @param {Object} error the caught error, which might be a TaskCancelation
   * @returns {Boolean}
   */
  function didCancel(e) {
    return e && e.name === TASK_CANCELATION_NAME;
  }

  function forwardToInternalPromise(method) {
    return function (...args) {
      this._hasSubscribed = true;
      return this.get('_promise')[method](...args);
    };
  }

  function spliceSlice(str, index, count, add) {
    return str.slice(0, index) + (add || "") + str.slice(index + count);
  }

  /**
    A `TaskInstance` represent a single execution of a
    {@linkcode Task}. Every call to {@linkcode Task#perform} returns
    a `TaskInstance`.
  
    `TaskInstance`s are cancelable, either explicitly
    via {@linkcode TaskInstance#cancel} or {@linkcode Task#cancelAll},
    or automatically due to the host object being destroyed, or
    because concurrency policy enforced by a
    {@linkcode TaskProperty Task Modifier} canceled the task instance.
  
    <style>
      .ignore-this--this-is-here-to-hide-constructor,
      #TaskInstance { display: none }
    </style>
  
    @class TaskInstance
  */
  let taskInstanceAttrs = {
    iterator: null,
    _disposer: null,
    _completionState: COMPLETION_PENDING,
    task: null,
    args: [],
    _hasSubscribed: false,
    _runLoop: true,
    _debug: false,
    _hasEnabledEvents: false,
    cancelReason: null,
    _performType: PERFORM_TYPE_DEFAULT,
    _expectsLinkedYield: false,

    /**
     * If this TaskInstance runs to completion by returning a property
     * other than a rejecting promise, this property will be set
     * with that value.
     *
     * @memberof TaskInstance
     * @instance
     * @readOnly
     */
    value: null,

    /**
     * If this TaskInstance is canceled or throws an error (or yields
     * a promise that rejects), this property will be set with that error.
     * Otherwise, it is null.
     *
     * @memberof TaskInstance
     * @instance
     * @readOnly
     */
    error: null,

    /**
     * True if the task instance is fulfilled.
     *
     * @memberof TaskInstance
     * @instance
     * @readOnly
     */
    isSuccessful: false,

    /**
     * True if the task instance resolves to a rejection.
     *
     * @memberof TaskInstance
     * @instance
     * @readOnly
     */
    isError: false,

    /**
     * True if the task instance was canceled before it could run to completion.
     *
     * @memberof TaskInstance
     * @instance
     * @readOnly
     */
    isCanceled: Ember.computed.and('isCanceling', 'isFinished'),
    isCanceling: false,

    /**
     * True if the task instance has started, else false.
     *
     * @memberof TaskInstance
     * @instance
     * @readOnly
     */
    hasStarted: false,

    /**
     * True if the task has run to completion.
     *
     * @memberof TaskInstance
     * @instance
     * @readOnly
     */
    isFinished: false,

    /**
     * True if the task is still running.
     *
     * @memberof TaskInstance
     * @instance
     * @readOnly
     */
    isRunning: Ember.computed.not('isFinished'),

    /**
     * Describes the state that the task instance is in. Can be used for debugging,
     * or potentially driving some UI state. Possible values are:
     *
     * - `"dropped"`: task instance was canceled before it started
     * - `"canceled"`: task instance was canceled before it could finish
     * - `"finished"`: task instance ran to completion (even if an exception was thrown)
     * - `"running"`: task instance is currently running (returns true even if
     *     is paused on a yielded promise)
     * - `"waiting"`: task instance hasn't begun running yet (usually
     *     because the task is using the {@linkcode TaskProperty#enqueue .enqueue()}
     *     task modifier)
     *
     * The animated timeline examples on the [Task Concurrency](/#/docs/task-concurrency)
     * docs page make use of this property.
     *
     * @memberof TaskInstance
     * @instance
     * @readOnly
     */
    state: Ember.computed('isDropped', 'isCanceling', 'hasStarted', 'isFinished', function () {
      if (Ember.get(this, 'isDropped')) {
        return 'dropped';
      } else if (Ember.get(this, 'isCanceling')) {
        return 'canceled';
      } else if (Ember.get(this, 'isFinished')) {
        return 'finished';
      } else if (Ember.get(this, 'hasStarted')) {
        return 'running';
      } else {
        return 'waiting';
      }
    }),

    /**
     * True if the TaskInstance was canceled before it could
     * ever start running. For example, calling
     * {@linkcode Task#perform .perform()} twice on a
     * task with the {@linkcode TaskProperty#drop .drop()} modifier applied
     * will result in the second task instance being dropped.
     *
     * @memberof TaskInstance
     * @instance
     * @readOnly
     */
    isDropped: Ember.computed('isCanceling', 'hasStarted', function () {
      return Ember.get(this, 'isCanceling') && !Ember.get(this, 'hasStarted');
    }),

    /**
     * Event emitted when a new {@linkcode TaskInstance} starts executing.
     *
     * `on` from `@ember/object/evented` may be used to create a binding on the host object to the event.
     *
     * ```js
     * export default Ember.Component.extend({
     *   doSomething: task(function * () {
     *     // ... does something
     *   }),
     *
     *   onDoSomethingStarted: on('doSomething:started', function (taskInstance) {
     *     // ...
     *   })
     * });
     * ```
     *
     * @event TaskInstance#TASK_NAME:started
     * @param {TaskInstance} taskInstance - Task instance that was started
     */

    /**
     * Event emitted when a {@linkcode TaskInstance} succeeds.
     *
     * `on` from `@ember/object/evented` may be used to create a binding on the host object to the event.
     *
     * ```js
     * export default Ember.Component.extend({
     *   doSomething: task(function * () {
     *     // ... does something
     *   }),
     *
     *   onDoSomethingSucceeded: on('doSomething:succeeded', function (taskInstance) {
     *     // ...
     *   })
     * });
     * ```
     *
     * @event TaskInstance#TASK_NAME:succeeded
     * @param {TaskInstance} taskInstance - Task instance that was succeeded
     */

    /**
     * Event emitted when a {@linkcode TaskInstance} throws an an error that is
     * not handled within the task itself.
     *
     * `on` from `@ember/object/evented` may be used to create a binding on the host object to the event.
     *
     * ```js
     * export default Ember.Component.extend({
     *   doSomething: task(function * () {
     *     // ... does something
     *   }),
     *
     *   onDoSomethingErrored: on('doSomething:errored', function (taskInstance, error) {
     *     // ...
     *   })
     * });
     * ```
     *
     * @event TaskInstance#TASK_NAME:errored
     * @param {TaskInstance} taskInstance - Task instance that was started
     * @param {Error} error - Error that was thrown by the task instance
     */

    /**
     * Event emitted when a {@linkcode TaskInstance} is canceled.
     *
     * `on` from `@ember/object/evented` may be used to create a binding on the host object to the event.
     *
     * ```js
     * export default Ember.Component.extend({
     *   doSomething: task(function * () {
     *     // ... does something
     *   }),
     *
     *   onDoSomethingCanceled: on('doSomething:canceled', function (taskInstance, cancelationReason) {
     *     // ...
     *   })
     * });
     * ```
     *
     * @event TaskInstance#TASK_NAME:canceled
     * @param {TaskInstance} taskInstance - Task instance that was started
     * @param {string} cancelationReason - Cancelation reason that was was provided to {@linkcode TaskInstance#cancel}
     */

    _index: 1,

    _start() {
      if (this.hasStarted || this.isCanceling) {
        return this;
      }
      Ember.set(this, 'hasStarted', true);
      this._scheduleProceed(_utils.YIELDABLE_CONTINUE, undefined);
      this._triggerEvent('started', this);
      return this;
    },

    toString() {
      let taskString = "" + this.task;
      return spliceSlice(taskString, -1, 0, `.perform()`);
    },

    /**
     * Cancels the task instance. Has no effect if the task instance has
     * already been canceled or has already finished running.
     *
     * @method cancel
     * @memberof TaskInstance
     * @instance
     */
    cancel(cancelReason = ".cancel() was explicitly called") {
      if (this.isCanceling || Ember.get(this, 'isFinished')) {
        return;
      }
      Ember.set(this, 'isCanceling', true);

      let name = Ember.get(this, 'task._propertyName') || "<unknown>";
      Ember.set(this, 'cancelReason', `TaskInstance '${name}' was canceled because ${cancelReason}. For more information, see: http://ember-concurrency.com/docs/task-cancelation-help`);

      if (this.hasStarted) {
        this._proceedSoon(_utils.YIELDABLE_CANCEL, null);
      } else {
        this._finalize(null, COMPLETION_CANCEL);
      }
    },

    _defer: null,
    _promise: Ember.computed(function () {
      this._defer = Ember.RSVP.defer();
      this._maybeResolveDefer();
      return this._defer.promise;
    }),

    _maybeResolveDefer() {
      if (!this._defer || !this._completionState) {
        return;
      }

      if (this._completionState === COMPLETION_SUCCESS) {
        this._defer.resolve(this.value);
      } else {
        this._defer.reject(this.error);
      }
    },

    /**
     * Returns a promise that resolves with the value returned
     * from the task's (generator) function, or rejects with
     * either the exception thrown from the task function, or
     * an error with a `.name` property with value `"TaskCancelation"`.
     *
     * @method then
     * @memberof TaskInstance
     * @instance
     * @return {Promise}
     */
    then: forwardToInternalPromise('then'),

    /**
     * @method catch
     * @memberof TaskInstance
     * @instance
     * @return {Promise}
     */
    catch: forwardToInternalPromise('catch'),

    /**
     * @method finally
     * @memberof TaskInstance
     * @instance
     * @return {Promise}
     */
    finally: forwardToInternalPromise('finally'),

    _finalize(_value, _completionState) {
      let completionState = _completionState;
      let value = _value;
      this._index++;

      if (this.isCanceling) {
        completionState = COMPLETION_CANCEL;
        value = new Error(this.cancelReason);

        if (this._debug || Ember.ENV.DEBUG_TASKS) {
          // eslint-disable-next-line no-console
          console.log(this.cancelReason);
        }

        value.name = TASK_CANCELATION_NAME;
        value.taskInstance = this;
      }

      Ember.set(this, '_completionState', completionState);
      Ember.set(this, '_result', value);

      if (completionState === COMPLETION_SUCCESS) {
        Ember.set(this, 'isSuccessful', true);
        Ember.set(this, 'value', value);
      } else if (completionState === COMPLETION_ERROR) {
        Ember.set(this, 'isError', true);
        Ember.set(this, 'error', value);
      } else if (completionState === COMPLETION_CANCEL) {
        Ember.set(this, 'error', value);
      }

      Ember.set(this, 'isFinished', true);

      this._dispose();
      this._runFinalizeCallbacks();
      this._dispatchFinalizeEvents();
    },

    _finalizeCallbacks: null,
    _onFinalize(callback) {
      if (!this._finalizeCallbacks) {
        this._finalizeCallbacks = [];
      }
      this._finalizeCallbacks.push(callback);

      if (this._completionState) {
        this._runFinalizeCallbacks();
      }
    },

    _runFinalizeCallbacks() {
      this._maybeResolveDefer();
      if (this._finalizeCallbacks) {
        for (let i = 0, l = this._finalizeCallbacks.length; i < l; ++i) {
          this._finalizeCallbacks[i]();
        }
        this._finalizeCallbacks = null;
      }

      this._maybeThrowUnhandledTaskErrorLater();
    },

    _maybeThrowUnhandledTaskErrorLater() {
      // this backports the Ember 2.0+ RSVP _onError 'after' microtask behavior to Ember < 2.0
      if (!this._hasSubscribed && this._completionState === COMPLETION_ERROR) {
        Ember.run.schedule(Ember.run.backburner.queueNames[Ember.run.backburner.queueNames.length - 1], () => {
          if (!this._hasSubscribed && !didCancel(this.error)) {
            Ember.RSVP.reject(this.error);
          }
        });
      }
    },

    _dispatchFinalizeEvents() {
      switch (this._completionState) {
        case COMPLETION_SUCCESS:
          this._triggerEvent('succeeded', this);
          break;
        case COMPLETION_ERROR:
          this._triggerEvent('errored', this, Ember.get(this, 'error'));
          break;
        case COMPLETION_CANCEL:
          this._triggerEvent('canceled', this, Ember.get(this, 'cancelReason'));
          break;
      }
    },

    /**
     * Runs any disposers attached to the task's most recent `yield`.
     * For instance, when a task yields a TaskInstance, it registers that
     * child TaskInstance's disposer, so that if the parent task is canceled,
     * _dispose() will run that disposer and cancel the child TaskInstance.
     *
     * @private
     */
    _dispose() {
      if (this._disposer) {
        let disposer = this._disposer;
        this._disposer = null;

        // TODO: test erroring disposer
        disposer();
      }
    },

    _isGeneratorDone() {
      let state = this._generatorState;
      return state === GENERATOR_STATE_DONE || state === GENERATOR_STATE_ERRORED;
    },

    /**
     * Calls .next()/.throw()/.return() on the task's generator function iterator,
     * essentially taking a single step of execution on the task function.
     *
     * @private
     */
    _resumeGenerator(nextValue, iteratorMethod) {
      (true && !(!this._isGeneratorDone()) && Ember.assert("The task generator function has already run to completion. This is probably an ember-concurrency bug.", !this._isGeneratorDone()));


      try {
        TASK_INSTANCE_STACK.push(this);

        let iterator = this._getIterator();
        let result = iterator[iteratorMethod](nextValue);

        this._generatorValue = result.value;
        if (result.done) {
          this._generatorState = GENERATOR_STATE_DONE;
        } else {
          this._generatorState = GENERATOR_STATE_HAS_MORE_VALUES;
        }
      } catch (e) {
        this._generatorValue = e;
        this._generatorState = GENERATOR_STATE_ERRORED;
      } finally {
        if (this._expectsLinkedYield) {
          if (!this._generatorValue || this._generatorValue._performType !== PERFORM_TYPE_LINKED) {
            // eslint-disable-next-line no-console
            console.warn("You performed a .linked() task without immediately yielding/returning it. This is currently unsupported (but might be supported in future version of ember-concurrency).");
          }
          this._expectsLinkedYield = false;
        }

        TASK_INSTANCE_STACK.pop();
      }
    },

    _getIterator() {
      if (!this.iterator) {
        this.iterator = this._makeIterator();
      }
      return this.iterator;
    },

    /**
     * Returns a generator function iterator (the object with
     * .next()/.throw()/.return() methods) using the task function
     * supplied to `task(...)`. It uses `apply` so that the `this`
     * context is the host object the task lives on, and passes
     * the args passed to `perform(...args)` through to the generator
     * function.
     *
     * `_makeIterator` is overridden in EncapsulatedTask to produce
     * an iterator based on the `*perform()` function on the
     * EncapsulatedTask definition.
     *
     * @private
     */
    _makeIterator() {
      return this.fn.apply(this.context, this.args);
    },

    /**
     * The TaskInstance internally tracks an index/sequence number
     * (the `_index` property) which gets incremented every time the
     * task generator function iterator takes a step. When a task
     * function is paused at a `yield`, there are two events that
     * cause the TaskInstance to take a step: 1) the yielded value
     * "resolves", thus resuming the TaskInstance's execution, or
     * 2) the TaskInstance is canceled. We need some mechanism to prevent
     * stale yielded value resolutions from resuming the TaskFunction
     * after the TaskInstance has already moved on (either because
     * the TaskInstance has since been canceled or because an
     * implementation of the Yieldable API tried to resume the
     * TaskInstance more than once). The `_index` serves as
     * that simple mechanism: anyone resuming a TaskInstance
     * needs to pass in the `index` they were provided that acts
     * as a ticket to resume the TaskInstance that expires once
     * the TaskInstance has moved on.
     *
     * @private
     */
    _advanceIndex(index) {
      if (this._index === index) {
        return ++this._index;
      }
    },

    _proceedSoon(yieldResumeType, value) {
      this._advanceIndex(this._index);
      if (this._runLoop) {
        Ember.run.join(() => {
          Ember.run.schedule('actions', this, this._proceed, yieldResumeType, value);
        });
      } else {
        setTimeout(() => this._proceed(yieldResumeType, value), 1);
      }
    },

    proceed(index, yieldResumeType, value) {
      if (this._completionState) {
        return;
      }
      if (!this._advanceIndex(index)) {
        return;
      }
      this._proceedSoon(yieldResumeType, value);
    },

    _scheduleProceed(yieldResumeType, value) {
      if (this._completionState) {
        return;
      }

      if (this._runLoop && !Ember.run.currentRunLoop) {
        Ember.run(this, this._proceed, yieldResumeType, value);
        return;
      } else if (!this._runLoop && Ember.run.currentRunLoop) {
        setTimeout(() => this._proceed(yieldResumeType, value), 1);
        return;
      } else {
        this._proceed(yieldResumeType, value);
      }
    },

    _proceed(yieldResumeType, value) {
      if (this._completionState) {
        return;
      }

      if (this._generatorState === GENERATOR_STATE_DONE) {
        this._handleResolvedReturnedValue(yieldResumeType, value);
      } else {
        this._handleResolvedContinueValue(yieldResumeType, value);
      }
    },

    _handleResolvedReturnedValue(yieldResumeType, value) {
      (true && !(this._completionState === COMPLETION_PENDING) && Ember.assert("expected completion state to be pending", this._completionState === COMPLETION_PENDING));
      (true && !(this._generatorState === GENERATOR_STATE_DONE) && Ember.assert("expected generator to be done", this._generatorState === GENERATOR_STATE_DONE));


      switch (yieldResumeType) {
        case _utils.YIELDABLE_CONTINUE:
        case _utils.YIELDABLE_RETURN:
          this._finalize(value, COMPLETION_SUCCESS);
          break;
        case _utils.YIELDABLE_THROW:
          this._finalize(value, COMPLETION_ERROR);
          break;
        case _utils.YIELDABLE_CANCEL:
          Ember.set(this, 'isCanceling', true);
          this._finalize(null, COMPLETION_CANCEL);
          break;
      }
    },

    _generatorState: GENERATOR_STATE_BEFORE_CREATE,
    _generatorValue: null,
    _handleResolvedContinueValue(_yieldResumeType, resumeValue) {
      let iteratorMethod = _yieldResumeType;
      if (iteratorMethod === _utils.YIELDABLE_CANCEL) {
        Ember.set(this, 'isCanceling', true);
        iteratorMethod = _utils.YIELDABLE_RETURN;
      }

      this._dispose();

      let beforeIndex = this._index;
      this._resumeGenerator(resumeValue, iteratorMethod);

      if (!this._advanceIndex(beforeIndex)) {
        return;
      }

      if (this._generatorState === GENERATOR_STATE_ERRORED) {
        this._finalize(this._generatorValue, COMPLETION_ERROR);
        return;
      }

      this._handleYieldedValue();
    },

    _handleYieldedValue() {
      let yieldedValue = this._generatorValue;
      if (!yieldedValue) {
        this._proceedWithSimpleValue(yieldedValue);
        return;
      }

      if (yieldedValue instanceof _utils.RawValue) {
        this._proceedWithSimpleValue(yieldedValue.value);
        return;
      }

      this._addDisposer(yieldedValue.__ec_cancel__);

      if (yieldedValue[_utils.yieldableSymbol]) {
        this._invokeYieldable(yieldedValue);
      } else if (typeof yieldedValue.then === 'function') {
        handleYieldedUnknownThenable(yieldedValue, this, this._index);
      } else {
        this._proceedWithSimpleValue(yieldedValue);
      }
    },

    _proceedWithSimpleValue(yieldedValue) {
      this.proceed(this._index, _utils.YIELDABLE_CONTINUE, yieldedValue);
    },

    _addDisposer(maybeDisposer) {
      if (typeof maybeDisposer === 'function') {
        let priorDisposer = this._disposer;
        if (priorDisposer) {
          this._disposer = () => {
            priorDisposer();
            maybeDisposer();
          };
        } else {
          this._disposer = maybeDisposer;
        }
      }
    },

    _invokeYieldable(yieldedValue) {
      try {
        let maybeDisposer = yieldedValue[_utils.yieldableSymbol](this, this._index);
        this._addDisposer(maybeDisposer);
      } catch (e) {
        // TODO: handle erroneous yieldable implementation
      }
    },

    _triggerEvent(eventType, ...args) {
      if (!this._hasEnabledEvents) {
        return;
      }

      let host = Ember.get(this, 'task.context');
      let eventNamespace = Ember.get(this, 'task._propertyName');

      if (host && host.trigger && eventNamespace) {
        host.trigger(`${eventNamespace}:${eventType}`, ...args);
      }
    }
  };

  taskInstanceAttrs[_utils.yieldableSymbol] = function handleYieldedTaskInstance(parentTaskInstance, resumeIndex) {
    let yieldedTaskInstance = this;
    yieldedTaskInstance._hasSubscribed = true;

    yieldedTaskInstance._onFinalize(() => {
      let state = yieldedTaskInstance._completionState;
      if (state === COMPLETION_SUCCESS) {
        parentTaskInstance.proceed(resumeIndex, _utils.YIELDABLE_CONTINUE, yieldedTaskInstance.value);
      } else if (state === COMPLETION_ERROR) {
        parentTaskInstance.proceed(resumeIndex, _utils.YIELDABLE_THROW, yieldedTaskInstance.error);
      } else if (state === COMPLETION_CANCEL) {
        parentTaskInstance.proceed(resumeIndex, _utils.YIELDABLE_CANCEL, null);
      }
    });

    return function disposeYieldedTaskInstance() {
      if (yieldedTaskInstance._performType !== PERFORM_TYPE_UNLINKED) {
        if (yieldedTaskInstance._performType === PERFORM_TYPE_DEFAULT) {
          let parentObj = Ember.get(parentTaskInstance, 'task.context');
          let childObj = Ember.get(yieldedTaskInstance, 'task.context');
          if (parentObj && childObj && parentObj !== childObj && parentObj.isDestroying && Ember.get(yieldedTaskInstance, 'isRunning')) {
            let parentName = `\`${parentTaskInstance.task._propertyName}\``;
            let childName = `\`${yieldedTaskInstance.task._propertyName}\``;
            // eslint-disable-next-line no-console
            console.warn(`ember-concurrency detected a potentially hazardous "self-cancel loop" between parent task ${parentName} and child task ${childName}. If you want child task ${childName} to be canceled when parent task ${parentName} is canceled, please change \`.perform()\` to \`.linked().perform()\`. If you want child task ${childName} to keep running after parent task ${parentName} is canceled, change it to \`.unlinked().perform()\``);
          }
        }
        yieldedTaskInstance.cancel();
      }
    };
  };

  let TaskInstance = Ember.Object.extend(taskInstanceAttrs);

  function go(args, fn, attrs = {}) {
    return TaskInstance.create(Object.assign({ args, fn, context: this }, attrs))._start();
  }

  function wrap(fn, attrs = {}) {
    return function wrappedRunnerFunction(...args) {
      return go.call(this, args, fn, attrs);
    };
  }

  exports.default = TaskInstance;
});
;define('ember-concurrency/-task-property', ['exports', 'ember-concurrency/-task-instance', 'ember-concurrency/-task-state-mixin', 'ember-concurrency/-property-modifiers-mixin', 'ember-concurrency/utils', 'ember-concurrency/-encapsulated-task'], function (exports, _taskInstance, _taskStateMixin, _propertyModifiersMixin, _utils, _encapsulatedTask) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.TaskProperty = exports.Task = undefined;


  const PerformProxy = Ember.Object.extend({
    _task: null,
    _performType: null,
    _linkedObject: null,

    perform(...args) {
      return this._task._performShared(args, this._performType, this._linkedObject);
    }
  });

  /**
    The `Task` object lives on a host Ember object (e.g.
    a Component, Route, or Controller). You call the
    {@linkcode Task#perform .perform()} method on this object
    to create run individual {@linkcode TaskInstance}s,
    and at any point, you can call the {@linkcode Task#cancelAll .cancelAll()}
    method on this object to cancel all running or enqueued
    {@linkcode TaskInstance}s.
  
  
    <style>
      .ignore-this--this-is-here-to-hide-constructor,
      #Task{ display: none }
    </style>
  
    @class Task
  */
  const Task = exports.Task = Ember.Object.extend(_taskStateMixin.default, {
    /**
     * `true` if any current task instances are running.
     *
     * @memberof Task
     * @member {boolean} isRunning
     * @instance
     * @readOnly
     */

    /**
     * `true` if any future task instances are queued.
     *
     * @memberof Task
     * @member {boolean} isQueued
     * @instance
     * @readOnly
     */

    /**
     * `true` if the task is not in the running or queued state.
     *
     * @memberof Task
     * @member {boolean} isIdle
     * @instance
     * @readOnly
     */

    /**
     * The current state of the task: `"running"`, `"queued"` or `"idle"`.
     *
     * @memberof Task
     * @member {string} state
     * @instance
     * @readOnly
     */

    /**
     * The most recently started task instance.
     *
     * @memberof Task
     * @member {TaskInstance} last
     * @instance
     * @readOnly
     */

    /**
     * The most recent task instance that is currently running.
     *
     * @memberof Task
     * @member {TaskInstance} lastRunning
     * @instance
     * @readOnly
     */

    /**
     * The most recently performed task instance.
     *
     * @memberof Task
     * @member {TaskInstance} lastPerformed
     * @instance
     * @readOnly
     */

    /**
     * The most recent task instance that succeeded.
     *
     * @memberof Task
     * @member {TaskInstance} lastSuccessful
     * @instance
     * @readOnly
     */

    /**
     * The most recently completed task instance.
     *
     * @memberof Task
     * @member {TaskInstance} lastComplete
     * @instance
     * @readOnly
     */

    /**
     * The most recent task instance that errored.
     *
     * @memberof Task
     * @member {TaskInstance} lastErrored
     * @instance
     * @readOnly
     */

    /**
     * The most recently canceled task instance.
     *
     * @memberof Task
     * @member {TaskInstance} lastCanceled
     * @instance
     * @readOnly
     */

    /**
     * The most recent task instance that is incomplete.
     *
     * @memberof Task
     * @member {TaskInstance} lastIncomplete
     * @instance
     * @readOnly
     */

    /**
     * The number of times this task has been performed.
     *
     * @memberof Task
     * @member {number} performCount
     * @instance
     * @readOnly
     */

    fn: null,
    context: null,
    _observes: null,
    _curryArgs: null,
    _linkedObjects: null,

    init() {
      this._super(...arguments);

      if (typeof this.fn === 'object') {
        let owner = Ember.getOwner(this.context);
        let ownerInjection = owner ? owner.ownerInjection() : {};
        this._taskInstanceFactory = _encapsulatedTask.default.extend(ownerInjection, this.fn);
      }

      (0, _utils._cleanupOnDestroy)(this.context, this, 'cancelAll', {
        reason: 'the object it lives on was destroyed or unrendered'
      });
    },

    _curry(...args) {
      let task = this._clone();
      task._curryArgs = [...(this._curryArgs || []), ...args];
      return task;
    },

    linked() {
      let taskInstance = (0, _taskInstance.getRunningInstance)();
      if (!taskInstance) {
        throw new Error(`You can only call .linked() from within a task.`);
      }

      return PerformProxy.create({
        _task: this,
        _performType: _taskInstance.PERFORM_TYPE_LINKED,
        _linkedObject: taskInstance
      });
    },

    unlinked() {
      return PerformProxy.create({
        _task: this,
        _performType: _taskInstance.PERFORM_TYPE_UNLINKED
      });
    },

    _clone() {
      return Task.create({
        fn: this.fn,
        context: this.context,
        _origin: this._origin,
        _taskGroupPath: this._taskGroupPath,
        _scheduler: this._scheduler,
        _propertyName: this._propertyName
      });
    },

    /**
     * This property is true if this task is NOT running, i.e. the number
     * of currently running TaskInstances is zero.
     *
     * This property is useful for driving the state/style of buttons
     * and loading UI, among other things.
     *
     * @memberof Task
     * @instance
     * @readOnly
     */

    /**
     * This property is true if this task is running, i.e. the number
     * of currently running TaskInstances is greater than zero.
     *
     * This property is useful for driving the state/style of buttons
     * and loading UI, among other things.
     *
     * @memberof Task
     * @instance
     * @readOnly
     */

    /**
     * EXPERIMENTAL
     *
     * This value describes what would happen to the TaskInstance returned
     * from .perform() if .perform() were called right now.  Returns one of
     * the following values:
     *
     * - `succeed`: new TaskInstance will start running immediately
     * - `drop`: new TaskInstance will be dropped
     * - `enqueue`: new TaskInstance will be enqueued for later execution
     *
     * @memberof Task
     * @instance
     * @private
     * @readOnly
     */

    /**
     * EXPERIMENTAL
     *
     * Returns true if calling .perform() right now would immediately start running
     * the returned TaskInstance.
     *
     * @memberof Task
     * @instance
     * @private
     * @readOnly
     */

    /**
     * EXPERIMENTAL
     *
     * Returns true if calling .perform() right now would immediately cancel (drop)
     * the returned TaskInstance.
     *
     * @memberof Task
     * @instance
     * @private
     * @readOnly
     */

    /**
     * EXPERIMENTAL
     *
     * Returns true if calling .perform() right now would enqueue the TaskInstance
     * rather than execute immediately.
     *
     * @memberof Task
     * @instance
     * @private
     * @readOnly
     */

    /**
     * EXPERIMENTAL
     *
     * Returns true if calling .perform() right now would cause a previous task to be canceled
     *
     * @memberof Task
     * @instance
     * @private
     * @readOnly
     */

    /**
     * The current number of active running task instances. This
     * number will never exceed maxConcurrency.
     *
     * @memberof Task
     * @instance
     * @readOnly
     */

    /**
     * Cancels all running or queued `TaskInstance`s for this Task.
     * If you're trying to cancel a specific TaskInstance (rather
     * than all of the instances running under this task) call
     * `.cancel()` on the specific TaskInstance.
     *
     * @method cancelAll
     * @memberof Task
     * @instance
     */

    toString() {
      return `<Task:${this._propertyName}>`;
    },

    _taskInstanceFactory: _taskInstance.default,

    /**
     * Creates a new {@linkcode TaskInstance} and attempts to run it right away.
     * If running this task instance would increase the task's concurrency
     * to a number greater than the task's maxConcurrency, this task
     * instance might be immediately canceled (dropped), or enqueued
     * to run at later time, after the currently running task(s) have finished.
     *
     * @method perform
     * @memberof Task
     * @param {*} arg* - args to pass to the task function
     * @instance
     *
     * @fires TaskInstance#TASK_NAME:started
     * @fires TaskInstance#TASK_NAME:succeeded
     * @fires TaskInstance#TASK_NAME:errored
     * @fires TaskInstance#TASK_NAME:canceled
     *
     */
    perform(...args) {
      return this._performShared(args, _taskInstance.PERFORM_TYPE_DEFAULT, null);
    },

    _performShared(args, performType, linkedObject) {
      let fullArgs = this._curryArgs ? [...this._curryArgs, ...args] : args;
      let taskInstance = this._taskInstanceFactory.create({
        fn: this.fn,
        args: fullArgs,
        context: this.context,
        owner: this.context,
        task: this,
        _debug: this._debug,
        _hasEnabledEvents: this._hasEnabledEvents,
        _origin: this,
        _performType: performType
      });

      if (performType === _taskInstance.PERFORM_TYPE_LINKED) {
        linkedObject._expectsLinkedYield = true;
      }

      if (this.context.isDestroying) {
        // TODO: express this in terms of lifetimes; a task linked to
        // a dead lifetime should immediately cancel.
        taskInstance.cancel();
      }

      this._scheduler.schedule(taskInstance);
      return taskInstance;
    },

    [_utils.INVOKE](...args) {
      return this.perform(...args);
    }
  });

  /**
    A {@link TaskProperty} is the Computed Property-like object returned
    from the {@linkcode task} function. You can call Task Modifier methods
    on this object to configure the behavior of the {@link Task}.
  
    See [Managing Task Concurrency](/#/docs/task-concurrency) for an
    overview of all the different task modifiers you can use and how
    they impact automatic cancelation / enqueueing of task instances.
  
    <style>
      .ignore-this--this-is-here-to-hide-constructor,
      #TaskProperty { display: none }
    </style>
  
    @class TaskProperty
  */
  let TaskProperty = exports.TaskProperty = undefined;

  if (false) {
    exports.TaskProperty = TaskProperty = class {};
  } else {
    // Prior to the 3.10.0 refactors, we had to extend the _ComputedProprety class
    // for a classic decorator/descriptor to run correctly.
    exports.TaskProperty = TaskProperty = class extends _utils._ComputedProperty {
      callSuperSetup() {
        if (super.setup) {
          super.setup(...arguments);
        }
      }
    };
  }

  (0, _utils.objectAssign)(TaskProperty.prototype, {
    setup(proto, taskName) {
      if (this.callSuperSetup) {
        this.callSuperSetup(...arguments);
      }

      if (this._maxConcurrency !== Infinity && !this._hasSetBufferPolicy) {
        // eslint-disable-next-line no-console
        console.warn(`The use of maxConcurrency() without a specified task modifier is deprecated and won't be supported in future versions of ember-concurrency. Please specify a task modifier instead, e.g. \`${taskName}: task(...).enqueue().maxConcurrency(${this._maxConcurrency})\``);
      }

      registerOnPrototype(Ember.addListener, proto, this.eventNames, taskName, 'perform', false);
      registerOnPrototype(Ember.addListener, proto, this.cancelEventNames, taskName, 'cancelAll', false);
      registerOnPrototype(Ember.addObserver, proto, this._observes, taskName, 'perform', true);
    },

    /**
     * Calling `task(...).on(eventName)` configures the task to be
     * automatically performed when the specified events fire. In
     * this way, it behaves like
     * [Ember.on](http://emberjs.com/api/classes/Ember.html#method_on).
     *
     * You can use `task(...).on('init')` to perform the task
     * when the host object is initialized.
     *
     * ```js
     * export default Ember.Component.extend({
     *   pollForUpdates: task(function * () {
     *     // ... this runs when the Component is first created
     *     // because we specified .on('init')
     *   }).on('init'),
     *
     *   handleFoo: task(function * (a, b, c) {
     *     // this gets performed automatically if the 'foo'
     *     // event fires on this Component,
     *     // e.g., if someone called component.trigger('foo')
     *   }).on('foo'),
     * });
     * ```
     *
     * [See the Writing Tasks Docs for more info](/#/docs/writing-tasks)
     *
     * @method on
     * @memberof TaskProperty
     * @param {String} eventNames*
     * @instance
     */
    on() {
      this.eventNames = this.eventNames || [];
      this.eventNames.push.apply(this.eventNames, arguments);
      return this;
    },

    /**
     * This behaves like the {@linkcode TaskProperty#on task(...).on() modifier},
     * but instead will cause the task to be canceled if any of the
     * specified events fire on the parent object.
     *
     * [See the Live Example](/#/docs/examples/route-tasks/1)
     *
     * @method cancelOn
     * @memberof TaskProperty
     * @param {String} eventNames*
     * @instance
     */
    cancelOn() {
      this.cancelEventNames = this.cancelEventNames || [];
      this.cancelEventNames.push.apply(this.cancelEventNames, arguments);
      return this;
    },

    observes(...properties) {
      this._observes = properties;
      return this;
    },

    /**
     * Configures the task to cancel old currently task instances
     * to make room for a new one to perform. Sets default
     * maxConcurrency to 1.
     *
     * [See the Live Example](/#/docs/examples/route-tasks/1)
     *
     * @method restartable
     * @memberof TaskProperty
     * @instance
     */

    /**
     * Configures the task to run task instances one-at-a-time in
     * the order they were `.perform()`ed. Sets default
     * maxConcurrency to 1.
     *
     * @method enqueue
     * @memberof TaskProperty
     * @instance
     */

    /**
     * Configures the task to immediately cancel (i.e. drop) any
     * task instances performed when the task is already running
     * at maxConcurrency. Sets default maxConcurrency to 1.
     *
     * @method drop
     * @memberof TaskProperty
     * @instance
     */

    /**
     * Configures the task to drop all but the most recently
     * performed {@linkcode TaskInstance }.
     *
     * @method keepLatest
     * @memberof TaskProperty
     * @instance
     */

    /**
     * Sets the maximum number of task instances that are allowed
     * to run at the same time. By default, with no task modifiers
     * applied, this number is Infinity (there is no limit
     * to the number of tasks that can run at the same time).
     * {@linkcode TaskProperty#restartable .restartable()},
     * {@linkcode TaskProperty#enqueue .enqueue()}, and
     * {@linkcode TaskProperty#drop .drop()} set the default
     * maxConcurrency to 1, but you can override this value
     * to set the maximum number of concurrently running tasks
     * to a number greater than 1.
     *
     * [See the AJAX Throttling example](/#/docs/examples/ajax-throttling)
     *
     * The example below uses a task with `maxConcurrency(3)` to limit
     * the number of concurrent AJAX requests (for anyone using this task)
     * to 3.
     *
     * ```js
     * doSomeAjax: task(function * (url) {
     *   return Ember.$.getJSON(url).promise();
     * }).maxConcurrency(3),
     *
     * elsewhere() {
     *   this.get('doSomeAjax').perform("http://www.example.com/json");
     * },
     * ```
     *
     * @method maxConcurrency
     * @memberof TaskProperty
     * @param {Number} n The maximum number of concurrently running tasks
     * @instance
     */

    /**
     * Adds this task to a TaskGroup so that concurrency constraints
     * can be shared between multiple tasks.
     *
     * [See the Task Group docs for more information](/#/docs/task-groups)
     *
     * @method group
     * @memberof TaskProperty
     * @param {String} groupPath A path to the TaskGroup property
     * @instance
     */

    /**
     * Activates lifecycle events, allowing Evented host objects to react to task state
     * changes.
     *
     * ```js
     *
     * export default Component.extend({
     *   uploadTask: task(function* (file) {
     *     // ... file upload stuff
     *   }).evented(),
     *
     *   uploadedStarted: on('uploadTask:started', function(taskInstance) {
     *     this.get('analytics').track("User Photo: upload started");
     *   }),
     * });
     * ```
     *
     * @method evented
     * @memberof TaskProperty
     * @instance
     */

    /**
     * Logs lifecycle events to aid in debugging unexpected Task behavior.
     * Presently only logs cancelation events and the reason for the cancelation,
     * e.g. "TaskInstance 'doStuff' was canceled because the object it lives on was destroyed or unrendered"
     *
     * @method debug
     * @memberof TaskProperty
     * @instance
     */

    perform() {
      (true && !(false) && Ember.deprecate(`[DEPRECATED] An ember-concurrency task property was not set on its object via 'defineProperty'.
              You probably used 'set(obj, "myTask", task(function* () { ... }) )'.
              Unfortunately due to this we can't tell you the name of the task.`, false, {
        id: 'ember-meta.descriptor-on-object',
        until: '3.5.0',
        url: 'https://emberjs.com/deprecations/v3.x#toc_use-defineProperty-to-define-computed-properties'
      }));

      throw new Error("An ember-concurrency task property was not set on its object via 'defineProperty'. See deprecation warning for details.");
    }
  });

  (0, _utils.objectAssign)(TaskProperty.prototype, _propertyModifiersMixin.propertyModifiers);

  function registerOnPrototype(addListenerOrObserver, proto, names, taskName, taskMethod, once) {
    if (names) {
      for (let i = 0; i < names.length; ++i) {
        let name = names[i];

        let handlerName = `__ember_concurrency_handler_${handlerCounter++}`;
        proto[handlerName] = makeTaskCallback(taskName, taskMethod, once);
        addListenerOrObserver(proto, name, null, handlerName);
      }
    }
  }

  function makeTaskCallback(taskName, method, once) {
    return function () {
      let task = this.get(taskName);

      if (once) {
        Ember.run.scheduleOnce('actions', task, method, ...arguments);
      } else {
        task[method].apply(task, arguments);
      }
    };
  }

  let handlerCounter = 0;
});
;define('ember-concurrency/-task-state-mixin', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  const { alias } = Ember.computed;

  // this is a mixin of properties/methods shared between Tasks and TaskGroups
  exports.default = Ember.Mixin.create({
    isRunning: Ember.computed.gt('numRunning', 0),
    isQueued: Ember.computed.gt('numQueued', 0),
    isIdle: Ember.computed('isRunning', 'isQueued', function () {
      return !this.get('isRunning') && !this.get('isQueued');
    }),

    state: Ember.computed('isRunning', 'isQueued', function () {
      if (this.get('isRunning')) {
        return 'running';
      } else if (this.get('isQueued')) {
        return 'queued';
      } else {
        return 'idle';
      }
    }),

    _propertyName: null,
    _origin: null,
    name: alias('_propertyName'),

    concurrency: alias('numRunning'),
    last: alias('_scheduler.lastStarted'),
    lastRunning: alias('_scheduler.lastRunning'),
    lastPerformed: alias('_scheduler.lastPerformed'),
    lastSuccessful: alias('_scheduler.lastSuccessful'),
    lastComplete: alias('_scheduler.lastComplete'),
    lastErrored: alias('_scheduler.lastErrored'),
    lastCanceled: alias('_scheduler.lastCanceled'),
    lastIncomplete: alias('_scheduler.lastIncomplete'),
    performCount: alias('_scheduler.performCount'),

    numRunning: 0,
    numQueued: 0,
    _seenIndex: 0,

    cancelAll(options) {
      let { reason, resetState } = options || {};
      reason = reason || ".cancelAll() was explicitly called on the Task";

      this._scheduler.cancelAll(reason);

      if (resetState) {
        this._resetState();
      }
    },

    group: Ember.computed(function () {
      return this._taskGroupPath && this.context.get(this._taskGroupPath);
    }),

    _scheduler: null,

    _resetState() {
      this.setProperties({
        'last': null,
        'lastRunning': null,
        'lastStarted': null,
        'lastPerformed': null,
        'lastSuccessful': null,
        'lastComplete': null,
        'lastErrored': null,
        'lastCanceled': null,
        'lastIncomplete': null,
        'performCount': 0
      });
    }
  });
});
;define('ember-concurrency/-wait-for', ['exports', 'ember-concurrency/utils'], function (exports, _utils) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.waitForQueue = waitForQueue;
  exports.waitForEvent = waitForEvent;
  exports.waitForProperty = waitForProperty;


  class WaitFor {
    then(...args) {
      return (0, _utils.yieldableToPromise)(this).then(...args);
    }
  }

  class WaitForQueueYieldable extends WaitFor {
    constructor(queueName) {
      super();
      this.queueName = queueName;
    }

    [_utils.yieldableSymbol](taskInstance, resumeIndex) {
      Ember.run.schedule(this.queueName, () => {
        taskInstance.proceed(resumeIndex, _utils.YIELDABLE_CONTINUE, null);
      });
    }
  }

  class WaitForEventYieldable extends WaitFor {
    constructor(object, eventName) {
      super();
      this.object = object;
      this.eventName = eventName;
    }

    [_utils.yieldableSymbol](taskInstance, resumeIndex) {
      let unbind = () => {};
      let didFinish = false;
      let fn = event => {
        didFinish = true;
        unbind();
        taskInstance.proceed(resumeIndex, _utils.YIELDABLE_CONTINUE, event);
      };

      if (typeof this.object.addEventListener === 'function') {
        // assume that we're dealing with a DOM `EventTarget`.
        this.object.addEventListener(this.eventName, fn);

        // unfortunately this is required, because IE 11 does not support the
        // `once` option: https://caniuse.com/#feat=once-event-listener
        unbind = () => {
          this.object.removeEventListener(this.eventName, fn);
        };

        return unbind;
      } else {
        // assume that we're dealing with either `Ember.Evented` or a compatible
        // interface, like jQuery.
        this.object.one(this.eventName, fn);

        return () => {
          if (!didFinish) {
            this.object.off(this.eventName, fn);
          }
        };
      }
    }
  }

  class WaitForPropertyYieldable extends WaitFor {
    constructor(object, key, predicateCallback = Boolean) {
      super();
      this.object = object;
      this.key = key;

      if (typeof predicateCallback === 'function') {
        this.predicateCallback = predicateCallback;
      } else {
        this.predicateCallback = v => v === predicateCallback;
      }
    }

    [_utils.yieldableSymbol](taskInstance, resumeIndex) {
      let observerFn = () => {
        let value = Ember.get(this.object, this.key);
        let predicateValue = this.predicateCallback(value);
        if (predicateValue) {
          taskInstance.proceed(resumeIndex, _utils.YIELDABLE_CONTINUE, value);
          return true;
        }
      };

      if (!observerFn()) {
        this.object.addObserver(this.key, null, observerFn);
        return () => {
          this.object.removeObserver(this.key, null, observerFn);
        };
      }
    }
  }

  /**
   * Use `waitForQueue` to pause the task until a certain run loop queue is reached.
   *
   * ```js
   * import { task, waitForQueue } from 'ember-concurrency';
   * export default Component.extend({
   *   myTask: task(function * () {
   *     yield waitForQueue('afterRender');
   *     console.log("now we're in the afterRender queue");
   *   })
   * });
   * ```
   *
   * @param {string} queueName the name of the Ember run loop queue
   */
  function waitForQueue(queueName) {
    return new WaitForQueueYieldable(queueName);
  }

  /**
   * Use `waitForEvent` to pause the task until an event is fired. The event
   * can either be a jQuery event or an Ember.Evented event (or any event system
   * where the object supports `.on()` `.one()` and `.off()`).
   *
   * ```js
   * import { task, waitForEvent } from 'ember-concurrency';
   * export default Component.extend({
   *   myTask: task(function * () {
   *     console.log("Please click anywhere..");
   *     let clickEvent = yield waitForEvent($('body'), 'click');
   *     console.log("Got event", clickEvent);
   *
   *     let emberEvent = yield waitForEvent(this, 'foo');
   *     console.log("Got foo event", emberEvent);
   *
   *     // somewhere else: component.trigger('foo', { value: 123 });
   *   })
   * });
   * ```
   *
   * @param {object} object the Ember Object or jQuery selector (with ,on(), .one(), and .off())
   *                 that the event fires from
   * @param {function} eventName the name of the event to wait for
   */
  function waitForEvent(object, eventName) {
    (true && !((0, _utils.isEventedObject)(object)) && Ember.assert(`${object} must include Ember.Evented (or support \`.one()\` and \`.off()\`) or DOM EventTarget (or support \`addEventListener\` and  \`removeEventListener\`) to be able to use \`waitForEvent\``, (0, _utils.isEventedObject)(object)));

    return new WaitForEventYieldable(object, eventName);
  }

  /**
   * Use `waitForProperty` to pause the task until a property on an object
   * changes to some expected value. This can be used for a variety of use
   * cases, including synchronizing with another task by waiting for it
   * to become idle, or change state in some other way. If you omit the
   * callback, `waitForProperty` will resume execution when the observed
   * property becomes truthy. If you provide a callback, it'll be called
   * immediately with the observed property's current value, and multiple
   * times thereafter whenever the property changes, until you return
   * a truthy value from the callback, or the current task is canceled.
   * You can also pass in a non-Function value in place of the callback,
   * in which case the task will continue executing when the property's
   * value becomes the value that you passed in.
   *
   * ```js
   * import { task, waitForProperty } from 'ember-concurrency';
   * export default Component.extend({
   *   foo: 0,
   *
   *   myTask: task(function * () {
   *     console.log("Waiting for `foo` to become 5");
   *
   *     yield waitForProperty(this, 'foo', v => v === 5);
   *     // alternatively: yield waitForProperty(this, 'foo', 5);
   *
   *     // somewhere else: this.set('foo', 5)
   *
   *     console.log("`foo` is 5!");
   *
   *     // wait for another task to be idle before running:
   *     yield waitForProperty(this, 'otherTask.isIdle');
   *     console.log("otherTask is idle!");
   *   })
   * });
   * ```
   *
   * @param {object} object an object (most likely an Ember Object)
   * @param {string} key the property name that is observed for changes
   * @param {function} callbackOrValue a Function that should return a truthy value
   *                                   when the task should continue executing, or
   *                                   a non-Function value that the watched property
   *                                   needs to equal before the task will continue running
   */
  function waitForProperty(object, key, predicateCallback) {
    return new WaitForPropertyYieldable(object, key, predicateCallback);
  }
});
;define('ember-concurrency/helpers/cancel-all', ['exports', 'ember-concurrency/-helpers'], function (exports, _helpers) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.cancelHelper = cancelHelper;


  const CANCEL_REASON = "the 'cancel-all' template helper was invoked";

  function cancelHelper(args) {
    let cancelable = args[0];
    if (!cancelable || typeof cancelable.cancelAll !== 'function') {
      (true && !(false) && Ember.assert(`The first argument passed to the \`cancel-all\` helper should be a Task or TaskGroup (without quotes); you passed ${cancelable}`, false));
    }

    return (0, _helpers.taskHelperClosure)('cancel-all', 'cancelAll', [cancelable, { reason: CANCEL_REASON }]);
  }

  exports.default = Ember.Helper.helper(cancelHelper);
});
;define('ember-concurrency/helpers/perform', ['exports', 'ember-concurrency/-helpers'], function (exports, _helpers) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.performHelper = performHelper;
  function performHelper(args, hash) {
    return (0, _helpers.taskHelperClosure)('perform', 'perform', args, hash);
  }

  exports.default = Ember.Helper.helper(performHelper);
});
;define('ember-concurrency/helpers/task', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  function taskHelper([task, ...args]) {
    return task._curry(...args);
  }

  exports.default = Ember.Helper.helper(taskHelper);
});
;define('ember-concurrency/index', ['exports', 'ember-concurrency/utils', 'ember-concurrency/-task-property', 'ember-concurrency/-task-instance', 'ember-concurrency/-task-group', 'ember-concurrency/-cancelable-promise-helpers', 'ember-concurrency/-wait-for', 'ember-concurrency/-property-modifiers-mixin'], function (exports, _utils, _taskProperty, _taskInstance, _taskGroup, _cancelablePromiseHelpers, _waitFor, _propertyModifiersMixin) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.forever = exports.waitForProperty = exports.waitForEvent = exports.waitForQueue = exports.timeout = exports.race = exports.hash = exports.didCancel = exports.allSettled = exports.all = undefined;
  exports.task = task;
  exports.taskGroup = taskGroup;


  function _computed(fn) {
    if (false) {
      let cp = function (proto, key) {
        if (cp.setup !== undefined) {
          cp.setup(proto, key);
        }

        return Ember.computed(fn)(...arguments);
      };

      Ember._setComputedDecorator(cp);

      return cp;
    } else {
      return Ember.computed(fn);
    }
  }

  /**
   * A Task is a cancelable, restartable, asynchronous operation that
   * is driven by a generator function. Tasks are automatically canceled
   * when the object they live on is destroyed (e.g. a Component
   * is unrendered).
   *
   * To define a task, use the `task(...)` function, and pass in
   * a generator function, which will be invoked when the task
   * is performed. The reason generator functions are used is
   * that they (like the proposed ES7 async-await syntax) can
   * be used to elegantly express asynchronous, cancelable
   * operations.
   *
   * You can also define an
   * <a href="/#/docs/encapsulated-task">Encapsulated Task</a>
   * by passing in an object that defined a `perform` generator
   * function property.
   *
   * The following Component defines a task called `myTask` that,
   * when performed, prints a message to the console, sleeps for 1 second,
   * prints a final message to the console, and then completes.
   *
   * ```js
   * import { task, timeout } from 'ember-concurrency';
   * export default Component.extend({
   *   myTask: task(function * () {
   *     console.log("Pausing for a second...");
   *     yield timeout(1000);
   *     console.log("Done!");
   *   })
   * });
   * ```
   *
   * ```hbs
   * <button {{action myTask.perform}}>Perform Task</button>
   * ```
   *
   * By default, tasks have no concurrency constraints
   * (multiple instances of a task can be running at the same time)
   * but much of a power of tasks lies in proper usage of Task Modifiers
   * that you can apply to a task.
   *
   * @param {function} generatorFunction the generator function backing the task.
   * @returns {TaskProperty}
   */
  function task(taskFn) {
    let tp = _computed(function (_propertyName) {
      tp.taskFn.displayName = `${_propertyName} (task)`;
      return _taskProperty.Task.create({
        fn: tp.taskFn,
        context: this,
        _origin: this,
        _taskGroupPath: tp._taskGroupPath,
        _scheduler: (0, _propertyModifiersMixin.resolveScheduler)(tp, this, _taskGroup.TaskGroup),
        _propertyName,
        _debug: tp._debug,
        _hasEnabledEvents: tp._hasEnabledEvents
      });
    });

    tp.taskFn = taskFn;

    Object.setPrototypeOf(tp, _taskProperty.TaskProperty.prototype);

    return tp;
  }

  /**
   * "Task Groups" provide a means for applying
   * task modifiers to groups of tasks. Once a {@linkcode Task} is declared
   * as part of a group task, modifiers like `drop()` or `restartable()`
   * will no longer affect the individual `Task`. Instead those
   * modifiers can be applied to the entire group.
   *
   * ```js
   * import { task, taskGroup } from 'ember-concurrency';
   *
   * export default Controller.extend({
   *   chores: taskGroup().drop(),
   *
   *   mowLawn:       task(taskFn).group('chores'),
   *   doDishes:      task(taskFn).group('chores'),
   *   changeDiapers: task(taskFn).group('chores')
   * });
   * ```
   *
   * @returns {TaskGroup}
   */
  function taskGroup(taskFn) {
    let tp = _computed(function (_propertyName) {
      return _taskGroup.TaskGroup.create({
        fn: tp.taskFn,
        context: this,
        _origin: this,
        _taskGroupPath: tp._taskGroupPath,
        _scheduler: (0, _propertyModifiersMixin.resolveScheduler)(tp, this, _taskGroup.TaskGroup),
        _propertyName
      });
    });

    tp.taskFn = taskFn;

    Object.setPrototypeOf(tp, _taskGroup.TaskGroupProperty.prototype);

    return tp;
  }

  exports.all = _cancelablePromiseHelpers.all;
  exports.allSettled = _cancelablePromiseHelpers.allSettled;
  exports.didCancel = _taskInstance.didCancel;
  exports.hash = _cancelablePromiseHelpers.hash;
  exports.race = _cancelablePromiseHelpers.race;
  exports.timeout = _utils.timeout;
  exports.waitForQueue = _waitFor.waitForQueue;
  exports.waitForEvent = _waitFor.waitForEvent;
  exports.waitForProperty = _waitFor.waitForProperty;
  exports.forever = _utils.forever;
});
;define('ember-concurrency/initializers/ember-concurrency', ['exports', 'ember-concurrency'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    name: 'ember-concurrency',
    initialize: function () {}
  };
});
;define('ember-concurrency/utils', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.isEventedObject = isEventedObject;
  exports.Arguments = Arguments;
  exports._cleanupOnDestroy = _cleanupOnDestroy;
  exports.timeout = timeout;
  exports.RawValue = RawValue;
  exports.raw = raw;
  exports.rawTimeout = rawTimeout;
  exports.yieldableToPromise = yieldableToPromise;
  function isEventedObject(c) {
    return c && (typeof c.one === 'function' && typeof c.off === 'function' || typeof c.addEventListener === 'function' && typeof c.removeEventListener === 'function');
  }

  function Arguments(args, defer) {
    this.args = args;
    this.defer = defer;
  }

  Arguments.prototype.resolve = function (value) {
    if (this.defer) {
      this.defer.resolve(value);
    }
  };

  let objectAssign = exports.objectAssign = Object.assign || function objectAssign(target) {
    'use strict';

    if (target == null) {
      throw new TypeError('Cannot convert undefined or null to object');
    }

    target = Object(target);
    for (var index = 1; index < arguments.length; index++) {
      var source = arguments[index];
      if (source != null) {
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
    }
    return target;
  };

  function _cleanupOnDestroy(owner, object, cleanupMethodName, ...args) {
    // TODO: find a non-mutate-y, non-hacky way of doing this.

    if (!owner.willDestroy) {
      // we're running in non Ember object (possibly in a test mock)
      return;
    }

    if (!owner.willDestroy.__ember_processes_destroyers__) {
      let oldWillDestroy = owner.willDestroy;
      let disposers = [];

      owner.willDestroy = function () {
        for (let i = 0, l = disposers.length; i < l; i++) {
          disposers[i]();
        }
        oldWillDestroy.apply(owner, arguments);
      };
      owner.willDestroy.__ember_processes_destroyers__ = disposers;
    }

    owner.willDestroy.__ember_processes_destroyers__.push(() => {
      object[cleanupMethodName](...args);
    });
  }

  let INVOKE = exports.INVOKE = "__invoke_symbol__";

  let locations = ['ember-glimmer/helpers/action', 'ember-routing-htmlbars/keywords/closure-action', 'ember-routing/keywords/closure-action'];

  for (let i = 0; i < locations.length; i++) {
    if (locations[i] in Ember.__loader.registry) {
      exports.INVOKE = INVOKE = Ember.__loader.require(locations[i])['INVOKE'];
      break;
    }
  }

  // TODO: Symbol polyfill?
  const yieldableSymbol = exports.yieldableSymbol = "__ec_yieldable__";
  const YIELDABLE_CONTINUE = exports.YIELDABLE_CONTINUE = "next";
  const YIELDABLE_THROW = exports.YIELDABLE_THROW = "throw";
  const YIELDABLE_RETURN = exports.YIELDABLE_RETURN = "return";
  const YIELDABLE_CANCEL = exports.YIELDABLE_CANCEL = "cancel";

  const _ComputedProperty = exports._ComputedProperty = Ember.ComputedProperty;

  /**
   *
   * Yielding `timeout(ms)` will pause a task for the duration
   * of time passed in, in milliseconds.
   *
   * The task below, when performed, will print a message to the
   * console every second.
   *
   * ```js
   * export default Component.extend({
   *   myTask: task(function * () {
   *     while (true) {
   *       console.log("Hello!");
   *       yield timeout(1000);
   *     }
   *   })
   * });
   * ```
   *
   * @param {number} ms - the amount of time to sleep before resuming
   *   the task, in milliseconds
   */
  function timeout(ms) {
    let timerId;
    let promise = new Ember.RSVP.Promise(r => {
      timerId = Ember.run.later(r, ms);
    });
    promise.__ec_cancel__ = () => {
      Ember.run.cancel(timerId);
    };
    return promise;
  }

  /**
   *
   * Yielding `forever` will pause a task indefinitely until
   * it is cancelled (i.e. via host object destruction, .restartable(),
   * or manual cancellation).
   *
   * This is often useful in cases involving animation: if you're
   * using Liquid Fire, or some other animation scheme, sometimes you'll
   * notice buttons visibly reverting to their inactive states during
   * a route transition. By yielding `forever` in a Component task that drives a
   * button's active state, you can keep a task indefinitely running
   * until the animation runs to completion.
   *
   * NOTE: Liquid Fire also includes a useful `waitUntilIdle()` method
   * on the `liquid-fire-transitions` service that you can use in a lot
   * of these cases, but it won't cover cases of asynchrony that are
   * unrelated to animation, in which case `forever` might be better suited
   * to your needs.
   *
   * ```js
   * import { task, forever } from 'ember-concurrency';
   *
   * export default Component.extend({
   *   myService: service(),
   *   myTask: task(function * () {
   *     yield this.myService.doSomethingThatCausesATransition();
   *     yield forever;
   *   })
   * });
   * ```
   */
  const forever = exports.forever = {
    [yieldableSymbol]() {}
  };

  function RawValue(value) {
    this.value = value;
  }

  function raw(value) {
    return new RawValue(value);
  }

  function rawTimeout(ms) {
    return {
      [yieldableSymbol](taskInstance, resumeIndex) {
        let timerId = setTimeout(() => {
          taskInstance.proceed(resumeIndex, YIELDABLE_CONTINUE, this._result);
        }, ms);
        return () => {
          window.clearInterval(timerId);
        };
      }
    };
  }

  function yieldableToPromise(yieldable) {
    let def = Ember.RSVP.defer();

    def.promise.__ec_cancel__ = yieldable[yieldableSymbol]({
      proceed(_index, resumeType, value) {
        if (resumeType == YIELDABLE_CONTINUE || resumeType == YIELDABLE_RETURN) {
          def.resolve(value);
        } else {
          def.reject(value);
        }
      }
    }, 0);

    return def.promise;
  }
});
;define('ember-load-initializers/index', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.default = function (app, prefix) {
    var initializerPrefix = prefix + '/initializers/';
    var instanceInitializerPrefix = prefix + '/instance-initializers/';
    var initializers = [];
    var instanceInitializers = [];
    // this is 2 pass because generally the first pass is the problem
    // and is reduced, and resolveInitializer has potential to deopt
    var moduleNames = Object.keys(requirejs._eak_seen);
    for (var i = 0; i < moduleNames.length; i++) {
      var moduleName = moduleNames[i];
      if (moduleName.lastIndexOf(initializerPrefix, 0) === 0) {
        if (!_endsWith(moduleName, '-test')) {
          initializers.push(moduleName);
        }
      } else if (moduleName.lastIndexOf(instanceInitializerPrefix, 0) === 0) {
        if (!_endsWith(moduleName, '-test')) {
          instanceInitializers.push(moduleName);
        }
      }
    }
    registerInitializers(app, initializers);
    registerInstanceInitializers(app, instanceInitializers);
  };

  /* global requirejs:false, require:false */
  function resolveInitializer(moduleName) {
    var module = require(moduleName, null, null, true);
    if (!module) {
      throw new Error(moduleName + ' must export an initializer.');
    }
    var initializer = module['default'];
    if (!initializer.name) {
      initializer.name = moduleName.slice(moduleName.lastIndexOf('/') + 1);
    }
    return initializer;
  }

  function registerInitializers(app, moduleNames) {
    for (var i = 0; i < moduleNames.length; i++) {
      app.initializer(resolveInitializer(moduleNames[i]));
    }
  }

  function registerInstanceInitializers(app, moduleNames) {
    for (var i = 0; i < moduleNames.length; i++) {
      app.instanceInitializer(resolveInitializer(moduleNames[i]));
    }
  }

  function _endsWith(str, suffix) {
    return str.indexOf(suffix, str.length - suffix.length) !== -1;
  }
});
;define('ember-popper/components/ember-popper-base', ['exports', 'ember-popper/templates/components/ember-popper', 'ember-raf-scheduler'], function (exports, _emberPopper, _emberRafScheduler) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Component.extend({
    layout: _emberPopper.default,

    tagName: '',

    // ================== PUBLIC CONFIG OPTIONS ==================

    /**
     * Whether event listeners, resize and scroll, for repositioning the popper are initially enabled.
     * @argument({ defaultIfUndefined: true })
     * @type('boolean')
     */
    eventsEnabled: true,

    /**
     * Whether the Popper element should be hidden. Use this and CSS for `[hidden]` instead of
     * an `{{if}}` if you want to animate the Popper's entry and/or exit.
     * @argument({ defaultIfUndefined: false })
     * @type('boolean')
     */
    hidden: false,

    /**
     * Modifiers that will be merged into the Popper instance's options hash.
     * https://popper.js.org/popper-documentation.html#Popper.DEFAULTS
     * @argument
     * @type(optional('object'))
     */
    modifiers: null,

    /**
     * onCreate callback merged (if present) into the Popper instance's options hash.
     * https://popper.js.org/popper-documentation.html#Popper.Defaults.onCreate
     * @argument
     * @type(optional(Function))
     */
    onCreate: null,

    /**
     * onUpdate callback merged (if present) into the Popper instance's options hash.
     * https://popper.js.org/popper-documentation.html#Popper.Defaults.onUpdate
     * @argument
     * @type(optional(Function))
     */
    onUpdate: null,

    /**
     * Placement of the popper. One of ['top', 'right', 'bottom', 'left'].
     * @argument({ defaultIfUndefined: true })
     * @type('string')
     */
    placement: 'bottom',

    /**
     * The popper element needs to be moved higher in the DOM tree to avoid z-index issues.
     * See the block-comment in the template for more details. `.ember-application` is applied
     * to the root element of the ember app by default, so we move it up to there.
     * @argument({ defaultIfUndefined: true })
     * @type(Selector)
     */
    popperContainer: '.ember-application',

    /**
     * An optional function to be called when a new target is located.
     * The target is passed in as an argument to the function.
     * @argument
     * @type(optional(Action))
     */
    registerAPI: null,

    /**
     * If `true`, the popper element will not be moved to popperContainer. WARNING: This can cause
     * z-index issues where your popper will be overlapped by DOM elements that aren't nested as
     * deeply in the DOM tree.
     * @argument({ defaultIfUndefined: true })
     * @type('boolean')
     */
    renderInPlace: false,

    // ================== PRIVATE PROPERTIES ==================

    /**
     * Tracks current/previous state of `_renderInPlace`.
     */
    _didRenderInPlace: false,

    /**
     * Tracks current/previous value of `eventsEnabled` option
     */
    _eventsEnabled: null,

    /**
     * Parent of the element on didInsertElement, before it may have been moved
     */
    _initialParentNode: null,

    /**
     * Tracks current/previous value of `modifiers` option
     */
    _modifiers: null,

    /**
     * Tracks current/previous value of `onCreate` callback
     */
    _onCreate: null,

    /**
     * Tracks current/previous value of `onUpdate` callback
     */
    _onUpdate: null,

    /**
     * Tracks current/previous value of `placement` option
     */
    _placement: null,

    /**
     * Set in didInsertElement() once the Popper is initialized.
     * Passed to consumers via a named yield.
     */
    _popper: null,

    /**
     * Tracks current/previous value of popper target
     */
    _popperTarget: null,

    /**
     * Public API of the popper sent to external components in `registerAPI`
     */
    _publicAPI: null,

    /**
     * ID for the requestAnimationFrame used for updates, used to cancel
     * the RAF on component destruction
     */
    _updateRAF: null,

    // ================== LIFECYCLE HOOKS ==================

    didRender() {
      this._updatePopper();
    },

    willDestroyElement() {
      this._super(...arguments);
      this._popper.destroy();
      _emberRafScheduler.scheduler.forget(this._updateRAF);
    },

    update() {
      this._popper.update();
    },

    scheduleUpdate() {
      if (this._updateRAF !== null) {
        return;
      }

      this._updateRAF = _emberRafScheduler.scheduler.schedule('affect', () => {
        this._updateRAF = null;
        this._popper.update();
      });
    },

    enableEventListeners() {
      this._popper.enableEventListeners();
    },

    disableEventListeners() {
      this._popper.disableEventListeners();
    },

    /**
     * ================== ACTIONS ==================
     */

    actions: {
      update() {
        this.update();
      },

      scheduleUpdate() {
        this.scheduleUpdate();
      },

      enableEventListeners() {
        this.enableEventListeners();
      },

      disableEventListeners() {
        this.disableEventListeners();
      }
    },

    // ================== PRIVATE IMPLEMENTATION DETAILS ==================

    _updatePopper() {
      if (this.isDestroying || this.isDestroyed) {
        return;
      }

      const eventsEnabled = this.get('eventsEnabled');
      const modifiers = this.get('modifiers');
      const onCreate = this.get('onCreate');
      const onUpdate = this.get('onUpdate');
      const placement = this.get('placement');
      const popperTarget = this._getPopperTarget();
      const renderInPlace = this.get('_renderInPlace');

      // Compare against previous values to see if anything has changed
      const didChange = renderInPlace !== this._didRenderInPlace || popperTarget !== this._popperTarget || eventsEnabled !== this._eventsEnabled || modifiers !== this._modifiers || placement !== this._placement || onCreate !== this._onCreate || onUpdate !== this._onUpdate;

      if (didChange === true) {
        if (this._popper !== null) {
          this._popper.destroy();
        }

        const popperElement = this._getPopperElement();

        // Store current values to check against on updates
        this._didRenderInPlace = renderInPlace;
        this._eventsEnabled = eventsEnabled;
        this._modifiers = modifiers;
        this._onCreate = onCreate;
        this._onUpdate = onUpdate;
        this._placement = placement;
        this._popperTarget = popperTarget;

        const options = {
          eventsEnabled,
          modifiers,
          placement
        };

        if (onCreate) {
          (true && !(typeof onCreate === 'function') && Ember.assert('onCreate of ember-popper must be a function', typeof onCreate === 'function'));

          options.onCreate = onCreate;
        }

        if (onUpdate) {
          (true && !(typeof onUpdate === 'function') && Ember.assert('onUpdate of ember-popper must be a function', typeof onUpdate === 'function'));

          options.onUpdate = onUpdate;
        }

        this._popper = new Popper(popperTarget, popperElement, options);

        // Execute the registerAPI hook last to ensure the Popper is initialized on the target
        if (this.get('registerAPI') !== null) {
          /* eslint-disable ember/closure-actions */
          this.get('registerAPI')(this._getPublicAPI());
        }
      }
    },

    /**
     * Used to get the popper element
     */
    _getPopperElement() {
      return self.document.getElementById(this.id);
    },

    _getPopperTarget() {
      return this.get('popperTarget');
    },

    _getPublicAPI() {
      if (this._publicAPI === null) {
        // bootstrap the public API with fields that are guaranteed to be static,
        // such as imperative actions
        this._publicAPI = {
          disableEventListeners: this.disableEventListeners.bind(this),
          enableEventListeners: this.enableEventListeners.bind(this),
          scheduleUpdate: this.scheduleUpdate.bind(this),
          update: this.update.bind(this)
        };
      }

      this._publicAPI.popperElement = this._getPopperElement();
      this._publicAPI.popperTarget = this._popperTarget;

      return this._publicAPI;
    },

    _popperContainer: Ember.computed('_renderInPlace', 'popperContainer', function () {
      const renderInPlace = this.get('_renderInPlace');
      const maybeContainer = this.get('popperContainer');

      let popperContainer;

      if (renderInPlace) {
        popperContainer = this._initialParentNode;
      } else if (maybeContainer instanceof Element) {
        popperContainer = maybeContainer;
      } else if (typeof maybeContainer === 'string') {
        const selector = maybeContainer;
        const possibleContainers = self.document.querySelectorAll(selector);

        (true && !(possibleContainers.length === 1) && Ember.assert(`ember-popper with popperContainer selector "${selector}" found ` + `${possibleContainers.length} possible containers when there should be exactly 1`, possibleContainers.length === 1));


        popperContainer = possibleContainers[0];
      }

      return popperContainer;
    }),

    _renderInPlace: Ember.computed('renderInPlace', function () {
      // self.document is undefined in Fastboot, so we have to render in
      // place for the popper to show up at all.
      return self.document ? !!this.get('renderInPlace') : true;
    })
  });
});
;define('ember-popper/components/ember-popper-targeting-parent', ['exports', 'ember-popper/components/ember-popper-base', 'ember-popper/templates/components/ember-popper-targeting-parent'], function (exports, _emberPopperBase, _emberPopperTargetingParent) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _emberPopperBase.default.extend({
    layout: _emberPopperTargetingParent.default,

    // ================== LIFECYCLE HOOKS ==================

    init() {
      this.id = this.id || `${Ember.guidFor(this)}-popper`;
      this._parentFinder = self.document ? self.document.createTextNode('') : '';
      this._super(...arguments);
    },

    didInsertElement() {
      this._super(...arguments);
      this._initialParentNode = this._parentFinder.parentNode;
    },

    /**
     * Used to get the popper target whenever updating the Popper
     */
    _getPopperTarget() {
      return this._initialParentNode;
    }
  });
});
;define('ember-popper/components/ember-popper', ['exports', 'ember-popper/components/ember-popper-base'], function (exports, _emberPopperBase) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _emberPopperBase.default.extend({
    /**
     * The element the popper will target.
     * @argument
     * @type(Element)
     */
    popperTarget: null,

    // ================== LIFECYCLE HOOKS ==================

    init() {
      this.id = this.id || `${Ember.guidFor(this)}-popper`;
      this._super(...arguments);
    }
  });
});
;define("ember-popper/templates/components/ember-popper-targeting-parent", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "3Mp9Cc/E",
    "block": "{\"symbols\":[\"&default\"],\"statements\":[[1,[27,\"unbound\",[[23,[\"_parentFinder\"]]],null],false],[0,\"\\n\\n\"],[4,\"if\",[[23,[\"renderInPlace\"]]],null,{\"statements\":[[0,\"  \"],[7,\"div\"],[12,\"id\",[21,\"id\"]],[12,\"class\",[21,\"class\"]],[12,\"hidden\",[21,\"hidden\"]],[12,\"role\",[21,\"ariaRole\"]],[9],[0,\"\\n    \"],[14,1,[[27,\"hash\",null,[[\"disableEventListeners\",\"enableEventListeners\",\"scheduleUpdate\",\"update\"],[[27,\"action\",[[22,0,[]],\"disableEventListeners\"],null],[27,\"action\",[[22,0,[]],\"enableEventListeners\"],null],[27,\"action\",[[22,0,[]],\"scheduleUpdate\"],null],[27,\"action\",[[22,0,[]],\"update\"],null]]]]]],[0,\"\\n  \"],[10],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[4,\"in-element\",[[23,[\"_popperContainer\"]]],[[\"guid\",\"nextSibling\"],[\"%cursor:0%\",null]],{\"statements\":[[0,\"  \"],[7,\"div\"],[12,\"id\",[21,\"id\"]],[12,\"class\",[21,\"class\"]],[12,\"hidden\",[21,\"hidden\"]],[12,\"role\",[21,\"ariaRole\"]],[9],[0,\"\\n    \"],[14,1,[[27,\"hash\",null,[[\"disableEventListeners\",\"enableEventListeners\",\"scheduleUpdate\",\"update\"],[[27,\"action\",[[22,0,[]],\"disableEventListeners\"],null],[27,\"action\",[[22,0,[]],\"enableEventListeners\"],null],[27,\"action\",[[22,0,[]],\"scheduleUpdate\"],null],[27,\"action\",[[22,0,[]],\"update\"],null]]]]]],[0,\"\\n  \"],[10],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]}]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ember-popper/templates/components/ember-popper-targeting-parent.hbs"
    }
  });

  _exports.default = _default;
});
;define("ember-popper/templates/components/ember-popper", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "cYplTmSv",
    "block": "{\"symbols\":[\"&default\"],\"statements\":[[4,\"if\",[[23,[\"renderInPlace\"]]],null,{\"statements\":[[0,\"  \"],[7,\"div\"],[12,\"id\",[21,\"id\"]],[12,\"class\",[21,\"class\"]],[12,\"hidden\",[21,\"hidden\"]],[12,\"role\",[21,\"ariaRole\"]],[9],[0,\"\\n    \"],[14,1,[[27,\"hash\",null,[[\"disableEventListeners\",\"enableEventListeners\",\"scheduleUpdate\",\"update\"],[[27,\"action\",[[22,0,[]],\"disableEventListeners\"],null],[27,\"action\",[[22,0,[]],\"enableEventListeners\"],null],[27,\"action\",[[22,0,[]],\"scheduleUpdate\"],null],[27,\"action\",[[22,0,[]],\"update\"],null]]]]]],[0,\"\\n  \"],[10],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[4,\"in-element\",[[23,[\"_popperContainer\"]]],[[\"guid\",\"nextSibling\"],[\"%cursor:0%\",null]],{\"statements\":[[0,\"  \"],[7,\"div\"],[12,\"id\",[21,\"id\"]],[12,\"class\",[21,\"class\"]],[12,\"hidden\",[21,\"hidden\"]],[12,\"role\",[21,\"ariaRole\"]],[9],[0,\"\\n    \"],[14,1,[[27,\"hash\",null,[[\"disableEventListeners\",\"enableEventListeners\",\"scheduleUpdate\",\"update\"],[[27,\"action\",[[22,0,[]],\"disableEventListeners\"],null],[27,\"action\",[[22,0,[]],\"enableEventListeners\"],null],[27,\"action\",[[22,0,[]],\"scheduleUpdate\"],null],[27,\"action\",[[22,0,[]],\"update\"],null]]]]]],[0,\"\\n  \"],[10],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]}]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ember-popper/templates/components/ember-popper.hbs"
    }
  });

  _exports.default = _default;
});
;define("ember-power-select/components/power-select-multiple", ["exports", "ember-power-select/templates/components/power-select-multiple", "ember-power-select/utils/computed-fallback-if-undefined"], function (_exports, _powerSelectMultiple, _computedFallbackIfUndefined) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend({
    tagName: '',
    layout: _powerSelectMultiple.default,
    // Config
    triggerComponent: (0, _computedFallbackIfUndefined.default)('power-select-multiple/trigger'),
    beforeOptionsComponent: (0, _computedFallbackIfUndefined.default)(null),
    // CPs
    concatenatedTriggerClass: Ember.computed('triggerClass', function () {
      let classes = ['ember-power-select-multiple-trigger'];

      if (this.get('triggerClass')) {
        classes.push(this.get('triggerClass'));
      }

      return classes.join(' ');
    }),
    selected: Ember.computed({
      get() {
        return [];
      },

      set(_, v) {
        if (v === null || v === undefined) {
          return [];
        }

        return v;
      }

    }),
    computedTabIndex: Ember.computed('tabindex', 'searchEnabled', 'triggerComponent', function () {
      if (this.get('triggerComponent') === 'power-select-multiple/trigger' && this.get('searchEnabled') !== false) {
        return '-1';
      } else {
        return this.get('tabindex');
      }
    }),
    // Actions
    actions: {
      handleOpen(select, e) {
        let action = this.get('onopen');

        if (action && action(select, e) === false) {
          return false;
        }

        this.focusInput(select);
      },

      handleFocus(select, e) {
        let action = this.get('onfocus');

        if (action) {
          action(select, e);
        }

        this.focusInput(select);
      },

      handleKeydown(select, e) {
        let action = this.get('onkeydown');

        if (action && action(select, e) === false) {
          e.stopPropagation();
          return false;
        }

        if (e.keyCode === 13 && select.isOpen) {
          e.stopPropagation();

          if (select.highlighted !== undefined) {
            if (!select.selected || select.selected.indexOf(select.highlighted) === -1) {
              select.actions.choose(select.highlighted, e);
              return false;
            } else {
              select.actions.close(e);
              return false;
            }
          } else {
            select.actions.close(e);
            return false;
          }
        }
      },

      buildSelection(option, select) {
        let newSelection = (select.selected || []).slice(0);
        let idx = -1;

        for (let i = 0; i < newSelection.length; i++) {
          if (Ember.isEqual(newSelection[i], option)) {
            idx = i;
            break;
          }
        }

        if (idx > -1) {
          newSelection.splice(idx, 1);
        } else {
          newSelection.push(option);
        }

        return newSelection;
      }

    },

    // Methods
    focusInput(select) {
      if (select) {
        let input = document.querySelector("#ember-power-select-trigger-multiple-input-".concat(select.uniqueId));

        if (input) {
          input.focus();
        }
      }
    }

  });

  _exports.default = _default;
});
;define("ember-power-select/components/power-select-multiple/trigger", ["exports", "ember-power-select/templates/components/power-select-multiple/trigger"], function (_exports, _trigger) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const ua = window && window.navigator ? window.navigator.userAgent : '';
  const isIE = ua.indexOf('MSIE ') > -1 || ua.indexOf('Trident/') > -1;
  const isTouchDevice = !!window && 'ontouchstart' in window;

  var _default = Ember.Component.extend({
    tagName: '',
    layout: _trigger.default,
    textMeasurer: Ember.inject.service(),
    _lastIsOpen: false,

    // Lifecycle hooks
    didInsertElement() {
      this._super(...arguments);

      let select = this.get('select');
      this.input = document.getElementById("ember-power-select-trigger-multiple-input-".concat(select.uniqueId));
      let inputStyle = this.input ? window.getComputedStyle(this.input) : null;
      this.inputFont = inputStyle ? "".concat(inputStyle.fontStyle, " ").concat(inputStyle.fontVariant, " ").concat(inputStyle.fontWeight, " ").concat(inputStyle.fontSize, "/").concat(inputStyle.lineHeight, " ").concat(inputStyle.fontFamily) : null;
      let optionsList = document.getElementById("ember-power-select-multiple-options-".concat(select.uniqueId));

      let chooseOption = e => {
        let selectedIndex = e.target.getAttribute('data-selected-index');

        if (selectedIndex) {
          e.stopPropagation();
          e.preventDefault();
          let select = this.get('select');
          let object = this.selectedObject(select.selected, selectedIndex);
          select.actions.choose(object);
        }
      };

      if (isTouchDevice) {
        optionsList.addEventListener('touchstart', chooseOption);
      }

      optionsList.addEventListener('mousedown', chooseOption);
    },

    didReceiveAttrs() {
      let oldSelect = this.get('oldSelect') || {};
      let select = this.set('oldSelect', this.get('select'));

      if (oldSelect.isOpen && !select.isOpen) {
        Ember.run.scheduleOnce('actions', null, select.actions.search, '');
      }
    },

    // CPs
    triggerMultipleInputStyle: Ember.computed('select.{searchText.length,selected.length}', function () {
      let select = this.get('select');
      Ember.run.scheduleOnce('actions', select.actions.reposition);

      if (!select.selected || Ember.get(select.selected, 'length') === 0) {
        return Ember.String.htmlSafe('width: 100%;');
      } else {
        let textWidth = 0;

        if (this.inputFont) {
          textWidth = this.get('textMeasurer').width(select.searchText, this.inputFont);
        }

        return Ember.String.htmlSafe("width: ".concat(textWidth + 25, "px"));
      }
    }),
    maybePlaceholder: Ember.computed('placeholder', 'select.selected.length', function () {
      if (isIE) {
        return;
      }

      let select = this.get('select');
      return !select.selected || Ember.get(select.selected, 'length') === 0 ? this.get('placeholder') || '' : '';
    }),
    // Actions
    actions: {
      onInput(e) {
        let action = this.get('onInput');

        if (action && action(e) === false) {
          return;
        }

        this.get('select').actions.open(e);
      },

      onKeydown(e) {
        let {
          onKeydown,
          select
        } = this.getProperties('onKeydown', 'select');

        if (onKeydown && onKeydown(e) === false) {
          e.stopPropagation();
          return false;
        }

        if (e.keyCode === 8) {
          e.stopPropagation();

          if (Ember.isBlank(e.target.value)) {
            let lastSelection = select.selected[select.selected.length - 1];

            if (lastSelection) {
              select.actions.select(this.get('buildSelection')(lastSelection, select), e);

              if (typeof lastSelection === 'string') {
                select.actions.search(lastSelection);
              } else {
                let searchField = this.get('searchField');
                (true && !(searchField) && Ember.assert('`{{power-select-multiple}}` requires a `searchField` when the options are not strings to remove options using backspace', searchField));
                select.actions.search(Ember.get(lastSelection, searchField));
              }

              select.actions.open(e);
            }
          }
        } else if (e.keyCode >= 48 && e.keyCode <= 90 || e.keyCode === 32) {
          // Keys 0-9, a-z or SPACE
          e.stopPropagation();
        }
      }

    },

    // Methods
    selectedObject(list, index) {
      if (list.objectAt) {
        return list.objectAt(index);
      } else {
        return Ember.get(list, index);
      }
    }

  });

  _exports.default = _default;
});
;define("ember-power-select/components/power-select", ["exports", "ember-power-select/templates/components/power-select", "ember-power-select/utils/computed-fallback-if-undefined", "ember-power-select/utils/computed-options-matcher", "ember-power-select/utils/group-utils", "ember-concurrency"], function (_exports, _powerSelect, _computedFallbackIfUndefined, _computedOptionsMatcher, _groupUtils, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  // Copied from Ember. It shouldn't be necessary in Ember 2.5+
  const assign = Object.assign || function EmberAssign(original, ...args) {
    for (let i = 0; i < args.length; i++) {
      let arg = args[i];

      if (!arg) {
        continue;
      }

      let updates = Object.keys(arg);

      for (let i = 0; i < updates.length; i++) {
        let prop = updates[i];
        original[prop] = arg[prop];
      }
    }

    return original;
  };

  function concatWithProperty(strings, property) {
    if (property) {
      strings.push(property);
    }

    return strings.join(' ');
  }

  function toPlainArray(collection) {
    return collection.toArray ? collection.toArray() : collection;
  }

  const initialState = {
    options: [],
    // Contains the resolved collection of options
    results: [],
    // Contains the active set of results
    resultsCount: 0,
    // Contains the number of results incuding those nested/disabled
    selected: undefined,
    // Contains the resolved selected option
    highlighted: undefined,
    // Contains the currently highlighted option (if any)
    searchText: '',
    // Contains the text of the current search
    lastSearchedText: '',
    // Contains the text of the last finished search
    loading: false,
    // Truthy if there is a pending promise that will update the results
    isActive: false,
    // Truthy if the trigger is focused. Other subcomponents can mark it as active depending on other logic.
    // Private API (for now)
    _expirableSearchText: '',
    _repeatingChar: ''
  };

  var _default = Ember.Component.extend({
    // HTML
    layout: _powerSelect.default,
    tagName: '',
    // Options
    searchEnabled: (0, _computedFallbackIfUndefined.default)(true),
    matchTriggerWidth: (0, _computedFallbackIfUndefined.default)(true),
    preventScroll: (0, _computedFallbackIfUndefined.default)(false),
    matcher: (0, _computedFallbackIfUndefined.default)(_groupUtils.defaultMatcher),
    loadingMessage: (0, _computedFallbackIfUndefined.default)('Loading options...'),
    noMatchesMessage: (0, _computedFallbackIfUndefined.default)('No results found'),
    searchMessage: (0, _computedFallbackIfUndefined.default)('Type to search'),
    closeOnSelect: (0, _computedFallbackIfUndefined.default)(true),
    defaultHighlighted: (0, _computedFallbackIfUndefined.default)(_groupUtils.defaultHighlighted),
    typeAheadMatcher: (0, _computedFallbackIfUndefined.default)(_groupUtils.defaultTypeAheadMatcher),
    highlightOnHover: (0, _computedFallbackIfUndefined.default)(true),
    afterOptionsComponent: (0, _computedFallbackIfUndefined.default)(null),
    beforeOptionsComponent: (0, _computedFallbackIfUndefined.default)('power-select/before-options'),
    optionsComponent: (0, _computedFallbackIfUndefined.default)('power-select/options'),
    groupComponent: (0, _computedFallbackIfUndefined.default)('power-select/power-select-group'),
    selectedItemComponent: (0, _computedFallbackIfUndefined.default)(null),
    triggerComponent: (0, _computedFallbackIfUndefined.default)('power-select/trigger'),
    searchMessageComponent: (0, _computedFallbackIfUndefined.default)('power-select/search-message'),
    placeholderComponent: (0, _computedFallbackIfUndefined.default)('power-select/placeholder'),
    buildSelection: (0, _computedFallbackIfUndefined.default)(function buildSelection(option) {
      return option;
    }),
    _triggerTagName: (0, _computedFallbackIfUndefined.default)('div'),
    _contentTagName: (0, _computedFallbackIfUndefined.default)('div'),
    // Private state
    publicAPI: initialState,

    // Lifecycle hooks
    init() {
      this._super(...arguments);

      this._publicAPIActions = {
        search: (...args) => {
          if (this.get('isDestroying')) {
            return;
          }

          return this.send('search', ...args);
        },
        highlight: (...args) => this.send('highlight', ...args),
        select: (...args) => this.send('select', ...args),
        choose: (...args) => this.send('choose', ...args),
        scrollTo: (...args) => Ember.run.scheduleOnce('afterRender', this, this.send, 'scrollTo', ...args)
      };
      (true && !(this.get('onchange') && typeof this.get('onchange') === 'function') && Ember.assert('{{power-select}} requires an `onchange` function', this.get('onchange') && typeof this.get('onchange') === 'function'));
    },

    willDestroy() {
      this._super(...arguments);

      this._removeObserversInOptions();

      this._removeObserversInSelected();

      let action = this.get('registerAPI');

      if (action) {
        action(null);
      }
    },

    // CPs
    inTesting: Ember.computed(function () {
      let config = Ember.getOwner(this).resolveRegistration('config:environment');
      return config.environment === 'test';
    }),
    selected: Ember.computed({
      get() {
        return null;
      },

      set(_, selected) {
        if (selected && !(selected instanceof Ember.ObjectProxy) && Ember.get(selected, 'then')) {
          this.get('_updateSelectedTask').perform(selected);
        } else {
          Ember.run.scheduleOnce('actions', this, this.updateSelection, selected);
        }

        return selected;
      }

    }),
    options: Ember.computed({
      get() {
        return [];
      },

      set(_, options, oldOptions) {
        if (options === oldOptions) {
          return options;
        }

        if (options && Ember.get(options, 'then')) {
          this.get('_updateOptionsTask').perform(options);
        } else {
          Ember.run.scheduleOnce('actions', this, this.updateOptions, options);
        }

        return options;
      }

    }),
    optionMatcher: (0, _computedOptionsMatcher.default)('matcher', _groupUtils.defaultMatcher),
    typeAheadOptionMatcher: (0, _computedOptionsMatcher.default)('typeAheadMatcher', _groupUtils.defaultTypeAheadMatcher),
    concatenatedTriggerClasses: Ember.computed('triggerClass', 'publicAPI.isActive', function () {
      let classes = ['ember-power-select-trigger'];

      if (this.get('publicAPI.isActive')) {
        classes.push('ember-power-select-trigger--active');
      }

      return concatWithProperty(classes, this.get('triggerClass'));
    }),
    concatenatedDropdownClasses: Ember.computed('dropdownClass', 'publicAPI.isActive', function () {
      let classes = ['ember-power-select-dropdown'];

      if (this.get('publicAPI.isActive')) {
        classes.push('ember-power-select-dropdown--active');
      }

      return concatWithProperty(classes, this.get('dropdownClass'));
    }),
    mustShowSearchMessage: Ember.computed('publicAPI.{loading,searchText,resultsCount}', 'search', 'searchMessage', function () {
      let publicAPI = this.get('publicAPI');
      return !publicAPI.loading && publicAPI.searchText.length === 0 && !!this.get('search') && !!this.get('searchMessage') && publicAPI.resultsCount === 0;
    }),
    mustShowNoMessages: Ember.computed('search', 'publicAPI.{lastSearchedText,resultsCount,loading}', function () {
      let publicAPI = this.get('publicAPI');
      return !publicAPI.loading && publicAPI.resultsCount === 0 && (!this.get('search') || publicAPI.lastSearchedText.length > 0);
    }),
    // Actions
    actions: {
      registerAPI(dropdown) {
        if (!dropdown) {
          return;
        }

        let publicAPI = assign({}, this.get('publicAPI'), dropdown);
        publicAPI.actions = assign({}, dropdown.actions, this._publicAPIActions);
        this.setProperties({
          publicAPI,
          optionsId: "ember-power-select-options-".concat(publicAPI.uniqueId)
        });
        let action = this.get('registerAPI');

        if (action) {
          action(publicAPI);
        }
      },

      onOpen(_, e) {
        let action = this.get('onopen');

        if (action && action(this.get('publicAPI'), e) === false) {
          return false;
        }

        if (e) {
          this.set('openingEvent', e);

          if (e.type === 'keydown' && (e.keyCode === 38 || e.keyCode === 40)) {
            e.preventDefault();
          }
        }

        this.resetHighlighted();
      },

      onClose(_, e) {
        let action = this.get('onclose');

        if (action && action(this.get('publicAPI'), e) === false) {
          return false;
        }

        if (e) {
          this.set('openingEvent', null);
        }

        this.updateState({
          highlighted: undefined
        });
      },

      onInput(e) {
        let term = e.target.value;
        let action = this.get('oninput');
        let publicAPI = this.get('publicAPI');
        let correctedTerm;

        if (action) {
          correctedTerm = action(term, publicAPI, e);

          if (correctedTerm === false) {
            return;
          }
        }

        publicAPI.actions.search(typeof correctedTerm === 'string' ? correctedTerm : term);
      },

      highlight(option
      /* , e */
      ) {
        if (option && Ember.get(option, 'disabled')) {
          return;
        }

        this.updateState({
          highlighted: option
        });
      },

      select(selected, e) {
        let publicAPI = this.get('publicAPI');

        if (!Ember.isEqual(publicAPI.selected, selected)) {
          this.get('onchange')(selected, publicAPI, e);
        }
      },

      search(term) {
        if (Ember.isBlank(term)) {
          this._resetSearch();
        } else if (this.get('search')) {
          this._performSearch(term);
        } else {
          this._performFilter(term);
        }
      },

      choose(selected, e) {
        if (!this.get('inTesting')) {
          if (e && e.clientY) {
            if (this.openingEvent && this.openingEvent.clientY) {
              if (Math.abs(this.openingEvent.clientY - e.clientY) < 2) {
                return;
              }
            }
          }
        }

        let publicAPI = this.get('publicAPI');
        publicAPI.actions.select(this.get('buildSelection')(selected, publicAPI), e);

        if (this.get('closeOnSelect')) {
          publicAPI.actions.close(e);
          return false;
        }
      },

      // keydowns handled by the trigger provided by ember-basic-dropdown
      onTriggerKeydown(_, e) {
        let onkeydown = this.get('onkeydown');

        if (onkeydown && onkeydown(this.get('publicAPI'), e) === false) {
          return false;
        }

        if (e.ctrlKey || e.metaKey) {
          return false;
        }

        if (e.keyCode >= 48 && e.keyCode <= 90 || // Keys 0-9, a-z
        this._isNumpadKeyEvent(e)) {
          this.get('triggerTypingTask').perform(e);
        } else if (e.keyCode === 32) {
          // Space
          return this._handleKeySpace(e);
        } else {
          return this._routeKeydown(e);
        }
      },

      // keydowns handled by inputs inside the component
      onKeydown(e) {
        let onkeydown = this.get('onkeydown');

        if (onkeydown && onkeydown(this.get('publicAPI'), e) === false) {
          return false;
        }

        return this._routeKeydown(e);
      },

      scrollTo(option, ...rest) {
        if (!document || !option) {
          return;
        }

        let publicAPI = this.get('publicAPI');
        let userDefinedScrollTo = this.get('scrollTo');

        if (userDefinedScrollTo) {
          return userDefinedScrollTo(option, publicAPI, ...rest);
        }

        let optionsList = document.getElementById("ember-power-select-options-".concat(publicAPI.uniqueId));

        if (!optionsList) {
          return;
        }

        let index = (0, _groupUtils.indexOfOption)(publicAPI.results, option);

        if (index === -1) {
          return;
        }

        let optionElement = optionsList.querySelectorAll('[data-option-index]').item(index);

        if (!optionElement) {
          return;
        }

        let optionTopScroll = optionElement.offsetTop - optionsList.offsetTop;
        let optionBottomScroll = optionTopScroll + optionElement.offsetHeight;

        if (optionBottomScroll > optionsList.offsetHeight + optionsList.scrollTop) {
          optionsList.scrollTop = optionBottomScroll - optionsList.offsetHeight;
        } else if (optionTopScroll < optionsList.scrollTop) {
          optionsList.scrollTop = optionTopScroll;
        }
      },

      onTriggerFocus(_, event) {
        this.send('activate');
        let action = this.get('onfocus');

        if (action) {
          action(this.get('publicAPI'), event);
        }
      },

      onFocus(event) {
        this.send('activate');
        let action = this.get('onfocus');

        if (action) {
          action(this.get('publicAPI'), event);
        }
      },

      onTriggerBlur(_, event) {
        if (!this.isDestroying) {
          this.send('deactivate');
        }

        let action = this.get('onblur');

        if (action) {
          action(this.get('publicAPI'), event);
        }
      },

      onBlur(event) {
        if (!this.isDestroying) {
          this.send('deactivate');
        }

        let action = this.get('onblur');

        if (action) {
          action(this.get('publicAPI'), event);
        }
      },

      activate() {
        Ember.run.scheduleOnce('actions', this, 'setIsActive', true);
      },

      deactivate() {
        Ember.run.scheduleOnce('actions', this, 'setIsActive', false);
      }

    },
    // Tasks
    triggerTypingTask: (0, _emberConcurrency.task)(function* (e) {
      // In general, a user doing this interaction means to have a different result.
      let searchStartOffset = 1;
      let publicAPI = this.get('publicAPI');
      let repeatingChar = publicAPI._repeatingChar;
      let charCode = e.keyCode;

      if (this._isNumpadKeyEvent(e)) {
        charCode -= 48; // Adjust char code offset for Numpad key codes. Check here for numapd key code behavior: https://goo.gl/Qwc9u4
      }

      let term; // Check if user intends to cycle through results. _repeatingChar can only be the first character.

      let c = String.fromCharCode(charCode);

      if (c === publicAPI._repeatingChar) {
        term = c;
      } else {
        term = publicAPI._expirableSearchText + c;
      }

      if (term.length > 1) {
        // If the term is longer than one char, the user is in the middle of a non-cycling interaction
        // so the offset is just zero (the current selection is a valid match).
        searchStartOffset = 0;
        repeatingChar = '';
      } else {
        repeatingChar = c;
      } // When the select is open, the "selection" is just highlighted.


      if (publicAPI.isOpen && publicAPI.highlighted) {
        searchStartOffset += (0, _groupUtils.indexOfOption)(publicAPI.options, publicAPI.highlighted);
      } else if (!publicAPI.isOpen && publicAPI.selected) {
        searchStartOffset += (0, _groupUtils.indexOfOption)(publicAPI.options, publicAPI.selected);
      } else {
        searchStartOffset = 0;
      } // The char is always appended. That way, searching for words like "Aaron" will work even
      // if "Aa" would cycle through the results.


      this.updateState({
        _expirableSearchText: publicAPI._expirableSearchText + c,
        _repeatingChar: repeatingChar
      });
      let match = this.findWithOffset(publicAPI.options, term, searchStartOffset, true);

      if (match !== undefined) {
        if (publicAPI.isOpen) {
          publicAPI.actions.highlight(match, e);
          publicAPI.actions.scrollTo(match, e);
        } else {
          publicAPI.actions.select(match, e);
        }
      }

      yield (0, _emberConcurrency.timeout)(1000);
      this.updateState({
        _expirableSearchText: '',
        _repeatingChar: ''
      });
    }).restartable(),
    _updateSelectedTask: (0, _emberConcurrency.task)(function* (selectionPromise) {
      let selection = yield selectionPromise;
      this.updateSelection(selection);
    }).restartable(),
    _updateOptionsTask: (0, _emberConcurrency.task)(function* (optionsPromise) {
      if (optionsPromise instanceof Ember.ArrayProxy) {
        this.updateOptions(optionsPromise.get('content'));
      }

      this.updateState({
        loading: true
      });

      try {
        let options = yield optionsPromise;
        this.updateOptions(options);
      } finally {
        this.updateState({
          loading: false
        });
      }
    }).restartable(),
    handleAsyncSearchTask: (0, _emberConcurrency.task)(function* (term, searchThenable) {
      try {
        this.updateState({
          loading: true
        });
        let results = yield searchThenable;
        let resultsArray = toPlainArray(results);
        this.updateState({
          results: resultsArray,
          _rawSearchResults: results,
          lastSearchedText: term,
          resultsCount: (0, _groupUtils.countOptions)(results),
          loading: false
        });
        this.resetHighlighted();
      } catch (e) {
        this.updateState({
          lastSearchedText: term,
          loading: false
        });
      } finally {
        if (typeof searchThenable.cancel === 'function') {
          searchThenable.cancel();
        }
      }
    }).restartable(),

    // Methods
    setIsActive(isActive) {
      this.updateState({
        isActive
      });
    },

    filter(options, term, skipDisabled = false) {
      return (0, _groupUtils.filterOptions)(options || [], term, this.get('optionMatcher'), skipDisabled);
    },

    findWithOffset(options, term, offset, skipDisabled = false) {
      return (0, _groupUtils.findOptionWithOffset)(options || [], term, this.get('typeAheadOptionMatcher'), offset, skipDisabled);
    },

    updateOptions(options) {
      this._removeObserversInOptions();

      if (!options) {
        return;
      }

      if (true
      /* DEBUG */
      ) {
        (function walk(collection) {
          for (let i = 0; i < Ember.get(collection, 'length'); i++) {
            let entry = collection.objectAt ? collection.objectAt(i) : collection[i];
            let subOptions = Ember.get(entry, 'options');
            let isGroup = !!Ember.get(entry, 'groupName') && !!subOptions;

            if (isGroup) {
              (true && !(!Ember.get(subOptions, 'then')) && Ember.assert('ember-power-select doesn\'t support promises inside groups. Please, resolve those promises and turn them into arrays before passing them to ember-power-select', !Ember.get(subOptions, 'then')));
              walk(subOptions);
            }
          }
        })(options);
      }

      if (options && options.addObserver) {
        options.addObserver('[]', this, this._updateOptionsAndResults);
        this._observedOptions = options;
      }

      this._updateOptionsAndResults(options);
    },

    updateSelection(selection) {
      this._removeObserversInSelected();

      if (Ember.isArray(selection)) {
        if (selection && selection.addObserver) {
          selection.addObserver('[]', this, this._updateSelectedArray);
          this._observedSelected = selection;
        }

        this._updateSelectedArray(selection);
      } else if (selection !== this.get('publicAPI').selected) {
        this.updateState({
          selected: selection,
          highlighted: selection
        });
      }
    },

    resetHighlighted() {
      let publicAPI = this.get('publicAPI');
      let defaultHightlighted = this.get('defaultHighlighted');
      let highlighted;

      if (typeof defaultHightlighted === 'function') {
        highlighted = defaultHightlighted(publicAPI);
      } else {
        highlighted = defaultHightlighted;
      }

      this.updateState({
        highlighted
      });
    },

    _updateOptionsAndResults(opts) {
      if (Ember.get(this, 'isDestroying')) {
        return;
      }

      let options = toPlainArray(opts);
      let publicAPI;

      if (this.get('search')) {
        // external search
        publicAPI = this.updateState({
          options,
          results: options,
          resultsCount: (0, _groupUtils.countOptions)(options),
          loading: false
        });
      } else {
        // filter
        publicAPI = this.get('publicAPI');
        let results = Ember.isBlank(publicAPI.searchText) ? options : this.filter(options, publicAPI.searchText);
        publicAPI = this.updateState({
          results,
          options,
          resultsCount: (0, _groupUtils.countOptions)(results),
          loading: false
        });
      }

      if (publicAPI.isOpen) {
        this.resetHighlighted();
      }
    },

    _updateSelectedArray(selection) {
      if (Ember.get(this, 'isDestroyed')) {
        return;
      }

      this.updateState({
        selected: toPlainArray(selection)
      });
    },

    _resetSearch() {
      let results = this.get('publicAPI').options;
      this.get('handleAsyncSearchTask').cancelAll();
      this.updateState({
        results,
        searchText: '',
        lastSearchedText: '',
        resultsCount: (0, _groupUtils.countOptions)(results),
        loading: false
      });
    },

    _performFilter(term) {
      let results = this.filter(this.get('publicAPI').options, term);
      this.updateState({
        results,
        searchText: term,
        lastSearchedText: term,
        resultsCount: (0, _groupUtils.countOptions)(results)
      });
      this.resetHighlighted();
    },

    _performSearch(term) {
      let searchAction = this.get('search');
      let publicAPI = this.updateState({
        searchText: term
      });
      let search = searchAction(term, publicAPI);

      if (!search) {
        publicAPI = this.updateState({
          lastSearchedText: term
        });
      } else if (Ember.get(search, 'then')) {
        this.get('handleAsyncSearchTask').perform(term, search);
      } else {
        let resultsArray = toPlainArray(search);
        this.updateState({
          results: resultsArray,
          lastSearchedText: term,
          resultsCount: (0, _groupUtils.countOptions)(resultsArray)
        });
        this.resetHighlighted();
      }
    },

    _routeKeydown(e) {
      if (e.keyCode === 38 || e.keyCode === 40) {
        // Up & Down
        return this._handleKeyUpDown(e);
      } else if (e.keyCode === 13) {
        // ENTER
        return this._handleKeyEnter(e);
      } else if (e.keyCode === 9) {
        // Tab
        return this._handleKeyTab(e);
      } else if (e.keyCode === 27) {
        // ESC
        return this._handleKeyESC(e);
      }
    },

    _handleKeyUpDown(e) {
      let publicAPI = this.get('publicAPI');

      if (publicAPI.isOpen) {
        e.preventDefault();
        e.stopPropagation();
        let step = e.keyCode === 40 ? 1 : -1;
        let newHighlighted = (0, _groupUtils.advanceSelectableOption)(publicAPI.results, publicAPI.highlighted, step);
        publicAPI.actions.highlight(newHighlighted, e);
        publicAPI.actions.scrollTo(newHighlighted);
      } else {
        publicAPI.actions.open(e);
      }
    },

    _handleKeyEnter(e) {
      let publicAPI = this.get('publicAPI');

      if (publicAPI.isOpen && publicAPI.highlighted !== undefined) {
        publicAPI.actions.choose(publicAPI.highlighted, e);
        return false;
      }
    },

    _handleKeySpace(e) {
      if (['TEXTAREA', 'INPUT'].includes(e.target.nodeName)) {
        return false;
      }

      let publicAPI = this.get('publicAPI');

      if (publicAPI.isOpen && publicAPI.highlighted !== undefined) {
        e.preventDefault(); // Prevents scrolling of the page.

        publicAPI.actions.choose(publicAPI.highlighted, e);
        return false;
      }
    },

    _handleKeyTab(e) {
      this.get('publicAPI').actions.close(e);
    },

    _handleKeyESC(e) {
      this.get('publicAPI').actions.close(e);
    },

    _removeObserversInOptions() {
      if (this._observedOptions) {
        this._observedOptions.removeObserver('[]', this, this._updateOptionsAndResults);
      }
    },

    _removeObserversInSelected() {
      if (this._observedSelected) {
        this._observedSelected.removeObserver('[]', this, this._updateSelectedArray);
      }
    },

    _isNumpadKeyEvent(e) {
      return e.keyCode >= 96 && e.keyCode <= 105;
    },

    updateState(changes) {
      let newState = Ember.set(this, 'publicAPI', assign({}, this.get('publicAPI'), changes));
      let registerAPI = this.get('registerAPI');

      if (registerAPI) {
        registerAPI(newState);
      }

      return newState;
    }

  });

  _exports.default = _default;
});
;define("ember-power-select/components/power-select/before-options", ["exports", "ember-power-select/templates/components/power-select/before-options"], function (_exports, _beforeOptions) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend({
    tagName: '',
    layout: _beforeOptions.default,
    autofocus: true,

    // Lifecycle hooks
    didInsertElement() {
      this._super(...arguments);

      if (this.get('autofocus')) {
        this.focusInput();
      }
    },

    willDestroyElement() {
      this._super(...arguments);

      if (this.get('searchEnabled')) {
        Ember.run.scheduleOnce('actions', this, this.get('select').actions.search, '');
      }
    },

    // Actions
    actions: {
      onKeydown(e) {
        let onKeydown = this.get('onKeydown');

        if (onKeydown(e) === false) {
          return false;
        }

        if (e.keyCode === 13) {
          let select = this.get('select');
          select.actions.close(e);
        }
      }

    },

    // Methods
    focusInput() {
      this.input = document.querySelector(".ember-power-select-search-input[aria-controls=\"".concat(this.get('listboxId'), "\"]"));

      if (this.input) {
        Ember.run.later(this.input, 'focus', 0);
      }
    }

  });

  _exports.default = _default;
});
;define("ember-power-select/components/power-select/options", ["exports", "ember-power-select/templates/components/power-select/options"], function (_exports, _options) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const isTouchDevice = !!window && 'ontouchstart' in window;

  if (typeof FastBoot === 'undefined') {
    (function (ElementProto) {
      if (typeof ElementProto.matches !== 'function') {
        ElementProto.matches = ElementProto.msMatchesSelector || ElementProto.mozMatchesSelector || ElementProto.webkitMatchesSelector;
      }

      if (typeof ElementProto.closest !== 'function') {
        ElementProto.closest = function closest(selector) {
          let element = this;

          while (element && element.nodeType === 1) {
            if (element.matches(selector)) {
              return element;
            }

            element = element.parentNode;
          }

          return null;
        };
      }
    })(window.Element.prototype);
  }

  var _default = Ember.Component.extend({
    isTouchDevice,
    layout: _options.default,
    tagName: 'ul',
    attributeBindings: ['role', 'aria-controls'],
    role: 'listbox',

    // Lifecycle hooks
    didInsertElement() {
      this._super(...arguments);

      if (this.get('role') === 'group') {
        return;
      }

      let findOptionAndPerform = (action, e) => {
        let optionItem = e.target.closest('[data-option-index]');

        if (!optionItem) {
          return;
        }

        if (optionItem.closest('[aria-disabled=true]')) {
          return; // Abort if the item or an ancestor is disabled
        }

        let optionIndex = optionItem.getAttribute('data-option-index');
        action(this._optionFromIndex(optionIndex), e);
      };

      this.element.addEventListener('mouseup', e => findOptionAndPerform(this.get('select.actions.choose'), e));

      if (this.get('highlightOnHover')) {
        this.element.addEventListener('mouseover', e => findOptionAndPerform(this.get('select.actions.highlight'), e));
      }

      if (this.get('isTouchDevice')) {
        this._addTouchEvents();
      }

      if (this.get('role') !== 'group') {
        let select = this.get('select');
        select.actions.scrollTo(select.highlighted);
      }
    },

    // CPs
    'aria-controls': Ember.computed('select.uniqueId', function () {
      return "ember-power-select-trigger-".concat(this.get('select.uniqueId'));
    }),

    // Methods
    _addTouchEvents() {
      let touchMoveHandler = () => {
        this.hasMoved = true;

        if (this.element) {
          this.element.removeEventListener('touchmove', touchMoveHandler);
        }
      }; // Add touch event handlers to detect taps


      this.element.addEventListener('touchstart', () => {
        this.element.addEventListener('touchmove', touchMoveHandler);
      });
      this.element.addEventListener('touchend', e => {
        let optionItem = e.target.closest('[data-option-index]');

        if (!optionItem) {
          return;
        }

        e.preventDefault();

        if (this.hasMoved) {
          this.hasMoved = false;
          return;
        }

        let optionIndex = optionItem.getAttribute('data-option-index');
        this.get('select.actions.choose')(this._optionFromIndex(optionIndex), e);
      });
    },

    _optionFromIndex(index) {
      let parts = index.split('.');
      let options = this.get('options');
      let option = options[parseInt(parts[0], 10)];

      for (let i = 1; i < parts.length; i++) {
        option = option.options[parseInt(parts[i], 10)];
      }

      return option;
    }

  });

  _exports.default = _default;
});
;define("ember-power-select/components/power-select/placeholder", ["exports", "ember-power-select/templates/components/power-select/placeholder"], function (_exports, _placeholder) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend({
    layout: _placeholder.default,
    tagName: ''
  });

  _exports.default = _default;
});
;define("ember-power-select/components/power-select/power-select-group", ["exports", "ember-power-select/templates/components/power-select/power-select-group"], function (_exports, _powerSelectGroup) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend({
    layout: _powerSelectGroup.default,
    tagName: '',
    disabled: Ember.computed.reads('group.disabled'),
    groupName: Ember.computed.reads('group.groupName')
  });

  _exports.default = _default;
});
;define("ember-power-select/components/power-select/search-message", ["exports", "ember-power-select/templates/components/power-select/search-message"], function (_exports, _searchMessage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend({
    layout: _searchMessage.default,
    tagName: ''
  });

  _exports.default = _default;
});
;define("ember-power-select/components/power-select/trigger", ["exports", "ember-power-select/templates/components/power-select/trigger"], function (_exports, _trigger) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend({
    layout: _trigger.default,
    tagName: '',
    // Actions
    actions: {
      clear(e) {
        e.stopPropagation();
        this.get('select').actions.select(null);

        if (e.type === 'touchstart') {
          return false;
        }
      }

    }
  });

  _exports.default = _default;
});
;define("ember-power-select/helpers/ember-power-select-is-group", ["exports", "ember-power-select/utils/group-utils"], function (_exports, _groupUtils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.emberPowerSelectIsGroup = emberPowerSelectIsGroup;
  _exports.default = void 0;

  function emberPowerSelectIsGroup([maybeGroup]) {
    return (0, _groupUtils.isGroup)(maybeGroup);
  }

  var _default = Ember.Helper.helper(emberPowerSelectIsGroup);

  _exports.default = _default;
});
;define("ember-power-select/helpers/ember-power-select-is-selected", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.emberPowerSelectIsSelected = emberPowerSelectIsSelected;
  _exports.default = void 0;

  // TODO: Make it private or scoped to the component
  function emberPowerSelectIsSelected([option, selected]
  /* , hash*/
  ) {
    if (selected === undefined || selected === null) {
      return false;
    }

    if (Ember.isArray(selected)) {
      for (let i = 0; i < selected.length; i++) {
        if (Ember.isEqual(selected[i], option)) {
          return true;
        }
      }

      return false;
    } else {
      return Ember.isEqual(option, selected);
    }
  }

  var _default = Ember.Helper.helper(emberPowerSelectIsSelected);

  _exports.default = _default;
});
;define("ember-power-select/helpers/ember-power-select-true-string-if-present", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.emberPowerSelectTrueStringIfPresent = emberPowerSelectTrueStringIfPresent;
  _exports.default = void 0;

  function emberPowerSelectTrueStringIfPresent([bool]
  /* , hash*/
  ) {
    return bool ? 'true' : false;
  }

  var _default = Ember.Helper.helper(emberPowerSelectTrueStringIfPresent);

  _exports.default = _default;
});
;define("ember-power-select/templates/components/power-select-multiple", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "Wy+kJg4F",
    "block": "{\"symbols\":[\"option\",\"select\",\"option\",\"select\",\"&default\",\"&inverse\"],\"statements\":[[4,\"if\",[[24,6]],null,{\"statements\":[[4,\"power-select\",null,[[\"_triggerTagName\",\"triggerRole\",\"afterOptionsComponent\",\"allowClear\",\"ariaDescribedBy\",\"ariaInvalid\",\"ariaLabel\",\"ariaLabelledBy\",\"beforeOptionsComponent\",\"buildSelection\",\"calculatePosition\",\"class\",\"closeOnSelect\",\"defaultHighlighted\",\"destination\",\"dir\",\"disabled\",\"dropdownClass\",\"extra\",\"groupComponent\",\"horizontalPosition\",\"initiallyOpened\",\"loadingMessage\",\"matcher\",\"matchTriggerWidth\",\"noMatchesMessage\",\"onblur\",\"onchange\",\"onclose\",\"onfocus\",\"oninput\",\"onkeydown\",\"onopen\",\"options\",\"optionsComponent\",\"placeholder\",\"placeholderComponent\",\"preventScroll\",\"registerAPI\",\"renderInPlace\",\"required\",\"scrollTo\",\"search\",\"searchEnabled\",\"searchField\",\"searchMessage\",\"searchPlaceholder\",\"selected\",\"selectedItemComponent\",\"tabindex\",\"tagName\",\"eventType\",\"title\",\"triggerClass\",\"triggerComponent\",\"triggerId\",\"verticalPosition\"],[[23,[\"_triggerTagName\"]],[23,[\"triggerRole\"]],[23,[\"afterOptionsComponent\"]],[23,[\"allowClear\"]],[23,[\"ariaDescribedBy\"]],[23,[\"ariaInvalid\"]],[23,[\"ariaLabel\"]],[23,[\"ariaLabelledBy\"]],[23,[\"beforeOptionsComponent\"]],[27,\"action\",[[22,0,[]],\"buildSelection\"],null],[23,[\"calculatePosition\"]],[23,[\"class\"]],[23,[\"closeOnSelect\"]],[23,[\"defaultHighlighted\"]],[23,[\"destination\"]],[23,[\"dir\"]],[23,[\"disabled\"]],[23,[\"dropdownClass\"]],[23,[\"extra\"]],[23,[\"groupComponent\"]],[23,[\"horizontalPosition\"]],[23,[\"initiallyOpened\"]],[23,[\"loadingMessage\"]],[23,[\"matcher\"]],[23,[\"matchTriggerWidth\"]],[23,[\"noMatchesMessage\"]],[23,[\"onblur\"]],[23,[\"onchange\"]],[23,[\"onclose\"]],[27,\"action\",[[22,0,[]],\"handleFocus\"],null],[23,[\"oninput\"]],[27,\"action\",[[22,0,[]],\"handleKeydown\"],null],[27,\"action\",[[22,0,[]],\"handleOpen\"],null],[23,[\"options\"]],[23,[\"optionsComponent\"]],[23,[\"placeholder\"]],[23,[\"placeholderComponent\"]],[23,[\"preventScroll\"]],[27,\"action\",[[22,0,[]],[23,[\"registerAPI\"]]],null],[23,[\"renderInPlace\"]],[23,[\"required\"]],[23,[\"scrollTo\"]],[23,[\"search\"]],[23,[\"searchEnabled\"]],[23,[\"searchField\"]],[23,[\"searchMessage\"]],[23,[\"searchPlaceholder\"]],[23,[\"selected\"]],[23,[\"selectedItemComponent\"]],[23,[\"computedTabIndex\"]],[23,[\"tagName\"]],[23,[\"eventType\"]],[23,[\"title\"]],[23,[\"concatenatedTriggerClass\"]],[27,\"component\",[[23,[\"triggerComponent\"]]],[[\"tabindex\"],[[23,[\"tabindex\"]]]]],[23,[\"triggerId\"]],[23,[\"verticalPosition\"]]]],{\"statements\":[[0,\"    \"],[14,5,[[22,3,[]],[22,4,[]]]],[0,\"\\n\"]],\"parameters\":[3,4]},{\"statements\":[[0,\"    \"],[14,6],[0,\"\\n\"]],\"parameters\":[]}]],\"parameters\":[]},{\"statements\":[[4,\"power-select\",null,[[\"_triggerTagName\",\"triggerRole\",\"afterOptionsComponent\",\"allowClear\",\"ariaDescribedBy\",\"ariaInvalid\",\"ariaLabel\",\"ariaLabelledBy\",\"beforeOptionsComponent\",\"buildSelection\",\"calculatePosition\",\"class\",\"closeOnSelect\",\"defaultHighlighted\",\"destination\",\"dir\",\"disabled\",\"dropdownClass\",\"extra\",\"groupComponent\",\"horizontalPosition\",\"initiallyOpened\",\"loadingMessage\",\"matcher\",\"matchTriggerWidth\",\"noMatchesMessage\",\"onblur\",\"onchange\",\"onclose\",\"onfocus\",\"oninput\",\"onkeydown\",\"onopen\",\"options\",\"optionsComponent\",\"placeholder\",\"placeholderComponent\",\"preventScroll\",\"registerAPI\",\"renderInPlace\",\"required\",\"scrollTo\",\"search\",\"searchEnabled\",\"searchField\",\"searchMessage\",\"searchPlaceholder\",\"selected\",\"selectedItemComponent\",\"tabindex\",\"tagName\",\"eventType\",\"title\",\"triggerClass\",\"triggerComponent\",\"triggerId\",\"verticalPosition\"],[[23,[\"_triggerTagName\"]],[23,[\"triggerRole\"]],[23,[\"afterOptionsComponent\"]],[23,[\"allowClear\"]],[23,[\"ariaDescribedBy\"]],[23,[\"ariaInvalid\"]],[23,[\"ariaLabel\"]],[23,[\"ariaLabelledBy\"]],[23,[\"beforeOptionsComponent\"]],[27,\"action\",[[22,0,[]],\"buildSelection\"],null],[23,[\"calculatePosition\"]],[23,[\"class\"]],[23,[\"closeOnSelect\"]],[23,[\"defaultHighlighted\"]],[23,[\"destination\"]],[23,[\"dir\"]],[23,[\"disabled\"]],[23,[\"dropdownClass\"]],[23,[\"extra\"]],[23,[\"groupComponent\"]],[23,[\"horizontalPosition\"]],[23,[\"initiallyOpened\"]],[23,[\"loadingMessage\"]],[23,[\"matcher\"]],[23,[\"matchTriggerWidth\"]],[23,[\"noMatchesMessage\"]],[23,[\"onblur\"]],[23,[\"onchange\"]],[23,[\"onclose\"]],[27,\"action\",[[22,0,[]],\"handleFocus\"],null],[23,[\"oninput\"]],[27,\"action\",[[22,0,[]],\"handleKeydown\"],null],[27,\"action\",[[22,0,[]],\"handleOpen\"],null],[23,[\"options\"]],[23,[\"optionsComponent\"]],[23,[\"placeholder\"]],[23,[\"placeholderComponent\"]],[23,[\"preventScroll\"]],[27,\"readonly\",[[23,[\"registerAPI\"]]],null],[23,[\"renderInPlace\"]],[23,[\"required\"]],[23,[\"scrollTo\"]],[23,[\"search\"]],[23,[\"searchEnabled\"]],[23,[\"searchField\"]],[23,[\"searchMessage\"]],[23,[\"searchPlaceholder\"]],[23,[\"selected\"]],[23,[\"selectedItemComponent\"]],[23,[\"computedTabIndex\"]],[23,[\"tagName\"]],[23,[\"eventType\"]],[23,[\"title\"]],[23,[\"concatenatedTriggerClass\"]],[27,\"component\",[[23,[\"triggerComponent\"]]],[[\"tabindex\"],[[23,[\"tabindex\"]]]]],[23,[\"triggerId\"]],[23,[\"verticalPosition\"]]]],{\"statements\":[[0,\"    \"],[14,5,[[22,1,[]],[22,2,[]]]],[0,\"\\n\"]],\"parameters\":[1,2]},null]],\"parameters\":[]}]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ember-power-select/templates/components/power-select-multiple.hbs"
    }
  });

  _exports.default = _default;
});
;define("ember-power-select/templates/components/power-select-multiple/trigger", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "kck6mx+1",
    "block": "{\"symbols\":[\"opt\",\"idx\",\"&default\"],\"statements\":[[7,\"ul\"],[12,\"id\",[28,[\"ember-power-select-multiple-options-\",[23,[\"select\",\"uniqueId\"]]]]],[11,\"class\",\"ember-power-select-multiple-options\"],[9],[0,\"\\n\"],[4,\"each\",[[23,[\"select\",\"selected\"]]],null,{\"statements\":[[0,\"    \"],[7,\"li\"],[12,\"class\",[28,[\"ember-power-select-multiple-option \",[27,\"if\",[[22,1,[\"disabled\"]],\"ember-power-select-multiple-option--disabled\"],null]]]],[9],[0,\"\\n\"],[4,\"unless\",[[23,[\"select\",\"disabled\"]]],null,{\"statements\":[[0,\"        \"],[7,\"span\"],[11,\"role\",\"button\"],[11,\"aria-label\",\"remove element\"],[11,\"class\",\"ember-power-select-multiple-remove-btn\"],[12,\"data-selected-index\",[22,2,[]]],[9],[0,\"\\n          ×\\n        \"],[10],[0,\"\\n\"]],\"parameters\":[]},null],[4,\"if\",[[23,[\"selectedItemComponent\"]]],null,{\"statements\":[[0,\"        \"],[1,[27,\"component\",[[23,[\"selectedItemComponent\"]]],[[\"extra\",\"option\",\"select\"],[[27,\"readonly\",[[23,[\"extra\"]]],null],[27,\"readonly\",[[22,1,[]]],null],[27,\"readonly\",[[23,[\"select\"]]],null]]]],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"        \"],[14,3,[[22,1,[]],[23,[\"select\"]]]],[0,\"\\n\"]],\"parameters\":[]}],[0,\"    \"],[10],[0,\"\\n\"]],\"parameters\":[1,2]},{\"statements\":[[4,\"if\",[[27,\"and\",[[23,[\"placeholder\"]],[27,\"not\",[[23,[\"searchEnabled\"]]],null]],null]],null,{\"statements\":[[0,\"      \"],[7,\"span\"],[11,\"class\",\"ember-power-select-placeholder\"],[9],[1,[21,\"placeholder\"],false],[10],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]}],[4,\"if\",[[23,[\"searchEnabled\"]]],null,{\"statements\":[[0,\"    \"],[7,\"input\"],[11,\"class\",\"ember-power-select-trigger-multiple-input\"],[11,\"autocomplete\",\"off\"],[11,\"autocorrect\",\"off\"],[11,\"autocapitalize\",\"off\"],[11,\"spellcheck\",\"false\"],[12,\"id\",[28,[\"ember-power-select-trigger-multiple-input-\",[23,[\"select\",\"uniqueId\"]]]]],[12,\"value\",[23,[\"select\",\"searchText\"]]],[12,\"aria-controls\",[21,\"listboxId\"]],[12,\"style\",[21,\"triggerMultipleInputStyle\"]],[12,\"placeholder\",[21,\"maybePlaceholder\"]],[12,\"disabled\",[23,[\"select\",\"disabled\"]]],[12,\"oninput\",[27,\"action\",[[22,0,[]],\"onInput\"],null]],[12,\"onfocus\",[21,\"onFocus\"]],[12,\"onblur\",[21,\"onBlur\"]],[12,\"tabindex\",[21,\"tabindex\"]],[12,\"onkeydown\",[27,\"action\",[[22,0,[]],\"onKeydown\"],null]],[11,\"type\",\"search\"],[9],[10],[0,\"\\n\"]],\"parameters\":[]},null],[10],[0,\"\\n\"],[7,\"span\"],[11,\"class\",\"ember-power-select-status-icon\"],[9],[10],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ember-power-select/templates/components/power-select-multiple/trigger.hbs"
    }
  });

  _exports.default = _default;
});
;define("ember-power-select/templates/components/power-select", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "6vTgDm1+",
    "block": "{\"symbols\":[\"dropdown\",\"option\",\"term\",\"opt\",\"term\",\"&default\",\"&inverse\"],\"statements\":[[4,\"basic-dropdown\",null,[[\"classNames\",\"horizontalPosition\",\"calculatePosition\",\"destination\",\"initiallyOpened\",\"matchTriggerWidth\",\"preventScroll\",\"onClose\",\"onOpen\",\"registerAPI\",\"renderInPlace\",\"verticalPosition\",\"disabled\"],[[27,\"readonly\",[[23,[\"classNames\"]]],null],[27,\"readonly\",[[23,[\"horizontalPosition\"]]],null],[23,[\"calculatePosition\"]],[27,\"readonly\",[[23,[\"destination\"]]],null],[27,\"readonly\",[[23,[\"initiallyOpened\"]]],null],[27,\"readonly\",[[23,[\"matchTriggerWidth\"]]],null],[27,\"readonly\",[[23,[\"preventScroll\"]]],null],[27,\"action\",[[22,0,[]],\"onClose\"],null],[27,\"action\",[[22,0,[]],\"onOpen\"],null],[27,\"action\",[[22,0,[]],\"registerAPI\"],null],[27,\"readonly\",[[23,[\"renderInPlace\"]]],null],[27,\"readonly\",[[23,[\"verticalPosition\"]]],null],[27,\"readonly\",[[23,[\"disabled\"]]],null]]],{\"statements\":[[0,\"\\n\"],[4,\"component\",[[27,\"-assert-implicit-component-helper-argument\",[[22,1,[\"trigger\"]],\"expected `dropdown.trigger` to be a contextual component but found a string. Did you mean `(component dropdown.trigger)`? ('ember-power-select/templates/components/power-select.hbs' @ L17:C5) \"],null]],[[\"role\",\"tagName\",\"ariaDescribedBy\",\"ariaInvalid\",\"ariaLabel\",\"ariaLabelledBy\",\"ariaRequired\",\"title\",\"class\",\"extra\",\"id\",\"eventType\",\"onKeyDown\",\"onFocus\",\"onBlur\",\"tabindex\"],[[27,\"readonly\",[[23,[\"triggerRole\"]]],null],[27,\"readonly\",[[23,[\"_triggerTagName\"]]],null],[27,\"readonly\",[[23,[\"ariaDescribedBy\"]]],null],[27,\"readonly\",[[23,[\"ariaInvalid\"]]],null],[27,\"readonly\",[[23,[\"ariaLabel\"]]],null],[27,\"readonly\",[[23,[\"ariaLabelledBy\"]]],null],[27,\"readonly\",[[23,[\"required\"]]],null],[27,\"readonly\",[[23,[\"title\"]]],null],[27,\"readonly\",[[23,[\"concatenatedTriggerClasses\"]]],null],[27,\"readonly\",[[23,[\"extra\"]]],null],[27,\"readonly\",[[23,[\"triggerId\"]]],null],[27,\"or\",[[23,[\"eventType\"]],\"mousedown\"],null],[27,\"action\",[[22,0,[]],\"onTriggerKeydown\"],null],[27,\"action\",[[22,0,[]],\"onTriggerFocus\"],null],[27,\"action\",[[22,0,[]],\"onTriggerBlur\"],null],[27,\"readonly\",[[23,[\"tabindex\"]]],null]]],{\"statements\":[[4,\"component\",[[23,[\"triggerComponent\"]]],[[\"allowClear\",\"buildSelection\",\"extra\",\"listboxId\",\"loadingMessage\",\"onFocus\",\"onBlur\",\"onInput\",\"placeholder\",\"placeholderComponent\",\"onKeydown\",\"searchEnabled\",\"searchField\",\"select\",\"selectedItemComponent\"],[[27,\"readonly\",[[23,[\"allowClear\"]]],null],[27,\"readonly\",[[23,[\"buildSelection\"]]],null],[27,\"readonly\",[[23,[\"extra\"]]],null],[27,\"readonly\",[[23,[\"optionsId\"]]],null],[27,\"readonly\",[[23,[\"loadingMessage\"]]],null],[27,\"action\",[[22,0,[]],\"onFocus\"],null],[27,\"action\",[[22,0,[]],\"onBlur\"],null],[27,\"action\",[[22,0,[]],\"onInput\"],null],[27,\"readonly\",[[23,[\"placeholder\"]]],null],[27,\"readonly\",[[23,[\"placeholderComponent\"]]],null],[27,\"action\",[[22,0,[]],\"onKeydown\"],null],[27,\"readonly\",[[23,[\"searchEnabled\"]]],null],[27,\"readonly\",[[23,[\"searchField\"]]],null],[27,\"readonly\",[[23,[\"publicAPI\"]]],null],[27,\"readonly\",[[23,[\"selectedItemComponent\"]]],null]]],{\"statements\":[[0,\"      \"],[14,6,[[22,4,[]],[22,5,[]]]],[0,\"\\n\"]],\"parameters\":[4,5]},null]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"component\",[[27,\"-assert-implicit-component-helper-argument\",[[22,1,[\"content\"]],\"expected `dropdown.content` to be a contextual component but found a string. Did you mean `(component dropdown.content)`? ('ember-power-select/templates/components/power-select.hbs' @ L55:C5) \"],null]],[[\"_contentTagName\",\"class\"],[[23,[\"_contentTagName\"]],[27,\"readonly\",[[23,[\"concatenatedDropdownClasses\"]]],null]]],{\"statements\":[[0,\"    \"],[1,[27,\"component\",[[23,[\"beforeOptionsComponent\"]]],[[\"animationEnabled\",\"extra\",\"listboxId\",\"onInput\",\"onKeydown\",\"searchEnabled\",\"onFocus\",\"onBlur\",\"placeholder\",\"placeholderComponent\",\"searchPlaceholder\",\"select\",\"selectedItemComponent\"],[[27,\"readonly\",[[23,[\"animationEnabled\"]]],null],[27,\"readonly\",[[23,[\"extra\"]]],null],[27,\"readonly\",[[23,[\"optionsId\"]]],null],[27,\"action\",[[22,0,[]],\"onInput\"],null],[27,\"action\",[[22,0,[]],\"onKeydown\"],null],[27,\"readonly\",[[23,[\"searchEnabled\"]]],null],[27,\"action\",[[22,0,[]],\"onFocus\"],null],[27,\"action\",[[22,0,[]],\"onBlur\"],null],[27,\"readonly\",[[23,[\"placeholder\"]]],null],[27,\"readonly\",[[23,[\"placeholderComponent\"]]],null],[27,\"readonly\",[[23,[\"searchPlaceholder\"]]],null],[27,\"readonly\",[[23,[\"publicAPI\"]]],null],[27,\"readonly\",[[23,[\"selectedItemComponent\"]]],null]]]],false],[0,\"\\n\"],[4,\"if\",[[23,[\"mustShowSearchMessage\"]]],null,{\"statements\":[[0,\"      \"],[1,[27,\"component\",[[23,[\"searchMessageComponent\"]]],[[\"searchMessage\",\"select\"],[[27,\"readonly\",[[23,[\"searchMessage\"]]],null],[27,\"readonly\",[[23,[\"publicAPI\"]]],null]]]],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[23,[\"mustShowNoMessages\"]]],null,{\"statements\":[[4,\"if\",[[24,7]],null,{\"statements\":[[0,\"        \"],[14,7],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[23,[\"noMatchesMessage\"]]],null,{\"statements\":[[0,\"        \"],[7,\"ul\"],[11,\"class\",\"ember-power-select-options\"],[11,\"role\",\"listbox\"],[9],[0,\"\\n          \"],[7,\"li\"],[11,\"class\",\"ember-power-select-option ember-power-select-option--no-matches-message\"],[11,\"role\",\"option\"],[9],[0,\"\\n            \"],[1,[21,\"noMatchesMessage\"],false],[0,\"\\n          \"],[10],[0,\"\\n        \"],[10],[0,\"\\n      \"]],\"parameters\":[]},null]],\"parameters\":[]}]],\"parameters\":[]},{\"statements\":[[4,\"component\",[[23,[\"optionsComponent\"]]],[[\"class\",\"extra\",\"groupIndex\",\"loadingMessage\",\"id\",\"options\",\"optionsComponent\",\"highlightOnHover\",\"groupComponent\",\"select\"],[\"ember-power-select-options\",[27,\"readonly\",[[23,[\"extra\"]]],null],\"\",[27,\"readonly\",[[23,[\"loadingMessage\"]]],null],[27,\"readonly\",[[23,[\"optionsId\"]]],null],[27,\"readonly\",[[23,[\"publicAPI\",\"results\"]]],null],[27,\"readonly\",[[23,[\"optionsComponent\"]]],null],[27,\"readonly\",[[23,[\"highlightOnHover\"]]],null],[27,\"readonly\",[[23,[\"groupComponent\"]]],null],[27,\"readonly\",[[23,[\"publicAPI\"]]],null]]],{\"statements\":[[0,\"        \"],[14,6,[[22,2,[]],[22,3,[]]]],[0,\"\\n\"]],\"parameters\":[2,3]},null],[0,\"    \"]],\"parameters\":[]}]],\"parameters\":[]}],[0,\"    \"],[1,[27,\"component\",[[23,[\"afterOptionsComponent\"]]],[[\"select\",\"extra\"],[[27,\"readonly\",[[23,[\"publicAPI\"]]],null],[27,\"readonly\",[[23,[\"extra\"]]],null]]]],false],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[1]},null]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ember-power-select/templates/components/power-select.hbs"
    }
  });

  _exports.default = _default;
});
;define("ember-power-select/templates/components/power-select/before-options", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "CkY7nK1c",
    "block": "{\"symbols\":[],\"statements\":[[4,\"if\",[[23,[\"searchEnabled\"]]],null,{\"statements\":[[0,\"  \"],[7,\"div\"],[11,\"class\",\"ember-power-select-search\"],[9],[0,\"\\n    \"],[7,\"input\"],[11,\"autocomplete\",\"off\"],[11,\"autocorrect\",\"off\"],[11,\"autocapitalize\",\"off\"],[11,\"spellcheck\",\"false\"],[11,\"role\",\"combobox\"],[11,\"class\",\"ember-power-select-search-input\"],[12,\"value\",[23,[\"select\",\"searchText\"]]],[12,\"aria-controls\",[21,\"listboxId\"]],[12,\"placeholder\",[21,\"searchPlaceholder\"]],[12,\"oninput\",[21,\"onInput\"]],[12,\"onfocus\",[21,\"onFocus\"]],[12,\"onblur\",[21,\"onBlur\"]],[12,\"onkeydown\",[27,\"action\",[[22,0,[]],\"onKeydown\"],null]],[11,\"type\",\"search\"],[9],[10],[0,\"\\n  \"],[10],[0,\"\\n\"]],\"parameters\":[]},null]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ember-power-select/templates/components/power-select/before-options.hbs"
    }
  });

  _exports.default = _default;
});
;define("ember-power-select/templates/components/power-select/options", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "sjn6BLFd",
    "block": "{\"symbols\":[\"opt\",\"index\",\"option\",\"&default\"],\"statements\":[[4,\"if\",[[23,[\"select\",\"loading\"]]],null,{\"statements\":[[4,\"if\",[[23,[\"loadingMessage\"]]],null,{\"statements\":[[0,\"    \"],[7,\"li\"],[11,\"class\",\"ember-power-select-option ember-power-select-option--loading-message\"],[11,\"role\",\"option\"],[9],[1,[21,\"loadingMessage\"],false],[10],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},null],[4,\"each\",[[23,[\"options\"]]],null,{\"statements\":[[4,\"if\",[[27,\"ember-power-select-is-group\",[[22,1,[]]],null]],null,{\"statements\":[[4,\"component\",[[23,[\"groupComponent\"]]],[[\"group\",\"select\",\"extra\"],[[27,\"readonly\",[[22,1,[]]],null],[27,\"readonly\",[[23,[\"select\"]]],null],[27,\"readonly\",[[23,[\"extra\"]]],null]]],{\"statements\":[[4,\"component\",[[23,[\"optionsComponent\"]]],[[\"options\",\"select\",\"groupIndex\",\"optionsComponent\",\"groupComponent\",\"extra\",\"role\",\"class\"],[[27,\"readonly\",[[22,1,[\"options\"]]],null],[27,\"readonly\",[[23,[\"select\"]]],null],[27,\"concat\",[[23,[\"groupIndex\"]],[22,2,[]],\".\"],null],[27,\"readonly\",[[23,[\"optionsComponent\"]]],null],[27,\"readonly\",[[23,[\"groupComponent\"]]],null],[27,\"readonly\",[[23,[\"extra\"]]],null],\"group\",\"ember-power-select-options\"]],{\"statements\":[[0,\"        \"],[14,4,[[22,3,[]],[23,[\"select\"]]]],[0,\"\\n\"]],\"parameters\":[3]},null]],\"parameters\":[]},null]],\"parameters\":[]},{\"statements\":[[0,\"    \"],[7,\"li\"],[11,\"class\",\"ember-power-select-option\"],[12,\"aria-selected\",[28,[[27,\"ember-power-select-is-selected\",[[22,1,[]],[23,[\"select\",\"selected\"]]],null]]]],[12,\"aria-disabled\",[27,\"ember-power-select-true-string-if-present\",[[22,1,[\"disabled\"]]],null]],[12,\"aria-current\",[28,[[27,\"eq\",[[22,1,[]],[23,[\"select\",\"highlighted\"]]],null]]]],[12,\"data-option-index\",[28,[[21,\"groupIndex\"],[22,2,[]]]]],[11,\"role\",\"option\"],[9],[0,\"\\n      \"],[14,4,[[22,1,[]],[23,[\"select\"]]]],[0,\"\\n    \"],[10],[0,\"\\n\"]],\"parameters\":[]}]],\"parameters\":[1,2]},null]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ember-power-select/templates/components/power-select/options.hbs"
    }
  });

  _exports.default = _default;
});
;define("ember-power-select/templates/components/power-select/placeholder", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "TRDi3WZb",
    "block": "{\"symbols\":[],\"statements\":[[4,\"if\",[[23,[\"placeholder\"]]],null,{\"statements\":[[0,\"  \"],[7,\"span\"],[11,\"class\",\"ember-power-select-placeholder\"],[9],[1,[21,\"placeholder\"],false],[10],[0,\"\\n\"]],\"parameters\":[]},null]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ember-power-select/templates/components/power-select/placeholder.hbs"
    }
  });

  _exports.default = _default;
});
;define("ember-power-select/templates/components/power-select/power-select-group", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "YBvHRd3H",
    "block": "{\"symbols\":[\"&default\"],\"statements\":[[7,\"li\"],[11,\"class\",\"ember-power-select-group\"],[12,\"aria-disabled\",[27,\"ember-power-select-true-string-if-present\",[[23,[\"disabled\"]]],null]],[11,\"role\",\"option\"],[9],[0,\"\\n  \"],[7,\"span\"],[11,\"class\",\"ember-power-select-group-name\"],[9],[1,[21,\"groupName\"],false],[10],[0,\"\\n  \"],[14,1],[0,\"\\n\"],[10]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ember-power-select/templates/components/power-select/power-select-group.hbs"
    }
  });

  _exports.default = _default;
});
;define("ember-power-select/templates/components/power-select/search-message", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "KS9Sx55k",
    "block": "{\"symbols\":[],\"statements\":[[7,\"ul\"],[11,\"class\",\"ember-power-select-options\"],[11,\"role\",\"listbox\"],[9],[0,\"\\n  \"],[7,\"li\"],[11,\"class\",\"ember-power-select-option ember-power-select-option--search-message\"],[11,\"role\",\"option\"],[9],[0,\"\\n    \"],[1,[21,\"searchMessage\"],false],[0,\"\\n  \"],[10],[0,\"\\n\"],[10]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ember-power-select/templates/components/power-select/search-message.hbs"
    }
  });

  _exports.default = _default;
});
;define("ember-power-select/templates/components/power-select/trigger", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "IXhfpFK8",
    "block": "{\"symbols\":[\"&default\"],\"statements\":[[4,\"if\",[[23,[\"select\",\"selected\"]]],null,{\"statements\":[[4,\"if\",[[23,[\"selectedItemComponent\"]]],null,{\"statements\":[[0,\"    \"],[1,[27,\"component\",[[23,[\"selectedItemComponent\"]]],[[\"extra\",\"option\",\"select\"],[[27,\"readonly\",[[23,[\"extra\"]]],null],[27,\"readonly\",[[23,[\"select\",\"selected\"]]],null],[27,\"readonly\",[[23,[\"select\"]]],null]]]],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"    \"],[7,\"span\"],[11,\"class\",\"ember-power-select-selected-item\"],[9],[14,1,[[23,[\"select\",\"selected\"]],[23,[\"select\"]]]],[10],[0,\"\\n\"]],\"parameters\":[]}],[4,\"if\",[[27,\"and\",[[23,[\"allowClear\"]],[27,\"not\",[[23,[\"select\",\"disabled\"]]],null]],null]],null,{\"statements\":[[0,\"    \"],[7,\"span\"],[11,\"class\",\"ember-power-select-clear-btn\"],[12,\"onmousedown\",[27,\"action\",[[22,0,[]],\"clear\"],null]],[12,\"ontouchstart\",[27,\"action\",[[22,0,[]],\"clear\"],null]],[9],[0,\"×\"],[10],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},{\"statements\":[[0,\"  \"],[1,[27,\"component\",[[23,[\"placeholderComponent\"]]],[[\"placeholder\"],[[23,[\"placeholder\"]]]]],false],[0,\"\\n\"]],\"parameters\":[]}],[7,\"span\"],[11,\"class\",\"ember-power-select-status-icon\"],[9],[10],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ember-power-select/templates/components/power-select/trigger.hbs"
    }
  });

  _exports.default = _default;
});
;define("ember-power-select/utils/computed-fallback-if-undefined", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = computedFallbackIfUndefined;

  function computedFallbackIfUndefined(fallback) {
    return Ember.computed({
      get() {
        return fallback;
      },

      set(_, v) {
        return v === undefined ? fallback : v;
      }

    });
  }
});
;define("ember-power-select/utils/computed-options-matcher", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = computedOptionsMatcher;

  function computedOptionsMatcher(matcherField, defaultMatcher) {
    return Ember.computed('searchField', matcherField, function () {
      let {
        [matcherField]: matcher,
        searchField
      } = this.getProperties(matcherField, 'searchField');

      if (searchField && matcher === defaultMatcher) {
        return (option, text) => matcher(Ember.get(option, searchField), text);
      } else {
        return (option, text) => {
          (true && !(matcher !== defaultMatcher || typeof option === 'string') && Ember.assert('{{power-select}} If you want the default filtering to work on options that are not plain strings, you need to provide `searchField`', matcher !== defaultMatcher || typeof option === 'string'));
          return matcher(option, text);
        };
      }
    });
  }
});
;define("ember-power-select/utils/group-utils", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.isGroup = isGroup;
  _exports.countOptions = countOptions;
  _exports.indexOfOption = indexOfOption;
  _exports.optionAtIndex = optionAtIndex;
  _exports.findOptionWithOffset = findOptionWithOffset;
  _exports.filterOptions = filterOptions;
  _exports.defaultHighlighted = defaultHighlighted;
  _exports.advanceSelectableOption = advanceSelectableOption;
  _exports.stripDiacritics = stripDiacritics;
  _exports.defaultMatcher = defaultMatcher;
  _exports.defaultTypeAheadMatcher = defaultTypeAheadMatcher;

  function isGroup(entry) {
    return !!entry && !!Ember.get(entry, 'groupName') && !!Ember.get(entry, 'options');
  }

  function countOptions(collection) {
    let counter = 0;

    (function walk(collection) {
      if (!collection) {
        return null;
      }

      for (let i = 0; i < Ember.get(collection, 'length'); i++) {
        let entry = collection.objectAt ? collection.objectAt(i) : collection[i];

        if (isGroup(entry)) {
          walk(Ember.get(entry, 'options'));
        } else {
          counter++;
        }
      }
    })(collection);

    return counter;
  }

  function indexOfOption(collection, option) {
    let index = 0;
    return function walk(collection) {
      if (!collection) {
        return null;
      }

      for (let i = 0; i < Ember.get(collection, 'length'); i++) {
        let entry = collection.objectAt ? collection.objectAt(i) : collection[i];

        if (isGroup(entry)) {
          let result = walk(Ember.get(entry, 'options'));

          if (result > -1) {
            return result;
          }
        } else if (entry === option) {
          return index;
        } else {
          index++;
        }
      }

      return -1;
    }(collection);
  }

  function optionAtIndex(originalCollection, index) {
    let counter = 0;
    return function walk(collection, ancestorIsDisabled) {
      if (!collection || index < 0) {
        return {
          disabled: false,
          option: undefined
        };
      }

      let localCounter = 0;
      let length = Ember.get(collection, 'length');

      while (counter <= index && localCounter < length) {
        let entry = collection.objectAt ? collection.objectAt(localCounter) : collection[localCounter];

        if (isGroup(entry)) {
          let found = walk(Ember.get(entry, 'options'), ancestorIsDisabled || !!Ember.get(entry, 'disabled'));

          if (found) {
            return found;
          }
        } else if (counter === index) {
          return {
            disabled: ancestorIsDisabled || !!Ember.get(entry, 'disabled'),
            option: entry
          };
        } else {
          counter++;
        }

        localCounter++;
      }
    }(originalCollection, false) || {
      disabled: false,
      option: undefined
    };
  }

  function copyGroup(group, suboptions) {
    let groupCopy = {
      groupName: group.groupName,
      options: suboptions
    };

    if (group.hasOwnProperty('disabled')) {
      groupCopy.disabled = group.disabled;
    }

    return groupCopy;
  }

  function findOptionWithOffset(options, text, matcher, offset, skipDisabled = false) {
    let counter = 0;
    let foundBeforeOffset, foundAfterOffset;

    let canStop = () => !!foundAfterOffset;

    (function walk(options, ancestorIsDisabled) {
      let length = Ember.get(options, 'length');

      for (let i = 0; i < length; i++) {
        let entry = options.objectAt ? options.objectAt(i) : options[i];
        let entryIsDisabled = !!Ember.get(entry, 'disabled');

        if (!skipDisabled || !entryIsDisabled) {
          if (isGroup(entry)) {
            walk(Ember.get(entry, 'options'), ancestorIsDisabled || entryIsDisabled);

            if (canStop()) {
              return;
            }
          } else if (matcher(entry, text) >= 0) {
            if (counter < offset) {
              if (!foundBeforeOffset) {
                foundBeforeOffset = entry;
              }
            } else {
              foundAfterOffset = entry;
            }

            counter++;
          } else {
            counter++;
          }

          if (canStop()) {
            return;
          }
        }
      }
    })(options, false);

    return foundAfterOffset ? foundAfterOffset : foundBeforeOffset;
  }

  function filterOptions(options, text, matcher, skipDisabled = false) {
    let opts = Ember.A();
    let length = Ember.get(options, 'length');

    for (let i = 0; i < length; i++) {
      let entry = options.objectAt ? options.objectAt(i) : options[i];

      if (!skipDisabled || !Ember.get(entry, 'disabled')) {
        if (isGroup(entry)) {
          let suboptions = filterOptions(Ember.get(entry, 'options'), text, matcher, skipDisabled);

          if (Ember.get(suboptions, 'length') > 0) {
            opts.push(copyGroup(entry, suboptions));
          }
        } else if (matcher(entry, text) >= 0) {
          opts.push(entry);
        }
      }
    }

    return opts;
  }

  function defaultHighlighted(select) {
    let {
      results,
      highlighted,
      selected
    } = select;
    let option = highlighted || selected;

    if (option === undefined || indexOfOption(results, option) === -1) {
      return advanceSelectableOption(results, option, 1);
    }

    return option;
  }

  function advanceSelectableOption(options, currentOption, step) {
    let resultsLength = countOptions(options);
    let startIndex = Math.min(Math.max(indexOfOption(options, currentOption) + step, 0), resultsLength - 1);
    let {
      disabled,
      option
    } = optionAtIndex(options, startIndex);

    while (option && disabled) {
      let next = optionAtIndex(options, startIndex += step);
      disabled = next.disabled;
      option = next.option;
    }

    return option;
  }

  const DIACRITICS = {
    'Ⓐ': 'A',
    'Ａ': 'A',
    'À': 'A',
    'Á': 'A',
    'Â': 'A',
    'Ầ': 'A',
    'Ấ': 'A',
    'Ẫ': 'A',
    'Ẩ': 'A',
    'Ã': 'A',
    'Ā': 'A',
    'Ă': 'A',
    'Ằ': 'A',
    'Ắ': 'A',
    'Ẵ': 'A',
    'Ẳ': 'A',
    'Ȧ': 'A',
    'Ǡ': 'A',
    'Ä': 'A',
    'Ǟ': 'A',
    'Ả': 'A',
    'Å': 'A',
    'Ǻ': 'A',
    'Ǎ': 'A',
    'Ȁ': 'A',
    'Ȃ': 'A',
    'Ạ': 'A',
    'Ậ': 'A',
    'Ặ': 'A',
    'Ḁ': 'A',
    'Ą': 'A',
    'Ⱥ': 'A',
    'Ɐ': 'A',
    'Ꜳ': 'AA',
    'Æ': 'AE',
    'Ǽ': 'AE',
    'Ǣ': 'AE',
    'Ꜵ': 'AO',
    'Ꜷ': 'AU',
    'Ꜹ': 'AV',
    'Ꜻ': 'AV',
    'Ꜽ': 'AY',
    'Ⓑ': 'B',
    'Ｂ': 'B',
    'Ḃ': 'B',
    'Ḅ': 'B',
    'Ḇ': 'B',
    'Ƀ': 'B',
    'Ƃ': 'B',
    'Ɓ': 'B',
    'Ⓒ': 'C',
    'Ｃ': 'C',
    'Ć': 'C',
    'Ĉ': 'C',
    'Ċ': 'C',
    'Č': 'C',
    'Ç': 'C',
    'Ḉ': 'C',
    'Ƈ': 'C',
    'Ȼ': 'C',
    'Ꜿ': 'C',
    'Ⓓ': 'D',
    'Ｄ': 'D',
    'Ḋ': 'D',
    'Ď': 'D',
    'Ḍ': 'D',
    'Ḑ': 'D',
    'Ḓ': 'D',
    'Ḏ': 'D',
    'Đ': 'D',
    'Ƌ': 'D',
    'Ɗ': 'D',
    'Ɖ': 'D',
    'Ꝺ': 'D',
    'Ǳ': 'DZ',
    'Ǆ': 'DZ',
    'ǲ': 'Dz',
    'ǅ': 'Dz',
    'Ⓔ': 'E',
    'Ｅ': 'E',
    'È': 'E',
    'É': 'E',
    'Ê': 'E',
    'Ề': 'E',
    'Ế': 'E',
    'Ễ': 'E',
    'Ể': 'E',
    'Ẽ': 'E',
    'Ē': 'E',
    'Ḕ': 'E',
    'Ḗ': 'E',
    'Ĕ': 'E',
    'Ė': 'E',
    'Ë': 'E',
    'Ẻ': 'E',
    'Ě': 'E',
    'Ȅ': 'E',
    'Ȇ': 'E',
    'Ẹ': 'E',
    'Ệ': 'E',
    'Ȩ': 'E',
    'Ḝ': 'E',
    'Ę': 'E',
    'Ḙ': 'E',
    'Ḛ': 'E',
    'Ɛ': 'E',
    'Ǝ': 'E',
    'Ⓕ': 'F',
    'Ｆ': 'F',
    'Ḟ': 'F',
    'Ƒ': 'F',
    'Ꝼ': 'F',
    'Ⓖ': 'G',
    'Ｇ': 'G',
    'Ǵ': 'G',
    'Ĝ': 'G',
    'Ḡ': 'G',
    'Ğ': 'G',
    'Ġ': 'G',
    'Ǧ': 'G',
    'Ģ': 'G',
    'Ǥ': 'G',
    'Ɠ': 'G',
    'Ꞡ': 'G',
    'Ᵹ': 'G',
    'Ꝿ': 'G',
    'Ⓗ': 'H',
    'Ｈ': 'H',
    'Ĥ': 'H',
    'Ḣ': 'H',
    'Ḧ': 'H',
    'Ȟ': 'H',
    'Ḥ': 'H',
    'Ḩ': 'H',
    'Ḫ': 'H',
    'Ħ': 'H',
    'Ⱨ': 'H',
    'Ⱶ': 'H',
    'Ɥ': 'H',
    'Ⓘ': 'I',
    'Ｉ': 'I',
    'Ì': 'I',
    'Í': 'I',
    'Î': 'I',
    'Ĩ': 'I',
    'Ī': 'I',
    'Ĭ': 'I',
    'İ': 'I',
    'Ï': 'I',
    'Ḯ': 'I',
    'Ỉ': 'I',
    'Ǐ': 'I',
    'Ȉ': 'I',
    'Ȋ': 'I',
    'Ị': 'I',
    'Į': 'I',
    'Ḭ': 'I',
    'Ɨ': 'I',
    'Ⓙ': 'J',
    'Ｊ': 'J',
    'Ĵ': 'J',
    'Ɉ': 'J',
    'Ⓚ': 'K',
    'Ｋ': 'K',
    'Ḱ': 'K',
    'Ǩ': 'K',
    'Ḳ': 'K',
    'Ķ': 'K',
    'Ḵ': 'K',
    'Ƙ': 'K',
    'Ⱪ': 'K',
    'Ꝁ': 'K',
    'Ꝃ': 'K',
    'Ꝅ': 'K',
    'Ꞣ': 'K',
    'Ⓛ': 'L',
    'Ｌ': 'L',
    'Ŀ': 'L',
    'Ĺ': 'L',
    'Ľ': 'L',
    'Ḷ': 'L',
    'Ḹ': 'L',
    'Ļ': 'L',
    'Ḽ': 'L',
    'Ḻ': 'L',
    'Ł': 'L',
    'Ƚ': 'L',
    'Ɫ': 'L',
    'Ⱡ': 'L',
    'Ꝉ': 'L',
    'Ꝇ': 'L',
    'Ꞁ': 'L',
    'Ǉ': 'LJ',
    'ǈ': 'Lj',
    'Ⓜ': 'M',
    'Ｍ': 'M',
    'Ḿ': 'M',
    'Ṁ': 'M',
    'Ṃ': 'M',
    'Ɱ': 'M',
    'Ɯ': 'M',
    'Ⓝ': 'N',
    'Ｎ': 'N',
    'Ǹ': 'N',
    'Ń': 'N',
    'Ñ': 'N',
    'Ṅ': 'N',
    'Ň': 'N',
    'Ṇ': 'N',
    'Ņ': 'N',
    'Ṋ': 'N',
    'Ṉ': 'N',
    'Ƞ': 'N',
    'Ɲ': 'N',
    'Ꞑ': 'N',
    'Ꞥ': 'N',
    'Ǌ': 'NJ',
    'ǋ': 'Nj',
    'Ⓞ': 'O',
    'Ｏ': 'O',
    'Ò': 'O',
    'Ó': 'O',
    'Ô': 'O',
    'Ồ': 'O',
    'Ố': 'O',
    'Ỗ': 'O',
    'Ổ': 'O',
    'Õ': 'O',
    'Ṍ': 'O',
    'Ȭ': 'O',
    'Ṏ': 'O',
    'Ō': 'O',
    'Ṑ': 'O',
    'Ṓ': 'O',
    'Ŏ': 'O',
    'Ȯ': 'O',
    'Ȱ': 'O',
    'Ö': 'O',
    'Ȫ': 'O',
    'Ỏ': 'O',
    'Ő': 'O',
    'Ǒ': 'O',
    'Ȍ': 'O',
    'Ȏ': 'O',
    'Ơ': 'O',
    'Ờ': 'O',
    'Ớ': 'O',
    'Ỡ': 'O',
    'Ở': 'O',
    'Ợ': 'O',
    'Ọ': 'O',
    'Ộ': 'O',
    'Ǫ': 'O',
    'Ǭ': 'O',
    'Ø': 'O',
    'Ǿ': 'O',
    'Ɔ': 'O',
    'Ɵ': 'O',
    'Ꝋ': 'O',
    'Ꝍ': 'O',
    'Ƣ': 'OI',
    'Ꝏ': 'OO',
    'Ȣ': 'OU',
    'Ⓟ': 'P',
    'Ｐ': 'P',
    'Ṕ': 'P',
    'Ṗ': 'P',
    'Ƥ': 'P',
    'Ᵽ': 'P',
    'Ꝑ': 'P',
    'Ꝓ': 'P',
    'Ꝕ': 'P',
    'Ⓠ': 'Q',
    'Ｑ': 'Q',
    'Ꝗ': 'Q',
    'Ꝙ': 'Q',
    'Ɋ': 'Q',
    'Ⓡ': 'R',
    'Ｒ': 'R',
    'Ŕ': 'R',
    'Ṙ': 'R',
    'Ř': 'R',
    'Ȑ': 'R',
    'Ȓ': 'R',
    'Ṛ': 'R',
    'Ṝ': 'R',
    'Ŗ': 'R',
    'Ṟ': 'R',
    'Ɍ': 'R',
    'Ɽ': 'R',
    'Ꝛ': 'R',
    'Ꞧ': 'R',
    'Ꞃ': 'R',
    'Ⓢ': 'S',
    'Ｓ': 'S',
    'ẞ': 'S',
    'Ś': 'S',
    'Ṥ': 'S',
    'Ŝ': 'S',
    'Ṡ': 'S',
    'Š': 'S',
    'Ṧ': 'S',
    'Ṣ': 'S',
    'Ṩ': 'S',
    'Ș': 'S',
    'Ş': 'S',
    'Ȿ': 'S',
    'Ꞩ': 'S',
    'Ꞅ': 'S',
    'Ⓣ': 'T',
    'Ｔ': 'T',
    'Ṫ': 'T',
    'Ť': 'T',
    'Ṭ': 'T',
    'Ț': 'T',
    'Ţ': 'T',
    'Ṱ': 'T',
    'Ṯ': 'T',
    'Ŧ': 'T',
    'Ƭ': 'T',
    'Ʈ': 'T',
    'Ⱦ': 'T',
    'Ꞇ': 'T',
    'Ꜩ': 'TZ',
    'Ⓤ': 'U',
    'Ｕ': 'U',
    'Ù': 'U',
    'Ú': 'U',
    'Û': 'U',
    'Ũ': 'U',
    'Ṹ': 'U',
    'Ū': 'U',
    'Ṻ': 'U',
    'Ŭ': 'U',
    'Ü': 'U',
    'Ǜ': 'U',
    'Ǘ': 'U',
    'Ǖ': 'U',
    'Ǚ': 'U',
    'Ủ': 'U',
    'Ů': 'U',
    'Ű': 'U',
    'Ǔ': 'U',
    'Ȕ': 'U',
    'Ȗ': 'U',
    'Ư': 'U',
    'Ừ': 'U',
    'Ứ': 'U',
    'Ữ': 'U',
    'Ử': 'U',
    'Ự': 'U',
    'Ụ': 'U',
    'Ṳ': 'U',
    'Ų': 'U',
    'Ṷ': 'U',
    'Ṵ': 'U',
    'Ʉ': 'U',
    'Ⓥ': 'V',
    'Ｖ': 'V',
    'Ṽ': 'V',
    'Ṿ': 'V',
    'Ʋ': 'V',
    'Ꝟ': 'V',
    'Ʌ': 'V',
    'Ꝡ': 'VY',
    'Ⓦ': 'W',
    'Ｗ': 'W',
    'Ẁ': 'W',
    'Ẃ': 'W',
    'Ŵ': 'W',
    'Ẇ': 'W',
    'Ẅ': 'W',
    'Ẉ': 'W',
    'Ⱳ': 'W',
    'Ⓧ': 'X',
    'Ｘ': 'X',
    'Ẋ': 'X',
    'Ẍ': 'X',
    'Ⓨ': 'Y',
    'Ｙ': 'Y',
    'Ỳ': 'Y',
    'Ý': 'Y',
    'Ŷ': 'Y',
    'Ỹ': 'Y',
    'Ȳ': 'Y',
    'Ẏ': 'Y',
    'Ÿ': 'Y',
    'Ỷ': 'Y',
    'Ỵ': 'Y',
    'Ƴ': 'Y',
    'Ɏ': 'Y',
    'Ỿ': 'Y',
    'Ⓩ': 'Z',
    'Ｚ': 'Z',
    'Ź': 'Z',
    'Ẑ': 'Z',
    'Ż': 'Z',
    'Ž': 'Z',
    'Ẓ': 'Z',
    'Ẕ': 'Z',
    'Ƶ': 'Z',
    'Ȥ': 'Z',
    'Ɀ': 'Z',
    'Ⱬ': 'Z',
    'Ꝣ': 'Z',
    'ⓐ': 'a',
    'ａ': 'a',
    'ẚ': 'a',
    'à': 'a',
    'á': 'a',
    'â': 'a',
    'ầ': 'a',
    'ấ': 'a',
    'ẫ': 'a',
    'ẩ': 'a',
    'ã': 'a',
    'ā': 'a',
    'ă': 'a',
    'ằ': 'a',
    'ắ': 'a',
    'ẵ': 'a',
    'ẳ': 'a',
    'ȧ': 'a',
    'ǡ': 'a',
    'ä': 'a',
    'ǟ': 'a',
    'ả': 'a',
    'å': 'a',
    'ǻ': 'a',
    'ǎ': 'a',
    'ȁ': 'a',
    'ȃ': 'a',
    'ạ': 'a',
    'ậ': 'a',
    'ặ': 'a',
    'ḁ': 'a',
    'ą': 'a',
    'ⱥ': 'a',
    'ɐ': 'a',
    'ꜳ': 'aa',
    'æ': 'ae',
    'ǽ': 'ae',
    'ǣ': 'ae',
    'ꜵ': 'ao',
    'ꜷ': 'au',
    'ꜹ': 'av',
    'ꜻ': 'av',
    'ꜽ': 'ay',
    'ⓑ': 'b',
    'ｂ': 'b',
    'ḃ': 'b',
    'ḅ': 'b',
    'ḇ': 'b',
    'ƀ': 'b',
    'ƃ': 'b',
    'ɓ': 'b',
    'ⓒ': 'c',
    'ｃ': 'c',
    'ć': 'c',
    'ĉ': 'c',
    'ċ': 'c',
    'č': 'c',
    'ç': 'c',
    'ḉ': 'c',
    'ƈ': 'c',
    'ȼ': 'c',
    'ꜿ': 'c',
    'ↄ': 'c',
    'ⓓ': 'd',
    'ｄ': 'd',
    'ḋ': 'd',
    'ď': 'd',
    'ḍ': 'd',
    'ḑ': 'd',
    'ḓ': 'd',
    'ḏ': 'd',
    'đ': 'd',
    'ƌ': 'd',
    'ɖ': 'd',
    'ɗ': 'd',
    'ꝺ': 'd',
    'ǳ': 'dz',
    'ǆ': 'dz',
    'ⓔ': 'e',
    'ｅ': 'e',
    'è': 'e',
    'é': 'e',
    'ê': 'e',
    'ề': 'e',
    'ế': 'e',
    'ễ': 'e',
    'ể': 'e',
    'ẽ': 'e',
    'ē': 'e',
    'ḕ': 'e',
    'ḗ': 'e',
    'ĕ': 'e',
    'ė': 'e',
    'ë': 'e',
    'ẻ': 'e',
    'ě': 'e',
    'ȅ': 'e',
    'ȇ': 'e',
    'ẹ': 'e',
    'ệ': 'e',
    'ȩ': 'e',
    'ḝ': 'e',
    'ę': 'e',
    'ḙ': 'e',
    'ḛ': 'e',
    'ɇ': 'e',
    'ɛ': 'e',
    'ǝ': 'e',
    'ⓕ': 'f',
    'ｆ': 'f',
    'ḟ': 'f',
    'ƒ': 'f',
    'ꝼ': 'f',
    'ⓖ': 'g',
    'ｇ': 'g',
    'ǵ': 'g',
    'ĝ': 'g',
    'ḡ': 'g',
    'ğ': 'g',
    'ġ': 'g',
    'ǧ': 'g',
    'ģ': 'g',
    'ǥ': 'g',
    'ɠ': 'g',
    'ꞡ': 'g',
    'ᵹ': 'g',
    'ꝿ': 'g',
    'ⓗ': 'h',
    'ｈ': 'h',
    'ĥ': 'h',
    'ḣ': 'h',
    'ḧ': 'h',
    'ȟ': 'h',
    'ḥ': 'h',
    'ḩ': 'h',
    'ḫ': 'h',
    'ẖ': 'h',
    'ħ': 'h',
    'ⱨ': 'h',
    'ⱶ': 'h',
    'ɥ': 'h',
    'ƕ': 'hv',
    'ⓘ': 'i',
    'ｉ': 'i',
    'ì': 'i',
    'í': 'i',
    'î': 'i',
    'ĩ': 'i',
    'ī': 'i',
    'ĭ': 'i',
    'ï': 'i',
    'ḯ': 'i',
    'ỉ': 'i',
    'ǐ': 'i',
    'ȉ': 'i',
    'ȋ': 'i',
    'ị': 'i',
    'į': 'i',
    'ḭ': 'i',
    'ɨ': 'i',
    'ı': 'i',
    'ⓙ': 'j',
    'ｊ': 'j',
    'ĵ': 'j',
    'ǰ': 'j',
    'ɉ': 'j',
    'ⓚ': 'k',
    'ｋ': 'k',
    'ḱ': 'k',
    'ǩ': 'k',
    'ḳ': 'k',
    'ķ': 'k',
    'ḵ': 'k',
    'ƙ': 'k',
    'ⱪ': 'k',
    'ꝁ': 'k',
    'ꝃ': 'k',
    'ꝅ': 'k',
    'ꞣ': 'k',
    'ⓛ': 'l',
    'ｌ': 'l',
    'ŀ': 'l',
    'ĺ': 'l',
    'ľ': 'l',
    'ḷ': 'l',
    'ḹ': 'l',
    'ļ': 'l',
    'ḽ': 'l',
    'ḻ': 'l',
    'ſ': 'l',
    'ł': 'l',
    'ƚ': 'l',
    'ɫ': 'l',
    'ⱡ': 'l',
    'ꝉ': 'l',
    'ꞁ': 'l',
    'ꝇ': 'l',
    'ǉ': 'lj',
    'ⓜ': 'm',
    'ｍ': 'm',
    'ḿ': 'm',
    'ṁ': 'm',
    'ṃ': 'm',
    'ɱ': 'm',
    'ɯ': 'm',
    'ⓝ': 'n',
    'ｎ': 'n',
    'ǹ': 'n',
    'ń': 'n',
    'ñ': 'n',
    'ṅ': 'n',
    'ň': 'n',
    'ṇ': 'n',
    'ņ': 'n',
    'ṋ': 'n',
    'ṉ': 'n',
    'ƞ': 'n',
    'ɲ': 'n',
    'ŉ': 'n',
    'ꞑ': 'n',
    'ꞥ': 'n',
    'ǌ': 'nj',
    'ⓞ': 'o',
    'ｏ': 'o',
    'ò': 'o',
    'ó': 'o',
    'ô': 'o',
    'ồ': 'o',
    'ố': 'o',
    'ỗ': 'o',
    'ổ': 'o',
    'õ': 'o',
    'ṍ': 'o',
    'ȭ': 'o',
    'ṏ': 'o',
    'ō': 'o',
    'ṑ': 'o',
    'ṓ': 'o',
    'ŏ': 'o',
    'ȯ': 'o',
    'ȱ': 'o',
    'ö': 'o',
    'ȫ': 'o',
    'ỏ': 'o',
    'ő': 'o',
    'ǒ': 'o',
    'ȍ': 'o',
    'ȏ': 'o',
    'ơ': 'o',
    'ờ': 'o',
    'ớ': 'o',
    'ỡ': 'o',
    'ở': 'o',
    'ợ': 'o',
    'ọ': 'o',
    'ộ': 'o',
    'ǫ': 'o',
    'ǭ': 'o',
    'ø': 'o',
    'ǿ': 'o',
    'ɔ': 'o',
    'ꝋ': 'o',
    'ꝍ': 'o',
    'ɵ': 'o',
    'ƣ': 'oi',
    'ȣ': 'ou',
    'ꝏ': 'oo',
    'ⓟ': 'p',
    'ｐ': 'p',
    'ṕ': 'p',
    'ṗ': 'p',
    'ƥ': 'p',
    'ᵽ': 'p',
    'ꝑ': 'p',
    'ꝓ': 'p',
    'ꝕ': 'p',
    'ⓠ': 'q',
    'ｑ': 'q',
    'ɋ': 'q',
    'ꝗ': 'q',
    'ꝙ': 'q',
    'ⓡ': 'r',
    'ｒ': 'r',
    'ŕ': 'r',
    'ṙ': 'r',
    'ř': 'r',
    'ȑ': 'r',
    'ȓ': 'r',
    'ṛ': 'r',
    'ṝ': 'r',
    'ŗ': 'r',
    'ṟ': 'r',
    'ɍ': 'r',
    'ɽ': 'r',
    'ꝛ': 'r',
    'ꞧ': 'r',
    'ꞃ': 'r',
    'ⓢ': 's',
    'ｓ': 's',
    'ß': 's',
    'ś': 's',
    'ṥ': 's',
    'ŝ': 's',
    'ṡ': 's',
    'š': 's',
    'ṧ': 's',
    'ṣ': 's',
    'ṩ': 's',
    'ș': 's',
    'ş': 's',
    'ȿ': 's',
    'ꞩ': 's',
    'ꞅ': 's',
    'ẛ': 's',
    'ⓣ': 't',
    'ｔ': 't',
    'ṫ': 't',
    'ẗ': 't',
    'ť': 't',
    'ṭ': 't',
    'ț': 't',
    'ţ': 't',
    'ṱ': 't',
    'ṯ': 't',
    'ŧ': 't',
    'ƭ': 't',
    'ʈ': 't',
    'ⱦ': 't',
    'ꞇ': 't',
    'ꜩ': 'tz',
    'ⓤ': 'u',
    'ｕ': 'u',
    'ù': 'u',
    'ú': 'u',
    'û': 'u',
    'ũ': 'u',
    'ṹ': 'u',
    'ū': 'u',
    'ṻ': 'u',
    'ŭ': 'u',
    'ü': 'u',
    'ǜ': 'u',
    'ǘ': 'u',
    'ǖ': 'u',
    'ǚ': 'u',
    'ủ': 'u',
    'ů': 'u',
    'ű': 'u',
    'ǔ': 'u',
    'ȕ': 'u',
    'ȗ': 'u',
    'ư': 'u',
    'ừ': 'u',
    'ứ': 'u',
    'ữ': 'u',
    'ử': 'u',
    'ự': 'u',
    'ụ': 'u',
    'ṳ': 'u',
    'ų': 'u',
    'ṷ': 'u',
    'ṵ': 'u',
    'ʉ': 'u',
    'ⓥ': 'v',
    'ｖ': 'v',
    'ṽ': 'v',
    'ṿ': 'v',
    'ʋ': 'v',
    'ꝟ': 'v',
    'ʌ': 'v',
    'ꝡ': 'vy',
    'ⓦ': 'w',
    'ｗ': 'w',
    'ẁ': 'w',
    'ẃ': 'w',
    'ŵ': 'w',
    'ẇ': 'w',
    'ẅ': 'w',
    'ẘ': 'w',
    'ẉ': 'w',
    'ⱳ': 'w',
    'ⓧ': 'x',
    'ｘ': 'x',
    'ẋ': 'x',
    'ẍ': 'x',
    'ⓨ': 'y',
    'ｙ': 'y',
    'ỳ': 'y',
    'ý': 'y',
    'ŷ': 'y',
    'ỹ': 'y',
    'ȳ': 'y',
    'ẏ': 'y',
    'ÿ': 'y',
    'ỷ': 'y',
    'ẙ': 'y',
    'ỵ': 'y',
    'ƴ': 'y',
    'ɏ': 'y',
    'ỿ': 'y',
    'ⓩ': 'z',
    'ｚ': 'z',
    'ź': 'z',
    'ẑ': 'z',
    'ż': 'z',
    'ž': 'z',
    'ẓ': 'z',
    'ẕ': 'z',
    'ƶ': 'z',
    'ȥ': 'z',
    'ɀ': 'z',
    'ⱬ': 'z',
    'ꝣ': 'z',
    'Ά': 'Α',
    'Έ': 'Ε',
    'Ή': 'Η',
    'Ί': 'Ι',
    'Ϊ': 'Ι',
    'Ό': 'Ο',
    'Ύ': 'Υ',
    'Ϋ': 'Υ',
    'Ώ': 'Ω',
    'ά': 'α',
    'έ': 'ε',
    'ή': 'η',
    'ί': 'ι',
    'ϊ': 'ι',
    'ΐ': 'ι',
    'ό': 'ο',
    'ύ': 'υ',
    'ϋ': 'υ',
    'ΰ': 'υ',
    'ω': 'ω',
    'ς': 'σ'
  }; // Copied from Select2

  function stripDiacritics(text) {
    // Used 'uni range + named function' from http://jsperf.com/diacritics/18
    function match(a) {
      return DIACRITICS[a] || a;
    }

    return "".concat(text).replace(/[^\u0000-\u007E]/g, match); // eslint-disable-line
  }

  function defaultMatcher(value, text) {
    return stripDiacritics(value).toUpperCase().indexOf(stripDiacritics(text).toUpperCase());
  }

  function defaultTypeAheadMatcher(value, text) {
    return stripDiacritics(value).toUpperCase().startsWith(stripDiacritics(text).toUpperCase()) ? 1 : -1;
  }
});
;define('ember-raf-scheduler/index', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  class Token {
    constructor(parent) {
      this._parent = parent;
      this._cancelled = false;

      if (true) {
        Object.seal(this);
      }
    }

    get cancelled() {
      return this._cancelled || (this._cancelled = this._parent ? this._parent.cancelled : false);
    }

    cancel() {
      this._cancelled = true;
    }
  }

  exports.Token = Token;
  function job(cb, token) {
    return function execJob() {
      if (token.cancelled === false) {
        cb();
      }
    };
  }

  class Scheduler {
    constructor() {
      this.sync = [];
      this.layout = [];
      this.measure = [];
      this.affect = [];
      this.jobs = 0;
      this._nextFlush = null;
      this.ticks = 0;

      if (true) {
        Object.seal(this);
      }
    }

    schedule(queueName, cb, parent) {
      (true && !(queueName in this) && Ember.assert(`Attempted to schedule to unknown queue: ${queueName}`, queueName in this));


      this.jobs++;
      let token = new Token(parent);

      this[queueName].push(job(cb, token));
      this._flush();

      return token;
    }

    forget(token) {
      // TODO add explicit test
      if (token) {
        token.cancel();
      }
    }

    _flush() {
      if (this._nextFlush !== null) {
        return;
      }

      this._nextFlush = requestAnimationFrame(() => {
        this.flush();
      });
    }

    flush() {
      let i, q;
      this.jobs = 0;

      if (this.sync.length > 0) {
        Ember.run.begin();
        q = this.sync;
        this.sync = [];

        for (i = 0; i < q.length; i++) {
          q[i]();
        }
        Ember.run.end();
      }

      if (this.layout.length > 0) {
        q = this.layout;
        this.layout = [];

        for (i = 0; i < q.length; i++) {
          q[i]();
        }
      }

      if (this.measure.length > 0) {
        q = this.measure;
        this.measure = [];

        for (i = 0; i < q.length; i++) {
          q[i]();
        }
      }

      if (this.affect.length > 0) {
        q = this.affect;
        this.affect = [];

        for (i = 0; i < q.length; i++) {
          q[i]();
        }
      }

      this._nextFlush = null;
      if (this.jobs > 0) {
        this._flush();
      }
    }
  }

  exports.Scheduler = Scheduler;
  const scheduler = exports.scheduler = new Scheduler();

  exports.default = scheduler;
});
;/*
 * This is a stub file, it must be on disk b/c babel-plugin-debug-macros
 * does not strip the module require when the transpiled variable usage is
 * stripped.
 */
define("ember-resolver/features", [], function () {
  "use strict";
});
;define('ember-resolver/index', ['exports', 'ember-resolver/resolvers/classic'], function (exports, _classic) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _classic.default;
    }
  });
});
;define('ember-resolver/resolver', ['exports', 'ember-resolver/resolvers/classic'], function (exports, _classic) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _classic.default;
    }
  });
});
;define('ember-resolver/resolvers/classic/container-debug-adapter', ['exports', 'ember-resolver/resolvers/classic/index'], function (exports, _index) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  function getPod(type, key, prefix) {
    let match = key.match(new RegExp('^/?' + prefix + '/(.+)/' + type + '$'));
    if (match !== null) {
      return match[1];
    }
  }

  /*
   * This module defines a subclass of Ember.ContainerDebugAdapter that adds
   * support for resolving from modules.
   *
   */
  exports.default = Ember.ContainerDebugAdapter.extend({
    _moduleRegistry: null,

    init() {
      this._super(...arguments);

      if (!this._moduleRegistry) {
        this._moduleRegistry = new _index.ModuleRegistry();
      }
    },

    /**
        The container of the application being debugged.
        This property will be injected
        on creation.
         @property container
        @default null
        */

    /**
        The resolver instance of the application
        being debugged. This property will be injected
        on creation.
         @property resolver
        @default null
        */

    /**
        Returns true if it is possible to catalog a list of available
        classes in the resolver for a given type.
         @method canCatalogEntriesByType
        @param {string} type The type. e.g. "model", "controller", "route"
        @return {boolean} whether a list is available for this type.
        */
    canCatalogEntriesByType(type) {
      if (type === 'model') {
        return true;
      }
      return this._super(...arguments);
    },

    /**
        Returns the available classes a given type.
         @method catalogEntriesByType
        @param {string} type The type. e.g. "model", "controller", "route"
        @return {Array} An array of classes.
        */
    catalogEntriesByType(type) {
      let moduleNames = this._moduleRegistry.moduleNames();
      let types = Ember.A();

      let prefix = this.namespace.modulePrefix;

      for (let i = 0, l = moduleNames.length; i < l; i++) {
        let key = moduleNames[i];

        if (key.indexOf(type) !== -1) {
          // Check if it's a pod module
          let name = getPod(type, key, this.namespace.podModulePrefix || prefix);
          if (!name) {
            // Not pod
            name = key.split(type + 's/').pop();

            // Support for different prefix (such as ember-cli addons).
            // Uncomment the code below when
            // https://github.com/ember-cli/ember-resolver/pull/80 is merged.

            //let match = key.match('^/?(.+)/' + type);
            //if (match && match[1] !== prefix) {
            // Different prefix such as an addon
            //name = match[1] + '@' + name;
            //}
          }
          types.addObject(name);
        }
      }
      return types;
    }
  });
});
;define('ember-resolver/resolvers/classic/index', ['exports', 'ember-resolver/utils/class-factory', 'ember-resolver/utils/make-dictionary'], function (exports, _classFactory, _makeDictionary) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ModuleRegistry = undefined;


  if (typeof requirejs.entries === 'undefined') {
    requirejs.entries = requirejs._eak_seen;
  }

  class ModuleRegistry {
    constructor(entries) {
      this._entries = entries || requirejs.entries;
    }
    moduleNames() {
      return Object.keys(this._entries);
    }
    has(moduleName) {
      return moduleName in this._entries;
    }
    get(moduleName) {
      return require(moduleName);
    }
  }

  exports.ModuleRegistry = ModuleRegistry;
  /**
   * This module defines a subclass of Ember.DefaultResolver that adds two
   * important features:
   *
   *  1) The resolver makes the container aware of es6 modules via the AMD
   *     output. The loader's _moduleEntries is consulted so that classes can be
   *     resolved directly via the module loader, without needing a manual
   *     `import`.
   *  2) is able to provide injections to classes that implement `extend`
   *     (as is typical with Ember).
   */

  function parseName(fullName) {
    if (fullName.parsedName === true) {
      return fullName;
    }

    let prefix, type, name;
    let fullNameParts = fullName.split('@');

    if (fullNameParts.length === 2) {
      let prefixParts = fullNameParts[0].split(':');

      if (prefixParts.length === 2) {
        if (prefixParts[1].length === 0) {
          type = prefixParts[0];
          name = `@${fullNameParts[1]}`;
        } else {
          prefix = prefixParts[1];
          type = prefixParts[0];
          name = fullNameParts[1];
        }
      } else {
        let nameParts = fullNameParts[1].split(':');

        prefix = fullNameParts[0];
        type = nameParts[0];
        name = nameParts[1];
      }

      if (type === 'template' && prefix.lastIndexOf('components/', 0) === 0) {
        name = `components/${name}`;
        prefix = prefix.slice(11);
      }
    } else {
      fullNameParts = fullName.split(':');
      type = fullNameParts[0];
      name = fullNameParts[1];
    }

    let fullNameWithoutType = name;
    let namespace = Ember.get(this, 'namespace');
    let root = namespace;

    return {
      parsedName: true,
      fullName: fullName,
      prefix: prefix || this.prefix({ type: type }),
      type: type,
      fullNameWithoutType: fullNameWithoutType,
      name: name,
      root: root,
      resolveMethodName: "resolve" + Ember.String.classify(type)
    };
  }

  function resolveOther(parsedName) {
    (true && !(this.namespace.modulePrefix) && Ember.assert('`modulePrefix` must be defined', this.namespace.modulePrefix));


    let normalizedModuleName = this.findModuleName(parsedName);

    if (normalizedModuleName) {
      let defaultExport = this._extractDefaultExport(normalizedModuleName, parsedName);

      if (defaultExport === undefined) {
        throw new Error(` Expected to find: '${parsedName.fullName}' within '${normalizedModuleName}' but got 'undefined'. Did you forget to 'export default' within '${normalizedModuleName}'?`);
      }

      if (this.shouldWrapInClassFactory(defaultExport, parsedName)) {
        defaultExport = (0, _classFactory.default)(defaultExport);
      }

      return defaultExport;
    }
  }

  const Resolver = Ember.Object.extend({
    resolveOther,
    parseName,
    pluralizedTypes: null,
    moduleRegistry: null,

    makeToString(factory, fullName) {
      return '' + this.namespace.modulePrefix + '@' + fullName + ':';
    },

    shouldWrapInClassFactory() /* module, parsedName */{
      return false;
    },

    init() {
      this._super();
      this.moduleBasedResolver = true;

      if (!this._moduleRegistry) {
        this._moduleRegistry = new ModuleRegistry();
      }

      this._normalizeCache = (0, _makeDictionary.default)();

      this.pluralizedTypes = this.pluralizedTypes || (0, _makeDictionary.default)();

      if (!this.pluralizedTypes.config) {
        this.pluralizedTypes.config = 'config';
      }
      this._deprecatedPodModulePrefix = false;
    },

    normalize(fullName) {
      return this._normalizeCache[fullName] || (this._normalizeCache[fullName] = this._normalize(fullName));
    },

    resolve(fullName) {
      let parsedName = this.parseName(fullName);
      let resolveMethodName = parsedName.resolveMethodName;
      let resolved;

      if (typeof this[resolveMethodName] === 'function') {
        resolved = this[resolveMethodName](parsedName);
      }

      if (resolved == null) {
        resolved = this.resolveOther(parsedName);
      }

      return resolved;
    },

    _normalize(fullName) {
      // A) Convert underscores to dashes
      // B) Convert camelCase to dash-case, except for helpers where we want to avoid shadowing camelCase expressions
      // C) replace `.` with `/` in order to make nested controllers work in the following cases
      //      1. `needs: ['posts/post']`
      //      2. `{{render "posts/post"}}`
      //      3. `this.render('posts/post')` from Route

      let split = fullName.split(':');
      if (split.length > 1) {
        if (split[0] === 'helper') {
          return split[0] + ':' + split[1].replace(/_/g, '-');
        } else {
          return split[0] + ':' + Ember.String.dasherize(split[1].replace(/\./g, '/'));
        }
      } else {
        return fullName;
      }
    },

    pluralize(type) {
      return this.pluralizedTypes[type] || (this.pluralizedTypes[type] = type + 's');
    },

    podBasedLookupWithPrefix(podPrefix, parsedName) {
      let fullNameWithoutType = parsedName.fullNameWithoutType;

      if (parsedName.type === 'template') {
        fullNameWithoutType = fullNameWithoutType.replace(/^components\//, '');
      }

      return podPrefix + '/' + fullNameWithoutType + '/' + parsedName.type;
    },

    podBasedModuleName(parsedName) {
      let podPrefix = this.namespace.podModulePrefix || this.namespace.modulePrefix;

      return this.podBasedLookupWithPrefix(podPrefix, parsedName);
    },

    podBasedComponentsInSubdir(parsedName) {
      let podPrefix = this.namespace.podModulePrefix || this.namespace.modulePrefix;
      podPrefix = podPrefix + '/components';

      if (parsedName.type === 'component' || /^components/.test(parsedName.fullNameWithoutType)) {
        return this.podBasedLookupWithPrefix(podPrefix, parsedName);
      }
    },

    resolveEngine(parsedName) {
      let engineName = parsedName.fullNameWithoutType;
      let engineModule = engineName + '/engine';

      if (this._moduleRegistry.has(engineModule)) {
        return this._extractDefaultExport(engineModule);
      }
    },

    resolveRouteMap(parsedName) {
      let engineName = parsedName.fullNameWithoutType;
      let engineRoutesModule = engineName + '/routes';

      if (this._moduleRegistry.has(engineRoutesModule)) {
        let routeMap = this._extractDefaultExport(engineRoutesModule);

        (true && !(routeMap.isRouteMap) && Ember.assert(`The route map for ${engineName} should be wrapped by 'buildRoutes' before exporting.`, routeMap.isRouteMap));


        return routeMap;
      }
    },

    resolveTemplate(parsedName) {
      let resolved = this.resolveOther(parsedName);
      if (resolved == null) {
        resolved = Ember.TEMPLATES[parsedName.fullNameWithoutType];
      }
      return resolved;
    },

    mainModuleName(parsedName) {
      if (parsedName.fullNameWithoutType === 'main') {
        // if router:main or adapter:main look for a module with just the type first
        return parsedName.prefix + '/' + parsedName.type;
      }
    },

    defaultModuleName(parsedName) {
      return parsedName.prefix + '/' + this.pluralize(parsedName.type) + '/' + parsedName.fullNameWithoutType;
    },

    prefix(parsedName) {
      let tmpPrefix = this.namespace.modulePrefix;

      if (this.namespace[parsedName.type + 'Prefix']) {
        tmpPrefix = this.namespace[parsedName.type + 'Prefix'];
      }

      return tmpPrefix;
    },

    /**
      A listing of functions to test for moduleName's based on the provided
     `parsedName`. This allows easy customization of additional module based
     lookup patterns.
      @property moduleNameLookupPatterns
     @returns {Ember.Array}
     */
    moduleNameLookupPatterns: Ember.computed(function () {
      return [this.podBasedModuleName, this.podBasedComponentsInSubdir, this.mainModuleName, this.defaultModuleName];
    }).readOnly(),

    findModuleName(parsedName, loggingDisabled) {
      let moduleNameLookupPatterns = this.get('moduleNameLookupPatterns');
      let moduleName;

      for (let index = 0, length = moduleNameLookupPatterns.length; index < length; index++) {
        let item = moduleNameLookupPatterns[index];

        let tmpModuleName = item.call(this, parsedName);

        // allow treat all dashed and all underscored as the same thing
        // supports components with dashes and other stuff with underscores.
        if (tmpModuleName) {
          tmpModuleName = this.chooseModuleName(tmpModuleName, parsedName);
        }

        if (tmpModuleName && this._moduleRegistry.has(tmpModuleName)) {
          moduleName = tmpModuleName;
        }

        if (!loggingDisabled) {
          this._logLookup(moduleName, parsedName, tmpModuleName);
        }

        if (moduleName) {
          return moduleName;
        }
      }
    },

    chooseModuleName(moduleName, parsedName) {
      let underscoredModuleName = Ember.String.underscore(moduleName);

      if (moduleName !== underscoredModuleName && this._moduleRegistry.has(moduleName) && this._moduleRegistry.has(underscoredModuleName)) {
        throw new TypeError(`Ambiguous module names: '${moduleName}' and '${underscoredModuleName}'`);
      }

      if (this._moduleRegistry.has(moduleName)) {
        return moduleName;
      } else if (this._moduleRegistry.has(underscoredModuleName)) {
        return underscoredModuleName;
      }
      // workaround for dasherized partials:
      // something/something/-something => something/something/_something
      let partializedModuleName = moduleName.replace(/\/-([^/]*)$/, '/_$1');

      if (this._moduleRegistry.has(partializedModuleName)) {
        (true && !(false) && Ember.deprecate('Modules should not contain underscores. ' + 'Attempted to lookup "' + moduleName + '" which ' + 'was not found. Please rename "' + partializedModuleName + '" ' + 'to "' + moduleName + '" instead.', false, { id: 'ember-resolver.underscored-modules', until: '3.0.0' }));


        return partializedModuleName;
      }

      if (true) {
        let isCamelCaseHelper = parsedName.type === 'helper' && /[a-z]+[A-Z]+/.test(moduleName);
        if (isCamelCaseHelper) {
          this._camelCaseHelperWarnedNames = this._camelCaseHelperWarnedNames || [];
          let alreadyWarned = this._camelCaseHelperWarnedNames.indexOf(parsedName.fullName) > -1;
          if (!alreadyWarned && this._moduleRegistry.has(Ember.String.dasherize(moduleName))) {
            this._camelCaseHelperWarnedNames.push(parsedName.fullName);
            (true && Ember.warn('Attempted to lookup "' + parsedName.fullName + '" which ' + 'was not found. In previous versions of ember-resolver, a bug would have ' + 'caused the module at "' + Ember.String.dasherize(moduleName) + '" to be ' + 'returned for this camel case helper name. This has been fixed. ' + 'Use the dasherized name to resolve the module that would have been ' + 'returned in previous versions.', false, { id: 'ember-resolver.camelcase-helper-names', until: '3.0.0' }));
          }
        }
      }
    },

    // used by Ember.DefaultResolver.prototype._logLookup
    lookupDescription(fullName) {
      let parsedName = this.parseName(fullName);

      let moduleName = this.findModuleName(parsedName, true);

      return moduleName;
    },

    // only needed until 1.6.0-beta.2 can be required
    _logLookup(found, parsedName, description) {
      if (!Ember.ENV.LOG_MODULE_RESOLVER && !parsedName.root.LOG_RESOLVER) {
        return;
      }

      let padding;
      let symbol = found ? '[✓]' : '[ ]';

      if (parsedName.fullName.length > 60) {
        padding = '.';
      } else {
        padding = new Array(60 - parsedName.fullName.length).join('.');
      }

      if (!description) {
        description = this.lookupDescription(parsedName);
      }

      /* eslint-disable no-console */
      if (console && console.info) {
        console.info(symbol, parsedName.fullName, padding, description);
      }
    },

    knownForType(type) {
      let moduleKeys = this._moduleRegistry.moduleNames();

      let items = (0, _makeDictionary.default)();
      for (let index = 0, length = moduleKeys.length; index < length; index++) {
        let moduleName = moduleKeys[index];
        let fullname = this.translateToContainerFullname(type, moduleName);

        if (fullname) {
          items[fullname] = true;
        }
      }

      return items;
    },

    translateToContainerFullname(type, moduleName) {
      let prefix = this.prefix({ type });

      // Note: using string manipulation here rather than regexes for better performance.
      // pod modules
      // '^' + prefix + '/(.+)/' + type + '$'
      let podPrefix = prefix + '/';
      let podSuffix = '/' + type;
      let start = moduleName.indexOf(podPrefix);
      let end = moduleName.indexOf(podSuffix);

      if (start === 0 && end === moduleName.length - podSuffix.length && moduleName.length > podPrefix.length + podSuffix.length) {
        return type + ':' + moduleName.slice(start + podPrefix.length, end);
      }

      // non-pod modules
      // '^' + prefix + '/' + pluralizedType + '/(.+)$'
      let pluralizedType = this.pluralize(type);
      let nonPodPrefix = prefix + '/' + pluralizedType + '/';

      if (moduleName.indexOf(nonPodPrefix) === 0 && moduleName.length > nonPodPrefix.length) {
        return type + ':' + moduleName.slice(nonPodPrefix.length);
      }
    },

    _extractDefaultExport(normalizedModuleName) {
      let module = require(normalizedModuleName, null, null, true /* force sync */);

      if (module && module['default']) {
        module = module['default'];
      }

      return module;
    }
  });

  Resolver.reopenClass({
    moduleBasedResolver: true
  });

  exports.default = Resolver;
});
;define('ember-resolver/utils/class-factory', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = classFactory;
  function classFactory(klass) {
    return {
      create(injections) {
        if (typeof klass.extend === 'function') {
          return klass.extend(injections);
        } else {
          return klass;
        }
      }
    };
  }
});
;define('ember-resolver/utils/make-dictionary', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = makeDictionary;
  function makeDictionary() {
    let cache = Object.create(null);
    cache['_dict'] = null;
    delete cache['_dict'];
    return cache;
  }
});
;define("ember-table-search/helpers/search", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.search = search;
  _exports.default = void 0;

  let testValue = function (value, query, caseSensitive, exactMatch) {
    value = String(value);

    if (!caseSensitive) {
      value = value.toLowerCase();
    }

    return exactMatch ? value === query : value.indexOf(query) !== -1;
  };

  function search([query, collection], {
    properties = [],
    caseSensitive = false,
    exactMatch = false
  }) {
    if (Ember.isEmpty(query) || Ember.isEmpty(collection)) {
      return collection;
    }

    if (!caseSensitive) {
      query = query.toLowerCase();
    }

    let collectionLength = Ember.get(collection, 'length');
    let propertiesLength = Ember.get(properties, 'length');
    let foundItems = Ember.A();

    for (let i = 0; i < collectionLength; i++) {
      let item = collection.objectAt(i);

      if (propertiesLength) {
        for (let x = 0; x < propertiesLength; x++) {
          let value = Ember.get(item, properties.objectAt(x));

          if (testValue(value, query, caseSensitive, exactMatch)) {
            foundItems.pushObject(item);
            break;
          }
        }
      } else {
        if (testValue(item, query, caseSensitive, exactMatch)) {
          foundItems.pushObject(item);
        }
      }
    }

    return foundItems;
  }

  var _default = Ember.Helper.helper(search);

  _exports.default = _default;
});
;define("ember-text-measurer/services/text-measurer", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Service.extend({
    init() {
      this._super(...arguments);

      this.canvas = document.createElement('canvas');
      this.ctx = this.canvas.getContext('2d');
    },

    width(string, font = null) {
      if (font) {
        this.ctx.font = font;
      }

      return this.ctx.measureText(string).width;
    },

    lines(string, maxWidth, font = null) {
      if (font) {
        this.ctx.font = font;
      }

      let paragraphs = string.split(/\n/);
      let lines = paragraphs.length;

      for (let i = 0; i < paragraphs.length; i++) {
        let paragraph = paragraphs[i];

        if (paragraph !== '') {
          let words = paragraph.split(' ');
          let widthSoFar = 0;
          let j = 0;

          for (; j < words.length - 1; j++) {
            let wordWidth = this.ctx.measureText(words[j] + ' ').width;
            widthSoFar = widthSoFar + wordWidth;

            if (widthSoFar > maxWidth) {
              lines++;
              widthSoFar = wordWidth;
            }
          }

          let wordWidth = this.ctx.measureText(words[j]).width;
          widthSoFar = widthSoFar + wordWidth;

          if (widthSoFar > maxWidth) {
            lines++;
            widthSoFar = wordWidth;
          }
        }
      }

      return lines;
    },

    fitTextSize(string, maxWidth, font = null) {
      let width = this.width(string, font);
      let fontSize = this.ctx.font.match(/\d+/)[0];
      return Math.floor(parseFloat(fontSize) * maxWidth / width);
    }

  });

  _exports.default = _default;
});
;define('ember-truth-helpers/helpers/and', ['exports', 'ember-truth-helpers/utils/truth-convert'], function (exports, _truthConvert) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.and = and;
  function and(params) {
    for (let i = 0, len = params.length; i < len; i++) {
      if ((0, _truthConvert.default)(params[i]) === false) {
        return params[i];
      }
    }
    return params[params.length - 1];
  }

  exports.default = Ember.Helper.helper(and);
});
;define('ember-truth-helpers/helpers/equal', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.equal = equal;
  function equal(params) {
    return params[0] === params[1];
  }

  exports.default = Ember.Helper.helper(equal);
});
;define('ember-truth-helpers/helpers/gt', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.gt = gt;
  function gt([left, right], hash) {
    if (hash.forceNumber) {
      if (typeof left !== 'number') {
        left = Number(left);
      }
      if (typeof right !== 'number') {
        right = Number(right);
      }
    }
    return left > right;
  }

  exports.default = Ember.Helper.helper(gt);
});
;define('ember-truth-helpers/helpers/gte', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.gte = gte;
  function gte([left, right], hash) {
    if (hash.forceNumber) {
      if (typeof left !== 'number') {
        left = Number(left);
      }
      if (typeof right !== 'number') {
        right = Number(right);
      }
    }
    return left >= right;
  }

  exports.default = Ember.Helper.helper(gte);
});
;define('ember-truth-helpers/helpers/is-array', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.isArray = isArray;
  function isArray(params) {
    for (let i = 0, len = params.length; i < len; i++) {
      if (Ember.isArray(params[i]) === false) {
        return false;
      }
    }
    return true;
  }

  exports.default = Ember.Helper.helper(isArray);
});
;define('ember-truth-helpers/helpers/is-empty', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ember.Helper.helper(function ([obj]) {
    return Ember.isEmpty(obj);
  });
});
;define('ember-truth-helpers/helpers/is-equal', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.isEqual = isEqual;
  function isEqual([a, b]) {
    return Ember.isEqual(a, b);
  }

  exports.default = Ember.Helper.helper(isEqual);
});
;define('ember-truth-helpers/helpers/lt', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.lt = lt;
  function lt([left, right], hash) {
    if (hash.forceNumber) {
      if (typeof left !== 'number') {
        left = Number(left);
      }
      if (typeof right !== 'number') {
        right = Number(right);
      }
    }
    return left < right;
  }

  exports.default = Ember.Helper.helper(lt);
});
;define('ember-truth-helpers/helpers/lte', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.lte = lte;
  function lte([left, right], hash) {
    if (hash.forceNumber) {
      if (typeof left !== 'number') {
        left = Number(left);
      }
      if (typeof right !== 'number') {
        right = Number(right);
      }
    }
    return left <= right;
  }

  exports.default = Ember.Helper.helper(lte);
});
;define('ember-truth-helpers/helpers/not-equal', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.notEqualHelper = notEqualHelper;
  function notEqualHelper(params) {
    return params[0] !== params[1];
  }

  exports.default = Ember.Helper.helper(notEqualHelper);
});
;define('ember-truth-helpers/helpers/not', ['exports', 'ember-truth-helpers/utils/truth-convert'], function (exports, _truthConvert) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.not = not;
  function not(params) {
    for (let i = 0, len = params.length; i < len; i++) {
      if ((0, _truthConvert.default)(params[i]) === true) {
        return false;
      }
    }
    return true;
  }

  exports.default = Ember.Helper.helper(not);
});
;define('ember-truth-helpers/helpers/or', ['exports', 'ember-truth-helpers/utils/truth-convert'], function (exports, _truthConvert) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.or = or;
  function or(params) {
    for (let i = 0, len = params.length; i < len; i++) {
      if ((0, _truthConvert.default)(params[i]) === true) {
        return params[i];
      }
    }
    return params[params.length - 1];
  }

  exports.default = Ember.Helper.helper(or);
});
;define('ember-truth-helpers/helpers/xor', ['exports', 'ember-truth-helpers/utils/truth-convert'], function (exports, _truthConvert) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.xor = xor;
  function xor(params) {
    return (0, _truthConvert.default)(params[0]) !== (0, _truthConvert.default)(params[1]);
  }

  exports.default = Ember.Helper.helper(xor);
});
;define('ember-truth-helpers/utils/truth-convert', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = truthConvert;
  function truthConvert(result) {
    const truthy = result && Ember.get(result, 'isTruthy');
    if (typeof truthy === 'boolean') {
      return truthy;
    }

    if (Ember.isArray(result)) {
      return Ember.get(result, 'length') !== 0;
    } else {
      return !!result;
    }
  }
});
;
//# sourceMappingURL=vendor.map
